// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Identity
{
    public static class GetAuthScope
    {
        /// <summary>
        /// Use this data source to get authentication information about the current
        /// auth scope in use. This can be used as self-discovery or introspection of
        /// the username or project name currently in use.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var scope = Output.Create(OpenStack.Identity.GetAuthScope.InvokeAsync(new OpenStack.Identity.GetAuthScopeArgs
        ///         {
        ///             Name = "my_scope",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthScopeResult> InvokeAsync(GetAuthScopeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAuthScopeResult>("openstack:identity/getAuthScope:getAuthScope", args ?? new GetAuthScopeArgs(), options.WithVersion());
    }


    public sealed class GetAuthScopeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the scope. This is an arbitrary name which is
        /// only used as a unique identifier so an actual token isn't used as the ID.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V3 Identity client.
        /// A Identity client is needed to retrieve tokens IDs. If omitted, the
        /// `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetAuthScopeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAuthScopeResult
    {
        /// <summary>
        /// The domain ID of the scope.
        /// </summary>
        public readonly string DomainId;
        /// <summary>
        /// The domain name of the scope.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The domain ID of the project.
        /// </summary>
        public readonly string ProjectDomainId;
        /// <summary>
        /// The domain name of the project.
        /// </summary>
        public readonly string ProjectDomainName;
        /// <summary>
        /// The project ID of the scope.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The project name of the scope.
        /// </summary>
        public readonly string ProjectName;
        public readonly string Region;
        /// <summary>
        /// A list of roles in the current scope. See reference below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuthScopeRoleResult> Roles;
        /// <summary>
        /// The domain ID of the user.
        /// </summary>
        public readonly string UserDomainId;
        /// <summary>
        /// The domain name of the user.
        /// </summary>
        public readonly string UserDomainName;
        /// <summary>
        /// The user ID the of the scope.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// The username of the scope.
        /// </summary>
        public readonly string UserName;

        [OutputConstructor]
        private GetAuthScopeResult(
            string domainId,

            string domainName,

            string id,

            string name,

            string projectDomainId,

            string projectDomainName,

            string projectId,

            string projectName,

            string region,

            ImmutableArray<Outputs.GetAuthScopeRoleResult> roles,

            string userDomainId,

            string userDomainName,

            string userId,

            string userName)
        {
            DomainId = domainId;
            DomainName = domainName;
            Id = id;
            Name = name;
            ProjectDomainId = projectDomainId;
            ProjectDomainName = projectDomainName;
            ProjectId = projectId;
            ProjectName = projectName;
            Region = region;
            Roles = roles;
            UserDomainId = userDomainId;
            UserDomainName = userDomainName;
            UserId = userId;
            UserName = userName;
        }
    }
}
