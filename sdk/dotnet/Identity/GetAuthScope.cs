// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Identity
{
    public static class GetAuthScope
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Simple
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var scope = OpenStack.Identity.GetAuthScope.Invoke(new()
        ///     {
        ///         Name = "my_scope",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// To find the the public object storage endpoint for "region1" as listed in the
        /// service catalog:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var objectStoreService = .Where(entry =&gt; entry.Type == "object-store").Select(entry =&gt; 
        ///     {
        ///         return entry;
        ///     }).ToList()[0];
        /// 
        ///     var objectStoreEndpoint = .Where(endpoint =&gt; endpoint.Interface == "public" &amp;&amp; endpoint.Region == "region1").Select(endpoint =&gt; 
        ///     {
        ///         return endpoint;
        ///     }).ToList()[0];
        /// 
        ///     var objectStorePublicUrl = objectStoreEndpoint.Url;
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### In a combination with an http data source provider
        /// 
        /// See [http](https://www.terraform.io/providers/hashicorp/http/latest/docs/data-sources/http) provider for reference.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var scope = OpenStack.Identity.GetAuthScope.Invoke(new()
        ///     {
        ///         Name = "my_scope",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Http = Pulumi.Http;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var objectStoreService = .Where(entry =&gt; entry.Type == "object-store").Select(entry =&gt; 
        ///     {
        ///         return entry;
        ///     }).ToList()[0];
        /// 
        ///     var objectStoreEndpoint = .Where(endpoint =&gt; endpoint.Interface == "public" &amp;&amp; endpoint.Region == "region1").Select(endpoint =&gt; 
        ///     {
        ///         return endpoint;
        ///     }).ToList()[0];
        /// 
        ///     var objectStorePublicUrl = objectStoreEndpoint.Url;
        /// 
        ///     var example = Http.GetHttp.Invoke(new()
        ///     {
        ///         Url = objectStorePublicUrl,
        ///         RequestHeaders = 
        ///         {
        ///             { "Accept", "application/json" },
        ///             { "X-Auth-Token", data.Openstack_identity_auth_scope_v3.Scope.Token_id },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["containers"] = example.Apply(getHttpResult =&gt; getHttpResult.ResponseBody),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthScopeResult> InvokeAsync(GetAuthScopeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthScopeResult>("openstack:identity/getAuthScope:getAuthScope", args ?? new GetAuthScopeArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Simple
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var scope = OpenStack.Identity.GetAuthScope.Invoke(new()
        ///     {
        ///         Name = "my_scope",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// To find the the public object storage endpoint for "region1" as listed in the
        /// service catalog:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var objectStoreService = .Where(entry =&gt; entry.Type == "object-store").Select(entry =&gt; 
        ///     {
        ///         return entry;
        ///     }).ToList()[0];
        /// 
        ///     var objectStoreEndpoint = .Where(endpoint =&gt; endpoint.Interface == "public" &amp;&amp; endpoint.Region == "region1").Select(endpoint =&gt; 
        ///     {
        ///         return endpoint;
        ///     }).ToList()[0];
        /// 
        ///     var objectStorePublicUrl = objectStoreEndpoint.Url;
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### In a combination with an http data source provider
        /// 
        /// See [http](https://www.terraform.io/providers/hashicorp/http/latest/docs/data-sources/http) provider for reference.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var scope = OpenStack.Identity.GetAuthScope.Invoke(new()
        ///     {
        ///         Name = "my_scope",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Http = Pulumi.Http;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var objectStoreService = .Where(entry =&gt; entry.Type == "object-store").Select(entry =&gt; 
        ///     {
        ///         return entry;
        ///     }).ToList()[0];
        /// 
        ///     var objectStoreEndpoint = .Where(endpoint =&gt; endpoint.Interface == "public" &amp;&amp; endpoint.Region == "region1").Select(endpoint =&gt; 
        ///     {
        ///         return endpoint;
        ///     }).ToList()[0];
        /// 
        ///     var objectStorePublicUrl = objectStoreEndpoint.Url;
        /// 
        ///     var example = Http.GetHttp.Invoke(new()
        ///     {
        ///         Url = objectStorePublicUrl,
        ///         RequestHeaders = 
        ///         {
        ///             { "Accept", "application/json" },
        ///             { "X-Auth-Token", data.Openstack_identity_auth_scope_v3.Scope.Token_id },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["containers"] = example.Apply(getHttpResult =&gt; getHttpResult.ResponseBody),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuthScopeResult> Invoke(GetAuthScopeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthScopeResult>("openstack:identity/getAuthScope:getAuthScope", args ?? new GetAuthScopeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthScopeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the scope. This is an arbitrary name which is
        /// only used as a unique identifier so an actual token isn't used as the ID.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V3 Identity client.
        /// A Identity client is needed to retrieve tokens IDs. If omitted, the
        /// `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// A boolean argument that determines whether to
        /// export the current auth scope token ID. When set to `true`, the `token_id`
        /// attribute will contain an unencrypted token that can be used for further API
        /// calls. **Warning**: please note that the leaked token may allow unauthorized
        /// access to other OpenStack services within the current auth scope, so use this
        /// option with caution.
        /// </summary>
        [Input("setTokenId")]
        public bool? SetTokenId { get; set; }

        public GetAuthScopeArgs()
        {
        }
        public static new GetAuthScopeArgs Empty => new GetAuthScopeArgs();
    }

    public sealed class GetAuthScopeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the scope. This is an arbitrary name which is
        /// only used as a unique identifier so an actual token isn't used as the ID.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V3 Identity client.
        /// A Identity client is needed to retrieve tokens IDs. If omitted, the
        /// `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// A boolean argument that determines whether to
        /// export the current auth scope token ID. When set to `true`, the `token_id`
        /// attribute will contain an unencrypted token that can be used for further API
        /// calls. **Warning**: please note that the leaked token may allow unauthorized
        /// access to other OpenStack services within the current auth scope, so use this
        /// option with caution.
        /// </summary>
        [Input("setTokenId")]
        public Input<bool>? SetTokenId { get; set; }

        public GetAuthScopeInvokeArgs()
        {
        }
        public static new GetAuthScopeInvokeArgs Empty => new GetAuthScopeInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthScopeResult
    {
        /// <summary>
        /// The domain ID of the scope.
        /// </summary>
        public readonly string DomainId;
        /// <summary>
        /// The domain name of the scope.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the service.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The domain ID of the project.
        /// </summary>
        public readonly string ProjectDomainId;
        /// <summary>
        /// The domain name of the project.
        /// </summary>
        public readonly string ProjectDomainName;
        /// <summary>
        /// The project ID of the scope.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The project name of the scope.
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// The region of the endpoint.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// A list of roles in the current scope. See reference below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuthScopeRoleResult> Roles;
        /// <summary>
        /// A list of service catalog entries returned with the token.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuthScopeServiceCatalogResult> ServiceCatalogs;
        public readonly bool? SetTokenId;
        /// <summary>
        /// The token ID of the scope.
        /// </summary>
        public readonly string TokenId;
        /// <summary>
        /// The domain ID of the user.
        /// </summary>
        public readonly string UserDomainId;
        /// <summary>
        /// The domain name of the user.
        /// </summary>
        public readonly string UserDomainName;
        /// <summary>
        /// The user ID the of the scope.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// The username of the scope.
        /// </summary>
        public readonly string UserName;

        [OutputConstructor]
        private GetAuthScopeResult(
            string domainId,

            string domainName,

            string id,

            string name,

            string projectDomainId,

            string projectDomainName,

            string projectId,

            string projectName,

            string region,

            ImmutableArray<Outputs.GetAuthScopeRoleResult> roles,

            ImmutableArray<Outputs.GetAuthScopeServiceCatalogResult> serviceCatalogs,

            bool? setTokenId,

            string tokenId,

            string userDomainId,

            string userDomainName,

            string userId,

            string userName)
        {
            DomainId = domainId;
            DomainName = domainName;
            Id = id;
            Name = name;
            ProjectDomainId = projectDomainId;
            ProjectDomainName = projectDomainName;
            ProjectId = projectId;
            ProjectName = projectName;
            Region = region;
            Roles = roles;
            ServiceCatalogs = serviceCatalogs;
            SetTokenId = setTokenId;
            TokenId = tokenId;
            UserDomainId = userDomainId;
            UserDomainName = userDomainName;
            UserId = userId;
            UserName = userName;
        }
    }
}
