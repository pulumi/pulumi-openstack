// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Identity
{
    public static class GetProjectIdsV3
    {
        /// <summary>
        /// Use this data source to get a list of OpenStack Project IDs matching the
        /// specified criteria.
        /// 
        /// &gt; **Note:** You _must_ have domain admin or cloud admin privileges in your OpenStack cloud to use
        /// this datasource.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projects = OpenStack.Identity.GetProjectIdsV3.Invoke(new()
        ///     {
        ///         NameRegex = "^prod.*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectIdsV3Result> InvokeAsync(GetProjectIdsV3Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectIdsV3Result>("openstack:identity/getProjectIdsV3:getProjectIdsV3", args ?? new GetProjectIdsV3Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a list of OpenStack Project IDs matching the
        /// specified criteria.
        /// 
        /// &gt; **Note:** You _must_ have domain admin or cloud admin privileges in your OpenStack cloud to use
        /// this datasource.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projects = OpenStack.Identity.GetProjectIdsV3.Invoke(new()
        ///     {
        ///         NameRegex = "^prod.*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectIdsV3Result> Invoke(GetProjectIdsV3InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectIdsV3Result>("openstack:identity/getProjectIdsV3:getProjectIdsV3", args ?? new GetProjectIdsV3InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a list of OpenStack Project IDs matching the
        /// specified criteria.
        /// 
        /// &gt; **Note:** You _must_ have domain admin or cloud admin privileges in your OpenStack cloud to use
        /// this datasource.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projects = OpenStack.Identity.GetProjectIdsV3.Invoke(new()
        ///     {
        ///         NameRegex = "^prod.*",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectIdsV3Result> Invoke(GetProjectIdsV3InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectIdsV3Result>("openstack:identity/getProjectIdsV3:getProjectIdsV3", args ?? new GetProjectIdsV3InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectIdsV3Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain projects belongs to.
        /// </summary>
        [Input("domainId")]
        public string? DomainId { get; set; }

        /// <summary>
        /// Whether the project is enabled or disabled. Valid
        /// values are `true` and `false`. Default is `true`.
        /// </summary>
        [Input("enabled")]
        public bool? Enabled { get; set; }

        [Input("isDomain")]
        public bool? IsDomain { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The regular expression of the name of the project.
        /// Cannot be used simultaneously with `name`. Unlike filtering by `name` the
        /// `name_regex` filtering does by client on the result of OpenStack search
        /// query.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The parent of the project.
        /// </summary>
        [Input("parentId")]
        public string? ParentId { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// Tags for the project.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetProjectIdsV3Args()
        {
        }
        public static new GetProjectIdsV3Args Empty => new GetProjectIdsV3Args();
    }

    public sealed class GetProjectIdsV3InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain projects belongs to.
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// Whether the project is enabled or disabled. Valid
        /// values are `true` and `false`. Default is `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("isDomain")]
        public Input<bool>? IsDomain { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The regular expression of the name of the project.
        /// Cannot be used simultaneously with `name`. Unlike filtering by `name` the
        /// `name_regex` filtering does by client on the result of OpenStack search
        /// query.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// The parent of the project.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for the project.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetProjectIdsV3InvokeArgs()
        {
        }
        public static new GetProjectIdsV3InvokeArgs Empty => new GetProjectIdsV3InvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectIdsV3Result
    {
        public readonly string Description;
        public readonly string DomainId;
        public readonly bool? Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly bool? IsDomain;
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly string? ParentId;
        public readonly string Region;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetProjectIdsV3Result(
            string description,

            string domainId,

            bool? enabled,

            string id,

            ImmutableArray<string> ids,

            bool? isDomain,

            string? name,

            string? nameRegex,

            string? parentId,

            string region,

            ImmutableArray<string> tags)
        {
            Description = description;
            DomainId = domainId;
            Enabled = enabled;
            Id = id;
            Ids = ids;
            IsDomain = isDomain;
            Name = name;
            NameRegex = nameRegex;
            ParentId = parentId;
            Region = region;
            Tags = tags;
        }
    }
}
