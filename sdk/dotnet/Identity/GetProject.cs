// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Identity
{
    public static class GetProject
    {
        /// <summary>
        /// Use this data source to get the ID of an OpenStack project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var project1 = Output.Create(OpenStack.Identity.GetProject.InvokeAsync(new OpenStack.Identity.GetProjectArgs
        ///         {
        ///             Name = "demo",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectResult> InvokeAsync(GetProjectArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("openstack:identity/getProject:getProject", args ?? new GetProjectArgs(), options.WithVersion());
    }


    public sealed class GetProjectArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain this project belongs to.
        /// </summary>
        [Input("domainId")]
        public string? DomainId { get; set; }

        /// <summary>
        /// Whether the project is enabled or disabled. Valid
        /// values are `true` and `false`.
        /// </summary>
        [Input("enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Whether this project is a domain. Valid values
        /// are `true` and `false`.
        /// </summary>
        [Input("isDomain")]
        public bool? IsDomain { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The parent of this project.
        /// </summary>
        [Input("parentId")]
        public string? ParentId { get; set; }

        /// <summary>
        /// The region the project is located in.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetProjectArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectResult
    {
        /// <summary>
        /// The description of the project.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string DomainId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly bool? IsDomain;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? ParentId;
        /// <summary>
        /// The region the project is located in.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetProjectResult(
            string description,

            string domainId,

            bool? enabled,

            string id,

            bool? isDomain,

            string? name,

            string? parentId,

            string region,

            ImmutableArray<string> tags)
        {
            Description = description;
            DomainId = domainId;
            Enabled = enabled;
            Id = id;
            IsDomain = isDomain;
            Name = name;
            ParentId = parentId;
            Region = region;
            Tags = tags;
        }
    }
}
