// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.KeyManager
{
    public static class GetContainer
    {
        /// <summary>
        /// Use this data source to get the ID of an available Barbican container.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(OpenStack.KeyManager.GetContainer.InvokeAsync(new OpenStack.KeyManager.GetContainerArgs
        ///         {
        ///             Name = "my_container",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetContainerResult> InvokeAsync(GetContainerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetContainerResult>("openstack:keymanager/getContainer:getContainer", args ?? new GetContainerArgs(), options.WithVersion());
    }


    public sealed class GetContainerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Container name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V1 KeyManager client.
        /// A KeyManager client is needed to fetch a container. If omitted, the `region`
        /// argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetContainerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetContainerResult
    {
        /// <summary>
        /// The list of ACLs assigned to a container. The `read` structure is
        /// described below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerAclResult> Acls;
        /// <summary>
        /// The list of the container consumers. The structure is described
        /// below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerConsumerResult> Consumers;
        /// <summary>
        /// The container reference / where to find the container.
        /// </summary>
        public readonly string ContainerRef;
        /// <summary>
        /// The date the container ACL was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The creator of the container.
        /// </summary>
        public readonly string CreatorId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the consumer.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// A set of dictionaries containing references to secrets. The
        /// structure is described below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerSecretRefResult> SecretRefs;
        /// <summary>
        /// The status of the container.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The container type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The date the container ACL was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetContainerResult(
            ImmutableArray<Outputs.GetContainerAclResult> acls,

            ImmutableArray<Outputs.GetContainerConsumerResult> consumers,

            string containerRef,

            string createdAt,

            string creatorId,

            string id,

            string? name,

            string? region,

            ImmutableArray<Outputs.GetContainerSecretRefResult> secretRefs,

            string status,

            string type,

            string updatedAt)
        {
            Acls = acls;
            Consumers = consumers;
            ContainerRef = containerRef;
            CreatedAt = createdAt;
            CreatorId = creatorId;
            Id = id;
            Name = name;
            Region = region;
            SecretRefs = secretRefs;
            Status = status;
            Type = type;
            UpdatedAt = updatedAt;
        }
    }
}
