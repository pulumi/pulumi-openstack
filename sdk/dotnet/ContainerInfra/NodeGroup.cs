// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.ContainerInfra
{
    /// <summary>
    /// Manages a V1 Magnum node group resource within OpenStack.
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a Nodegroup
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var nodegroup1 = new OpenStack.ContainerInfra.NodeGroup("nodegroup1", new()
    ///     {
    ///         ClusterId = "b9a45c5c-cd03-4958-82aa-b80bf93cb922",
    ///         NodeCount = 5,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Attributes reference
    /// 
    /// The following attributes are exported:
    /// 
    /// * `region` - See Argument Reference above.
    /// * `name` - See Argument Reference above.
    /// * `project_id` - See Argument Reference above.
    /// * `created_at` - The time at which node group was created.
    /// * `updated_at` - The time at which node group was created.
    /// * `docker_volume_size` - See Argument Reference above.
    /// * `role` - See Argument Reference above.
    /// * `image_id` - See Argument Reference above.
    /// * `flavor_id` - See Argument Reference above.
    /// * `labels` - See Argument Reference above.
    /// * `node_count` - See Argument Reference above.
    /// * `min_node_count` - See Argument Reference above.
    /// * `max_node_count` - See Argument Reference above.
    /// * `role` - See Argument Reference above.
    /// 
    /// ## Import
    /// 
    /// Node groups can be imported using the `id` (cluster_id/nodegroup_id), e.g.
    /// 
    /// ```sh
    /// $ pulumi import openstack:containerinfra/nodeGroup:NodeGroup nodegroup_1 b9a45c5c-cd03-4958-82aa-b80bf93cb922/ce0f9463-dd25-474b-9fe8-94de63e5e42b
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:containerinfra/nodeGroup:NodeGroup")]
    public partial class NodeGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The UUID of the V1 Container Infra cluster.
        /// Changing this creates a new node group.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The size (in GB) of the Docker volume.
        /// Changing this creates a new node group.
        /// </summary>
        [Output("dockerVolumeSize")]
        public Output<int> DockerVolumeSize { get; private set; } = null!;

        /// <summary>
        /// The flavor for the nodes of the node group. Can be set
        /// via the `OS_MAGNUM_FLAVOR` environment variable. Changing this creates a new
        /// node group.
        /// </summary>
        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        /// <summary>
        /// The reference to an image that is used for nodes of the
        /// node group. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
        /// Changing this updates the image attribute of the existing node group.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The list of key value pairs representing additional
        /// properties of the node group. Changing this creates a new node group.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The maximum number of nodes for the node group.
        /// Changing this update the maximum number of nodes of the node group.
        /// </summary>
        [Output("maxNodeCount")]
        public Output<int?> MaxNodeCount { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the provided labels should be
        /// merged with cluster labels. Changing this creates a new nodegroup.
        /// </summary>
        [Output("mergeLabels")]
        public Output<bool?> MergeLabels { get; private set; } = null!;

        /// <summary>
        /// The minimum number of nodes for the node group.
        /// Changing this update the minimum number of nodes of the node group.
        /// </summary>
        [Output("minNodeCount")]
        public Output<int> MinNodeCount { get; private set; } = null!;

        /// <summary>
        /// The name of the node group. Changing this creates a new
        /// node group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of nodes for the node group. Changing
        /// this update the number of nodes of the node group.
        /// </summary>
        [Output("nodeCount")]
        public Output<int?> NodeCount { get; private set; } = null!;

        /// <summary>
        /// The project of the node group. Required if admin
        /// wants to create a cluster in another project. Changing this creates a new
        /// node group.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the V1 Container Infra
        /// client. A Container Infra client is needed to create a cluster. If omitted,
        /// the `region` argument of the provider is used. Changing this creates a new
        /// node group.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The role of nodes in the node group. Changing this
        /// creates a new node group.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a NodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodeGroup(string name, NodeGroupArgs args, CustomResourceOptions? options = null)
            : base("openstack:containerinfra/nodeGroup:NodeGroup", name, args ?? new NodeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodeGroup(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
            : base("openstack:containerinfra/nodeGroup:NodeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodeGroup Get(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new NodeGroup(name, id, state, options);
        }
    }

    public sealed class NodeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the V1 Container Infra cluster.
        /// Changing this creates a new node group.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The size (in GB) of the Docker volume.
        /// Changing this creates a new node group.
        /// </summary>
        [Input("dockerVolumeSize")]
        public Input<int>? DockerVolumeSize { get; set; }

        /// <summary>
        /// The flavor for the nodes of the node group. Can be set
        /// via the `OS_MAGNUM_FLAVOR` environment variable. Changing this creates a new
        /// node group.
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// The reference to an image that is used for nodes of the
        /// node group. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
        /// Changing this updates the image attribute of the existing node group.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// The list of key value pairs representing additional
        /// properties of the node group. Changing this creates a new node group.
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The maximum number of nodes for the node group.
        /// Changing this update the maximum number of nodes of the node group.
        /// </summary>
        [Input("maxNodeCount")]
        public Input<int>? MaxNodeCount { get; set; }

        /// <summary>
        /// Indicates whether the provided labels should be
        /// merged with cluster labels. Changing this creates a new nodegroup.
        /// </summary>
        [Input("mergeLabels")]
        public Input<bool>? MergeLabels { get; set; }

        /// <summary>
        /// The minimum number of nodes for the node group.
        /// Changing this update the minimum number of nodes of the node group.
        /// </summary>
        [Input("minNodeCount")]
        public Input<int>? MinNodeCount { get; set; }

        /// <summary>
        /// The name of the node group. Changing this creates a new
        /// node group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes for the node group. Changing
        /// this update the number of nodes of the node group.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The region in which to obtain the V1 Container Infra
        /// client. A Container Infra client is needed to create a cluster. If omitted,
        /// the `region` argument of the provider is used. Changing this creates a new
        /// node group.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The role of nodes in the node group. Changing this
        /// creates a new node group.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public NodeGroupArgs()
        {
        }
        public static new NodeGroupArgs Empty => new NodeGroupArgs();
    }

    public sealed class NodeGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the V1 Container Infra cluster.
        /// Changing this creates a new node group.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The size (in GB) of the Docker volume.
        /// Changing this creates a new node group.
        /// </summary>
        [Input("dockerVolumeSize")]
        public Input<int>? DockerVolumeSize { get; set; }

        /// <summary>
        /// The flavor for the nodes of the node group. Can be set
        /// via the `OS_MAGNUM_FLAVOR` environment variable. Changing this creates a new
        /// node group.
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// The reference to an image that is used for nodes of the
        /// node group. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
        /// Changing this updates the image attribute of the existing node group.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// The list of key value pairs representing additional
        /// properties of the node group. Changing this creates a new node group.
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The maximum number of nodes for the node group.
        /// Changing this update the maximum number of nodes of the node group.
        /// </summary>
        [Input("maxNodeCount")]
        public Input<int>? MaxNodeCount { get; set; }

        /// <summary>
        /// Indicates whether the provided labels should be
        /// merged with cluster labels. Changing this creates a new nodegroup.
        /// </summary>
        [Input("mergeLabels")]
        public Input<bool>? MergeLabels { get; set; }

        /// <summary>
        /// The minimum number of nodes for the node group.
        /// Changing this update the minimum number of nodes of the node group.
        /// </summary>
        [Input("minNodeCount")]
        public Input<int>? MinNodeCount { get; set; }

        /// <summary>
        /// The name of the node group. Changing this creates a new
        /// node group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes for the node group. Changing
        /// this update the number of nodes of the node group.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The project of the node group. Required if admin
        /// wants to create a cluster in another project. Changing this creates a new
        /// node group.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which to obtain the V1 Container Infra
        /// client. A Container Infra client is needed to create a cluster. If omitted,
        /// the `region` argument of the provider is used. Changing this creates a new
        /// node group.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The role of nodes in the node group. Changing this
        /// creates a new node group.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public NodeGroupState()
        {
        }
        public static new NodeGroupState Empty => new NodeGroupState();
    }
}
