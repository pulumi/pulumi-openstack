// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.ContainerInfra
{
    public static class GetNodeGroup
    {
        /// <summary>
        /// Use this data source to get information of an available OpenStack Magnum node group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nodegroup1 = OpenStack.ContainerInfra.GetNodeGroup.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_1",
        ///         Name = "nodegroup_1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodeGroupResult> InvokeAsync(GetNodeGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeGroupResult>("openstack:containerinfra/getNodeGroup:getNodeGroup", args ?? new GetNodeGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information of an available OpenStack Magnum node group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nodegroup1 = OpenStack.ContainerInfra.GetNodeGroup.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_1",
        ///         Name = "nodegroup_1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeGroupResult> Invoke(GetNodeGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeGroupResult>("openstack:containerinfra/getNodeGroup:getNodeGroup", args ?? new GetNodeGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the OpenStack Magnum cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the node group.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V1 Container Infra
        /// client.
        /// If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetNodeGroupArgs()
        {
        }
        public static new GetNodeGroupArgs Empty => new GetNodeGroupArgs();
    }

    public sealed class GetNodeGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the OpenStack Magnum cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the node group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V1 Container Infra
        /// client.
        /// If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetNodeGroupInvokeArgs()
        {
        }
        public static new GetNodeGroupInvokeArgs Empty => new GetNodeGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeGroupResult
    {
        public readonly string ClusterId;
        /// <summary>
        /// The time at which the node group was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The size (in GB) of the Docker volume.
        /// </summary>
        public readonly int DockerVolumeSize;
        /// <summary>
        /// The flavor for the nodes of the node group.
        /// </summary>
        public readonly string Flavor;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The reference to an image that is used for nodes of the node group.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// The list of key value pairs representing additional properties of
        /// the node group.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The maximum number of nodes for the node group.
        /// </summary>
        public readonly int MaxNodeCount;
        /// <summary>
        /// The minimum number of nodes for the node group.
        /// </summary>
        public readonly int MinNodeCount;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of nodes for the node group.
        /// </summary>
        public readonly int NodeCount;
        /// <summary>
        /// The project of the node group.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The role of the node group.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// The time at which the node group was updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetNodeGroupResult(
            string clusterId,

            string createdAt,

            int dockerVolumeSize,

            string flavor,

            string id,

            string image,

            ImmutableDictionary<string, string> labels,

            int maxNodeCount,

            int minNodeCount,

            string name,

            int nodeCount,

            string projectId,

            string region,

            string role,

            string updatedAt)
        {
            ClusterId = clusterId;
            CreatedAt = createdAt;
            DockerVolumeSize = dockerVolumeSize;
            Flavor = flavor;
            Id = id;
            Image = image;
            Labels = labels;
            MaxNodeCount = maxNodeCount;
            MinNodeCount = minNodeCount;
            Name = name;
            NodeCount = nodeCount;
            ProjectId = projectId;
            Region = region;
            Role = role;
            UpdatedAt = updatedAt;
        }
    }
}
