// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.LoadBalancer
{
    /// <summary>
    /// Manages a V2 load balancer flavor resource within OpenStack.
    /// 
    /// &gt; **Note:** This usually requires admin privileges.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fp1 = new OpenStack.LoadBalancer.FlavorprofileV2("fp_1", new()
    ///     {
    ///         Name = "test",
    ///         ProviderName = "amphora",
    ///         FlavorData = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["loadbalancer_topology"] = "ACTIVE_STANDBY",
    ///         }),
    ///     });
    /// 
    ///     var flavor1 = new OpenStack.LoadBalancer.FlavorV2("flavor_1", new()
    ///     {
    ///         Name = "test",
    ///         Description = "This is a test flavor",
    ///         FlavorProfileId = fp1.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// flavors can be imported using their `id`. Example:
    /// 
    /// ```sh
    /// $ pulumi import openstack:loadbalancer/flavorV2:FlavorV2 flavor_1 2a0f2240-c5e6-41de-896d-e80d97428d6b
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:loadbalancer/flavorV2:FlavorV2")]
    public partial class FlavorV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the flavor. Changing this
        /// updates the existing flavor.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the flavor is enabled or not. Defaults to `True`.
        /// Changing this updates the existing flavor.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The FlavorProfileId that the flavor
        /// will use. Changing this creates a new flavor.
        /// </summary>
        [Output("flavorProfileId")]
        public Output<string> FlavorProfileId { get; private set; } = null!;

        /// <summary>
        /// Name of the flavor. Changing this updates the existing
        /// flavor.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create an LB member. If omitted, the
        /// `Region` argument of the provider is used. Changing this creates a new
        /// LB flavor.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a FlavorV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlavorV2(string name, FlavorV2Args args, CustomResourceOptions? options = null)
            : base("openstack:loadbalancer/flavorV2:FlavorV2", name, args ?? new FlavorV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private FlavorV2(string name, Input<string> id, FlavorV2State? state = null, CustomResourceOptions? options = null)
            : base("openstack:loadbalancer/flavorV2:FlavorV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlavorV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlavorV2 Get(string name, Input<string> id, FlavorV2State? state = null, CustomResourceOptions? options = null)
        {
            return new FlavorV2(name, id, state, options);
        }
    }

    public sealed class FlavorV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the flavor. Changing this
        /// updates the existing flavor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the flavor is enabled or not. Defaults to `True`.
        /// Changing this updates the existing flavor.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The FlavorProfileId that the flavor
        /// will use. Changing this creates a new flavor.
        /// </summary>
        [Input("flavorProfileId", required: true)]
        public Input<string> FlavorProfileId { get; set; } = null!;

        /// <summary>
        /// Name of the flavor. Changing this updates the existing
        /// flavor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create an LB member. If omitted, the
        /// `Region` argument of the provider is used. Changing this creates a new
        /// LB flavor.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public FlavorV2Args()
        {
        }
        public static new FlavorV2Args Empty => new FlavorV2Args();
    }

    public sealed class FlavorV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the flavor. Changing this
        /// updates the existing flavor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the flavor is enabled or not. Defaults to `True`.
        /// Changing this updates the existing flavor.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The FlavorProfileId that the flavor
        /// will use. Changing this creates a new flavor.
        /// </summary>
        [Input("flavorProfileId")]
        public Input<string>? FlavorProfileId { get; set; }

        /// <summary>
        /// Name of the flavor. Changing this updates the existing
        /// flavor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create an LB member. If omitted, the
        /// `Region` argument of the provider is used. Changing this creates a new
        /// LB flavor.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public FlavorV2State()
        {
        }
        public static new FlavorV2State Empty => new FlavorV2State();
    }
}
