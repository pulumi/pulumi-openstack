// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.LoadBalancer
{
    /// <summary>
    /// Manages a V2 load balancer flavorprofile resource within OpenStack.
    /// 
    /// &gt; **Note:** This usually requires admin privileges.
    /// 
    /// ## Example Usage
    /// 
    /// ### Using jsonencode
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var flavorprofile1 = new OpenStack.LoadBalancer.FlavorprofileV2("flavorprofile_1", new()
    ///     {
    ///         Name = "amphora-single-profile",
    ///         ProviderName = "amphora",
    ///         FlavorData = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["loadbalancer_topology"] = "SINGLE",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Using plain string
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var flavorprofile1 = new OpenStack.LoadBalancer.FlavorprofileV2("flavorprofile_1", new()
    ///     {
    ///         Name = "amphora-single-profile",
    ///         ProviderName = "amphora",
    ///         FlavorData = "{\"loadbalancer_topology\": \"SINGLE\"}",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// flavorprofiles can be imported using their `id`. Example:
    /// 
    /// ```sh
    /// $ pulumi import openstack:loadbalancer/flavorprofileV2:FlavorprofileV2 flavorprofile_1 2a0f2240-c5e6-41de-896d-e80d97428d6b
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:loadbalancer/flavorprofileV2:FlavorprofileV2")]
    public partial class FlavorprofileV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// String that passes the flavor_data for the flavorprofile.
        /// The data that are allowed depend on the `provider_name` that is passed. jsonencode
        /// can be used for readability as shown in the example above.
        /// Changing this updates the existing flavorprofile.
        /// </summary>
        [Output("flavorData")]
        public Output<string> FlavorData { get; private set; } = null!;

        /// <summary>
        /// Name of the flavorprofile. Changing this updates the existing
        /// flavorprofile.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provider_name that the flavor_profile will use.
        /// Changing this updates the existing flavorprofile.
        /// </summary>
        [Output("providerName")]
        public Output<string> ProviderName { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a FlavorprofileV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlavorprofileV2(string name, FlavorprofileV2Args args, CustomResourceOptions? options = null)
            : base("openstack:loadbalancer/flavorprofileV2:FlavorprofileV2", name, args ?? new FlavorprofileV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private FlavorprofileV2(string name, Input<string> id, FlavorprofileV2State? state = null, CustomResourceOptions? options = null)
            : base("openstack:loadbalancer/flavorprofileV2:FlavorprofileV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "openstack:index/lbFlavorprofileV2:LbFlavorprofileV2" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlavorprofileV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlavorprofileV2 Get(string name, Input<string> id, FlavorprofileV2State? state = null, CustomResourceOptions? options = null)
        {
            return new FlavorprofileV2(name, id, state, options);
        }
    }

    public sealed class FlavorprofileV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// String that passes the flavor_data for the flavorprofile.
        /// The data that are allowed depend on the `provider_name` that is passed. jsonencode
        /// can be used for readability as shown in the example above.
        /// Changing this updates the existing flavorprofile.
        /// </summary>
        [Input("flavorData", required: true)]
        public Input<string> FlavorData { get; set; } = null!;

        /// <summary>
        /// Name of the flavorprofile. Changing this updates the existing
        /// flavorprofile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The provider_name that the flavor_profile will use.
        /// Changing this updates the existing flavorprofile.
        /// </summary>
        [Input("providerName", required: true)]
        public Input<string> ProviderName { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        public FlavorprofileV2Args()
        {
        }
        public static new FlavorprofileV2Args Empty => new FlavorprofileV2Args();
    }

    public sealed class FlavorprofileV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// String that passes the flavor_data for the flavorprofile.
        /// The data that are allowed depend on the `provider_name` that is passed. jsonencode
        /// can be used for readability as shown in the example above.
        /// Changing this updates the existing flavorprofile.
        /// </summary>
        [Input("flavorData")]
        public Input<string>? FlavorData { get; set; }

        /// <summary>
        /// Name of the flavorprofile. Changing this updates the existing
        /// flavorprofile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The provider_name that the flavor_profile will use.
        /// Changing this updates the existing flavorprofile.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public FlavorprofileV2State()
        {
        }
        public static new FlavorprofileV2State Empty => new FlavorprofileV2State();
    }
}
