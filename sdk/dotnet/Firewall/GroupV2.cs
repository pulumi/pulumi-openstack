// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Firewall
{
    /// <summary>
    /// Manages a v2 firewall group resource within OpenStack.
    /// 
    /// &gt; **Note:** Firewall v2 has no support for OVN currently.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var rule1 = new OpenStack.Firewall.RuleV2("rule_1", new()
    ///     {
    ///         Name = "firewall_rule_2",
    ///         Description = "drop TELNET traffic",
    ///         Action = "deny",
    ///         Protocol = "tcp",
    ///         DestinationPort = "23",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var rule2 = new OpenStack.Firewall.RuleV2("rule_2", new()
    ///     {
    ///         Name = "firewall_rule_1",
    ///         Description = "drop NTP traffic",
    ///         Action = "deny",
    ///         Protocol = "udp",
    ///         DestinationPort = "123",
    ///         Enabled = false,
    ///     });
    /// 
    ///     var policy1 = new OpenStack.Firewall.PolicyV2("policy_1", new()
    ///     {
    ///         Name = "firewall_ingress_policy",
    ///         Rules = new[]
    ///         {
    ///             rule1.Id,
    ///         },
    ///     });
    /// 
    ///     var policy2 = new OpenStack.Firewall.PolicyV2("policy_2", new()
    ///     {
    ///         Name = "firewall_egress_policy",
    ///         Rules = new[]
    ///         {
    ///             rule2.Id,
    ///         },
    ///     });
    /// 
    ///     var group1 = new OpenStack.Firewall.GroupV2("group_1", new()
    ///     {
    ///         Name = "firewall_group",
    ///         IngressFirewallPolicyId = policy1.Id,
    ///         EgressFirewallPolicyId = policy2.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Firewall groups can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import openstack:firewall/groupV2:GroupV2 group_1 c9e39fb2-ce20-46c8-a964-25f3898c7a97
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:firewall/groupV2:GroupV2")]
    public partial class GroupV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Administrative up/down status for the firewall
        /// group (must be "true" or "false" if provided - defaults to "true").
        /// Changing this updates the `admin_state_up` of an existing firewall group.
        /// </summary>
        [Output("adminStateUp")]
        public Output<bool?> AdminStateUp { get; private set; } = null!;

        /// <summary>
        /// A description for the firewall group. Changing this
        /// updates the `description` of an existing firewall group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The egress firewall policy resource
        /// id for the firewall group. Changing this updates the
        /// `egress_firewall_policy_id` of an existing firewall group.
        /// </summary>
        [Output("egressFirewallPolicyId")]
        public Output<string?> EgressFirewallPolicyId { get; private set; } = null!;

        /// <summary>
        /// The ingress firewall policy resource
        /// id for the firewall group. Changing this updates the
        /// `ingress_firewall_policy_id` of an existing firewall group.
        /// </summary>
        [Output("ingressFirewallPolicyId")]
        public Output<string?> IngressFirewallPolicyId { get; private set; } = null!;

        /// <summary>
        /// A name for the firewall group. Changing this
        /// updates the `name` of an existing firewall.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Port(s) to associate this firewall group
        /// with. Must be a list of strings. Changing this updates the associated ports
        /// of an existing firewall group.
        /// </summary>
        [Output("ports")]
        public Output<ImmutableArray<string>> Ports { get; private set; } = null!;

        /// <summary>
        /// This argument conflicts and  is interchangeable
        /// with `tenant_id`. The owner of the firewall group. Required if admin wants
        /// to create a firewall group for another project. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the v2 networking client.
        /// A networking client is needed to create a firewall group. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Sharing status of the firewall group (must be "true"
        /// or "false" if provided). If this is "true" the firewall group is visible to,
        /// and can be used in, firewalls in other tenants. Changing this updates the
        /// `shared` status of an existing firewall group. Only administrative users
        /// can specify if the firewall group should be shared.
        /// </summary>
        [Output("shared")]
        public Output<bool?> Shared { get; private set; } = null!;

        /// <summary>
        /// The status of the firewall group.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// This argument conflicts and is interchangeable with
        /// `project_id`. The owner of the firewall group. Required if admin wants to
        /// create a firewall group for another tenant. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a GroupV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupV2(string name, GroupV2Args? args = null, CustomResourceOptions? options = null)
            : base("openstack:firewall/groupV2:GroupV2", name, args ?? new GroupV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private GroupV2(string name, Input<string> id, GroupV2State? state = null, CustomResourceOptions? options = null)
            : base("openstack:firewall/groupV2:GroupV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupV2 Get(string name, Input<string> id, GroupV2State? state = null, CustomResourceOptions? options = null)
        {
            return new GroupV2(name, id, state, options);
        }
    }

    public sealed class GroupV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Administrative up/down status for the firewall
        /// group (must be "true" or "false" if provided - defaults to "true").
        /// Changing this updates the `admin_state_up` of an existing firewall group.
        /// </summary>
        [Input("adminStateUp")]
        public Input<bool>? AdminStateUp { get; set; }

        /// <summary>
        /// A description for the firewall group. Changing this
        /// updates the `description` of an existing firewall group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The egress firewall policy resource
        /// id for the firewall group. Changing this updates the
        /// `egress_firewall_policy_id` of an existing firewall group.
        /// </summary>
        [Input("egressFirewallPolicyId")]
        public Input<string>? EgressFirewallPolicyId { get; set; }

        /// <summary>
        /// The ingress firewall policy resource
        /// id for the firewall group. Changing this updates the
        /// `ingress_firewall_policy_id` of an existing firewall group.
        /// </summary>
        [Input("ingressFirewallPolicyId")]
        public Input<string>? IngressFirewallPolicyId { get; set; }

        /// <summary>
        /// A name for the firewall group. Changing this
        /// updates the `name` of an existing firewall.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ports")]
        private InputList<string>? _ports;

        /// <summary>
        /// Port(s) to associate this firewall group
        /// with. Must be a list of strings. Changing this updates the associated ports
        /// of an existing firewall group.
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        /// <summary>
        /// This argument conflicts and  is interchangeable
        /// with `tenant_id`. The owner of the firewall group. Required if admin wants
        /// to create a firewall group for another project. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which to obtain the v2 networking client.
        /// A networking client is needed to create a firewall group. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Sharing status of the firewall group (must be "true"
        /// or "false" if provided). If this is "true" the firewall group is visible to,
        /// and can be used in, firewalls in other tenants. Changing this updates the
        /// `shared` status of an existing firewall group. Only administrative users
        /// can specify if the firewall group should be shared.
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        /// <summary>
        /// This argument conflicts and is interchangeable with
        /// `project_id`. The owner of the firewall group. Required if admin wants to
        /// create a firewall group for another tenant. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public GroupV2Args()
        {
        }
        public static new GroupV2Args Empty => new GroupV2Args();
    }

    public sealed class GroupV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Administrative up/down status for the firewall
        /// group (must be "true" or "false" if provided - defaults to "true").
        /// Changing this updates the `admin_state_up` of an existing firewall group.
        /// </summary>
        [Input("adminStateUp")]
        public Input<bool>? AdminStateUp { get; set; }

        /// <summary>
        /// A description for the firewall group. Changing this
        /// updates the `description` of an existing firewall group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The egress firewall policy resource
        /// id for the firewall group. Changing this updates the
        /// `egress_firewall_policy_id` of an existing firewall group.
        /// </summary>
        [Input("egressFirewallPolicyId")]
        public Input<string>? EgressFirewallPolicyId { get; set; }

        /// <summary>
        /// The ingress firewall policy resource
        /// id for the firewall group. Changing this updates the
        /// `ingress_firewall_policy_id` of an existing firewall group.
        /// </summary>
        [Input("ingressFirewallPolicyId")]
        public Input<string>? IngressFirewallPolicyId { get; set; }

        /// <summary>
        /// A name for the firewall group. Changing this
        /// updates the `name` of an existing firewall.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ports")]
        private InputList<string>? _ports;

        /// <summary>
        /// Port(s) to associate this firewall group
        /// with. Must be a list of strings. Changing this updates the associated ports
        /// of an existing firewall group.
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        /// <summary>
        /// This argument conflicts and  is interchangeable
        /// with `tenant_id`. The owner of the firewall group. Required if admin wants
        /// to create a firewall group for another project. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which to obtain the v2 networking client.
        /// A networking client is needed to create a firewall group. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Sharing status of the firewall group (must be "true"
        /// or "false" if provided). If this is "true" the firewall group is visible to,
        /// and can be used in, firewalls in other tenants. Changing this updates the
        /// `shared` status of an existing firewall group. Only administrative users
        /// can specify if the firewall group should be shared.
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        /// <summary>
        /// The status of the firewall group.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// This argument conflicts and is interchangeable with
        /// `project_id`. The owner of the firewall group. Required if admin wants to
        /// create a firewall group for another tenant. Changing this creates a new
        /// firewall group.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public GroupV2State()
        {
        }
        public static new GroupV2State Empty => new GroupV2State();
    }
}
