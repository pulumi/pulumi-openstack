// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Firewall
{
    /// <summary>
    /// Manages a v1 firewall resource within OpenStack.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var rule1 = new OpenStack.Firewall.Rule("rule1", new OpenStack.Firewall.RuleArgs
    ///         {
    ///             Action = "deny",
    ///             Description = "drop TELNET traffic",
    ///             DestinationPort = "23",
    ///             Enabled = true,
    ///             Protocol = "tcp",
    ///         });
    ///         var rule2 = new OpenStack.Firewall.Rule("rule2", new OpenStack.Firewall.RuleArgs
    ///         {
    ///             Action = "deny",
    ///             Description = "drop NTP traffic",
    ///             DestinationPort = "123",
    ///             Enabled = false,
    ///             Protocol = "udp",
    ///         });
    ///         var policy1 = new OpenStack.Firewall.Policy("policy1", new OpenStack.Firewall.PolicyArgs
    ///         {
    ///             Rules = 
    ///             {
    ///                 rule1.Id,
    ///                 rule2.Id,
    ///             },
    ///         });
    ///         var firewall1 = new OpenStack.Firewall.Firewall("firewall1", new OpenStack.Firewall.FirewallArgs
    ///         {
    ///             PolicyId = policy1.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Firewall : Pulumi.CustomResource
    {
        /// <summary>
        /// Administrative up/down status for the firewall
        /// (must be "true" or "false" if provided - defaults to "true").
        /// Changing this updates the `admin_state_up` of an existing firewall.
        /// </summary>
        [Output("adminStateUp")]
        public Output<bool?> AdminStateUp { get; private set; } = null!;

        /// <summary>
        /// Router(s) to associate this firewall instance
        /// with. Must be a list of strings. Changing this updates the associated routers
        /// of an existing firewall. Conflicts with `no_routers`.
        /// </summary>
        [Output("associatedRouters")]
        public Output<ImmutableArray<string>> AssociatedRouters { get; private set; } = null!;

        /// <summary>
        /// A description for the firewall. Changing this
        /// updates the `description` of an existing firewall.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A name for the firewall. Changing this
        /// updates the `name` of an existing firewall.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Should this firewall not be associated with any routers
        /// (must be "true" or "false" if provide - defaults to "false").
        /// Conflicts with `associated_routers`.
        /// </summary>
        [Output("noRouters")]
        public Output<bool?> NoRouters { get; private set; } = null!;

        /// <summary>
        /// The policy resource id for the firewall. Changing
        /// this updates the `policy_id` of an existing firewall.
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the v1 networking client.
        /// A networking client is needed to create a firewall. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new
        /// firewall.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The owner of the floating IP. Required if admin wants
        /// to create a firewall for another tenant. Changing this creates a new
        /// firewall.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// Map of additional options.
        /// </summary>
        [Output("valueSpecs")]
        public Output<ImmutableDictionary<string, object>?> ValueSpecs { get; private set; } = null!;


        /// <summary>
        /// Create a Firewall resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Firewall(string name, FirewallArgs args, CustomResourceOptions? options = null)
            : base("openstack:firewall/firewall:Firewall", name, args ?? new FirewallArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Firewall(string name, Input<string> id, FirewallState? state = null, CustomResourceOptions? options = null)
            : base("openstack:firewall/firewall:Firewall", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Firewall resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Firewall Get(string name, Input<string> id, FirewallState? state = null, CustomResourceOptions? options = null)
        {
            return new Firewall(name, id, state, options);
        }
    }

    public sealed class FirewallArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Administrative up/down status for the firewall
        /// (must be "true" or "false" if provided - defaults to "true").
        /// Changing this updates the `admin_state_up` of an existing firewall.
        /// </summary>
        [Input("adminStateUp")]
        public Input<bool>? AdminStateUp { get; set; }

        [Input("associatedRouters")]
        private InputList<string>? _associatedRouters;

        /// <summary>
        /// Router(s) to associate this firewall instance
        /// with. Must be a list of strings. Changing this updates the associated routers
        /// of an existing firewall. Conflicts with `no_routers`.
        /// </summary>
        public InputList<string> AssociatedRouters
        {
            get => _associatedRouters ?? (_associatedRouters = new InputList<string>());
            set => _associatedRouters = value;
        }

        /// <summary>
        /// A description for the firewall. Changing this
        /// updates the `description` of an existing firewall.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the firewall. Changing this
        /// updates the `name` of an existing firewall.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should this firewall not be associated with any routers
        /// (must be "true" or "false" if provide - defaults to "false").
        /// Conflicts with `associated_routers`.
        /// </summary>
        [Input("noRouters")]
        public Input<bool>? NoRouters { get; set; }

        /// <summary>
        /// The policy resource id for the firewall. Changing
        /// this updates the `policy_id` of an existing firewall.
        /// </summary>
        [Input("policyId", required: true)]
        public Input<string> PolicyId { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the v1 networking client.
        /// A networking client is needed to create a firewall. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new
        /// firewall.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The owner of the floating IP. Required if admin wants
        /// to create a firewall for another tenant. Changing this creates a new
        /// firewall.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("valueSpecs")]
        private InputMap<object>? _valueSpecs;

        /// <summary>
        /// Map of additional options.
        /// </summary>
        public InputMap<object> ValueSpecs
        {
            get => _valueSpecs ?? (_valueSpecs = new InputMap<object>());
            set => _valueSpecs = value;
        }

        public FirewallArgs()
        {
        }
    }

    public sealed class FirewallState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Administrative up/down status for the firewall
        /// (must be "true" or "false" if provided - defaults to "true").
        /// Changing this updates the `admin_state_up` of an existing firewall.
        /// </summary>
        [Input("adminStateUp")]
        public Input<bool>? AdminStateUp { get; set; }

        [Input("associatedRouters")]
        private InputList<string>? _associatedRouters;

        /// <summary>
        /// Router(s) to associate this firewall instance
        /// with. Must be a list of strings. Changing this updates the associated routers
        /// of an existing firewall. Conflicts with `no_routers`.
        /// </summary>
        public InputList<string> AssociatedRouters
        {
            get => _associatedRouters ?? (_associatedRouters = new InputList<string>());
            set => _associatedRouters = value;
        }

        /// <summary>
        /// A description for the firewall. Changing this
        /// updates the `description` of an existing firewall.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the firewall. Changing this
        /// updates the `name` of an existing firewall.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should this firewall not be associated with any routers
        /// (must be "true" or "false" if provide - defaults to "false").
        /// Conflicts with `associated_routers`.
        /// </summary>
        [Input("noRouters")]
        public Input<bool>? NoRouters { get; set; }

        /// <summary>
        /// The policy resource id for the firewall. Changing
        /// this updates the `policy_id` of an existing firewall.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// The region in which to obtain the v1 networking client.
        /// A networking client is needed to create a firewall. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new
        /// firewall.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The owner of the floating IP. Required if admin wants
        /// to create a firewall for another tenant. Changing this creates a new
        /// firewall.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("valueSpecs")]
        private InputMap<object>? _valueSpecs;

        /// <summary>
        /// Map of additional options.
        /// </summary>
        public InputMap<object> ValueSpecs
        {
            get => _valueSpecs ?? (_valueSpecs = new InputMap<object>());
            set => _valueSpecs = value;
        }

        public FirewallState()
        {
        }
    }
}
