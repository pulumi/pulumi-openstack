// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Dns
{
    public static class GetZoneShareV2
    {
        /// <summary>
        /// Use this data source to get information about a DNS zone share.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = OpenStack.Dns.GetZoneShareV2.Invoke(new()
        ///     {
        ///         ZoneId = "00000000-0000-0000-0000-000000000000",
        ///         TargetProjectId = "11111111-1111-1111-1111-111111111111",
        ///         ProjectId = "22222222-2222-2222-2222-222222222222",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZoneShareV2Result> InvokeAsync(GetZoneShareV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneShareV2Result>("openstack:dns/getZoneShareV2:getZoneShareV2", args ?? new GetZoneShareV2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a DNS zone share.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = OpenStack.Dns.GetZoneShareV2.Invoke(new()
        ///     {
        ///         ZoneId = "00000000-0000-0000-0000-000000000000",
        ///         TargetProjectId = "11111111-1111-1111-1111-111111111111",
        ///         ProjectId = "22222222-2222-2222-2222-222222222222",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneShareV2Result> Invoke(GetZoneShareV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneShareV2Result>("openstack:dns/getZoneShareV2:getZoneShareV2", args ?? new GetZoneShareV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a DNS zone share.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = OpenStack.Dns.GetZoneShareV2.Invoke(new()
        ///     {
        ///         ZoneId = "00000000-0000-0000-0000-000000000000",
        ///         TargetProjectId = "11111111-1111-1111-1111-111111111111",
        ///         ProjectId = "22222222-2222-2222-2222-222222222222",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneShareV2Result> Invoke(GetZoneShareV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneShareV2Result>("openstack:dns/getZoneShareV2:getZoneShareV2", args ?? new GetZoneShareV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneShareV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// If set to `True`, the data source will search
        /// across all projects. If set to `False`, it will only search within the
        /// current project. Defaults to `False`.
        /// </summary>
        [Input("allProjects")]
        public string? AllProjects { get; set; }

        /// <summary>
        /// The owner project ID. If omitted, it is derived
        /// from the zone share details.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 DNS client. If
        /// omitted, the `Region` argument of the provider is used. Changing this creates
        /// a new DNS zone share data source.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The ID of the DNS zone share to retrieve. If
        /// provided, the data source returns only the share with this ID.
        /// </summary>
        [Input("shareId")]
        public string? ShareId { get; set; }

        /// <summary>
        /// If provided, the data source returns the
        /// share with this target project ID.
        /// </summary>
        [Input("targetProjectId")]
        public string? TargetProjectId { get; set; }

        /// <summary>
        /// The ID of the DNS zone for which to get share.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetZoneShareV2Args()
        {
        }
        public static new GetZoneShareV2Args Empty => new GetZoneShareV2Args();
    }

    public sealed class GetZoneShareV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// If set to `True`, the data source will search
        /// across all projects. If set to `False`, it will only search within the
        /// current project. Defaults to `False`.
        /// </summary>
        [Input("allProjects")]
        public Input<string>? AllProjects { get; set; }

        /// <summary>
        /// The owner project ID. If omitted, it is derived
        /// from the zone share details.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 DNS client. If
        /// omitted, the `Region` argument of the provider is used. Changing this creates
        /// a new DNS zone share data source.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the DNS zone share to retrieve. If
        /// provided, the data source returns only the share with this ID.
        /// </summary>
        [Input("shareId")]
        public Input<string>? ShareId { get; set; }

        /// <summary>
        /// If provided, the data source returns the
        /// share with this target project ID.
        /// </summary>
        [Input("targetProjectId")]
        public Input<string>? TargetProjectId { get; set; }

        /// <summary>
        /// The ID of the DNS zone for which to get share.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetZoneShareV2InvokeArgs()
        {
        }
        public static new GetZoneShareV2InvokeArgs Empty => new GetZoneShareV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneShareV2Result
    {
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? AllProjects;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The ID of the zone share.
        /// </summary>
        public readonly string ShareId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? TargetProjectId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetZoneShareV2Result(
            string? allProjects,

            string id,

            string? projectId,

            string region,

            string shareId,

            string? targetProjectId,

            string zoneId)
        {
            AllProjects = allProjects;
            Id = id;
            ProjectId = projectId;
            Region = region;
            ShareId = shareId;
            TargetProjectId = targetProjectId;
            ZoneId = zoneId;
        }
    }
}
