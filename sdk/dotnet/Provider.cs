// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack
{
    /// <summary>
    /// The provider type for the openstack package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [OpenStackResourceType("pulumi:providers:openstack")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// Application Credential ID to login with.
        /// </summary>
        [Output("applicationCredentialId")]
        public Output<string?> ApplicationCredentialId { get; private set; } = null!;

        /// <summary>
        /// Application Credential name to login with.
        /// </summary>
        [Output("applicationCredentialName")]
        public Output<string?> ApplicationCredentialName { get; private set; } = null!;

        /// <summary>
        /// Application Credential secret to login with.
        /// </summary>
        [Output("applicationCredentialSecret")]
        public Output<string?> ApplicationCredentialSecret { get; private set; } = null!;

        /// <summary>
        /// The Identity authentication URL.
        /// </summary>
        [Output("authUrl")]
        public Output<string?> AuthUrl { get; private set; } = null!;

        /// <summary>
        /// A Custom CA certificate.
        /// </summary>
        [Output("cacertFile")]
        public Output<string?> CacertFile { get; private set; } = null!;

        /// <summary>
        /// A client certificate to authenticate with.
        /// </summary>
        [Output("cert")]
        public Output<string?> Cert { get; private set; } = null!;

        /// <summary>
        /// An entry in a `clouds.yaml` file to use.
        /// </summary>
        [Output("cloud")]
        public Output<string?> Cloud { get; private set; } = null!;

        /// <summary>
        /// The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
        /// </summary>
        [Output("defaultDomain")]
        public Output<string?> DefaultDomain { get; private set; } = null!;

        /// <summary>
        /// The ID of the Domain to scope to (Identity v3).
        /// </summary>
        [Output("domainId")]
        public Output<string?> DomainId { get; private set; } = null!;

        /// <summary>
        /// The name of the Domain to scope to (Identity v3).
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        [Output("endpointType")]
        public Output<string?> EndpointType { get; private set; } = null!;

        /// <summary>
        /// A client private key to authenticate with.
        /// </summary>
        [Output("key")]
        public Output<string?> Key { get; private set; } = null!;

        /// <summary>
        /// Password to login with.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain where the proejct resides (Identity v3).
        /// </summary>
        [Output("projectDomainId")]
        public Output<string?> ProjectDomainId { get; private set; } = null!;

        /// <summary>
        /// The name of the domain where the project resides (Identity v3).
        /// </summary>
        [Output("projectDomainName")]
        public Output<string?> ProjectDomainName { get; private set; } = null!;

        /// <summary>
        /// The OpenStack region to connect to.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;

        /// <summary>
        /// The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        [Output("tenantName")]
        public Output<string?> TenantName { get; private set; } = null!;

        /// <summary>
        /// Authentication token to use as an alternative to username/password.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain where the user resides (Identity v3).
        /// </summary>
        [Output("userDomainId")]
        public Output<string?> UserDomainId { get; private set; } = null!;

        /// <summary>
        /// The name of the domain where the user resides (Identity v3).
        /// </summary>
        [Output("userDomainName")]
        public Output<string?> UserDomainName { get; private set; } = null!;

        /// <summary>
        /// User ID to login with.
        /// </summary>
        [Output("userId")]
        public Output<string?> UserId { get; private set; } = null!;

        /// <summary>
        /// Username to login with.
        /// </summary>
        [Output("userName")]
        public Output<string?> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("openstack", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `false`, OpenStack authorization won't be perfomed automatically, if the initial auth token get expired.
        /// Defaults to `true`
        /// </summary>
        [Input("allowReauth", json: true)]
        public Input<bool>? AllowReauth { get; set; }

        /// <summary>
        /// Application Credential ID to login with.
        /// </summary>
        [Input("applicationCredentialId")]
        public Input<string>? ApplicationCredentialId { get; set; }

        /// <summary>
        /// Application Credential name to login with.
        /// </summary>
        [Input("applicationCredentialName")]
        public Input<string>? ApplicationCredentialName { get; set; }

        /// <summary>
        /// Application Credential secret to login with.
        /// </summary>
        [Input("applicationCredentialSecret")]
        public Input<string>? ApplicationCredentialSecret { get; set; }

        /// <summary>
        /// The Identity authentication URL.
        /// </summary>
        [Input("authUrl")]
        public Input<string>? AuthUrl { get; set; }

        /// <summary>
        /// A Custom CA certificate.
        /// </summary>
        [Input("cacertFile")]
        public Input<string>? CacertFile { get; set; }

        /// <summary>
        /// A client certificate to authenticate with.
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// An entry in a `clouds.yaml` file to use.
        /// </summary>
        [Input("cloud")]
        public Input<string>? Cloud { get; set; }

        /// <summary>
        /// The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
        /// </summary>
        [Input("defaultDomain")]
        public Input<string>? DefaultDomain { get; set; }

        /// <summary>
        /// If set to `false`, OpenStack authorization will be perfomed, every time the service provider client is called. Defaults
        /// to `true`.
        /// </summary>
        [Input("delayedAuth", json: true)]
        public Input<bool>? DelayedAuth { get; set; }

        /// <summary>
        /// If set to `true`, the HTTP `Cache-Control: no-cache` header will not be added by default to all API requests.
        /// </summary>
        [Input("disableNoCacheHeader", json: true)]
        public Input<bool>? DisableNoCacheHeader { get; set; }

        /// <summary>
        /// The ID of the Domain to scope to (Identity v3).
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// The name of the Domain to scope to (Identity v3).
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Outputs very verbose logs with all calls made to and responses from OpenStack
        /// </summary>
        [Input("enableLogging", json: true)]
        public Input<bool>? EnableLogging { get; set; }

        [Input("endpointOverrides", json: true)]
        private InputMap<string>? _endpointOverrides;

        /// <summary>
        /// A map of services with an endpoint to override what was from the Keystone catalog
        /// </summary>
        public InputMap<string> EndpointOverrides
        {
            get => _endpointOverrides ?? (_endpointOverrides = new InputMap<string>());
            set => _endpointOverrides = value;
        }

        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        /// <summary>
        /// Trust self-signed certificates.
        /// </summary>
        [Input("insecure", json: true)]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// A client private key to authenticate with.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// How many times HTTP connection should be retried until giving up.
        /// </summary>
        [Input("maxRetries", json: true)]
        public Input<int>? MaxRetries { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password to login with.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the domain where the proejct resides (Identity v3).
        /// </summary>
        [Input("projectDomainId")]
        public Input<string>? ProjectDomainId { get; set; }

        /// <summary>
        /// The name of the domain where the project resides (Identity v3).
        /// </summary>
        [Input("projectDomainName")]
        public Input<string>? ProjectDomainName { get; set; }

        /// <summary>
        /// The OpenStack region to connect to.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Use Swift's authentication system instead of Keystone. Only used for interaction with Swift.
        /// </summary>
        [Input("swauth", json: true)]
        public Input<bool>? Swauth { get; set; }

        /// <summary>
        /// If set to `true`, system scoped authorization will be enabled. Defaults to `false` (Identity v3).
        /// </summary>
        [Input("systemScope", json: true)]
        public Input<bool>? SystemScope { get; set; }

        /// <summary>
        /// The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        /// <summary>
        /// Authentication token to use as an alternative to username/password.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// The ID of the domain where the user resides (Identity v3).
        /// </summary>
        [Input("userDomainId")]
        public Input<string>? UserDomainId { get; set; }

        /// <summary>
        /// The name of the domain where the user resides (Identity v3).
        /// </summary>
        [Input("userDomainName")]
        public Input<string>? UserDomainName { get; set; }

        /// <summary>
        /// User ID to login with.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// Username to login with.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public ProviderArgs()
        {
            AllowReauth = Utilities.GetEnvBoolean("OS_ALLOW_REAUTH");
            Cloud = Utilities.GetEnv("OS_CLOUD");
            DelayedAuth = Utilities.GetEnvBoolean("OS_DELAYED_AUTH");
            EndpointType = Utilities.GetEnv("OS_ENDPOINT_TYPE");
            Insecure = Utilities.GetEnvBoolean("OS_INSECURE");
            Region = Utilities.GetEnv("OS_REGION_NAME");
            Swauth = Utilities.GetEnvBoolean("OS_SWAUTH");
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
