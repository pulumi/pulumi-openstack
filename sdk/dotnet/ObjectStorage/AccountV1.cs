// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.ObjectStorage
{
    /// <summary>
    /// Manages a V1 account resource within OpenStack.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account1 = new OpenStack.ObjectStorage.AccountV1("account_1", new()
    ///     {
    ///         Region = "RegionOne",
    ///         Metadata = 
    ///         {
    ///             { "Temp-Url-Key", "testkey" },
    ///             { "test", "true" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by specifying the project ID of the account:
    /// 
    /// ```sh
    /// $ pulumi import openstack:objectstorage/accountV1:AccountV1 account_1 1202b3d0aaa44cfc8b79475c007b0711
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:objectstorage/accountV1:AccountV1")]
    public partial class AccountV1 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of bytes used by the account.
        /// </summary>
        [Output("bytesUsed")]
        public Output<int> BytesUsed { get; private set; } = null!;

        /// <summary>
        /// The number of containers in the account.
        /// </summary>
        [Output("containerCount")]
        public Output<int> ContainerCount { get; private set; } = null!;

        /// <summary>
        /// A map of headers returned for the account.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableDictionary<string, string>> Headers { get; private set; } = null!;

        /// <summary>
        /// A map of custom key/value pairs to associate with the
        /// account metadata. Changing the `Quota-Bytes` key value is allowed to be
        /// updated only by the cloud administrator.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The number of objects in the account.
        /// </summary>
        [Output("objectCount")]
        public Output<int> ObjectCount { get; private set; } = null!;

        /// <summary>
        /// The project ID of the corresponding account. If
        /// omitted, the token's project ID is used. Changing this creates a new account.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The number of bytes allowed for the account.
        /// </summary>
        [Output("quotaBytes")]
        public Output<int> QuotaBytes { get; private set; } = null!;

        /// <summary>
        /// The region in which to create the account. If omitted,
        /// the `region` argument of the provider is used. Changing this creates a new
        /// account.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a AccountV1 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountV1(string name, AccountV1Args? args = null, CustomResourceOptions? options = null)
            : base("openstack:objectstorage/accountV1:AccountV1", name, args ?? new AccountV1Args(), MakeResourceOptions(options, ""))
        {
        }

        private AccountV1(string name, Input<string> id, AccountV1State? state = null, CustomResourceOptions? options = null)
            : base("openstack:objectstorage/accountV1:AccountV1", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountV1 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountV1 Get(string name, Input<string> id, AccountV1State? state = null, CustomResourceOptions? options = null)
        {
            return new AccountV1(name, id, state, options);
        }
    }

    public sealed class AccountV1Args : global::Pulumi.ResourceArgs
    {
        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom key/value pairs to associate with the
        /// account metadata. Changing the `Quota-Bytes` key value is allowed to be
        /// updated only by the cloud administrator.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The project ID of the corresponding account. If
        /// omitted, the token's project ID is used. Changing this creates a new account.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which to create the account. If omitted,
        /// the `region` argument of the provider is used. Changing this creates a new
        /// account.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public AccountV1Args()
        {
        }
        public static new AccountV1Args Empty => new AccountV1Args();
    }

    public sealed class AccountV1State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of bytes used by the account.
        /// </summary>
        [Input("bytesUsed")]
        public Input<int>? BytesUsed { get; set; }

        /// <summary>
        /// The number of containers in the account.
        /// </summary>
        [Input("containerCount")]
        public Input<int>? ContainerCount { get; set; }

        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// A map of headers returned for the account.
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A map of custom key/value pairs to associate with the
        /// account metadata. Changing the `Quota-Bytes` key value is allowed to be
        /// updated only by the cloud administrator.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The number of objects in the account.
        /// </summary>
        [Input("objectCount")]
        public Input<int>? ObjectCount { get; set; }

        /// <summary>
        /// The project ID of the corresponding account. If
        /// omitted, the token's project ID is used. Changing this creates a new account.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The number of bytes allowed for the account.
        /// </summary>
        [Input("quotaBytes")]
        public Input<int>? QuotaBytes { get; set; }

        /// <summary>
        /// The region in which to create the account. If omitted,
        /// the `region` argument of the provider is used. Changing this creates a new
        /// account.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public AccountV1State()
        {
        }
        public static new AccountV1State Empty => new AccountV1State();
    }
}
