// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.SharedFileSystem
{
    public static class GetSnapshot
    {
        /// <summary>
        /// Use this data source to get the ID of an available Shared File System snapshot.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var snapshot1 = OpenStack.SharedFileSystem.GetSnapshot.Invoke(new()
        ///     {
        ///         Name = "snapshot_1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSnapshotResult> InvokeAsync(GetSnapshotArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotResult>("openstack:sharedfilesystem/getSnapshot:getSnapshot", args ?? new GetSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the ID of an available Shared File System snapshot.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var snapshot1 = OpenStack.SharedFileSystem.GetSnapshot.Invoke(new()
        ///     {
        ///         Name = "snapshot_1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("openstack:sharedfilesystem/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The human-readable description of the snapshot.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The name of the snapshot.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Shared File System client.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The UUID of the source share that was used to create the snapshot.
        /// </summary>
        [Input("shareId")]
        public string? ShareId { get; set; }

        /// <summary>
        /// A snapshot status filter. A valid value is `available`, `error`,
        /// `creating`, `deleting`, `manage_starting`, `manage_error`, `unmanage_starting`,
        /// `unmanage_error` or `error_deleting`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetSnapshotArgs()
        {
        }
        public static new GetSnapshotArgs Empty => new GetSnapshotArgs();
    }

    public sealed class GetSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The human-readable description of the snapshot.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the snapshot.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Shared File System client.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The UUID of the source share that was used to create the snapshot.
        /// </summary>
        [Input("shareId")]
        public Input<string>? ShareId { get; set; }

        /// <summary>
        /// A snapshot status filter. A valid value is `available`, `error`,
        /// `creating`, `deleting`, `manage_starting`, `manage_error`, `unmanage_starting`,
        /// `unmanage_error` or `error_deleting`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetSnapshotInvokeArgs()
        {
        }
        public static new GetSnapshotInvokeArgs Empty => new GetSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotResult
    {
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string ProjectId;
        public readonly string Region;
        /// <summary>
        /// The UUID of the source share that was used to create the snapshot.
        /// </summary>
        public readonly string ShareId;
        /// <summary>
        /// The file system protocol of a share snapshot.
        /// </summary>
        public readonly string ShareProto;
        /// <summary>
        /// The share snapshot size, in GBs.
        /// </summary>
        public readonly int ShareSize;
        /// <summary>
        /// The snapshot size, in GBs.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetSnapshotResult(
            string description,

            string id,

            string name,

            string projectId,

            string region,

            string shareId,

            string shareProto,

            int shareSize,

            int size,

            string status)
        {
            Description = description;
            Id = id;
            Name = name;
            ProjectId = projectId;
            Region = region;
            ShareId = shareId;
            ShareProto = shareProto;
            ShareSize = shareSize;
            Size = size;
            Status = status;
        }
    }
}
