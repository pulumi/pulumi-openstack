// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.OpenStack
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("openstack");

        private static readonly __Value<bool?> _allowReauth = new __Value<bool?>(() => __config.GetBoolean("allowReauth") ?? Utilities.GetEnvBoolean("OS_ALLOW_REAUTH"));
        /// <summary>
        /// If set to `false`, OpenStack authorization won't be perfomed automatically, if the initial auth token get expired.
        /// Defaults to `true`
        /// </summary>
        public static bool? AllowReauth
        {
            get => _allowReauth.Get();
            set => _allowReauth.Set(value);
        }

        private static readonly __Value<string?> _applicationCredentialId = new __Value<string?>(() => __config.Get("applicationCredentialId"));
        /// <summary>
        /// Application Credential ID to login with.
        /// </summary>
        public static string? ApplicationCredentialId
        {
            get => _applicationCredentialId.Get();
            set => _applicationCredentialId.Set(value);
        }

        private static readonly __Value<string?> _applicationCredentialName = new __Value<string?>(() => __config.Get("applicationCredentialName"));
        /// <summary>
        /// Application Credential name to login with.
        /// </summary>
        public static string? ApplicationCredentialName
        {
            get => _applicationCredentialName.Get();
            set => _applicationCredentialName.Set(value);
        }

        private static readonly __Value<string?> _applicationCredentialSecret = new __Value<string?>(() => __config.Get("applicationCredentialSecret"));
        /// <summary>
        /// Application Credential secret to login with.
        /// </summary>
        public static string? ApplicationCredentialSecret
        {
            get => _applicationCredentialSecret.Get();
            set => _applicationCredentialSecret.Set(value);
        }

        private static readonly __Value<string?> _authUrl = new __Value<string?>(() => __config.Get("authUrl"));
        /// <summary>
        /// The Identity authentication URL.
        /// </summary>
        public static string? AuthUrl
        {
            get => _authUrl.Get();
            set => _authUrl.Set(value);
        }

        private static readonly __Value<string?> _cacertFile = new __Value<string?>(() => __config.Get("cacertFile"));
        /// <summary>
        /// A Custom CA certificate.
        /// </summary>
        public static string? CacertFile
        {
            get => _cacertFile.Get();
            set => _cacertFile.Set(value);
        }

        private static readonly __Value<string?> _cert = new __Value<string?>(() => __config.Get("cert"));
        /// <summary>
        /// A client certificate to authenticate with.
        /// </summary>
        public static string? Cert
        {
            get => _cert.Get();
            set => _cert.Set(value);
        }

        private static readonly __Value<string?> _cloud = new __Value<string?>(() => __config.Get("cloud") ?? Utilities.GetEnv("OS_CLOUD"));
        /// <summary>
        /// An entry in a `clouds.yaml` file to use.
        /// </summary>
        public static string? Cloud
        {
            get => _cloud.Get();
            set => _cloud.Set(value);
        }

        private static readonly __Value<string?> _defaultDomain = new __Value<string?>(() => __config.Get("defaultDomain"));
        /// <summary>
        /// The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
        /// </summary>
        public static string? DefaultDomain
        {
            get => _defaultDomain.Get();
            set => _defaultDomain.Set(value);
        }

        private static readonly __Value<bool?> _delayedAuth = new __Value<bool?>(() => __config.GetBoolean("delayedAuth") ?? Utilities.GetEnvBoolean("OS_DELAYED_AUTH"));
        /// <summary>
        /// If set to `false`, OpenStack authorization will be perfomed, every time the service provider client is called. Defaults
        /// to `true`.
        /// </summary>
        public static bool? DelayedAuth
        {
            get => _delayedAuth.Get();
            set => _delayedAuth.Set(value);
        }

        private static readonly __Value<bool?> _disableNoCacheHeader = new __Value<bool?>(() => __config.GetBoolean("disableNoCacheHeader"));
        /// <summary>
        /// If set to `true`, the HTTP `Cache-Control: no-cache` header will not be added by default to all API requests.
        /// </summary>
        public static bool? DisableNoCacheHeader
        {
            get => _disableNoCacheHeader.Get();
            set => _disableNoCacheHeader.Set(value);
        }

        private static readonly __Value<string?> _domainId = new __Value<string?>(() => __config.Get("domainId"));
        /// <summary>
        /// The ID of the Domain to scope to (Identity v3).
        /// </summary>
        public static string? DomainId
        {
            get => _domainId.Get();
            set => _domainId.Set(value);
        }

        private static readonly __Value<string?> _domainName = new __Value<string?>(() => __config.Get("domainName"));
        /// <summary>
        /// The name of the Domain to scope to (Identity v3).
        /// </summary>
        public static string? DomainName
        {
            get => _domainName.Get();
            set => _domainName.Set(value);
        }

        private static readonly __Value<bool?> _enableLogging = new __Value<bool?>(() => __config.GetBoolean("enableLogging"));
        /// <summary>
        /// Outputs very verbose logs with all calls made to and responses from OpenStack
        /// </summary>
        public static bool? EnableLogging
        {
            get => _enableLogging.Get();
            set => _enableLogging.Set(value);
        }

        private static readonly __Value<ImmutableDictionary<string, object>?> _endpointOverrides = new __Value<ImmutableDictionary<string, object>?>(() => __config.GetObject<ImmutableDictionary<string, object>>("endpointOverrides"));
        /// <summary>
        /// A map of services with an endpoint to override what was from the Keystone catalog
        /// </summary>
        public static ImmutableDictionary<string, object>? EndpointOverrides
        {
            get => _endpointOverrides.Get();
            set => _endpointOverrides.Set(value);
        }

        private static readonly __Value<string?> _endpointType = new __Value<string?>(() => __config.Get("endpointType") ?? Utilities.GetEnv("OS_ENDPOINT_TYPE"));
        public static string? EndpointType
        {
            get => _endpointType.Get();
            set => _endpointType.Set(value);
        }

        private static readonly __Value<bool?> _insecure = new __Value<bool?>(() => __config.GetBoolean("insecure") ?? Utilities.GetEnvBoolean("OS_INSECURE"));
        /// <summary>
        /// Trust self-signed certificates.
        /// </summary>
        public static bool? Insecure
        {
            get => _insecure.Get();
            set => _insecure.Set(value);
        }

        private static readonly __Value<string?> _key = new __Value<string?>(() => __config.Get("key"));
        /// <summary>
        /// A client private key to authenticate with.
        /// </summary>
        public static string? Key
        {
            get => _key.Get();
            set => _key.Set(value);
        }

        private static readonly __Value<int?> _maxRetries = new __Value<int?>(() => __config.GetInt32("maxRetries"));
        /// <summary>
        /// How many times HTTP connection should be retried until giving up.
        /// </summary>
        public static int? MaxRetries
        {
            get => _maxRetries.Get();
            set => _maxRetries.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// Password to login with.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<string?> _projectDomainId = new __Value<string?>(() => __config.Get("projectDomainId"));
        /// <summary>
        /// The ID of the domain where the proejct resides (Identity v3).
        /// </summary>
        public static string? ProjectDomainId
        {
            get => _projectDomainId.Get();
            set => _projectDomainId.Set(value);
        }

        private static readonly __Value<string?> _projectDomainName = new __Value<string?>(() => __config.Get("projectDomainName"));
        /// <summary>
        /// The name of the domain where the project resides (Identity v3).
        /// </summary>
        public static string? ProjectDomainName
        {
            get => _projectDomainName.Get();
            set => _projectDomainName.Set(value);
        }

        private static readonly __Value<string?> _region = new __Value<string?>(() => __config.Get("region") ?? Utilities.GetEnv("OS_REGION_NAME"));
        /// <summary>
        /// The OpenStack region to connect to.
        /// </summary>
        public static string? Region
        {
            get => _region.Get();
            set => _region.Set(value);
        }

        private static readonly __Value<bool?> _swauth = new __Value<bool?>(() => __config.GetBoolean("swauth") ?? Utilities.GetEnvBoolean("OS_SWAUTH"));
        /// <summary>
        /// Use Swift's authentication system instead of Keystone. Only used for interaction with Swift.
        /// </summary>
        public static bool? Swauth
        {
            get => _swauth.Get();
            set => _swauth.Set(value);
        }

        private static readonly __Value<bool?> _systemScope = new __Value<bool?>(() => __config.GetBoolean("systemScope"));
        /// <summary>
        /// If set to `true`, system scoped authorization will be enabled. Defaults to `false` (Identity v3).
        /// </summary>
        public static bool? SystemScope
        {
            get => _systemScope.Get();
            set => _systemScope.Set(value);
        }

        private static readonly __Value<string?> _tenantId = new __Value<string?>(() => __config.Get("tenantId"));
        /// <summary>
        /// The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        public static string? TenantId
        {
            get => _tenantId.Get();
            set => _tenantId.Set(value);
        }

        private static readonly __Value<string?> _tenantName = new __Value<string?>(() => __config.Get("tenantName"));
        /// <summary>
        /// The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        public static string? TenantName
        {
            get => _tenantName.Get();
            set => _tenantName.Set(value);
        }

        private static readonly __Value<string?> _token = new __Value<string?>(() => __config.Get("token"));
        /// <summary>
        /// Authentication token to use as an alternative to username/password.
        /// </summary>
        public static string? Token
        {
            get => _token.Get();
            set => _token.Set(value);
        }

        private static readonly __Value<bool?> _useOctavia = new __Value<bool?>(() => __config.GetBoolean("useOctavia") ?? Utilities.GetEnvBoolean("OS_USE_OCTAVIA"));
        /// <summary>
        /// If set to `true`, API requests will go the Load Balancer service (Octavia) instead of the Networking service (Neutron).
        /// </summary>
        public static bool? UseOctavia
        {
            get => _useOctavia.Get();
            set => _useOctavia.Set(value);
        }

        private static readonly __Value<string?> _userDomainId = new __Value<string?>(() => __config.Get("userDomainId"));
        /// <summary>
        /// The ID of the domain where the user resides (Identity v3).
        /// </summary>
        public static string? UserDomainId
        {
            get => _userDomainId.Get();
            set => _userDomainId.Set(value);
        }

        private static readonly __Value<string?> _userDomainName = new __Value<string?>(() => __config.Get("userDomainName"));
        /// <summary>
        /// The name of the domain where the user resides (Identity v3).
        /// </summary>
        public static string? UserDomainName
        {
            get => _userDomainName.Get();
            set => _userDomainName.Set(value);
        }

        private static readonly __Value<string?> _userId = new __Value<string?>(() => __config.Get("userId"));
        /// <summary>
        /// User ID to login with.
        /// </summary>
        public static string? UserId
        {
            get => _userId.Get();
            set => _userId.Set(value);
        }

        private static readonly __Value<string?> _userName = new __Value<string?>(() => __config.Get("userName"));
        /// <summary>
        /// Username to login with.
        /// </summary>
        public static string? UserName
        {
            get => _userName.Get();
            set => _userName.Set(value);
        }

    }
}
