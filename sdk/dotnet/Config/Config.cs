// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;

namespace Pulumi.OpenStack
{
    public static class Config
    {
        private static readonly Pulumi.Config __config = new Pulumi.Config("openstack");

        /// <summary>
        /// Application Credential ID to login with.
        /// </summary>
        public static string? ApplicationCredentialId { get; set; } = __config.Get("applicationCredentialId");

        /// <summary>
        /// Application Credential name to login with.
        /// </summary>
        public static string? ApplicationCredentialName { get; set; } = __config.Get("applicationCredentialName");

        /// <summary>
        /// Application Credential secret to login with.
        /// </summary>
        public static string? ApplicationCredentialSecret { get; set; } = __config.Get("applicationCredentialSecret");

        /// <summary>
        /// The Identity authentication URL.
        /// </summary>
        public static string? AuthUrl { get; set; } = __config.Get("authUrl") ?? Utilities.GetEnv("OS_AUTH_URL");

        /// <summary>
        /// A Custom CA certificate.
        /// </summary>
        public static string? CacertFile { get; set; } = __config.Get("cacertFile") ?? Utilities.GetEnv("OS_CACERT");

        /// <summary>
        /// A client certificate to authenticate with.
        /// </summary>
        public static string? Cert { get; set; } = __config.Get("cert") ?? Utilities.GetEnv("OS_CERT");

        /// <summary>
        /// An entry in a `clouds.yaml` file to use.
        /// </summary>
        public static string? Cloud { get; set; } = __config.Get("cloud") ?? Utilities.GetEnv("OS_CLOUD");

        /// <summary>
        /// The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
        /// </summary>
        public static string? DefaultDomain { get; set; } = __config.Get("defaultDomain") ?? Utilities.GetEnv("OS_DEFAULT_DOMAIN") ?? "default";

        /// <summary>
        /// If set to `true`, OpenStack authorization will be perfomed, when the service provider client is called.
        /// </summary>
        public static bool? DelayedAuth { get; set; } = __config.GetBoolean("delayedAuth");

        /// <summary>
        /// If set to `true`, the HTTP `Cache-Control: no-cache` header will not be added by default to all API
        /// requests.
        /// </summary>
        public static bool? DisableNoCacheHeader { get; set; } = __config.GetBoolean("disableNoCacheHeader");

        /// <summary>
        /// The ID of the Domain to scope to (Identity v3).
        /// </summary>
        public static string? DomainId { get; set; } = __config.Get("domainId") ?? Utilities.GetEnv("OS_DOMAIN_ID");

        /// <summary>
        /// The name of the Domain to scope to (Identity v3).
        /// </summary>
        public static string? DomainName { get; set; } = __config.Get("domainName") ?? Utilities.GetEnv("OS_DOMAIN_NAME");

        /// <summary>
        /// A map of services with an endpoint to override what was from the Keystone catalog
        /// </summary>
        public static ImmutableDictionary<string, object>? EndpointOverrides { get; set; } = __config.GetObject<ImmutableDictionary<string, object>>("endpointOverrides");

        public static string? EndpointType { get; set; } = __config.Get("endpointType") ?? Utilities.GetEnv("OS_ENDPOINT_TYPE");

        /// <summary>
        /// Trust self-signed certificates.
        /// </summary>
        public static bool? Insecure { get; set; } = __config.GetBoolean("insecure") ?? Utilities.GetEnvBoolean("OS_INSECURE");

        /// <summary>
        /// A client private key to authenticate with.
        /// </summary>
        public static string? Key { get; set; } = __config.Get("key") ?? Utilities.GetEnv("OS_KEY");

        /// <summary>
        /// How many times HTTP connection should be retried until giving up.
        /// </summary>
        public static int? MaxRetries { get; set; } = __config.GetInt32("maxRetries");

        /// <summary>
        /// Password to login with.
        /// </summary>
        public static string? Password { get; set; } = __config.Get("password") ?? Utilities.GetEnv("OS_PASSWORD");

        /// <summary>
        /// The ID of the domain where the proejct resides (Identity v3).
        /// </summary>
        public static string? ProjectDomainId { get; set; } = __config.Get("projectDomainId") ?? Utilities.GetEnv("OS_PROJECT_DOMAIN_ID");

        /// <summary>
        /// The name of the domain where the project resides (Identity v3).
        /// </summary>
        public static string? ProjectDomainName { get; set; } = __config.Get("projectDomainName") ?? Utilities.GetEnv("OS_PROJECT_DOMAIN_NAME");

        /// <summary>
        /// The OpenStack region to connect to.
        /// </summary>
        public static string? Region { get; set; } = __config.Get("region") ?? Utilities.GetEnv("OS_REGION_NAME");

        /// <summary>
        /// Use Swift's authentication system instead of Keystone. Only used for interaction with Swift.
        /// </summary>
        public static bool? Swauth { get; set; } = __config.GetBoolean("swauth") ?? Utilities.GetEnvBoolean("OS_SWAUTH");

        /// <summary>
        /// The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        public static string? TenantId { get; set; } = __config.Get("tenantId") ?? Utilities.GetEnv("OS_TENANT_ID", "OS_PROJECT_ID");

        /// <summary>
        /// The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
        /// </summary>
        public static string? TenantName { get; set; } = __config.Get("tenantName") ?? Utilities.GetEnv("OS_TENANT_NAME", "OS_PROJECT_NAME");

        /// <summary>
        /// Authentication token to use as an alternative to username/password.
        /// </summary>
        public static string? Token { get; set; } = __config.Get("token") ?? Utilities.GetEnv("OS_TOKEN", "OS_AUTH_TOKEN");

        /// <summary>
        /// If set to `true`, API requests will go the Load Balancer service (Octavia) instead of the Networking service
        /// (Neutron).
        /// </summary>
        public static bool? UseOctavia { get; set; } = __config.GetBoolean("useOctavia") ?? Utilities.GetEnvBoolean("OS_USE_OCTAVIA");

        /// <summary>
        /// The ID of the domain where the user resides (Identity v3).
        /// </summary>
        public static string? UserDomainId { get; set; } = __config.Get("userDomainId") ?? Utilities.GetEnv("OS_USER_DOMAIN_ID");

        /// <summary>
        /// The name of the domain where the user resides (Identity v3).
        /// </summary>
        public static string? UserDomainName { get; set; } = __config.Get("userDomainName") ?? Utilities.GetEnv("OS_USER_DOMAIN_NAME");

        /// <summary>
        /// Username to login with.
        /// </summary>
        public static string? UserId { get; set; } = __config.Get("userId") ?? Utilities.GetEnv("OS_USER_ID");

        /// <summary>
        /// Username to login with.
        /// </summary>
        public static string? UserName { get; set; } = __config.Get("userName") ?? Utilities.GetEnv("OS_USERNAME");

    }
    namespace ConfigTypes
    {
    }
}
