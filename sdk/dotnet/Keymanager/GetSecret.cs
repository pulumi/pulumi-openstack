// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.KeyManager
{
    public static partial class Invokes
    {
        /// <summary>
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/d/keymanager_secret_v1.html.markdown.
        /// </summary>
        public static Task<GetSecretResult> GetSecret(GetSecretArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecretResult>("openstack:keymanager/getSecret:getSecret", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetSecretArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Select the Secret with an ACL that contains the user.
        /// Project scope is ignored. Defaults to `false`.
        /// </summary>
        [Input("aclOnly")]
        public Input<bool>? AclOnly { get; set; }

        /// <summary>
        /// The Secret algorithm.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// The Secret bit length.
        /// </summary>
        [Input("bitLength")]
        public Input<int>? BitLength { get; set; }

        /// <summary>
        /// Date filter to select the Secret with
        /// created matching the specified criteria. See Date Filters below for more
        /// detail.
        /// </summary>
        [Input("createdAtFilter")]
        public Input<string>? CreatedAtFilter { get; set; }

        /// <summary>
        /// Date filter to select the Secret with
        /// expiration matching the specified criteria. See Date Filters below for more
        /// detail.
        /// </summary>
        [Input("expirationFilter")]
        public Input<string>? ExpirationFilter { get; set; }

        /// <summary>
        /// The Secret mode.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The Secret name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V1 KeyManager client.
        /// A KeyManager client is needed to fetch a secret. If omitted, the `region`
        /// argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The Secret type. For more information see
        /// [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).
        /// </summary>
        [Input("secretType")]
        public Input<string>? SecretType { get; set; }

        /// <summary>
        /// Date filter to select the Secret with
        /// updated matching the specified criteria. See Date Filters below for more
        /// detail.
        /// </summary>
        [Input("updatedAtFilter")]
        public Input<string>? UpdatedAtFilter { get; set; }

        public GetSecretArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetSecretResult
    {
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly bool? AclOnly;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? Algorithm;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly int? BitLength;
        /// <summary>
        /// The map of the content types, assigned on the secret.
        /// </summary>
        public readonly ImmutableDictionary<string, object> ContentTypes;
        /// <summary>
        /// The date the secret was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? CreatedAtFilter;
        /// <summary>
        /// The creator of the secret.
        /// </summary>
        public readonly string CreatorId;
        /// <summary>
        /// The date the secret will expire.
        /// </summary>
        public readonly string Expiration;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? ExpirationFilter;
        /// <summary>
        /// The map of metadata, assigned on the secret, which has been
        /// explicitly and implicitly added.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Metadata;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The secret payload.
        /// </summary>
        public readonly string Payload;
        /// <summary>
        /// The Secret encoding.
        /// </summary>
        public readonly string PayloadContentEncoding;
        /// <summary>
        /// The Secret content type.
        /// </summary>
        public readonly string PayloadContentType;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The secret reference / where to find the secret.
        /// </summary>
        public readonly string SecretRef;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? SecretType;
        /// <summary>
        /// The status of the secret.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The date the secret was last updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string? UpdatedAtFilter;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetSecretResult(
            bool? aclOnly,
            string? algorithm,
            int? bitLength,
            ImmutableDictionary<string, object> contentTypes,
            string createdAt,
            string? createdAtFilter,
            string creatorId,
            string expiration,
            string? expirationFilter,
            ImmutableDictionary<string, object> metadata,
            string? mode,
            string? name,
            string payload,
            string payloadContentEncoding,
            string payloadContentType,
            string? region,
            string secretRef,
            string? secretType,
            string status,
            string updatedAt,
            string? updatedAtFilter,
            string id)
        {
            AclOnly = aclOnly;
            Algorithm = algorithm;
            BitLength = bitLength;
            ContentTypes = contentTypes;
            CreatedAt = createdAt;
            CreatedAtFilter = createdAtFilter;
            CreatorId = creatorId;
            Expiration = expiration;
            ExpirationFilter = expirationFilter;
            Metadata = metadata;
            Mode = mode;
            Name = name;
            Payload = payload;
            PayloadContentEncoding = payloadContentEncoding;
            PayloadContentType = payloadContentType;
            Region = region;
            SecretRef = secretRef;
            SecretType = secretType;
            Status = status;
            UpdatedAt = updatedAt;
            UpdatedAtFilter = updatedAtFilter;
            Id = id;
        }
    }
}
