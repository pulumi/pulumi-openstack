// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.BlockStorage
{
    public static class GetVolumeV3
    {
        /// <summary>
        /// Use this data source to get information about an existing volume.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var volume1 = OpenStack.BlockStorage.GetVolumeV3.Invoke(new()
        ///     {
        ///         Name = "volume_1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVolumeV3Result> InvokeAsync(GetVolumeV3Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeV3Result>("openstack:blockstorage/getVolumeV3:getVolumeV3", args ?? new GetVolumeV3Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about an existing volume.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var volume1 = OpenStack.BlockStorage.GetVolumeV3.Invoke(new()
        ///     {
        ///         Name = "volume_1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVolumeV3Result> Invoke(GetVolumeV3InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeV3Result>("openstack:blockstorage/getVolumeV3:getVolumeV3", args ?? new GetVolumeV3InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeV3Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Indicates if the volume is bootable.
        /// </summary>
        [Input("bootable")]
        public string? Bootable { get; set; }

        /// <summary>
        /// The OpenStack host on which the volume is located.
        /// </summary>
        [Input("host")]
        public string? Host { get; set; }

        [Input("metadata")]
        private Dictionary<string, object>? _metadata;

        /// <summary>
        /// Metadata key/value pairs associated with the volume.
        /// </summary>
        public Dictionary<string, object> Metadata
        {
            get => _metadata ?? (_metadata = new Dictionary<string, object>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the volume.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V3 Block Storage
        /// client. If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The status of the volume.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The type of the volume.
        /// </summary>
        [Input("volumeType")]
        public string? VolumeType { get; set; }

        public GetVolumeV3Args()
        {
        }
        public static new GetVolumeV3Args Empty => new GetVolumeV3Args();
    }

    public sealed class GetVolumeV3InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Indicates if the volume is bootable.
        /// </summary>
        [Input("bootable")]
        public Input<string>? Bootable { get; set; }

        /// <summary>
        /// The OpenStack host on which the volume is located.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("metadata")]
        private InputMap<object>? _metadata;

        /// <summary>
        /// Metadata key/value pairs associated with the volume.
        /// </summary>
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the volume.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V3 Block Storage
        /// client. If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The status of the volume.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of the volume.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public GetVolumeV3InvokeArgs()
        {
        }
        public static new GetVolumeV3InvokeArgs Empty => new GetVolumeV3InvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeV3Result
    {
        /// <summary>
        /// If a volume is attached to an instance, this attribute will
        /// display the Attachment ID, Instance ID, and the Device as the Instance
        /// sees it.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeV3AttachmentResult> Attachments;
        /// <summary>
        /// Indicates if the volume is bootable.
        /// </summary>
        public readonly string Bootable;
        /// <summary>
        /// The OpenStack host on which the volume is located.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Metadata;
        /// <summary>
        /// Indicates if the volume can be attached to more then one server.
        /// </summary>
        public readonly bool Multiattach;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The size of the volume in GBs.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The ID of the volume from which the current volume was created.
        /// </summary>
        public readonly string SourceVolumeId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The type of the volume.
        /// </summary>
        public readonly string VolumeType;

        [OutputConstructor]
        private GetVolumeV3Result(
            ImmutableArray<Outputs.GetVolumeV3AttachmentResult> attachments,

            string bootable,

            string host,

            string id,

            ImmutableDictionary<string, object> metadata,

            bool multiattach,

            string name,

            string region,

            int size,

            string sourceVolumeId,

            string status,

            string volumeType)
        {
            Attachments = attachments;
            Bootable = bootable;
            Host = host;
            Id = id;
            Metadata = metadata;
            Multiattach = multiattach;
            Name = name;
            Region = region;
            Size = size;
            SourceVolumeId = sourceVolumeId;
            Status = status;
            VolumeType = volumeType;
        }
    }
}
