// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.BlockStorage
{
    public static class GetQuotasetV3
    {
        /// <summary>
        /// Use this data source to get the blockstorage quotaset v3 of an OpenStack project.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var quota = OpenStack.BlockStorage.GetQuotasetV3.Invoke(new()
        ///     {
        ///         ProjectId = "2e367a3d29f94fd988e6ec54e305ec9d",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetQuotasetV3Result> InvokeAsync(GetQuotasetV3Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQuotasetV3Result>("openstack:blockstorage/getQuotasetV3:getQuotasetV3", args ?? new GetQuotasetV3Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the blockstorage quotaset v3 of an OpenStack project.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var quota = OpenStack.BlockStorage.GetQuotasetV3.Invoke(new()
        ///     {
        ///         ProjectId = "2e367a3d29f94fd988e6ec54e305ec9d",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetQuotasetV3Result> Invoke(GetQuotasetV3InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQuotasetV3Result>("openstack:blockstorage/getQuotasetV3:getQuotasetV3", args ?? new GetQuotasetV3InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQuotasetV3Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the project to retrieve the quotaset.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V3 Blockstorage client.
        /// If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetQuotasetV3Args()
        {
        }
        public static new GetQuotasetV3Args Empty => new GetQuotasetV3Args();
    }

    public sealed class GetQuotasetV3InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the project to retrieve the quotaset.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V3 Blockstorage client.
        /// If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetQuotasetV3InvokeArgs()
        {
        }
        public static new GetQuotasetV3InvokeArgs Empty => new GetQuotasetV3InvokeArgs();
    }


    [OutputType]
    public sealed class GetQuotasetV3Result
    {
        /// <summary>
        /// The size (GB) of backups that are allowed.
        /// </summary>
        public readonly int BackupGigabytes;
        /// <summary>
        /// The number of backups that are allowed.
        /// </summary>
        public readonly int Backups;
        /// <summary>
        /// The size (GB) of volumes and snapshots that are allowed.
        /// </summary>
        public readonly int Gigabytes;
        /// <summary>
        /// The number of groups that are allowed.
        /// </summary>
        public readonly int Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The size (GB) of volumes that are allowed for each volume.
        /// </summary>
        public readonly int PerVolumeGigabytes;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The number of snapshots that are allowed.
        /// </summary>
        public readonly int Snapshots;
        /// <summary>
        /// Map with gigabytes_{volume_type}, snapshots_{volume_type}, volumes_{volume_type} for each volume type.
        /// </summary>
        public readonly ImmutableDictionary<string, object> VolumeTypeQuota;
        /// <summary>
        /// The number of volumes that are allowed.
        /// </summary>
        public readonly int Volumes;

        [OutputConstructor]
        private GetQuotasetV3Result(
            int backupGigabytes,

            int backups,

            int gigabytes,

            int groups,

            string id,

            int perVolumeGigabytes,

            string projectId,

            string region,

            int snapshots,

            ImmutableDictionary<string, object> volumeTypeQuota,

            int volumes)
        {
            BackupGigabytes = backupGigabytes;
            Backups = backups;
            Gigabytes = gigabytes;
            Groups = groups;
            Id = id;
            PerVolumeGigabytes = perVolumeGigabytes;
            ProjectId = projectId;
            Region = region;
            Snapshots = snapshots;
            VolumeTypeQuota = volumeTypeQuota;
            Volumes = volumes;
        }
    }
}
