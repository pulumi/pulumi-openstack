// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Compute
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to get the ID of an available OpenStack flavor.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/d/compute_flavor_v2.html.markdown.
        /// </summary>
        public static Task<GetFlavorResult> GetFlavor(GetFlavorArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFlavorResult>("openstack:compute/getFlavor:getFlavor", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetFlavorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The exact amount of disk (in gigabytes).
        /// </summary>
        [Input("disk")]
        public Input<int>? Disk { get; set; }

        /// <summary>
        /// The ID of the flavor. Conflicts with the `name`,
        /// `min_ram` and `min_disk`
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// The minimum amount of disk (in gigabytes). Conflicts
        /// with the `flavor_id`.
        /// </summary>
        [Input("minDisk")]
        public Input<int>? MinDisk { get; set; }

        /// <summary>
        /// The minimum amount of RAM (in megabytes). Conflicts
        /// with the `flavor_id`.
        /// </summary>
        [Input("minRam")]
        public Input<int>? MinRam { get; set; }

        /// <summary>
        /// The name of the flavor. Conflicts with the `flavor_id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The exact amount of RAM (in megabytes).
        /// </summary>
        [Input("ram")]
        public Input<int>? Ram { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The `rx_tx_factor` of the flavor.
        /// </summary>
        [Input("rxTxFactor")]
        public Input<double>? RxTxFactor { get; set; }

        /// <summary>
        /// The amount of swap (in gigabytes).
        /// </summary>
        [Input("swap")]
        public Input<int>? Swap { get; set; }

        /// <summary>
        /// The amount of VCPUs.
        /// </summary>
        [Input("vcpus")]
        public Input<int>? Vcpus { get; set; }

        public GetFlavorArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetFlavorResult
    {
        public readonly int? Disk;
        /// <summary>
        /// Key/Value pairs of metadata for the flavor.
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraSpecs;
        public readonly string? FlavorId;
        /// <summary>
        /// Whether the flavor is public or private.
        /// </summary>
        public readonly bool IsPublic;
        public readonly int? MinDisk;
        public readonly int? MinRam;
        public readonly string? Name;
        public readonly int? Ram;
        public readonly string Region;
        public readonly double? RxTxFactor;
        public readonly int? Swap;
        public readonly int? Vcpus;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetFlavorResult(
            int? disk,
            ImmutableDictionary<string, object> extraSpecs,
            string? flavorId,
            bool isPublic,
            int? minDisk,
            int? minRam,
            string? name,
            int? ram,
            string region,
            double? rxTxFactor,
            int? swap,
            int? vcpus,
            string id)
        {
            Disk = disk;
            ExtraSpecs = extraSpecs;
            FlavorId = flavorId;
            IsPublic = isPublic;
            MinDisk = minDisk;
            MinRam = minRam;
            Name = name;
            Ram = ram;
            Region = region;
            RxTxFactor = rxTxFactor;
            Swap = swap;
            Vcpus = vcpus;
            Id = id;
        }
    }
}
