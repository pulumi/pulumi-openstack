// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Compute
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/compute_keypair_v2.html.markdown.
    /// </summary>
    public partial class Keypair : Pulumi.CustomResource
    {
        /// <summary>
        /// The fingerprint of the public key.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// A unique name for the keypair. Changing this creates a new
        /// keypair.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The generated private key when no public key is specified.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// A pregenerated OpenSSH-formatted public key.
        /// Changing this creates a new keypair. If a public key is not specified, then
        /// a public/private key pair will be automatically generated. If a pair is
        /// created, then destroying this resource means you will lose access to that
        /// keypair forever.
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// Keypairs are associated with accounts, but a Compute client is needed to
        /// create one. If omitted, the `region` argument of the provider is used.
        /// Changing this creates a new keypair.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Map of additional options.
        /// </summary>
        [Output("valueSpecs")]
        public Output<ImmutableDictionary<string, object>?> ValueSpecs { get; private set; } = null!;


        /// <summary>
        /// Create a Keypair resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Keypair(string name, KeypairArgs? args = null, CustomResourceOptions? options = null)
            : base("openstack:compute/keypair:Keypair", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Keypair(string name, Input<string> id, KeypairState? state = null, CustomResourceOptions? options = null)
            : base("openstack:compute/keypair:Keypair", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Keypair resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Keypair Get(string name, Input<string> id, KeypairState? state = null, CustomResourceOptions? options = null)
        {
            return new Keypair(name, id, state, options);
        }
    }

    public sealed class KeypairArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique name for the keypair. Changing this creates a new
        /// keypair.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A pregenerated OpenSSH-formatted public key.
        /// Changing this creates a new keypair. If a public key is not specified, then
        /// a public/private key pair will be automatically generated. If a pair is
        /// created, then destroying this resource means you will lose access to that
        /// keypair forever.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// Keypairs are associated with accounts, but a Compute client is needed to
        /// create one. If omitted, the `region` argument of the provider is used.
        /// Changing this creates a new keypair.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("valueSpecs")]
        private InputMap<object>? _valueSpecs;

        /// <summary>
        /// Map of additional options.
        /// </summary>
        public InputMap<object> ValueSpecs
        {
            get => _valueSpecs ?? (_valueSpecs = new InputMap<object>());
            set => _valueSpecs = value;
        }

        public KeypairArgs()
        {
        }
    }

    public sealed class KeypairState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The fingerprint of the public key.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// A unique name for the keypair. Changing this creates a new
        /// keypair.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The generated private key when no public key is specified.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// A pregenerated OpenSSH-formatted public key.
        /// Changing this creates a new keypair. If a public key is not specified, then
        /// a public/private key pair will be automatically generated. If a pair is
        /// created, then destroying this resource means you will lose access to that
        /// keypair forever.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// Keypairs are associated with accounts, but a Compute client is needed to
        /// create one. If omitted, the `region` argument of the provider is used.
        /// Changing this creates a new keypair.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("valueSpecs")]
        private InputMap<object>? _valueSpecs;

        /// <summary>
        /// Map of additional options.
        /// </summary>
        public InputMap<object> ValueSpecs
        {
            get => _valueSpecs ?? (_valueSpecs = new InputMap<object>());
            set => _valueSpecs = value;
        }

        public KeypairState()
        {
        }
    }
}
