// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Compute
{
    public static class GetAggregateV2
    {
        /// <summary>
        /// Use this data source to get information about host aggregates
        /// by name.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = OpenStack.Compute.GetAggregateV2.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetAggregateV2Result> InvokeAsync(GetAggregateV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAggregateV2Result>("openstack:compute/getAggregateV2:getAggregateV2", args ?? new GetAggregateV2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about host aggregates
        /// by name.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = OpenStack.Compute.GetAggregateV2.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetAggregateV2Result> Invoke(GetAggregateV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAggregateV2Result>("openstack:compute/getAggregateV2:getAggregateV2", args ?? new GetAggregateV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAggregateV2Args : global::Pulumi.InvokeArgs
    {
        [Input("hosts")]
        private List<string>? _hosts;

        /// <summary>
        /// List of Hypervisors contained in the Host Aggregate
        /// </summary>
        public List<string> Hosts
        {
            get => _hosts ?? (_hosts = new List<string>());
            set => _hosts = value;
        }

        [Input("metadata")]
        private Dictionary<string, string>? _metadata;

        /// <summary>
        /// Metadata of the Host Aggregate
        /// </summary>
        public Dictionary<string, string> Metadata
        {
            get => _metadata ?? (_metadata = new Dictionary<string, string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the host aggregate
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetAggregateV2Args()
        {
        }
        public static new GetAggregateV2Args Empty => new GetAggregateV2Args();
    }

    public sealed class GetAggregateV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// List of Hypervisors contained in the Host Aggregate
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Metadata of the Host Aggregate
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the host aggregate
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetAggregateV2InvokeArgs()
        {
        }
        public static new GetAggregateV2InvokeArgs Empty => new GetAggregateV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetAggregateV2Result
    {
        /// <summary>
        /// List of Hypervisors contained in the Host Aggregate
        /// </summary>
        public readonly ImmutableArray<string> Hosts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Metadata of the Host Aggregate
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Availability zone of the Host Aggregate
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetAggregateV2Result(
            ImmutableArray<string> hosts,

            string id,

            ImmutableDictionary<string, string> metadata,

            string name,

            string zone)
        {
            Hosts = hosts;
            Id = id;
            Metadata = metadata;
            Name = name;
            Zone = zone;
        }
    }
}
