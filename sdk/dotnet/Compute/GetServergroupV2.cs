// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Compute
{
    public static class GetServergroupV2
    {
        /// <summary>
        /// Use this data source to get information about server groups
        /// by name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = OpenStack.Compute.GetServergroupV2.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServergroupV2Result> InvokeAsync(GetServergroupV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServergroupV2Result>("openstack:compute/getServergroupV2:getServergroupV2", args ?? new GetServergroupV2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about server groups
        /// by name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = OpenStack.Compute.GetServergroupV2.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServergroupV2Result> Invoke(GetServergroupV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServergroupV2Result>("openstack:compute/getServergroupV2:getServergroupV2", args ?? new GetServergroupV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about server groups
        /// by name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = OpenStack.Compute.GetServergroupV2.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServergroupV2Result> Invoke(GetServergroupV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServergroupV2Result>("openstack:compute/getServergroupV2:getServergroupV2", args ?? new GetServergroupV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServergroupV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the server group.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// If omitted, the `Region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetServergroupV2Args()
        {
        }
        public static new GetServergroupV2Args Empty => new GetServergroupV2Args();
    }

    public sealed class GetServergroupV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the server group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// If omitted, the `Region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetServergroupV2InvokeArgs()
        {
        }
        public static new GetServergroupV2InvokeArgs Empty => new GetServergroupV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetServergroupV2Result
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The instances that are part of this server group.
        /// </summary>
        public readonly ImmutableArray<string> Members;
        /// <summary>
        /// Metadata of the server group.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Policy name associated with the server group.
        /// </summary>
        public readonly ImmutableArray<string> Policies;
        /// <summary>
        /// Project ID of the server group.
        /// </summary>
        public readonly string ProjectId;
        public readonly string Region;
        /// <summary>
        /// Rules which are applied to specified policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServergroupV2RuleResult> Rules;
        /// <summary>
        /// User ID of the server group.
        /// </summary>
        public readonly string UserId;

        [OutputConstructor]
        private GetServergroupV2Result(
            string id,

            ImmutableArray<string> members,

            ImmutableDictionary<string, string> metadata,

            string name,

            ImmutableArray<string> policies,

            string projectId,

            string region,

            ImmutableArray<Outputs.GetServergroupV2RuleResult> rules,

            string userId)
        {
            Id = id;
            Members = members;
            Metadata = metadata;
            Name = name;
            Policies = policies;
            ProjectId = projectId;
            Region = region;
            Rules = rules;
            UserId = userId;
        }
    }
}
