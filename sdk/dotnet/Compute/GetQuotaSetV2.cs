// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Compute
{
    public static class GetQuotaSetV2
    {
        /// <summary>
        /// Use this data source to get the compute quotaset of an OpenStack project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var quota = OpenStack.Compute.GetQuotaSetV2.Invoke(new()
        ///     {
        ///         ProjectId = "2e367a3d29f94fd988e6ec54e305ec9d",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetQuotaSetV2Result> InvokeAsync(GetQuotaSetV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQuotaSetV2Result>("openstack:compute/getQuotaSetV2:getQuotaSetV2", args ?? new GetQuotaSetV2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the compute quotaset of an OpenStack project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var quota = OpenStack.Compute.GetQuotaSetV2.Invoke(new()
        ///     {
        ///         ProjectId = "2e367a3d29f94fd988e6ec54e305ec9d",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetQuotaSetV2Result> Invoke(GetQuotaSetV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQuotaSetV2Result>("openstack:compute/getQuotaSetV2:getQuotaSetV2", args ?? new GetQuotaSetV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the compute quotaset of an OpenStack project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var quota = OpenStack.Compute.GetQuotaSetV2.Invoke(new()
        ///     {
        ///         ProjectId = "2e367a3d29f94fd988e6ec54e305ec9d",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetQuotaSetV2Result> Invoke(GetQuotaSetV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetQuotaSetV2Result>("openstack:compute/getQuotaSetV2:getQuotaSetV2", args ?? new GetQuotaSetV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQuotaSetV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the project to retrieve the quotaset.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetQuotaSetV2Args()
        {
        }
        public static new GetQuotaSetV2Args Empty => new GetQuotaSetV2Args();
    }

    public sealed class GetQuotaSetV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the project to retrieve the quotaset.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Compute client.
        /// If omitted, the `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetQuotaSetV2InvokeArgs()
        {
        }
        public static new GetQuotaSetV2InvokeArgs Empty => new GetQuotaSetV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetQuotaSetV2Result
    {
        /// <summary>
        /// The number of allowed server cores.
        /// </summary>
        public readonly int Cores;
        /// <summary>
        /// The number of allowed fixed IP addresses. Available until version 2.35.
        /// </summary>
        public readonly int FixedIps;
        /// <summary>
        /// The number of allowed floating IP addresses. Available until version 2.35.
        /// </summary>
        public readonly int FloatingIps;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of allowed bytes of content for each injected file. Available until version 2.56.
        /// </summary>
        public readonly int InjectedFileContentBytes;
        /// <summary>
        /// The number of allowed bytes for each injected file path. Available until version 2.56.
        /// </summary>
        public readonly int InjectedFilePathBytes;
        /// <summary>
        /// The number of allowed injected files. Available until version 2.56.
        /// </summary>
        public readonly int InjectedFiles;
        /// <summary>
        /// The number of allowed servers.
        /// </summary>
        public readonly int Instances;
        /// <summary>
        /// The number of allowed key pairs for each user.
        /// </summary>
        public readonly int KeyPairs;
        /// <summary>
        /// The number of allowed metadata items for each server.
        /// </summary>
        public readonly int MetadataItems;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The amount of allowed server RAM, in MiB.
        /// </summary>
        public readonly int Ram;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The number of allowed rules for each security group. Available until version 2.35.
        /// </summary>
        public readonly int SecurityGroupRules;
        /// <summary>
        /// The number of allowed security groups. Available until version 2.35.
        /// </summary>
        public readonly int SecurityGroups;
        /// <summary>
        /// The number of allowed members for each server group.
        /// </summary>
        public readonly int ServerGroupMembers;
        /// <summary>
        /// The number of allowed server groups.
        /// </summary>
        public readonly int ServerGroups;

        [OutputConstructor]
        private GetQuotaSetV2Result(
            int cores,

            int fixedIps,

            int floatingIps,

            string id,

            int injectedFileContentBytes,

            int injectedFilePathBytes,

            int injectedFiles,

            int instances,

            int keyPairs,

            int metadataItems,

            string projectId,

            int ram,

            string region,

            int securityGroupRules,

            int securityGroups,

            int serverGroupMembers,

            int serverGroups)
        {
            Cores = cores;
            FixedIps = fixedIps;
            FloatingIps = floatingIps;
            Id = id;
            InjectedFileContentBytes = injectedFileContentBytes;
            InjectedFilePathBytes = injectedFilePathBytes;
            InjectedFiles = injectedFiles;
            Instances = instances;
            KeyPairs = keyPairs;
            MetadataItems = metadataItems;
            ProjectId = projectId;
            Ram = ram;
            Region = region;
            SecurityGroupRules = securityGroupRules;
            SecurityGroups = securityGroups;
            ServerGroupMembers = serverGroupMembers;
            ServerGroups = serverGroups;
        }
    }
}
