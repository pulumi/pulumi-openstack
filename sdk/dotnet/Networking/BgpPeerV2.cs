// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Networking
{
    /// <summary>
    /// Manages a V2 Neutron BGP Peer resource within OpenStack.
    /// 
    /// This resource allows you to configure a BGP peer that can be associated with a
    /// BGP speaker to exchange routing information.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var peer1 = new OpenStack.Networking.BgpPeerV2("peer_1", new()
    ///     {
    ///         Name = "bgp_peer_1",
    ///         PeerIp = "192.0.2.10",
    ///         RemoteAs = 65001,
    ///         AuthType = "md5",
    ///         Password = "supersecret",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BGP peers can be imported using their ID:
    /// 
    /// ```sh
    /// $ pulumi import openstack:networking/bgpPeerV2:BgpPeerV2 peer1 a1b2c3d4-e5f6-7890-abcd-1234567890ef
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:networking/bgpPeerV2:BgpPeerV2")]
    public partial class BgpPeerV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authentication type to use. Can be one of `none`
        /// or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
        /// must also be provided. Changing this creates a new BGP peer.
        /// </summary>
        [Output("authType")]
        public Output<string?> AuthType { get; private set; } = null!;

        /// <summary>
        /// A name for the BGP peer.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password used for MD5 authentication. Must be set
        /// only when `auth_type` is not `none`.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The IP address of the BGP peer. Must be a valid IP
        /// address. Changing this creates a new BGP peer.
        /// </summary>
        [Output("peerIp")]
        public Output<string> PeerIp { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron network. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new BGP
        /// peer.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The AS number of the BGP peer. Changing this
        /// creates a new BGP peer.
        /// </summary>
        [Output("remoteAs")]
        public Output<int> RemoteAs { get; private set; } = null!;

        /// <summary>
        /// The tenant/project ID. Required if admin privileges
        /// are used. Changing this creates a new BGP peer.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a BgpPeerV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BgpPeerV2(string name, BgpPeerV2Args args, CustomResourceOptions? options = null)
            : base("openstack:networking/bgpPeerV2:BgpPeerV2", name, args ?? new BgpPeerV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private BgpPeerV2(string name, Input<string> id, BgpPeerV2State? state = null, CustomResourceOptions? options = null)
            : base("openstack:networking/bgpPeerV2:BgpPeerV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BgpPeerV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BgpPeerV2 Get(string name, Input<string> id, BgpPeerV2State? state = null, CustomResourceOptions? options = null)
        {
            return new BgpPeerV2(name, id, state, options);
        }
    }

    public sealed class BgpPeerV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication type to use. Can be one of `none`
        /// or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
        /// must also be provided. Changing this creates a new BGP peer.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// A name for the BGP peer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password used for MD5 authentication. Must be set
        /// only when `auth_type` is not `none`.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The IP address of the BGP peer. Must be a valid IP
        /// address. Changing this creates a new BGP peer.
        /// </summary>
        [Input("peerIp", required: true)]
        public Input<string> PeerIp { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron network. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new BGP
        /// peer.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The AS number of the BGP peer. Changing this
        /// creates a new BGP peer.
        /// </summary>
        [Input("remoteAs", required: true)]
        public Input<int> RemoteAs { get; set; } = null!;

        /// <summary>
        /// The tenant/project ID. Required if admin privileges
        /// are used. Changing this creates a new BGP peer.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public BgpPeerV2Args()
        {
        }
        public static new BgpPeerV2Args Empty => new BgpPeerV2Args();
    }

    public sealed class BgpPeerV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication type to use. Can be one of `none`
        /// or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
        /// must also be provided. Changing this creates a new BGP peer.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// A name for the BGP peer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password used for MD5 authentication. Must be set
        /// only when `auth_type` is not `none`.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The IP address of the BGP peer. Must be a valid IP
        /// address. Changing this creates a new BGP peer.
        /// </summary>
        [Input("peerIp")]
        public Input<string>? PeerIp { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron network. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new BGP
        /// peer.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The AS number of the BGP peer. Changing this
        /// creates a new BGP peer.
        /// </summary>
        [Input("remoteAs")]
        public Input<int>? RemoteAs { get; set; }

        /// <summary>
        /// The tenant/project ID. Required if admin privileges
        /// are used. Changing this creates a new BGP peer.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public BgpPeerV2State()
        {
        }
        public static new BgpPeerV2State Empty => new BgpPeerV2State();
    }
}
