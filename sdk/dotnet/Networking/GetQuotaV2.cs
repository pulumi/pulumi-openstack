// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Networking
{
    public static class GetQuotaV2
    {
        /// <summary>
        /// Use this data source to get the networking quota of an OpenStack project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var quota = Output.Create(OpenStack.Networking.GetQuotaV2.InvokeAsync(new OpenStack.Networking.GetQuotaV2Args
        ///         {
        ///             ProjectId = "2e367a3d29f94fd988e6ec54e305ec9d",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetQuotaV2Result> InvokeAsync(GetQuotaV2Args args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetQuotaV2Result>("openstack:networking/getQuotaV2:getQuotaV2", args ?? new GetQuotaV2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the networking quota of an OpenStack project.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var quota = Output.Create(OpenStack.Networking.GetQuotaV2.InvokeAsync(new OpenStack.Networking.GetQuotaV2Args
        ///         {
        ///             ProjectId = "2e367a3d29f94fd988e6ec54e305ec9d",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetQuotaV2Result> Invoke(GetQuotaV2InvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetQuotaV2Result>("openstack:networking/getQuotaV2:getQuotaV2", args ?? new GetQuotaV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQuotaV2Args : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the project to retrieve the quota.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetQuotaV2Args()
        {
        }
    }

    public sealed class GetQuotaV2InvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the project to retrieve the quota.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetQuotaV2InvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetQuotaV2Result
    {
        /// <summary>
        /// The number of allowed floating ips.
        /// </summary>
        public readonly int Floatingip;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of allowed networks.
        /// </summary>
        public readonly int Network;
        /// <summary>
        /// The number of allowed ports.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The number of allowed rbac policies.
        /// </summary>
        public readonly int RbacPolicy;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The amount of allowed routers.
        /// </summary>
        public readonly int Router;
        /// <summary>
        /// The number of allowed security groups.
        /// </summary>
        public readonly int SecurityGroup;
        /// <summary>
        /// The number of allowed security group rules.
        /// </summary>
        public readonly int SecurityGroupRule;
        /// <summary>
        /// The number of allowed subnets.
        /// * `subnetpool-` - The number of allowed subnet pools.
        /// </summary>
        public readonly int Subnet;
        public readonly int Subnetpool;

        [OutputConstructor]
        private GetQuotaV2Result(
            int floatingip,

            string id,

            int network,

            int port,

            string projectId,

            int rbacPolicy,

            string region,

            int router,

            int securityGroup,

            int securityGroupRule,

            int subnet,

            int subnetpool)
        {
            Floatingip = floatingip;
            Id = id;
            Network = network;
            Port = port;
            ProjectId = projectId;
            RbacPolicy = rbacPolicy;
            Region = region;
            Router = router;
            SecurityGroup = securityGroup;
            SecurityGroupRule = securityGroupRule;
            Subnet = subnet;
            Subnetpool = subnetpool;
        }
    }
}
