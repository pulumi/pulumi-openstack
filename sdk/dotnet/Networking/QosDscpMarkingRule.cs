// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Networking
{
    /// <summary>
    /// Manages a V2 Neutron QoS DSCP marking rule resource within OpenStack.
    /// 
    /// ## Example Usage
    /// ### Create a QoS Policy with some DSCP marking rule
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var qosPolicy1 = new OpenStack.Networking.QosPolicy("qosPolicy1", new OpenStack.Networking.QosPolicyArgs
    ///         {
    ///             Description = "dscp_mark",
    ///         });
    ///         var dscpMarkingRule1 = new OpenStack.Networking.QosDscpMarkingRule("dscpMarkingRule1", new OpenStack.Networking.QosDscpMarkingRuleArgs
    ///         {
    ///             DscpMark = 26,
    ///             QosPolicyId = qosPolicy1.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class QosDscpMarkingRule : Pulumi.CustomResource
    {
        /// <summary>
        /// The value of DSCP mark. Changing this updates the DSCP mark value existing
        /// QoS DSCP marking rule.
        /// </summary>
        [Output("dscpMark")]
        public Output<int> DscpMark { get; private set; } = null!;

        /// <summary>
        /// The QoS policy reference. Changing this creates a new QoS DSCP marking rule.
        /// </summary>
        [Output("qosPolicyId")]
        public Output<string> QosPolicyId { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron QoS DSCP marking rule. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new QoS DSCP marking rule.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a QosDscpMarkingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QosDscpMarkingRule(string name, QosDscpMarkingRuleArgs args, CustomResourceOptions? options = null)
            : base("openstack:networking/qosDscpMarkingRule:QosDscpMarkingRule", name, args ?? new QosDscpMarkingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QosDscpMarkingRule(string name, Input<string> id, QosDscpMarkingRuleState? state = null, CustomResourceOptions? options = null)
            : base("openstack:networking/qosDscpMarkingRule:QosDscpMarkingRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QosDscpMarkingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QosDscpMarkingRule Get(string name, Input<string> id, QosDscpMarkingRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new QosDscpMarkingRule(name, id, state, options);
        }
    }

    public sealed class QosDscpMarkingRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value of DSCP mark. Changing this updates the DSCP mark value existing
        /// QoS DSCP marking rule.
        /// </summary>
        [Input("dscpMark", required: true)]
        public Input<int> DscpMark { get; set; } = null!;

        /// <summary>
        /// The QoS policy reference. Changing this creates a new QoS DSCP marking rule.
        /// </summary>
        [Input("qosPolicyId", required: true)]
        public Input<string> QosPolicyId { get; set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron QoS DSCP marking rule. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new QoS DSCP marking rule.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public QosDscpMarkingRuleArgs()
        {
        }
    }

    public sealed class QosDscpMarkingRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value of DSCP mark. Changing this updates the DSCP mark value existing
        /// QoS DSCP marking rule.
        /// </summary>
        [Input("dscpMark")]
        public Input<int>? DscpMark { get; set; }

        /// <summary>
        /// The QoS policy reference. Changing this creates a new QoS DSCP marking rule.
        /// </summary>
        [Input("qosPolicyId")]
        public Input<string>? QosPolicyId { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron QoS DSCP marking rule. If omitted, the
        /// `region` argument of the provider is used. Changing this creates a new QoS DSCP marking rule.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public QosDscpMarkingRuleState()
        {
        }
    }
}
