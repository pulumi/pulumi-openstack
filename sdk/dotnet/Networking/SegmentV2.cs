// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Networking
{
    /// <summary>
    /// Manages a Neutron network segment resource within OpenStack.
    /// 
    /// &gt; **Note:** This resource is only available if the Neutron service is
    /// configured with the `Segments` extension.
    /// 
    /// &gt; **Note:** This ussually requires admin privileges to create or manage
    /// segments.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net1 = new OpenStack.Networking.Network("net_1", new()
    ///     {
    ///         Name = "demo-net",
    ///     });
    /// 
    ///     var segment1 = new OpenStack.Networking.SegmentV2("segment_1", new()
    ///     {
    ///         Name = "flat-segment",
    ///         Description = "Example flat segment",
    ///         NetworkId = net1.Id,
    ///         NetworkType = "flat",
    ///         PhysicalNetwork = "public",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported by specifying the segment ID:
    /// 
    /// ```sh
    /// $ pulumi import openstack:networking/segmentV2:SegmentV2 segment1 a5e3a494-26ee-4fde-ad26-2d846c47072e
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:networking/segmentV2:SegmentV2")]
    public partial class SegmentV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp (RFC3339 format).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A description for the segment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A name for the segment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The UUID of the network this segment belongs to.
        /// Changing this will create a new segment.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The network type. Valid values depend on the
        /// backend (e.g., `Vlan`, `Vxlan`, `Flat`, `Gre`, `Geneve`, `Local`). Changing
        /// this will create a new segment.
        /// </summary>
        [Output("networkType")]
        public Output<string> NetworkType { get; private set; } = null!;

        /// <summary>
        /// The name of the physical network. Changing this
        /// will create a new segment.
        /// </summary>
        [Output("physicalNetwork")]
        public Output<string?> PhysicalNetwork { get; private set; } = null!;

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron network. If omitted, the
        /// `Region` argument of the provider is used. Changing this creates a new
        /// segment.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The revision number of the segment.
        /// </summary>
        [Output("revisionNumber")]
        public Output<int> RevisionNumber { get; private set; } = null!;

        /// <summary>
        /// A segmentation identifier. Changing is allowed
        /// only for `Vlan`.
        /// </summary>
        [Output("segmentationId")]
        public Output<int> SegmentationId { get; private set; } = null!;

        /// <summary>
        /// Last update timestamp (RFC3339 format).
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a SegmentV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SegmentV2(string name, SegmentV2Args args, CustomResourceOptions? options = null)
            : base("openstack:networking/segmentV2:SegmentV2", name, args ?? new SegmentV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private SegmentV2(string name, Input<string> id, SegmentV2State? state = null, CustomResourceOptions? options = null)
            : base("openstack:networking/segmentV2:SegmentV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SegmentV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SegmentV2 Get(string name, Input<string> id, SegmentV2State? state = null, CustomResourceOptions? options = null)
        {
            return new SegmentV2(name, id, state, options);
        }
    }

    public sealed class SegmentV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the segment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the segment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The UUID of the network this segment belongs to.
        /// Changing this will create a new segment.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The network type. Valid values depend on the
        /// backend (e.g., `Vlan`, `Vxlan`, `Flat`, `Gre`, `Geneve`, `Local`). Changing
        /// this will create a new segment.
        /// </summary>
        [Input("networkType", required: true)]
        public Input<string> NetworkType { get; set; } = null!;

        /// <summary>
        /// The name of the physical network. Changing this
        /// will create a new segment.
        /// </summary>
        [Input("physicalNetwork")]
        public Input<string>? PhysicalNetwork { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron network. If omitted, the
        /// `Region` argument of the provider is used. Changing this creates a new
        /// segment.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// A segmentation identifier. Changing is allowed
        /// only for `Vlan`.
        /// </summary>
        [Input("segmentationId")]
        public Input<int>? SegmentationId { get; set; }

        public SegmentV2Args()
        {
        }
        public static new SegmentV2Args Empty => new SegmentV2Args();
    }

    public sealed class SegmentV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp (RFC3339 format).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A description for the segment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the segment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The UUID of the network this segment belongs to.
        /// Changing this will create a new segment.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The network type. Valid values depend on the
        /// backend (e.g., `Vlan`, `Vxlan`, `Flat`, `Gre`, `Geneve`, `Local`). Changing
        /// this will create a new segment.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The name of the physical network. Changing this
        /// will create a new segment.
        /// </summary>
        [Input("physicalNetwork")]
        public Input<string>? PhysicalNetwork { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Networking client.
        /// A Networking client is needed to create a Neutron network. If omitted, the
        /// `Region` argument of the provider is used. Changing this creates a new
        /// segment.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The revision number of the segment.
        /// </summary>
        [Input("revisionNumber")]
        public Input<int>? RevisionNumber { get; set; }

        /// <summary>
        /// A segmentation identifier. Changing is allowed
        /// only for `Vlan`.
        /// </summary>
        [Input("segmentationId")]
        public Input<int>? SegmentationId { get; set; }

        /// <summary>
        /// Last update timestamp (RFC3339 format).
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public SegmentV2State()
        {
        }
        public static new SegmentV2State Empty => new SegmentV2State();
    }
}
