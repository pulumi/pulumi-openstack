// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Networking
{
    /// <summary>
    /// Creates routing entries on a OpenStack V2 router.
    /// 
    /// &gt; **Note:** This resource uses the OpenStack Neutron `extraroute-atomic`
    /// extension. If your environment does not have this extension, you should use the
    /// `openstack.networking.RouterRoute` resource to add routes instead.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using OpenStack = Pulumi.OpenStack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var router1 = new OpenStack.Networking.Router("router_1", new()
    ///     {
    ///         Name = "router_1",
    ///         AdminStateUp = true,
    ///     });
    /// 
    ///     var network1 = new OpenStack.Networking.Network("network_1", new()
    ///     {
    ///         Name = "network_1",
    ///         AdminStateUp = true,
    ///     });
    /// 
    ///     var subnet1 = new OpenStack.Networking.Subnet("subnet_1", new()
    ///     {
    ///         NetworkId = network1.Id,
    ///         Cidr = "192.168.199.0/24",
    ///         IpVersion = 4,
    ///     });
    /// 
    ///     var int1 = new OpenStack.Networking.RouterInterface("int_1", new()
    ///     {
    ///         RouterId = router1.Id,
    ///         SubnetId = subnet1.Id,
    ///     });
    /// 
    ///     var routerRoutes1 = new OpenStack.Networking.RouterRoutesV2("router_routes_1", new()
    ///     {
    ///         RouterId = int1.RouterId,
    ///         Routes = new[]
    ///         {
    ///             new OpenStack.Networking.Inputs.RouterRoutesV2RouteArgs
    ///             {
    ///                 DestinationCidr = "10.0.1.0/24",
    ///                 NextHop = "192.168.199.254",
    ///             },
    ///             new OpenStack.Networking.Inputs.RouterRoutesV2RouteArgs
    ///             {
    ///                 DestinationCidr = "10.0.2.0/24",
    ///                 NextHop = "192.168.199.254",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Notes
    /// 
    /// The `NextHop` IP address must be directly reachable from the router at the
    /// ``openstack.networking.RouterRoutesV2`` resource creation time.  You can
    /// ensure that by explicitly specifying a dependency on the
    /// ``openstack.networking.RouterInterface`` resource that connects the next
    /// hop to the router, as in the example above.
    /// 
    /// ## Import
    /// 
    /// Routing entries can be imported using a router `id`:
    /// 
    /// ```sh
    /// $ pulumi import openstack:networking/routerRoutesV2:RouterRoutesV2 router_routes_1 686fe248-386c-4f70-9f6c-281607dad079
    /// ```
    /// </summary>
    [OpenStackResourceType("openstack:networking/routerRoutesV2:RouterRoutesV2")]
    public partial class RouterRoutesV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The region in which to obtain the V2 networking client.
        /// A networking client is needed to configure routing entres on a router. If
        /// omitted, the `Region` argument of the provider is used. Changing this creates
        /// new routing entries.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// ID of the router these routing entries belong to.
        /// Changing this creates new routing entries.
        /// </summary>
        [Output("routerId")]
        public Output<string> RouterId { get; private set; } = null!;

        /// <summary>
        /// A set of routing entries to add to the router.
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.RouterRoutesV2Route>> Routes { get; private set; } = null!;


        /// <summary>
        /// Create a RouterRoutesV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouterRoutesV2(string name, RouterRoutesV2Args args, CustomResourceOptions? options = null)
            : base("openstack:networking/routerRoutesV2:RouterRoutesV2", name, args ?? new RouterRoutesV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private RouterRoutesV2(string name, Input<string> id, RouterRoutesV2State? state = null, CustomResourceOptions? options = null)
            : base("openstack:networking/routerRoutesV2:RouterRoutesV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouterRoutesV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouterRoutesV2 Get(string name, Input<string> id, RouterRoutesV2State? state = null, CustomResourceOptions? options = null)
        {
            return new RouterRoutesV2(name, id, state, options);
        }
    }

    public sealed class RouterRoutesV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The region in which to obtain the V2 networking client.
        /// A networking client is needed to configure routing entres on a router. If
        /// omitted, the `Region` argument of the provider is used. Changing this creates
        /// new routing entries.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ID of the router these routing entries belong to.
        /// Changing this creates new routing entries.
        /// </summary>
        [Input("routerId", required: true)]
        public Input<string> RouterId { get; set; } = null!;

        [Input("routes")]
        private InputList<Inputs.RouterRoutesV2RouteArgs>? _routes;

        /// <summary>
        /// A set of routing entries to add to the router.
        /// </summary>
        public InputList<Inputs.RouterRoutesV2RouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.RouterRoutesV2RouteArgs>());
            set => _routes = value;
        }

        public RouterRoutesV2Args()
        {
        }
        public static new RouterRoutesV2Args Empty => new RouterRoutesV2Args();
    }

    public sealed class RouterRoutesV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The region in which to obtain the V2 networking client.
        /// A networking client is needed to configure routing entres on a router. If
        /// omitted, the `Region` argument of the provider is used. Changing this creates
        /// new routing entries.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ID of the router these routing entries belong to.
        /// Changing this creates new routing entries.
        /// </summary>
        [Input("routerId")]
        public Input<string>? RouterId { get; set; }

        [Input("routes")]
        private InputList<Inputs.RouterRoutesV2RouteGetArgs>? _routes;

        /// <summary>
        /// A set of routing entries to add to the router.
        /// </summary>
        public InputList<Inputs.RouterRoutesV2RouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.RouterRoutesV2RouteGetArgs>());
            set => _routes = value;
        }

        public RouterRoutesV2State()
        {
        }
        public static new RouterRoutesV2State Empty => new RouterRoutesV2State();
    }
}
