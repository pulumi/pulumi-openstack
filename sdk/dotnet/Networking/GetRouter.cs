// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Networking
{
    public static class GetRouter
    {
        /// <summary>
        /// Use this data source to get the ID of an available OpenStack router.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRouterResult> InvokeAsync(GetRouterArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRouterResult>("openstack:networking/getRouter:getRouter", args ?? new GetRouterArgs(), options.WithVersion());
    }


    public sealed class GetRouterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Administrative up/down status for the router (must be "true" or "false" if provided).
        /// </summary>
        [Input("adminStateUp")]
        public bool? AdminStateUp { get; set; }

        /// <summary>
        /// Human-readable description of the router.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Indicates whether or not to get a distributed router.
        /// </summary>
        [Input("distributed")]
        public bool? Distributed { get; set; }

        /// <summary>
        /// The value that points out if the Source NAT is enabled on the router.
        /// </summary>
        [Input("enableSnat")]
        public bool? EnableSnat { get; set; }

        /// <summary>
        /// The name of the router.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Neutron client.
        /// A Neutron client is needed to retrieve router ids. If omitted, the
        /// `region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The UUID of the router resource.
        /// </summary>
        [Input("routerId")]
        public string? RouterId { get; set; }

        /// <summary>
        /// The status of the router (ACTIVE/DOWN).
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// The list of router tags to filter.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The owner of the router.
        /// </summary>
        [Input("tenantId")]
        public string? TenantId { get; set; }

        public GetRouterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRouterResult
    {
        public readonly bool? AdminStateUp;
        /// <summary>
        /// The set of string tags applied on the router.
        /// </summary>
        public readonly ImmutableArray<string> AllTags;
        /// <summary>
        /// The availability zone that is used to make router resources highly available.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZoneHints;
        public readonly string? Description;
        public readonly bool? Distributed;
        /// <summary>
        /// The value that points out if the Source NAT is enabled on the router.
        /// </summary>
        public readonly bool EnableSnat;
        /// <summary>
        /// The external fixed IPs of the router.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouterExternalFixedIpResult> ExternalFixedIps;
        /// <summary>
        /// The network UUID of an external gateway for the router.
        /// </summary>
        public readonly string ExternalNetworkId;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string? Region;
        public readonly string? RouterId;
        public readonly string? Status;
        public readonly ImmutableArray<string> Tags;
        public readonly string? TenantId;

        [OutputConstructor]
        private GetRouterResult(
            bool? adminStateUp,

            ImmutableArray<string> allTags,

            ImmutableArray<string> availabilityZoneHints,

            string? description,

            bool? distributed,

            bool enableSnat,

            ImmutableArray<Outputs.GetRouterExternalFixedIpResult> externalFixedIps,

            string externalNetworkId,

            string id,

            string? name,

            string? region,

            string? routerId,

            string? status,

            ImmutableArray<string> tags,

            string? tenantId)
        {
            AdminStateUp = adminStateUp;
            AllTags = allTags;
            AvailabilityZoneHints = availabilityZoneHints;
            Description = description;
            Distributed = distributed;
            EnableSnat = enableSnat;
            ExternalFixedIps = externalFixedIps;
            ExternalNetworkId = externalNetworkId;
            Id = id;
            Name = name;
            Region = region;
            RouterId = routerId;
            Status = status;
            Tags = tags;
            TenantId = tenantId;
        }
    }
}
