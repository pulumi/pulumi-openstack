// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Networking
{
    public static class GetSegmentV2
    {
        /// <summary>
        /// Use this data source to get the ID of an available OpenStack network.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network = OpenStack.Networking.GetSegmentV2.Invoke(new()
        ///     {
        ///         Name = "tf_test_segment",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSegmentV2Result> InvokeAsync(GetSegmentV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSegmentV2Result>("openstack:networking/getSegmentV2:getSegmentV2", args ?? new GetSegmentV2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the ID of an available OpenStack network.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network = OpenStack.Networking.GetSegmentV2.Invoke(new()
        ///     {
        ///         Name = "tf_test_segment",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSegmentV2Result> Invoke(GetSegmentV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSegmentV2Result>("openstack:networking/getSegmentV2:getSegmentV2", args ?? new GetSegmentV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the ID of an available OpenStack network.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using OpenStack = Pulumi.OpenStack;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network = OpenStack.Networking.GetSegmentV2.Invoke(new()
        ///     {
        ///         Name = "tf_test_segment",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSegmentV2Result> Invoke(GetSegmentV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSegmentV2Result>("openstack:networking/getSegmentV2:getSegmentV2", args ?? new GetSegmentV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSegmentV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable description of the network segment.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The name of the network segment.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the network.
        /// </summary>
        [Input("networkId")]
        public string? NetworkId { get; set; }

        /// <summary>
        /// The type of the network, such as `Vlan`, `Vxlan`,
        /// `Flat`, `Gre`, `Geneve`, or `Local`.
        /// </summary>
        [Input("networkType")]
        public string? NetworkType { get; set; }

        /// <summary>
        /// The name of the physical network.
        /// </summary>
        [Input("physicalNetwork")]
        public string? PhysicalNetwork { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Neutron client.
        /// A Neutron client is needed to retrieve networks ids. If omitted, the
        /// `Region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        [Input("revisionNumber")]
        public int? RevisionNumber { get; set; }

        /// <summary>
        /// The ID of the network segment
        /// </summary>
        [Input("segmentId")]
        public string? SegmentId { get; set; }

        /// <summary>
        /// The segmentation ID of the network segment.
        /// </summary>
        [Input("segmentationId")]
        public int? SegmentationId { get; set; }

        public GetSegmentV2Args()
        {
        }
        public static new GetSegmentV2Args Empty => new GetSegmentV2Args();
    }

    public sealed class GetSegmentV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable description of the network segment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the network segment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the network.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The type of the network, such as `Vlan`, `Vxlan`,
        /// `Flat`, `Gre`, `Geneve`, or `Local`.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The name of the physical network.
        /// </summary>
        [Input("physicalNetwork")]
        public Input<string>? PhysicalNetwork { get; set; }

        /// <summary>
        /// The region in which to obtain the V2 Neutron client.
        /// A Neutron client is needed to retrieve networks ids. If omitted, the
        /// `Region` argument of the provider is used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        [Input("revisionNumber")]
        public Input<int>? RevisionNumber { get; set; }

        /// <summary>
        /// The ID of the network segment
        /// </summary>
        [Input("segmentId")]
        public Input<string>? SegmentId { get; set; }

        /// <summary>
        /// The segmentation ID of the network segment.
        /// </summary>
        [Input("segmentationId")]
        public Input<int>? SegmentationId { get; set; }

        public GetSegmentV2InvokeArgs()
        {
        }
        public static new GetSegmentV2InvokeArgs Empty => new GetSegmentV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetSegmentV2Result
    {
        /// <summary>
        /// The date and time when the network segment was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string NetworkType;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string PhysicalNetwork;
        public readonly string Region;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly int RevisionNumber;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string SegmentId;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly int SegmentationId;
        /// <summary>
        /// The date and time when the network segment was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetSegmentV2Result(
            string createdAt,

            string description,

            string id,

            string name,

            string networkId,

            string networkType,

            string physicalNetwork,

            string region,

            int revisionNumber,

            string segmentId,

            int segmentationId,

            string updatedAt)
        {
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            Name = name;
            NetworkId = networkId;
            NetworkType = networkType;
            PhysicalNetwork = physicalNetwork;
            Region = region;
            RevisionNumber = revisionNumber;
            SegmentId = segmentId;
            SegmentationId = segmentationId;
            UpdatedAt = updatedAt;
        }
    }
}
