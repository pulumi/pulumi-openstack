// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package blockstorage

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 volume resource within OpenStack.
type VolumeV1 struct {
	s *pulumi.ResourceState
}

// NewVolumeV1 registers a new resource with the given unique name, arguments, and options.
func NewVolumeV1(ctx *pulumi.Context,
	name string, args *VolumeV1Args, opts ...pulumi.ResourceOpt) (*VolumeV1, error) {
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZone"] = nil
		inputs["description"] = nil
		inputs["imageId"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["size"] = nil
		inputs["snapshotId"] = nil
		inputs["sourceVolId"] = nil
		inputs["volumeType"] = nil
	} else {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["description"] = args.Description
		inputs["imageId"] = args.ImageId
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["size"] = args.Size
		inputs["snapshotId"] = args.SnapshotId
		inputs["sourceVolId"] = args.SourceVolId
		inputs["volumeType"] = args.VolumeType
	}
	inputs["attachments"] = nil
	s, err := ctx.RegisterResource("openstack:blockstorage/volumeV1:VolumeV1", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeV1{s: s}, nil
}

// GetVolumeV1 gets an existing VolumeV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeV1(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeV1State, opts ...pulumi.ResourceOpt) (*VolumeV1, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attachments"] = state.Attachments
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["description"] = state.Description
		inputs["imageId"] = state.ImageId
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["size"] = state.Size
		inputs["snapshotId"] = state.SnapshotId
		inputs["sourceVolId"] = state.SourceVolId
		inputs["volumeType"] = state.VolumeType
	}
	s, err := ctx.ReadResource("openstack:blockstorage/volumeV1:VolumeV1", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeV1{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VolumeV1) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VolumeV1) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// If a volume is attached to an instance, this attribute will
// display the Attachment ID, Instance ID, and the Device as the Instance
// sees it.
func (r *VolumeV1) Attachments() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["attachments"])
}

// The availability zone for the volume.
// Changing this creates a new volume.
func (r *VolumeV1) AvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilityZone"])
}

// A description of the volume. Changing this updates
// the volume's description.
func (r *VolumeV1) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The image ID from which to create the volume.
// Changing this creates a new volume.
func (r *VolumeV1) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

// Metadata key/value pairs to associate with the volume.
// Changing this updates the existing volume metadata.
func (r *VolumeV1) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

// A unique name for the volume. Changing this updates the
// volume's name.
func (r *VolumeV1) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The region in which to create the volume. If
// omitted, the `region` argument of the provider is used. Changing this
// creates a new volume.
func (r *VolumeV1) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The size of the volume to create (in gigabytes). Changing
// this creates a new volume.
func (r *VolumeV1) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// The snapshot ID from which to create the volume.
// Changing this creates a new volume.
func (r *VolumeV1) SnapshotId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["snapshotId"])
}

// The volume ID from which to create the volume.
// Changing this creates a new volume.
func (r *VolumeV1) SourceVolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceVolId"])
}

// The type of volume to create.
// Changing this creates a new volume.
func (r *VolumeV1) VolumeType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeType"])
}

// Input properties used for looking up and filtering VolumeV1 resources.
type VolumeV1State struct {
	// If a volume is attached to an instance, this attribute will
	// display the Attachment ID, Instance ID, and the Device as the Instance
	// sees it.
	Attachments interface{}
	// The availability zone for the volume.
	// Changing this creates a new volume.
	AvailabilityZone interface{}
	// A description of the volume. Changing this updates
	// the volume's description.
	Description interface{}
	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	ImageId interface{}
	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	Metadata interface{}
	// A unique name for the volume. Changing this updates the
	// volume's name.
	Name interface{}
	// The region in which to create the volume. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new volume.
	Region interface{}
	// The size of the volume to create (in gigabytes). Changing
	// this creates a new volume.
	Size interface{}
	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	SnapshotId interface{}
	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	SourceVolId interface{}
	// The type of volume to create.
	// Changing this creates a new volume.
	VolumeType interface{}
}

// The set of arguments for constructing a VolumeV1 resource.
type VolumeV1Args struct {
	// The availability zone for the volume.
	// Changing this creates a new volume.
	AvailabilityZone interface{}
	// A description of the volume. Changing this updates
	// the volume's description.
	Description interface{}
	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	ImageId interface{}
	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	Metadata interface{}
	// A unique name for the volume. Changing this updates the
	// volume's name.
	Name interface{}
	// The region in which to create the volume. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new volume.
	Region interface{}
	// The size of the volume to create (in gigabytes). Changing
	// this creates a new volume.
	Size interface{}
	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	SnapshotId interface{}
	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	SourceVolId interface{}
	// The type of volume to create.
	// Changing this creates a new volume.
	VolumeType interface{}
}
