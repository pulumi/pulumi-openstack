// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockstorage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note:** This resource usually requires admin privileges.
//
// > **Note:** This resource does not actually attach a volume to an instance.
// Please use the `compute.VolumeAttach` resource for that.
//
// > **Note:** All arguments including the `data` computed attribute will be
// stored in the raw state as plain-text. Read more about sensitive data in
// state.
//
// Creates a general purpose attachment connection to a Block
// Storage volume using the OpenStack Block Storage (Cinder) v3 API.
//
// Depending on your Block Storage service configuration, this
// resource can assist in attaching a volume to a non-OpenStack resource
// such as a bare-metal server or a remote virtual machine in a
// different cloud provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/blockstorage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			volume1, err := blockstorage.NewVolume(ctx, "volume1", &blockstorage.VolumeArgs{
//				Size: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = blockstorage.NewVolumeAttach(ctx, "va1", &blockstorage.VolumeAttachArgs{
//				VolumeId:  volume1.ID(),
//				Device:    pulumi.String("auto"),
//				HostName:  pulumi.String("devstack"),
//				IpAddress: pulumi.String("192.168.255.10"),
//				Initiator: pulumi.String("iqn.1993-08.org.debian:01:e9861fb1859"),
//				OsType:    pulumi.String("linux2"),
//				Platform:  pulumi.String("x86_64"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// It is not possible to import this resource.
type VolumeAttach struct {
	pulumi.CustomResourceState

	// Specify whether to attach the volume as Read-Only
	// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
	// If left unspecified, the Block Storage API will apply a default of `rw`.
	AttachMode pulumi.StringPtrOutput `pulumi:"attachMode"`
	// This is a map of key/value pairs that contain the connection
	// information. You will want to pass this information to a provisioner
	// script to finalize the connection. See below for more information.
	Data pulumi.MapOutput `pulumi:"data"`
	// The device to tell the Block Storage service this
	// volume will be attached as. This is purely for informational purposes.
	// You can specify `auto` or a device such as `/dev/vdc`.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The storage driver that the volume is based on.
	DriverVolumeType pulumi.StringOutput `pulumi:"driverVolumeType"`
	// The host to attach the volume to.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// The iSCSI initiator string to make the connection.
	Initiator pulumi.StringPtrOutput `pulumi:"initiator"`
	// The IP address of the `hostName` above.
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// A mount point base name for shared storage.
	MountPointBase pulumi.StringOutput `pulumi:"mountPointBase"`
	// Whether to connect to this volume via multipath.
	Multipath pulumi.BoolPtrOutput `pulumi:"multipath"`
	// The iSCSI initiator OS type.
	OsType pulumi.StringPtrOutput `pulumi:"osType"`
	// The iSCSI initiator platform.
	Platform pulumi.StringPtrOutput `pulumi:"platform"`
	// The region in which to obtain the V3 Block Storage
	// client. A Block Storage client is needed to create a volume attachment.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new volume attachment.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the Volume to attach to an Instance.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
	// A wwnn name. Used for Fibre Channel connections.
	Wwnn pulumi.StringPtrOutput `pulumi:"wwnn"`
	// An array of wwpn strings. Used for Fibre Channel
	// connections.
	Wwpns pulumi.StringArrayOutput `pulumi:"wwpns"`
}

// NewVolumeAttach registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttach(ctx *pulumi.Context,
	name string, args *VolumeAttachArgs, opts ...pulumi.ResourceOption) (*VolumeAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"data",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeAttach
	err := ctx.RegisterResource("openstack:blockstorage/volumeAttach:VolumeAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeAttach gets an existing VolumeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeAttachState, opts ...pulumi.ResourceOption) (*VolumeAttach, error) {
	var resource VolumeAttach
	err := ctx.ReadResource("openstack:blockstorage/volumeAttach:VolumeAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeAttach resources.
type volumeAttachState struct {
	// Specify whether to attach the volume as Read-Only
	// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
	// If left unspecified, the Block Storage API will apply a default of `rw`.
	AttachMode *string `pulumi:"attachMode"`
	// This is a map of key/value pairs that contain the connection
	// information. You will want to pass this information to a provisioner
	// script to finalize the connection. See below for more information.
	Data map[string]interface{} `pulumi:"data"`
	// The device to tell the Block Storage service this
	// volume will be attached as. This is purely for informational purposes.
	// You can specify `auto` or a device such as `/dev/vdc`.
	Device *string `pulumi:"device"`
	// The storage driver that the volume is based on.
	DriverVolumeType *string `pulumi:"driverVolumeType"`
	// The host to attach the volume to.
	HostName *string `pulumi:"hostName"`
	// The iSCSI initiator string to make the connection.
	Initiator *string `pulumi:"initiator"`
	// The IP address of the `hostName` above.
	IpAddress *string `pulumi:"ipAddress"`
	// A mount point base name for shared storage.
	MountPointBase *string `pulumi:"mountPointBase"`
	// Whether to connect to this volume via multipath.
	Multipath *bool `pulumi:"multipath"`
	// The iSCSI initiator OS type.
	OsType *string `pulumi:"osType"`
	// The iSCSI initiator platform.
	Platform *string `pulumi:"platform"`
	// The region in which to obtain the V3 Block Storage
	// client. A Block Storage client is needed to create a volume attachment.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new volume attachment.
	Region *string `pulumi:"region"`
	// The ID of the Volume to attach to an Instance.
	VolumeId *string `pulumi:"volumeId"`
	// A wwnn name. Used for Fibre Channel connections.
	Wwnn *string `pulumi:"wwnn"`
	// An array of wwpn strings. Used for Fibre Channel
	// connections.
	Wwpns []string `pulumi:"wwpns"`
}

type VolumeAttachState struct {
	// Specify whether to attach the volume as Read-Only
	// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
	// If left unspecified, the Block Storage API will apply a default of `rw`.
	AttachMode pulumi.StringPtrInput
	// This is a map of key/value pairs that contain the connection
	// information. You will want to pass this information to a provisioner
	// script to finalize the connection. See below for more information.
	Data pulumi.MapInput
	// The device to tell the Block Storage service this
	// volume will be attached as. This is purely for informational purposes.
	// You can specify `auto` or a device such as `/dev/vdc`.
	Device pulumi.StringPtrInput
	// The storage driver that the volume is based on.
	DriverVolumeType pulumi.StringPtrInput
	// The host to attach the volume to.
	HostName pulumi.StringPtrInput
	// The iSCSI initiator string to make the connection.
	Initiator pulumi.StringPtrInput
	// The IP address of the `hostName` above.
	IpAddress pulumi.StringPtrInput
	// A mount point base name for shared storage.
	MountPointBase pulumi.StringPtrInput
	// Whether to connect to this volume via multipath.
	Multipath pulumi.BoolPtrInput
	// The iSCSI initiator OS type.
	OsType pulumi.StringPtrInput
	// The iSCSI initiator platform.
	Platform pulumi.StringPtrInput
	// The region in which to obtain the V3 Block Storage
	// client. A Block Storage client is needed to create a volume attachment.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new volume attachment.
	Region pulumi.StringPtrInput
	// The ID of the Volume to attach to an Instance.
	VolumeId pulumi.StringPtrInput
	// A wwnn name. Used for Fibre Channel connections.
	Wwnn pulumi.StringPtrInput
	// An array of wwpn strings. Used for Fibre Channel
	// connections.
	Wwpns pulumi.StringArrayInput
}

func (VolumeAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttachState)(nil)).Elem()
}

type volumeAttachArgs struct {
	// Specify whether to attach the volume as Read-Only
	// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
	// If left unspecified, the Block Storage API will apply a default of `rw`.
	AttachMode *string `pulumi:"attachMode"`
	// The device to tell the Block Storage service this
	// volume will be attached as. This is purely for informational purposes.
	// You can specify `auto` or a device such as `/dev/vdc`.
	Device *string `pulumi:"device"`
	// The host to attach the volume to.
	HostName string `pulumi:"hostName"`
	// The iSCSI initiator string to make the connection.
	Initiator *string `pulumi:"initiator"`
	// The IP address of the `hostName` above.
	IpAddress *string `pulumi:"ipAddress"`
	// Whether to connect to this volume via multipath.
	Multipath *bool `pulumi:"multipath"`
	// The iSCSI initiator OS type.
	OsType *string `pulumi:"osType"`
	// The iSCSI initiator platform.
	Platform *string `pulumi:"platform"`
	// The region in which to obtain the V3 Block Storage
	// client. A Block Storage client is needed to create a volume attachment.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new volume attachment.
	Region *string `pulumi:"region"`
	// The ID of the Volume to attach to an Instance.
	VolumeId string `pulumi:"volumeId"`
	// A wwnn name. Used for Fibre Channel connections.
	Wwnn *string `pulumi:"wwnn"`
	// An array of wwpn strings. Used for Fibre Channel
	// connections.
	Wwpns []string `pulumi:"wwpns"`
}

// The set of arguments for constructing a VolumeAttach resource.
type VolumeAttachArgs struct {
	// Specify whether to attach the volume as Read-Only
	// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
	// If left unspecified, the Block Storage API will apply a default of `rw`.
	AttachMode pulumi.StringPtrInput
	// The device to tell the Block Storage service this
	// volume will be attached as. This is purely for informational purposes.
	// You can specify `auto` or a device such as `/dev/vdc`.
	Device pulumi.StringPtrInput
	// The host to attach the volume to.
	HostName pulumi.StringInput
	// The iSCSI initiator string to make the connection.
	Initiator pulumi.StringPtrInput
	// The IP address of the `hostName` above.
	IpAddress pulumi.StringPtrInput
	// Whether to connect to this volume via multipath.
	Multipath pulumi.BoolPtrInput
	// The iSCSI initiator OS type.
	OsType pulumi.StringPtrInput
	// The iSCSI initiator platform.
	Platform pulumi.StringPtrInput
	// The region in which to obtain the V3 Block Storage
	// client. A Block Storage client is needed to create a volume attachment.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new volume attachment.
	Region pulumi.StringPtrInput
	// The ID of the Volume to attach to an Instance.
	VolumeId pulumi.StringInput
	// A wwnn name. Used for Fibre Channel connections.
	Wwnn pulumi.StringPtrInput
	// An array of wwpn strings. Used for Fibre Channel
	// connections.
	Wwpns pulumi.StringArrayInput
}

func (VolumeAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttachArgs)(nil)).Elem()
}

type VolumeAttachInput interface {
	pulumi.Input

	ToVolumeAttachOutput() VolumeAttachOutput
	ToVolumeAttachOutputWithContext(ctx context.Context) VolumeAttachOutput
}

func (*VolumeAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttach)(nil)).Elem()
}

func (i *VolumeAttach) ToVolumeAttachOutput() VolumeAttachOutput {
	return i.ToVolumeAttachOutputWithContext(context.Background())
}

func (i *VolumeAttach) ToVolumeAttachOutputWithContext(ctx context.Context) VolumeAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachOutput)
}

// VolumeAttachArrayInput is an input type that accepts VolumeAttachArray and VolumeAttachArrayOutput values.
// You can construct a concrete instance of `VolumeAttachArrayInput` via:
//
//	VolumeAttachArray{ VolumeAttachArgs{...} }
type VolumeAttachArrayInput interface {
	pulumi.Input

	ToVolumeAttachArrayOutput() VolumeAttachArrayOutput
	ToVolumeAttachArrayOutputWithContext(context.Context) VolumeAttachArrayOutput
}

type VolumeAttachArray []VolumeAttachInput

func (VolumeAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttach)(nil)).Elem()
}

func (i VolumeAttachArray) ToVolumeAttachArrayOutput() VolumeAttachArrayOutput {
	return i.ToVolumeAttachArrayOutputWithContext(context.Background())
}

func (i VolumeAttachArray) ToVolumeAttachArrayOutputWithContext(ctx context.Context) VolumeAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachArrayOutput)
}

// VolumeAttachMapInput is an input type that accepts VolumeAttachMap and VolumeAttachMapOutput values.
// You can construct a concrete instance of `VolumeAttachMapInput` via:
//
//	VolumeAttachMap{ "key": VolumeAttachArgs{...} }
type VolumeAttachMapInput interface {
	pulumi.Input

	ToVolumeAttachMapOutput() VolumeAttachMapOutput
	ToVolumeAttachMapOutputWithContext(context.Context) VolumeAttachMapOutput
}

type VolumeAttachMap map[string]VolumeAttachInput

func (VolumeAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttach)(nil)).Elem()
}

func (i VolumeAttachMap) ToVolumeAttachMapOutput() VolumeAttachMapOutput {
	return i.ToVolumeAttachMapOutputWithContext(context.Background())
}

func (i VolumeAttachMap) ToVolumeAttachMapOutputWithContext(ctx context.Context) VolumeAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachMapOutput)
}

type VolumeAttachOutput struct{ *pulumi.OutputState }

func (VolumeAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttach)(nil)).Elem()
}

func (o VolumeAttachOutput) ToVolumeAttachOutput() VolumeAttachOutput {
	return o
}

func (o VolumeAttachOutput) ToVolumeAttachOutputWithContext(ctx context.Context) VolumeAttachOutput {
	return o
}

// Specify whether to attach the volume as Read-Only
// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
// If left unspecified, the Block Storage API will apply a default of `rw`.
func (o VolumeAttachOutput) AttachMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringPtrOutput { return v.AttachMode }).(pulumi.StringPtrOutput)
}

// This is a map of key/value pairs that contain the connection
// information. You will want to pass this information to a provisioner
// script to finalize the connection. See below for more information.
func (o VolumeAttachOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.MapOutput { return v.Data }).(pulumi.MapOutput)
}

// The device to tell the Block Storage service this
// volume will be attached as. This is purely for informational purposes.
// You can specify `auto` or a device such as `/dev/vdc`.
func (o VolumeAttachOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The storage driver that the volume is based on.
func (o VolumeAttachOutput) DriverVolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.DriverVolumeType }).(pulumi.StringOutput)
}

// The host to attach the volume to.
func (o VolumeAttachOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// The iSCSI initiator string to make the connection.
func (o VolumeAttachOutput) Initiator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringPtrOutput { return v.Initiator }).(pulumi.StringPtrOutput)
}

// The IP address of the `hostName` above.
func (o VolumeAttachOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// A mount point base name for shared storage.
func (o VolumeAttachOutput) MountPointBase() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.MountPointBase }).(pulumi.StringOutput)
}

// Whether to connect to this volume via multipath.
func (o VolumeAttachOutput) Multipath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.BoolPtrOutput { return v.Multipath }).(pulumi.BoolPtrOutput)
}

// The iSCSI initiator OS type.
func (o VolumeAttachOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringPtrOutput { return v.OsType }).(pulumi.StringPtrOutput)
}

// The iSCSI initiator platform.
func (o VolumeAttachOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringPtrOutput { return v.Platform }).(pulumi.StringPtrOutput)
}

// The region in which to obtain the V3 Block Storage
// client. A Block Storage client is needed to create a volume attachment.
// If omitted, the `region` argument of the provider is used. Changing this
// creates a new volume attachment.
func (o VolumeAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the Volume to attach to an Instance.
func (o VolumeAttachOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

// A wwnn name. Used for Fibre Channel connections.
func (o VolumeAttachOutput) Wwnn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringPtrOutput { return v.Wwnn }).(pulumi.StringPtrOutput)
}

// An array of wwpn strings. Used for Fibre Channel
// connections.
func (o VolumeAttachOutput) Wwpns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringArrayOutput { return v.Wwpns }).(pulumi.StringArrayOutput)
}

type VolumeAttachArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttach)(nil)).Elem()
}

func (o VolumeAttachArrayOutput) ToVolumeAttachArrayOutput() VolumeAttachArrayOutput {
	return o
}

func (o VolumeAttachArrayOutput) ToVolumeAttachArrayOutputWithContext(ctx context.Context) VolumeAttachArrayOutput {
	return o
}

func (o VolumeAttachArrayOutput) Index(i pulumi.IntInput) VolumeAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeAttach {
		return vs[0].([]*VolumeAttach)[vs[1].(int)]
	}).(VolumeAttachOutput)
}

type VolumeAttachMapOutput struct{ *pulumi.OutputState }

func (VolumeAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttach)(nil)).Elem()
}

func (o VolumeAttachMapOutput) ToVolumeAttachMapOutput() VolumeAttachMapOutput {
	return o
}

func (o VolumeAttachMapOutput) ToVolumeAttachMapOutputWithContext(ctx context.Context) VolumeAttachMapOutput {
	return o
}

func (o VolumeAttachMapOutput) MapIndex(k pulumi.StringInput) VolumeAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeAttach {
		return vs[0].(map[string]*VolumeAttach)[vs[1].(string)]
	}).(VolumeAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachInput)(nil)).Elem(), &VolumeAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachArrayInput)(nil)).Elem(), VolumeAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachMapInput)(nil)).Elem(), VolumeAttachMap{})
	pulumi.RegisterOutputType(VolumeAttachOutput{})
	pulumi.RegisterOutputType(VolumeAttachArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachMapOutput{})
}
