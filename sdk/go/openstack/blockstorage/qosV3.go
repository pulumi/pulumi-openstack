// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockstorage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V3 block storage Quality-Of-Servirce (qos) resource within OpenStack.
//
// > **Note:** This usually requires admin privileges.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/blockstorage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := blockstorage.NewQosV3(ctx, "qos", &blockstorage.QosV3Args{
//				Consumer: pulumi.String("back-end"),
//				Specs: pulumi.Map{
//					"read_iops_sec":  pulumi.Any("40000"),
//					"write_iops_sec": pulumi.Any("40000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Qos can be imported using the `qos_id`, e.g.
//
// ```sh
//
//	$ pulumi import openstack:blockstorage/qosV3:QosV3 qos 941793f0-0a34-4bc4-b72e-a6326ae58283
//
// ```
type QosV3 struct {
	pulumi.CustomResourceState

	// The consumer of qos. Can be one of `front-end`,
	// `back-end` or `both`. Changing this updates the `consumer` of an
	// existing qos.
	Consumer pulumi.StringPtrOutput `pulumi:"consumer"`
	// Name of the qos.  Changing this creates a new qos.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the qos. If omitted,
	// the `region` argument of the provider is used. Changing this creates
	// a new qos.
	Region pulumi.StringOutput `pulumi:"region"`
	// Key/Value pairs of specs for the qos.
	Specs pulumi.MapOutput `pulumi:"specs"`
}

// NewQosV3 registers a new resource with the given unique name, arguments, and options.
func NewQosV3(ctx *pulumi.Context,
	name string, args *QosV3Args, opts ...pulumi.ResourceOption) (*QosV3, error) {
	if args == nil {
		args = &QosV3Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QosV3
	err := ctx.RegisterResource("openstack:blockstorage/qosV3:QosV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQosV3 gets an existing QosV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQosV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QosV3State, opts ...pulumi.ResourceOption) (*QosV3, error) {
	var resource QosV3
	err := ctx.ReadResource("openstack:blockstorage/qosV3:QosV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QosV3 resources.
type qosV3State struct {
	// The consumer of qos. Can be one of `front-end`,
	// `back-end` or `both`. Changing this updates the `consumer` of an
	// existing qos.
	Consumer *string `pulumi:"consumer"`
	// Name of the qos.  Changing this creates a new qos.
	Name *string `pulumi:"name"`
	// The region in which to create the qos. If omitted,
	// the `region` argument of the provider is used. Changing this creates
	// a new qos.
	Region *string `pulumi:"region"`
	// Key/Value pairs of specs for the qos.
	Specs map[string]interface{} `pulumi:"specs"`
}

type QosV3State struct {
	// The consumer of qos. Can be one of `front-end`,
	// `back-end` or `both`. Changing this updates the `consumer` of an
	// existing qos.
	Consumer pulumi.StringPtrInput
	// Name of the qos.  Changing this creates a new qos.
	Name pulumi.StringPtrInput
	// The region in which to create the qos. If omitted,
	// the `region` argument of the provider is used. Changing this creates
	// a new qos.
	Region pulumi.StringPtrInput
	// Key/Value pairs of specs for the qos.
	Specs pulumi.MapInput
}

func (QosV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*qosV3State)(nil)).Elem()
}

type qosV3Args struct {
	// The consumer of qos. Can be one of `front-end`,
	// `back-end` or `both`. Changing this updates the `consumer` of an
	// existing qos.
	Consumer *string `pulumi:"consumer"`
	// Name of the qos.  Changing this creates a new qos.
	Name *string `pulumi:"name"`
	// The region in which to create the qos. If omitted,
	// the `region` argument of the provider is used. Changing this creates
	// a new qos.
	Region *string `pulumi:"region"`
	// Key/Value pairs of specs for the qos.
	Specs map[string]interface{} `pulumi:"specs"`
}

// The set of arguments for constructing a QosV3 resource.
type QosV3Args struct {
	// The consumer of qos. Can be one of `front-end`,
	// `back-end` or `both`. Changing this updates the `consumer` of an
	// existing qos.
	Consumer pulumi.StringPtrInput
	// Name of the qos.  Changing this creates a new qos.
	Name pulumi.StringPtrInput
	// The region in which to create the qos. If omitted,
	// the `region` argument of the provider is used. Changing this creates
	// a new qos.
	Region pulumi.StringPtrInput
	// Key/Value pairs of specs for the qos.
	Specs pulumi.MapInput
}

func (QosV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*qosV3Args)(nil)).Elem()
}

type QosV3Input interface {
	pulumi.Input

	ToQosV3Output() QosV3Output
	ToQosV3OutputWithContext(ctx context.Context) QosV3Output
}

func (*QosV3) ElementType() reflect.Type {
	return reflect.TypeOf((**QosV3)(nil)).Elem()
}

func (i *QosV3) ToQosV3Output() QosV3Output {
	return i.ToQosV3OutputWithContext(context.Background())
}

func (i *QosV3) ToQosV3OutputWithContext(ctx context.Context) QosV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(QosV3Output)
}

// QosV3ArrayInput is an input type that accepts QosV3Array and QosV3ArrayOutput values.
// You can construct a concrete instance of `QosV3ArrayInput` via:
//
//	QosV3Array{ QosV3Args{...} }
type QosV3ArrayInput interface {
	pulumi.Input

	ToQosV3ArrayOutput() QosV3ArrayOutput
	ToQosV3ArrayOutputWithContext(context.Context) QosV3ArrayOutput
}

type QosV3Array []QosV3Input

func (QosV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QosV3)(nil)).Elem()
}

func (i QosV3Array) ToQosV3ArrayOutput() QosV3ArrayOutput {
	return i.ToQosV3ArrayOutputWithContext(context.Background())
}

func (i QosV3Array) ToQosV3ArrayOutputWithContext(ctx context.Context) QosV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosV3ArrayOutput)
}

// QosV3MapInput is an input type that accepts QosV3Map and QosV3MapOutput values.
// You can construct a concrete instance of `QosV3MapInput` via:
//
//	QosV3Map{ "key": QosV3Args{...} }
type QosV3MapInput interface {
	pulumi.Input

	ToQosV3MapOutput() QosV3MapOutput
	ToQosV3MapOutputWithContext(context.Context) QosV3MapOutput
}

type QosV3Map map[string]QosV3Input

func (QosV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QosV3)(nil)).Elem()
}

func (i QosV3Map) ToQosV3MapOutput() QosV3MapOutput {
	return i.ToQosV3MapOutputWithContext(context.Background())
}

func (i QosV3Map) ToQosV3MapOutputWithContext(ctx context.Context) QosV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QosV3MapOutput)
}

type QosV3Output struct{ *pulumi.OutputState }

func (QosV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**QosV3)(nil)).Elem()
}

func (o QosV3Output) ToQosV3Output() QosV3Output {
	return o
}

func (o QosV3Output) ToQosV3OutputWithContext(ctx context.Context) QosV3Output {
	return o
}

// The consumer of qos. Can be one of `front-end`,
// `back-end` or `both`. Changing this updates the `consumer` of an
// existing qos.
func (o QosV3Output) Consumer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QosV3) pulumi.StringPtrOutput { return v.Consumer }).(pulumi.StringPtrOutput)
}

// Name of the qos.  Changing this creates a new qos.
func (o QosV3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QosV3) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the qos. If omitted,
// the `region` argument of the provider is used. Changing this creates
// a new qos.
func (o QosV3Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *QosV3) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Key/Value pairs of specs for the qos.
func (o QosV3Output) Specs() pulumi.MapOutput {
	return o.ApplyT(func(v *QosV3) pulumi.MapOutput { return v.Specs }).(pulumi.MapOutput)
}

type QosV3ArrayOutput struct{ *pulumi.OutputState }

func (QosV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QosV3)(nil)).Elem()
}

func (o QosV3ArrayOutput) ToQosV3ArrayOutput() QosV3ArrayOutput {
	return o
}

func (o QosV3ArrayOutput) ToQosV3ArrayOutputWithContext(ctx context.Context) QosV3ArrayOutput {
	return o
}

func (o QosV3ArrayOutput) Index(i pulumi.IntInput) QosV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QosV3 {
		return vs[0].([]*QosV3)[vs[1].(int)]
	}).(QosV3Output)
}

type QosV3MapOutput struct{ *pulumi.OutputState }

func (QosV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QosV3)(nil)).Elem()
}

func (o QosV3MapOutput) ToQosV3MapOutput() QosV3MapOutput {
	return o
}

func (o QosV3MapOutput) ToQosV3MapOutputWithContext(ctx context.Context) QosV3MapOutput {
	return o
}

func (o QosV3MapOutput) MapIndex(k pulumi.StringInput) QosV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QosV3 {
		return vs[0].(map[string]*QosV3)[vs[1].(string)]
	}).(QosV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QosV3Input)(nil)).Elem(), &QosV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosV3ArrayInput)(nil)).Elem(), QosV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*QosV3MapInput)(nil)).Elem(), QosV3Map{})
	pulumi.RegisterOutputType(QosV3Output{})
	pulumi.RegisterOutputType(QosV3ArrayOutput{})
	pulumi.RegisterOutputType(QosV3MapOutput{})
}
