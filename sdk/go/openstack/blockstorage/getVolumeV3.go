// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockstorage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about an existing volume.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/blockstorage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := blockstorage.GetVolumeV3(ctx, &blockstorage.GetVolumeV3Args{
//				Name: pulumi.StringRef("volume_1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVolumeV3(ctx *pulumi.Context, args *GetVolumeV3Args, opts ...pulumi.InvokeOption) (*GetVolumeV3Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumeV3Result
	err := ctx.Invoke("openstack:blockstorage/getVolumeV3:getVolumeV3", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumeV3.
type GetVolumeV3Args struct {
	// Indicates if the volume is bootable.
	Bootable *string `pulumi:"bootable"`
	// The OpenStack host on which the volume is located.
	Host *string `pulumi:"host"`
	// Metadata key/value pairs associated with the volume.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The name of the volume.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V3 Block Storage
	// client. If omitted, the `region` argument of the provider is used.
	Region *string `pulumi:"region"`
	// The status of the volume.
	Status *string `pulumi:"status"`
	// The type of the volume.
	VolumeType *string `pulumi:"volumeType"`
}

// A collection of values returned by getVolumeV3.
type GetVolumeV3Result struct {
	// If a volume is attached to an instance, this attribute will
	// display the Attachment ID, Instance ID, and the Device as the Instance
	// sees it.
	Attachments []GetVolumeV3Attachment `pulumi:"attachments"`
	// Indicates if the volume is bootable.
	Bootable string `pulumi:"bootable"`
	// The OpenStack host on which the volume is located.
	Host string `pulumi:"host"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// See Argument Reference above.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Indicates if the volume can be attached to more then one server.
	Multiattach bool `pulumi:"multiattach"`
	// See Argument Reference above.
	Name string `pulumi:"name"`
	// See Argument Reference above.
	Region string `pulumi:"region"`
	// The size of the volume in GBs.
	Size int `pulumi:"size"`
	// The ID of the volume from which the current volume was created.
	SourceVolumeId string `pulumi:"sourceVolumeId"`
	// See Argument Reference above.
	Status string `pulumi:"status"`
	// The type of the volume.
	VolumeType string `pulumi:"volumeType"`
}

func GetVolumeV3Output(ctx *pulumi.Context, args GetVolumeV3OutputArgs, opts ...pulumi.InvokeOption) GetVolumeV3ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVolumeV3Result, error) {
			args := v.(GetVolumeV3Args)
			r, err := GetVolumeV3(ctx, &args, opts...)
			var s GetVolumeV3Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVolumeV3ResultOutput)
}

// A collection of arguments for invoking getVolumeV3.
type GetVolumeV3OutputArgs struct {
	// Indicates if the volume is bootable.
	Bootable pulumi.StringPtrInput `pulumi:"bootable"`
	// The OpenStack host on which the volume is located.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Metadata key/value pairs associated with the volume.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The name of the volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The region in which to obtain the V3 Block Storage
	// client. If omitted, the `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The status of the volume.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of the volume.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (GetVolumeV3OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeV3Args)(nil)).Elem()
}

// A collection of values returned by getVolumeV3.
type GetVolumeV3ResultOutput struct{ *pulumi.OutputState }

func (GetVolumeV3ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeV3Result)(nil)).Elem()
}

func (o GetVolumeV3ResultOutput) ToGetVolumeV3ResultOutput() GetVolumeV3ResultOutput {
	return o
}

func (o GetVolumeV3ResultOutput) ToGetVolumeV3ResultOutputWithContext(ctx context.Context) GetVolumeV3ResultOutput {
	return o
}

// If a volume is attached to an instance, this attribute will
// display the Attachment ID, Instance ID, and the Device as the Instance
// sees it.
func (o GetVolumeV3ResultOutput) Attachments() GetVolumeV3AttachmentArrayOutput {
	return o.ApplyT(func(v GetVolumeV3Result) []GetVolumeV3Attachment { return v.Attachments }).(GetVolumeV3AttachmentArrayOutput)
}

// Indicates if the volume is bootable.
func (o GetVolumeV3ResultOutput) Bootable() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.Bootable }).(pulumi.StringOutput)
}

// The OpenStack host on which the volume is located.
func (o GetVolumeV3ResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.Host }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVolumeV3ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.Id }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o GetVolumeV3ResultOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v GetVolumeV3Result) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// Indicates if the volume can be attached to more then one server.
func (o GetVolumeV3ResultOutput) Multiattach() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeV3Result) bool { return v.Multiattach }).(pulumi.BoolOutput)
}

// See Argument Reference above.
func (o GetVolumeV3ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.Name }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o GetVolumeV3ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.Region }).(pulumi.StringOutput)
}

// The size of the volume in GBs.
func (o GetVolumeV3ResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumeV3Result) int { return v.Size }).(pulumi.IntOutput)
}

// The ID of the volume from which the current volume was created.
func (o GetVolumeV3ResultOutput) SourceVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.SourceVolumeId }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o GetVolumeV3ResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the volume.
func (o GetVolumeV3ResultOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Result) string { return v.VolumeType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumeV3ResultOutput{})
}
