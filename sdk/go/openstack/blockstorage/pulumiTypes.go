// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockstorage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type VolumeAttachment struct {
	Device     *string `pulumi:"device"`
	Id         *string `pulumi:"id"`
	InstanceId *string `pulumi:"instanceId"`
}

// VolumeAttachmentInput is an input type that accepts VolumeAttachmentArgs and VolumeAttachmentOutput values.
// You can construct a concrete instance of `VolumeAttachmentInput` via:
//
//	VolumeAttachmentArgs{...}
type VolumeAttachmentInput interface {
	pulumi.Input

	ToVolumeAttachmentOutput() VolumeAttachmentOutput
	ToVolumeAttachmentOutputWithContext(context.Context) VolumeAttachmentOutput
}

type VolumeAttachmentArgs struct {
	Device     pulumi.StringPtrInput `pulumi:"device"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
}

func (VolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return i.ToVolumeAttachmentOutputWithContext(context.Background())
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentOutput)
}

// VolumeAttachmentArrayInput is an input type that accepts VolumeAttachmentArray and VolumeAttachmentArrayOutput values.
// You can construct a concrete instance of `VolumeAttachmentArrayInput` via:
//
//	VolumeAttachmentArray{ VolumeAttachmentArgs{...} }
type VolumeAttachmentArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput
	ToVolumeAttachmentArrayOutputWithContext(context.Context) VolumeAttachmentArrayOutput
}

type VolumeAttachmentArray []VolumeAttachmentInput

func (VolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return i.ToVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentArrayOutput)
}

type VolumeAttachmentOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return o
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return o
}

func (o VolumeAttachmentOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o VolumeAttachmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o VolumeAttachmentOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

type VolumeAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAttachment {
		return vs[0].([]VolumeAttachment)[vs[1].(int)]
	}).(VolumeAttachmentOutput)
}

type VolumeSchedulerHint struct {
	// Arbitrary key/value pairs of additional
	// properties to pass to the scheduler.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// The volume should be scheduled on a
	// different host from the set of volumes specified in the list provided.
	DifferentHosts []string `pulumi:"differentHosts"`
	// An instance UUID. The volume should be
	// scheduled on the same host as the instance.
	LocalToInstance *string `pulumi:"localToInstance"`
	// A conditional query that a back-end must pass in
	// order to host a volume. The query must use the `JsonFilter` syntax
	// which is described
	// [here](https://docs.openstack.org/cinder/latest/configuration/block-storage/scheduler-filters.html#jsonfilter).
	// At this time, only simple queries are supported. Compound queries using
	// `and`, `or`, or `not` are not supported. An example of a simple query is:
	Query *string `pulumi:"query"`
	// A list of volume UUIDs. The volume should be
	// scheduled on the same host as another volume specified in the list provided.
	SameHosts []string `pulumi:"sameHosts"`
}

// VolumeSchedulerHintInput is an input type that accepts VolumeSchedulerHintArgs and VolumeSchedulerHintOutput values.
// You can construct a concrete instance of `VolumeSchedulerHintInput` via:
//
//	VolumeSchedulerHintArgs{...}
type VolumeSchedulerHintInput interface {
	pulumi.Input

	ToVolumeSchedulerHintOutput() VolumeSchedulerHintOutput
	ToVolumeSchedulerHintOutputWithContext(context.Context) VolumeSchedulerHintOutput
}

type VolumeSchedulerHintArgs struct {
	// Arbitrary key/value pairs of additional
	// properties to pass to the scheduler.
	AdditionalProperties pulumi.StringMapInput `pulumi:"additionalProperties"`
	// The volume should be scheduled on a
	// different host from the set of volumes specified in the list provided.
	DifferentHosts pulumi.StringArrayInput `pulumi:"differentHosts"`
	// An instance UUID. The volume should be
	// scheduled on the same host as the instance.
	LocalToInstance pulumi.StringPtrInput `pulumi:"localToInstance"`
	// A conditional query that a back-end must pass in
	// order to host a volume. The query must use the `JsonFilter` syntax
	// which is described
	// [here](https://docs.openstack.org/cinder/latest/configuration/block-storage/scheduler-filters.html#jsonfilter).
	// At this time, only simple queries are supported. Compound queries using
	// `and`, `or`, or `not` are not supported. An example of a simple query is:
	Query pulumi.StringPtrInput `pulumi:"query"`
	// A list of volume UUIDs. The volume should be
	// scheduled on the same host as another volume specified in the list provided.
	SameHosts pulumi.StringArrayInput `pulumi:"sameHosts"`
}

func (VolumeSchedulerHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSchedulerHint)(nil)).Elem()
}

func (i VolumeSchedulerHintArgs) ToVolumeSchedulerHintOutput() VolumeSchedulerHintOutput {
	return i.ToVolumeSchedulerHintOutputWithContext(context.Background())
}

func (i VolumeSchedulerHintArgs) ToVolumeSchedulerHintOutputWithContext(ctx context.Context) VolumeSchedulerHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSchedulerHintOutput)
}

// VolumeSchedulerHintArrayInput is an input type that accepts VolumeSchedulerHintArray and VolumeSchedulerHintArrayOutput values.
// You can construct a concrete instance of `VolumeSchedulerHintArrayInput` via:
//
//	VolumeSchedulerHintArray{ VolumeSchedulerHintArgs{...} }
type VolumeSchedulerHintArrayInput interface {
	pulumi.Input

	ToVolumeSchedulerHintArrayOutput() VolumeSchedulerHintArrayOutput
	ToVolumeSchedulerHintArrayOutputWithContext(context.Context) VolumeSchedulerHintArrayOutput
}

type VolumeSchedulerHintArray []VolumeSchedulerHintInput

func (VolumeSchedulerHintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeSchedulerHint)(nil)).Elem()
}

func (i VolumeSchedulerHintArray) ToVolumeSchedulerHintArrayOutput() VolumeSchedulerHintArrayOutput {
	return i.ToVolumeSchedulerHintArrayOutputWithContext(context.Background())
}

func (i VolumeSchedulerHintArray) ToVolumeSchedulerHintArrayOutputWithContext(ctx context.Context) VolumeSchedulerHintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSchedulerHintArrayOutput)
}

type VolumeSchedulerHintOutput struct{ *pulumi.OutputState }

func (VolumeSchedulerHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSchedulerHint)(nil)).Elem()
}

func (o VolumeSchedulerHintOutput) ToVolumeSchedulerHintOutput() VolumeSchedulerHintOutput {
	return o
}

func (o VolumeSchedulerHintOutput) ToVolumeSchedulerHintOutputWithContext(ctx context.Context) VolumeSchedulerHintOutput {
	return o
}

// Arbitrary key/value pairs of additional
// properties to pass to the scheduler.
func (o VolumeSchedulerHintOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeSchedulerHint) map[string]string { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// The volume should be scheduled on a
// different host from the set of volumes specified in the list provided.
func (o VolumeSchedulerHintOutput) DifferentHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeSchedulerHint) []string { return v.DifferentHosts }).(pulumi.StringArrayOutput)
}

// An instance UUID. The volume should be
// scheduled on the same host as the instance.
func (o VolumeSchedulerHintOutput) LocalToInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSchedulerHint) *string { return v.LocalToInstance }).(pulumi.StringPtrOutput)
}

// A conditional query that a back-end must pass in
// order to host a volume. The query must use the `JsonFilter` syntax
// which is described
// [here](https://docs.openstack.org/cinder/latest/configuration/block-storage/scheduler-filters.html#jsonfilter).
// At this time, only simple queries are supported. Compound queries using
// `and`, `or`, or `not` are not supported. An example of a simple query is:
func (o VolumeSchedulerHintOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSchedulerHint) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// A list of volume UUIDs. The volume should be
// scheduled on the same host as another volume specified in the list provided.
func (o VolumeSchedulerHintOutput) SameHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeSchedulerHint) []string { return v.SameHosts }).(pulumi.StringArrayOutput)
}

type VolumeSchedulerHintArrayOutput struct{ *pulumi.OutputState }

func (VolumeSchedulerHintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeSchedulerHint)(nil)).Elem()
}

func (o VolumeSchedulerHintArrayOutput) ToVolumeSchedulerHintArrayOutput() VolumeSchedulerHintArrayOutput {
	return o
}

func (o VolumeSchedulerHintArrayOutput) ToVolumeSchedulerHintArrayOutputWithContext(ctx context.Context) VolumeSchedulerHintArrayOutput {
	return o
}

func (o VolumeSchedulerHintArrayOutput) Index(i pulumi.IntInput) VolumeSchedulerHintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeSchedulerHint {
		return vs[0].([]VolumeSchedulerHint)[vs[1].(int)]
	}).(VolumeSchedulerHintOutput)
}

type GetVolumeV3Attachment struct {
	Device     string `pulumi:"device"`
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
}

// GetVolumeV3AttachmentInput is an input type that accepts GetVolumeV3AttachmentArgs and GetVolumeV3AttachmentOutput values.
// You can construct a concrete instance of `GetVolumeV3AttachmentInput` via:
//
//	GetVolumeV3AttachmentArgs{...}
type GetVolumeV3AttachmentInput interface {
	pulumi.Input

	ToGetVolumeV3AttachmentOutput() GetVolumeV3AttachmentOutput
	ToGetVolumeV3AttachmentOutputWithContext(context.Context) GetVolumeV3AttachmentOutput
}

type GetVolumeV3AttachmentArgs struct {
	Device     pulumi.StringInput `pulumi:"device"`
	Id         pulumi.StringInput `pulumi:"id"`
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (GetVolumeV3AttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeV3Attachment)(nil)).Elem()
}

func (i GetVolumeV3AttachmentArgs) ToGetVolumeV3AttachmentOutput() GetVolumeV3AttachmentOutput {
	return i.ToGetVolumeV3AttachmentOutputWithContext(context.Background())
}

func (i GetVolumeV3AttachmentArgs) ToGetVolumeV3AttachmentOutputWithContext(ctx context.Context) GetVolumeV3AttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeV3AttachmentOutput)
}

// GetVolumeV3AttachmentArrayInput is an input type that accepts GetVolumeV3AttachmentArray and GetVolumeV3AttachmentArrayOutput values.
// You can construct a concrete instance of `GetVolumeV3AttachmentArrayInput` via:
//
//	GetVolumeV3AttachmentArray{ GetVolumeV3AttachmentArgs{...} }
type GetVolumeV3AttachmentArrayInput interface {
	pulumi.Input

	ToGetVolumeV3AttachmentArrayOutput() GetVolumeV3AttachmentArrayOutput
	ToGetVolumeV3AttachmentArrayOutputWithContext(context.Context) GetVolumeV3AttachmentArrayOutput
}

type GetVolumeV3AttachmentArray []GetVolumeV3AttachmentInput

func (GetVolumeV3AttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeV3Attachment)(nil)).Elem()
}

func (i GetVolumeV3AttachmentArray) ToGetVolumeV3AttachmentArrayOutput() GetVolumeV3AttachmentArrayOutput {
	return i.ToGetVolumeV3AttachmentArrayOutputWithContext(context.Background())
}

func (i GetVolumeV3AttachmentArray) ToGetVolumeV3AttachmentArrayOutputWithContext(ctx context.Context) GetVolumeV3AttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeV3AttachmentArrayOutput)
}

type GetVolumeV3AttachmentOutput struct{ *pulumi.OutputState }

func (GetVolumeV3AttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeV3Attachment)(nil)).Elem()
}

func (o GetVolumeV3AttachmentOutput) ToGetVolumeV3AttachmentOutput() GetVolumeV3AttachmentOutput {
	return o
}

func (o GetVolumeV3AttachmentOutput) ToGetVolumeV3AttachmentOutputWithContext(ctx context.Context) GetVolumeV3AttachmentOutput {
	return o
}

func (o GetVolumeV3AttachmentOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Attachment) string { return v.Device }).(pulumi.StringOutput)
}

func (o GetVolumeV3AttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Attachment) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVolumeV3AttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeV3Attachment) string { return v.InstanceId }).(pulumi.StringOutput)
}

type GetVolumeV3AttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeV3AttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeV3Attachment)(nil)).Elem()
}

func (o GetVolumeV3AttachmentArrayOutput) ToGetVolumeV3AttachmentArrayOutput() GetVolumeV3AttachmentArrayOutput {
	return o
}

func (o GetVolumeV3AttachmentArrayOutput) ToGetVolumeV3AttachmentArrayOutputWithContext(ctx context.Context) GetVolumeV3AttachmentArrayOutput {
	return o
}

func (o GetVolumeV3AttachmentArrayOutput) Index(i pulumi.IntInput) GetVolumeV3AttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeV3Attachment {
		return vs[0].([]GetVolumeV3Attachment)[vs[1].(int)]
	}).(GetVolumeV3AttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentInput)(nil)).Elem(), VolumeAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentArrayInput)(nil)).Elem(), VolumeAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSchedulerHintInput)(nil)).Elem(), VolumeSchedulerHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSchedulerHintArrayInput)(nil)).Elem(), VolumeSchedulerHintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeV3AttachmentInput)(nil)).Elem(), GetVolumeV3AttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeV3AttachmentArrayInput)(nil)).Elem(), GetVolumeV3AttachmentArray{})
	pulumi.RegisterOutputType(VolumeAttachmentOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VolumeSchedulerHintOutput{})
	pulumi.RegisterOutputType(VolumeSchedulerHintArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeV3AttachmentOutput{})
	pulumi.RegisterOutputType(GetVolumeV3AttachmentArrayOutput{})
}
