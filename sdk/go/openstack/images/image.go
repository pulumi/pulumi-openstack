// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package images

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Images can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import openstack:images/image:Image rancheros 89c60255-9bd6-460c-822a-e2b959ede9d2
// ```
type Image struct {
	pulumi.CustomResourceState

	// The checksum of the data associated with the image.
	Checksum pulumi.StringOutput `pulumi:"checksum"`
	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	ContainerFormat pulumi.StringOutput `pulumi:"containerFormat"`
	// The date the image was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	DiskFormat pulumi.StringOutput `pulumi:"diskFormat"`
	// the trailing path after the glance
	// endpoint that represent the location of the image
	// or the path to retrieve it.
	File pulumi.StringOutput `pulumi:"file"`
	// If true, image will be hidden from public list.
	// Defaults to false.
	Hidden         pulumi.BoolPtrOutput   `pulumi:"hidden"`
	ImageCachePath pulumi.StringPtrOutput `pulumi:"imageCachePath"`
	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The password of basic auth to download `imageSourceUrl`.
	ImageSourcePassword pulumi.StringPtrOutput `pulumi:"imageSourcePassword"`
	// This is the url of the raw image. If `webDownload`
	// is not used, then the image will be downloaded in the `imageCachePath` before
	// being uploaded to Glance.
	// Conflicts with `localFilePath`.
	ImageSourceUrl pulumi.StringPtrOutput `pulumi:"imageSourceUrl"`
	// The username of basic auth to download `imageSourceUrl`.
	ImageSourceUsername pulumi.StringPtrOutput `pulumi:"imageSourceUsername"`
	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
	// `webDownload`.
	LocalFilePath pulumi.StringPtrOutput `pulumi:"localFilePath"`
	// The metadata associated with the image.
	// Image metadata allow for meaningfully define the image properties
	// and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	MinDiskGb pulumi.IntPtrOutput `pulumi:"minDiskGb"`
	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	MinRamMb pulumi.IntPtrOutput `pulumi:"minRamMb"`
	// The name of the image.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the openstack user who owns the image.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	Properties pulumi.MapOutput `pulumi:"properties"`
	// If true, image will not be deletable.
	// Defaults to false.
	Protected pulumi.BoolPtrOutput `pulumi:"protected"`
	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the `region` argument of the provider
	// is used. Changing this creates a new Image.
	Region pulumi.StringOutput `pulumi:"region"`
	// The path to the JSON-schema that represent
	// the image or image
	Schema pulumi.StringOutput `pulumi:"schema"`
	// The size in bytes of the data associated with the image.
	SizeBytes pulumi.IntOutput `pulumi:"sizeBytes"`
	// The status of the image. It can be "queued", "active"
	// or "saving".
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// (**Deprecated** - use `updatedAt` instead)
	//
	// Deprecated: Use updated_at instead
	UpdateAt pulumi.StringOutput `pulumi:"updateAt"`
	// The date the image was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with `webDownload`.
	// Defaults to true when not using `webDownload`.
	VerifyChecksum pulumi.BoolPtrOutput `pulumi:"verifyChecksum"`
	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	Visibility pulumi.StringPtrOutput `pulumi:"visibility"`
	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with `localFilePath`. Defaults to false.
	WebDownload pulumi.BoolPtrOutput `pulumi:"webDownload"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerFormat == nil {
		return nil, errors.New("invalid value for required argument 'ContainerFormat'")
	}
	if args.DiskFormat == nil {
		return nil, errors.New("invalid value for required argument 'DiskFormat'")
	}
	var resource Image
	err := ctx.RegisterResource("openstack:images/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("openstack:images/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// The checksum of the data associated with the image.
	Checksum *string `pulumi:"checksum"`
	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	ContainerFormat *string `pulumi:"containerFormat"`
	// The date the image was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	DiskFormat *string `pulumi:"diskFormat"`
	// the trailing path after the glance
	// endpoint that represent the location of the image
	// or the path to retrieve it.
	File *string `pulumi:"file"`
	// If true, image will be hidden from public list.
	// Defaults to false.
	Hidden         *bool   `pulumi:"hidden"`
	ImageCachePath *string `pulumi:"imageCachePath"`
	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	ImageId *string `pulumi:"imageId"`
	// The password of basic auth to download `imageSourceUrl`.
	ImageSourcePassword *string `pulumi:"imageSourcePassword"`
	// This is the url of the raw image. If `webDownload`
	// is not used, then the image will be downloaded in the `imageCachePath` before
	// being uploaded to Glance.
	// Conflicts with `localFilePath`.
	ImageSourceUrl *string `pulumi:"imageSourceUrl"`
	// The username of basic auth to download `imageSourceUrl`.
	ImageSourceUsername *string `pulumi:"imageSourceUsername"`
	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
	// `webDownload`.
	LocalFilePath *string `pulumi:"localFilePath"`
	// The metadata associated with the image.
	// Image metadata allow for meaningfully define the image properties
	// and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	MinDiskGb *int `pulumi:"minDiskGb"`
	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	MinRamMb *int `pulumi:"minRamMb"`
	// The name of the image.
	Name *string `pulumi:"name"`
	// The id of the openstack user who owns the image.
	Owner *string `pulumi:"owner"`
	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	Properties map[string]interface{} `pulumi:"properties"`
	// If true, image will not be deletable.
	// Defaults to false.
	Protected *bool `pulumi:"protected"`
	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the `region` argument of the provider
	// is used. Changing this creates a new Image.
	Region *string `pulumi:"region"`
	// The path to the JSON-schema that represent
	// the image or image
	Schema *string `pulumi:"schema"`
	// The size in bytes of the data associated with the image.
	SizeBytes *int `pulumi:"sizeBytes"`
	// The status of the image. It can be "queued", "active"
	// or "saving".
	Status *string `pulumi:"status"`
	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	Tags []string `pulumi:"tags"`
	// (**Deprecated** - use `updatedAt` instead)
	//
	// Deprecated: Use updated_at instead
	UpdateAt *string `pulumi:"updateAt"`
	// The date the image was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with `webDownload`.
	// Defaults to true when not using `webDownload`.
	VerifyChecksum *bool `pulumi:"verifyChecksum"`
	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	Visibility *string `pulumi:"visibility"`
	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with `localFilePath`. Defaults to false.
	WebDownload *bool `pulumi:"webDownload"`
}

type ImageState struct {
	// The checksum of the data associated with the image.
	Checksum pulumi.StringPtrInput
	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	ContainerFormat pulumi.StringPtrInput
	// The date the image was created.
	CreatedAt pulumi.StringPtrInput
	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	DiskFormat pulumi.StringPtrInput
	// the trailing path after the glance
	// endpoint that represent the location of the image
	// or the path to retrieve it.
	File pulumi.StringPtrInput
	// If true, image will be hidden from public list.
	// Defaults to false.
	Hidden         pulumi.BoolPtrInput
	ImageCachePath pulumi.StringPtrInput
	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	ImageId pulumi.StringPtrInput
	// The password of basic auth to download `imageSourceUrl`.
	ImageSourcePassword pulumi.StringPtrInput
	// This is the url of the raw image. If `webDownload`
	// is not used, then the image will be downloaded in the `imageCachePath` before
	// being uploaded to Glance.
	// Conflicts with `localFilePath`.
	ImageSourceUrl pulumi.StringPtrInput
	// The username of basic auth to download `imageSourceUrl`.
	ImageSourceUsername pulumi.StringPtrInput
	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
	// `webDownload`.
	LocalFilePath pulumi.StringPtrInput
	// The metadata associated with the image.
	// Image metadata allow for meaningfully define the image properties
	// and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
	Metadata pulumi.MapInput
	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	MinDiskGb pulumi.IntPtrInput
	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	MinRamMb pulumi.IntPtrInput
	// The name of the image.
	Name pulumi.StringPtrInput
	// The id of the openstack user who owns the image.
	Owner pulumi.StringPtrInput
	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	Properties pulumi.MapInput
	// If true, image will not be deletable.
	// Defaults to false.
	Protected pulumi.BoolPtrInput
	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the `region` argument of the provider
	// is used. Changing this creates a new Image.
	Region pulumi.StringPtrInput
	// The path to the JSON-schema that represent
	// the image or image
	Schema pulumi.StringPtrInput
	// The size in bytes of the data associated with the image.
	SizeBytes pulumi.IntPtrInput
	// The status of the image. It can be "queued", "active"
	// or "saving".
	Status pulumi.StringPtrInput
	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	Tags pulumi.StringArrayInput
	// (**Deprecated** - use `updatedAt` instead)
	//
	// Deprecated: Use updated_at instead
	UpdateAt pulumi.StringPtrInput
	// The date the image was last updated.
	UpdatedAt pulumi.StringPtrInput
	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with `webDownload`.
	// Defaults to true when not using `webDownload`.
	VerifyChecksum pulumi.BoolPtrInput
	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	Visibility pulumi.StringPtrInput
	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with `localFilePath`. Defaults to false.
	WebDownload pulumi.BoolPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	ContainerFormat string `pulumi:"containerFormat"`
	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	DiskFormat string `pulumi:"diskFormat"`
	// If true, image will be hidden from public list.
	// Defaults to false.
	Hidden         *bool   `pulumi:"hidden"`
	ImageCachePath *string `pulumi:"imageCachePath"`
	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	ImageId *string `pulumi:"imageId"`
	// The password of basic auth to download `imageSourceUrl`.
	ImageSourcePassword *string `pulumi:"imageSourcePassword"`
	// This is the url of the raw image. If `webDownload`
	// is not used, then the image will be downloaded in the `imageCachePath` before
	// being uploaded to Glance.
	// Conflicts with `localFilePath`.
	ImageSourceUrl *string `pulumi:"imageSourceUrl"`
	// The username of basic auth to download `imageSourceUrl`.
	ImageSourceUsername *string `pulumi:"imageSourceUsername"`
	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
	// `webDownload`.
	LocalFilePath *string `pulumi:"localFilePath"`
	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	MinDiskGb *int `pulumi:"minDiskGb"`
	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	MinRamMb *int `pulumi:"minRamMb"`
	// The name of the image.
	Name *string `pulumi:"name"`
	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	Properties map[string]interface{} `pulumi:"properties"`
	// If true, image will not be deletable.
	// Defaults to false.
	Protected *bool `pulumi:"protected"`
	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the `region` argument of the provider
	// is used. Changing this creates a new Image.
	Region *string `pulumi:"region"`
	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	Tags []string `pulumi:"tags"`
	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with `webDownload`.
	// Defaults to true when not using `webDownload`.
	VerifyChecksum *bool `pulumi:"verifyChecksum"`
	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	Visibility *string `pulumi:"visibility"`
	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with `localFilePath`. Defaults to false.
	WebDownload *bool `pulumi:"webDownload"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	ContainerFormat pulumi.StringInput
	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	DiskFormat pulumi.StringInput
	// If true, image will be hidden from public list.
	// Defaults to false.
	Hidden         pulumi.BoolPtrInput
	ImageCachePath pulumi.StringPtrInput
	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	ImageId pulumi.StringPtrInput
	// The password of basic auth to download `imageSourceUrl`.
	ImageSourcePassword pulumi.StringPtrInput
	// This is the url of the raw image. If `webDownload`
	// is not used, then the image will be downloaded in the `imageCachePath` before
	// being uploaded to Glance.
	// Conflicts with `localFilePath`.
	ImageSourceUrl pulumi.StringPtrInput
	// The username of basic auth to download `imageSourceUrl`.
	ImageSourceUsername pulumi.StringPtrInput
	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
	// `webDownload`.
	LocalFilePath pulumi.StringPtrInput
	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	MinDiskGb pulumi.IntPtrInput
	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	MinRamMb pulumi.IntPtrInput
	// The name of the image.
	Name pulumi.StringPtrInput
	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	Properties pulumi.MapInput
	// If true, image will not be deletable.
	// Defaults to false.
	Protected pulumi.BoolPtrInput
	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the `region` argument of the provider
	// is used. Changing this creates a new Image.
	Region pulumi.StringPtrInput
	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	Tags pulumi.StringArrayInput
	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with `webDownload`.
	// Defaults to true when not using `webDownload`.
	VerifyChecksum pulumi.BoolPtrInput
	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	Visibility pulumi.StringPtrInput
	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with `localFilePath`. Defaults to false.
	WebDownload pulumi.BoolPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//          ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//          ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
