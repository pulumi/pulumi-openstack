// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages DNS quota in OpenStack DNS Service.
//
// > **Note:** This usually requires admin privileges.
//
// > **Note:** This resource has a no-op deletion so no actual actions will be
// done against the OpenStack API in case of delete call.
//
// ## Import
//
// Quotas can be imported using the `project_id/region_name`, e.g.
//
// ```sh
// $ pulumi import openstack:dns/quotaV2:QuotaV2 quota_1 2a0f2240-c5e6-41de-896d-e80d97428d6b/region_1
// ```
type QuotaV2 struct {
	pulumi.CustomResourceState

	// The maximum number of zones that can be
	// exported via the API.
	ApiExportSize pulumi.IntOutput `pulumi:"apiExportSize"`
	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The maximum number of records in a
	// recordset.
	RecordsetRecords pulumi.IntOutput `pulumi:"recordsetRecords"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS quota.
	Region pulumi.StringOutput `pulumi:"region"`
	// The maximum number of records in a zone.
	ZoneRecords pulumi.IntOutput `pulumi:"zoneRecords"`
	// The maximum number of recordsets in a zone.
	ZoneRecordsets pulumi.IntOutput `pulumi:"zoneRecordsets"`
	// The maximum number of zones that can be created.
	Zones pulumi.IntOutput `pulumi:"zones"`
}

// NewQuotaV2 registers a new resource with the given unique name, arguments, and options.
func NewQuotaV2(ctx *pulumi.Context,
	name string, args *QuotaV2Args, opts ...pulumi.ResourceOption) (*QuotaV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QuotaV2
	err := ctx.RegisterResource("openstack:dns/quotaV2:QuotaV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuotaV2 gets an existing QuotaV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuotaV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QuotaV2State, opts ...pulumi.ResourceOption) (*QuotaV2, error) {
	var resource QuotaV2
	err := ctx.ReadResource("openstack:dns/quotaV2:QuotaV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QuotaV2 resources.
type quotaV2State struct {
	// The maximum number of zones that can be
	// exported via the API.
	ApiExportSize *int `pulumi:"apiExportSize"`
	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectId *string `pulumi:"projectId"`
	// The maximum number of records in a
	// recordset.
	RecordsetRecords *int `pulumi:"recordsetRecords"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS quota.
	Region *string `pulumi:"region"`
	// The maximum number of records in a zone.
	ZoneRecords *int `pulumi:"zoneRecords"`
	// The maximum number of recordsets in a zone.
	ZoneRecordsets *int `pulumi:"zoneRecordsets"`
	// The maximum number of zones that can be created.
	Zones *int `pulumi:"zones"`
}

type QuotaV2State struct {
	// The maximum number of zones that can be
	// exported via the API.
	ApiExportSize pulumi.IntPtrInput
	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectId pulumi.StringPtrInput
	// The maximum number of records in a
	// recordset.
	RecordsetRecords pulumi.IntPtrInput
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS quota.
	Region pulumi.StringPtrInput
	// The maximum number of records in a zone.
	ZoneRecords pulumi.IntPtrInput
	// The maximum number of recordsets in a zone.
	ZoneRecordsets pulumi.IntPtrInput
	// The maximum number of zones that can be created.
	Zones pulumi.IntPtrInput
}

func (QuotaV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*quotaV2State)(nil)).Elem()
}

type quotaV2Args struct {
	// The maximum number of zones that can be
	// exported via the API.
	ApiExportSize *int `pulumi:"apiExportSize"`
	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectId string `pulumi:"projectId"`
	// The maximum number of records in a
	// recordset.
	RecordsetRecords *int `pulumi:"recordsetRecords"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS quota.
	Region *string `pulumi:"region"`
	// The maximum number of records in a zone.
	ZoneRecords *int `pulumi:"zoneRecords"`
	// The maximum number of recordsets in a zone.
	ZoneRecordsets *int `pulumi:"zoneRecordsets"`
	// The maximum number of zones that can be created.
	Zones *int `pulumi:"zones"`
}

// The set of arguments for constructing a QuotaV2 resource.
type QuotaV2Args struct {
	// The maximum number of zones that can be
	// exported via the API.
	ApiExportSize pulumi.IntPtrInput
	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectId pulumi.StringInput
	// The maximum number of records in a
	// recordset.
	RecordsetRecords pulumi.IntPtrInput
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS quota.
	Region pulumi.StringPtrInput
	// The maximum number of records in a zone.
	ZoneRecords pulumi.IntPtrInput
	// The maximum number of recordsets in a zone.
	ZoneRecordsets pulumi.IntPtrInput
	// The maximum number of zones that can be created.
	Zones pulumi.IntPtrInput
}

func (QuotaV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*quotaV2Args)(nil)).Elem()
}

type QuotaV2Input interface {
	pulumi.Input

	ToQuotaV2Output() QuotaV2Output
	ToQuotaV2OutputWithContext(ctx context.Context) QuotaV2Output
}

func (*QuotaV2) ElementType() reflect.Type {
	return reflect.TypeOf((**QuotaV2)(nil)).Elem()
}

func (i *QuotaV2) ToQuotaV2Output() QuotaV2Output {
	return i.ToQuotaV2OutputWithContext(context.Background())
}

func (i *QuotaV2) ToQuotaV2OutputWithContext(ctx context.Context) QuotaV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaV2Output)
}

// QuotaV2ArrayInput is an input type that accepts QuotaV2Array and QuotaV2ArrayOutput values.
// You can construct a concrete instance of `QuotaV2ArrayInput` via:
//
//	QuotaV2Array{ QuotaV2Args{...} }
type QuotaV2ArrayInput interface {
	pulumi.Input

	ToQuotaV2ArrayOutput() QuotaV2ArrayOutput
	ToQuotaV2ArrayOutputWithContext(context.Context) QuotaV2ArrayOutput
}

type QuotaV2Array []QuotaV2Input

func (QuotaV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuotaV2)(nil)).Elem()
}

func (i QuotaV2Array) ToQuotaV2ArrayOutput() QuotaV2ArrayOutput {
	return i.ToQuotaV2ArrayOutputWithContext(context.Background())
}

func (i QuotaV2Array) ToQuotaV2ArrayOutputWithContext(ctx context.Context) QuotaV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaV2ArrayOutput)
}

// QuotaV2MapInput is an input type that accepts QuotaV2Map and QuotaV2MapOutput values.
// You can construct a concrete instance of `QuotaV2MapInput` via:
//
//	QuotaV2Map{ "key": QuotaV2Args{...} }
type QuotaV2MapInput interface {
	pulumi.Input

	ToQuotaV2MapOutput() QuotaV2MapOutput
	ToQuotaV2MapOutputWithContext(context.Context) QuotaV2MapOutput
}

type QuotaV2Map map[string]QuotaV2Input

func (QuotaV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuotaV2)(nil)).Elem()
}

func (i QuotaV2Map) ToQuotaV2MapOutput() QuotaV2MapOutput {
	return i.ToQuotaV2MapOutputWithContext(context.Background())
}

func (i QuotaV2Map) ToQuotaV2MapOutputWithContext(ctx context.Context) QuotaV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaV2MapOutput)
}

type QuotaV2Output struct{ *pulumi.OutputState }

func (QuotaV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**QuotaV2)(nil)).Elem()
}

func (o QuotaV2Output) ToQuotaV2Output() QuotaV2Output {
	return o
}

func (o QuotaV2Output) ToQuotaV2OutputWithContext(ctx context.Context) QuotaV2Output {
	return o
}

// The maximum number of zones that can be
// exported via the API.
func (o QuotaV2Output) ApiExportSize() pulumi.IntOutput {
	return o.ApplyT(func(v *QuotaV2) pulumi.IntOutput { return v.ApiExportSize }).(pulumi.IntOutput)
}

// ID of the project to manage quota. Changing this
// creates new quota.
func (o QuotaV2Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *QuotaV2) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The maximum number of records in a
// recordset.
func (o QuotaV2Output) RecordsetRecords() pulumi.IntOutput {
	return o.ApplyT(func(v *QuotaV2) pulumi.IntOutput { return v.RecordsetRecords }).(pulumi.IntOutput)
}

// The region in which to obtain the V2 DNS client. If
// omitted, the `region` argument of the provider is used. Changing this creates
// a new DNS quota.
func (o QuotaV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *QuotaV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The maximum number of records in a zone.
func (o QuotaV2Output) ZoneRecords() pulumi.IntOutput {
	return o.ApplyT(func(v *QuotaV2) pulumi.IntOutput { return v.ZoneRecords }).(pulumi.IntOutput)
}

// The maximum number of recordsets in a zone.
func (o QuotaV2Output) ZoneRecordsets() pulumi.IntOutput {
	return o.ApplyT(func(v *QuotaV2) pulumi.IntOutput { return v.ZoneRecordsets }).(pulumi.IntOutput)
}

// The maximum number of zones that can be created.
func (o QuotaV2Output) Zones() pulumi.IntOutput {
	return o.ApplyT(func(v *QuotaV2) pulumi.IntOutput { return v.Zones }).(pulumi.IntOutput)
}

type QuotaV2ArrayOutput struct{ *pulumi.OutputState }

func (QuotaV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QuotaV2)(nil)).Elem()
}

func (o QuotaV2ArrayOutput) ToQuotaV2ArrayOutput() QuotaV2ArrayOutput {
	return o
}

func (o QuotaV2ArrayOutput) ToQuotaV2ArrayOutputWithContext(ctx context.Context) QuotaV2ArrayOutput {
	return o
}

func (o QuotaV2ArrayOutput) Index(i pulumi.IntInput) QuotaV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QuotaV2 {
		return vs[0].([]*QuotaV2)[vs[1].(int)]
	}).(QuotaV2Output)
}

type QuotaV2MapOutput struct{ *pulumi.OutputState }

func (QuotaV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QuotaV2)(nil)).Elem()
}

func (o QuotaV2MapOutput) ToQuotaV2MapOutput() QuotaV2MapOutput {
	return o
}

func (o QuotaV2MapOutput) ToQuotaV2MapOutputWithContext(ctx context.Context) QuotaV2MapOutput {
	return o
}

func (o QuotaV2MapOutput) MapIndex(k pulumi.StringInput) QuotaV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QuotaV2 {
		return vs[0].(map[string]*QuotaV2)[vs[1].(string)]
	}).(QuotaV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QuotaV2Input)(nil)).Elem(), &QuotaV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuotaV2ArrayInput)(nil)).Elem(), QuotaV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuotaV2MapInput)(nil)).Elem(), QuotaV2Map{})
	pulumi.RegisterOutputType(QuotaV2Output{})
	pulumi.RegisterOutputType(QuotaV2ArrayOutput{})
	pulumi.RegisterOutputType(QuotaV2MapOutput{})
}
