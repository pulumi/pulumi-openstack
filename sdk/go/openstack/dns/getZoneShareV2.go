// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a DNS zone share.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.LookupZoneShareV2(ctx, &dns.LookupZoneShareV2Args{
//				ZoneId:          "00000000-0000-0000-0000-000000000000",
//				TargetProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//				ProjectId:       pulumi.StringRef("22222222-2222-2222-2222-222222222222"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZoneShareV2(ctx *pulumi.Context, args *LookupZoneShareV2Args, opts ...pulumi.InvokeOption) (*LookupZoneShareV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZoneShareV2Result
	err := ctx.Invoke("openstack:dns/getZoneShareV2:getZoneShareV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZoneShareV2.
type LookupZoneShareV2Args struct {
	// If set to `true`, the data source will search
	// across all projects. If set to `false`, it will only search within the
	// current project. Defaults to `false`.
	AllProjects *string `pulumi:"allProjects"`
	// The owner project ID. If omitted, it is derived
	// from the zone share details.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS zone share data source.
	Region *string `pulumi:"region"`
	// The ID of the DNS zone share to retrieve. If
	// provided, the data source returns only the share with this ID.
	ShareId *string `pulumi:"shareId"`
	// If provided, the data source returns the
	// share with this target project ID.
	TargetProjectId *string `pulumi:"targetProjectId"`
	// The ID of the DNS zone for which to get share.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getZoneShareV2.
type LookupZoneShareV2Result struct {
	// See Argument Reference above.
	AllProjects *string `pulumi:"allProjects"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// See Argument Reference above.
	ProjectId *string `pulumi:"projectId"`
	// See Argument Reference above.
	Region string `pulumi:"region"`
	// The ID of the zone share.
	ShareId string `pulumi:"shareId"`
	// See Argument Reference above.
	TargetProjectId *string `pulumi:"targetProjectId"`
	// See Argument Reference above.
	ZoneId string `pulumi:"zoneId"`
}

func LookupZoneShareV2Output(ctx *pulumi.Context, args LookupZoneShareV2OutputArgs, opts ...pulumi.InvokeOption) LookupZoneShareV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZoneShareV2ResultOutput, error) {
			args := v.(LookupZoneShareV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("openstack:dns/getZoneShareV2:getZoneShareV2", args, LookupZoneShareV2ResultOutput{}, options).(LookupZoneShareV2ResultOutput), nil
		}).(LookupZoneShareV2ResultOutput)
}

// A collection of arguments for invoking getZoneShareV2.
type LookupZoneShareV2OutputArgs struct {
	// If set to `true`, the data source will search
	// across all projects. If set to `false`, it will only search within the
	// current project. Defaults to `false`.
	AllProjects pulumi.StringPtrInput `pulumi:"allProjects"`
	// The owner project ID. If omitted, it is derived
	// from the zone share details.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS zone share data source.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The ID of the DNS zone share to retrieve. If
	// provided, the data source returns only the share with this ID.
	ShareId pulumi.StringPtrInput `pulumi:"shareId"`
	// If provided, the data source returns the
	// share with this target project ID.
	TargetProjectId pulumi.StringPtrInput `pulumi:"targetProjectId"`
	// The ID of the DNS zone for which to get share.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupZoneShareV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneShareV2Args)(nil)).Elem()
}

// A collection of values returned by getZoneShareV2.
type LookupZoneShareV2ResultOutput struct{ *pulumi.OutputState }

func (LookupZoneShareV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneShareV2Result)(nil)).Elem()
}

func (o LookupZoneShareV2ResultOutput) ToLookupZoneShareV2ResultOutput() LookupZoneShareV2ResultOutput {
	return o
}

func (o LookupZoneShareV2ResultOutput) ToLookupZoneShareV2ResultOutputWithContext(ctx context.Context) LookupZoneShareV2ResultOutput {
	return o
}

// See Argument Reference above.
func (o LookupZoneShareV2ResultOutput) AllProjects() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZoneShareV2Result) *string { return v.AllProjects }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupZoneShareV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneShareV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o LookupZoneShareV2ResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZoneShareV2Result) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// See Argument Reference above.
func (o LookupZoneShareV2ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneShareV2Result) string { return v.Region }).(pulumi.StringOutput)
}

// The ID of the zone share.
func (o LookupZoneShareV2ResultOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneShareV2Result) string { return v.ShareId }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o LookupZoneShareV2ResultOutput) TargetProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZoneShareV2Result) *string { return v.TargetProjectId }).(pulumi.StringPtrOutput)
}

// See Argument Reference above.
func (o LookupZoneShareV2ResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneShareV2Result) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZoneShareV2ResultOutput{})
}
