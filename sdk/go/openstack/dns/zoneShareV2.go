// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the sharing of a DNS zone in the OpenStack DNS Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.NewZoneShareV2(ctx, "example", &dns.ZoneShareV2Args{
//				ZoneId:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				TargetProjectId: pulumi.String("11111111-1111-1111-1111-111111111111"),
//				ProjectId:       pulumi.String("22222222-2222-2222-2222-222222222222"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DNS zone share can be imported by specifying the zone ID with share ID and optional project ID:
//
// bash
//
// ```sh
// $ pulumi import openstack:dns/zoneShareV2:ZoneShareV2 share_1 60cbdc69-64f9-49ee-b294-352e71e22827/0e1dae51-aee2-4b44-962f-885bb69f3a5c
// ```
//
// ```sh
// $ pulumi import openstack:dns/zoneShareV2:ZoneShareV2 share_1 60cbdc69-64f9-49ee-b294-352e71e22827/0e1dae51-aee2-4b44-962f-885bb69f3a5c/eb92139f6c054a878852ac9e8cbe612a
// ```
type ZoneShareV2 struct {
	pulumi.CustomResourceState

	// The ID of the project DNS zone is created for, sets
	// `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target
	// project).
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS zone share.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the target project with which the
	// DNS zone will be shared.
	TargetProjectId pulumi.StringOutput `pulumi:"targetProjectId"`
	// The ID of the DNS zone to be shared.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneShareV2 registers a new resource with the given unique name, arguments, and options.
func NewZoneShareV2(ctx *pulumi.Context,
	name string, args *ZoneShareV2Args, opts ...pulumi.ResourceOption) (*ZoneShareV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetProjectId == nil {
		return nil, errors.New("invalid value for required argument 'TargetProjectId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneShareV2
	err := ctx.RegisterResource("openstack:dns/zoneShareV2:ZoneShareV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneShareV2 gets an existing ZoneShareV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneShareV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneShareV2State, opts ...pulumi.ResourceOption) (*ZoneShareV2, error) {
	var resource ZoneShareV2
	err := ctx.ReadResource("openstack:dns/zoneShareV2:ZoneShareV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneShareV2 resources.
type zoneShareV2State struct {
	// The ID of the project DNS zone is created for, sets
	// `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target
	// project).
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS zone share.
	Region *string `pulumi:"region"`
	// The ID of the target project with which the
	// DNS zone will be shared.
	TargetProjectId *string `pulumi:"targetProjectId"`
	// The ID of the DNS zone to be shared.
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneShareV2State struct {
	// The ID of the project DNS zone is created for, sets
	// `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target
	// project).
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS zone share.
	Region pulumi.StringPtrInput
	// The ID of the target project with which the
	// DNS zone will be shared.
	TargetProjectId pulumi.StringPtrInput
	// The ID of the DNS zone to be shared.
	ZoneId pulumi.StringPtrInput
}

func (ZoneShareV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneShareV2State)(nil)).Elem()
}

type zoneShareV2Args struct {
	// The ID of the project DNS zone is created for, sets
	// `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target
	// project).
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS zone share.
	Region *string `pulumi:"region"`
	// The ID of the target project with which the
	// DNS zone will be shared.
	TargetProjectId string `pulumi:"targetProjectId"`
	// The ID of the DNS zone to be shared.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneShareV2 resource.
type ZoneShareV2Args struct {
	// The ID of the project DNS zone is created for, sets
	// `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target
	// project).
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 DNS client. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new DNS zone share.
	Region pulumi.StringPtrInput
	// The ID of the target project with which the
	// DNS zone will be shared.
	TargetProjectId pulumi.StringInput
	// The ID of the DNS zone to be shared.
	ZoneId pulumi.StringInput
}

func (ZoneShareV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneShareV2Args)(nil)).Elem()
}

type ZoneShareV2Input interface {
	pulumi.Input

	ToZoneShareV2Output() ZoneShareV2Output
	ToZoneShareV2OutputWithContext(ctx context.Context) ZoneShareV2Output
}

func (*ZoneShareV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneShareV2)(nil)).Elem()
}

func (i *ZoneShareV2) ToZoneShareV2Output() ZoneShareV2Output {
	return i.ToZoneShareV2OutputWithContext(context.Background())
}

func (i *ZoneShareV2) ToZoneShareV2OutputWithContext(ctx context.Context) ZoneShareV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneShareV2Output)
}

// ZoneShareV2ArrayInput is an input type that accepts ZoneShareV2Array and ZoneShareV2ArrayOutput values.
// You can construct a concrete instance of `ZoneShareV2ArrayInput` via:
//
//	ZoneShareV2Array{ ZoneShareV2Args{...} }
type ZoneShareV2ArrayInput interface {
	pulumi.Input

	ToZoneShareV2ArrayOutput() ZoneShareV2ArrayOutput
	ToZoneShareV2ArrayOutputWithContext(context.Context) ZoneShareV2ArrayOutput
}

type ZoneShareV2Array []ZoneShareV2Input

func (ZoneShareV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneShareV2)(nil)).Elem()
}

func (i ZoneShareV2Array) ToZoneShareV2ArrayOutput() ZoneShareV2ArrayOutput {
	return i.ToZoneShareV2ArrayOutputWithContext(context.Background())
}

func (i ZoneShareV2Array) ToZoneShareV2ArrayOutputWithContext(ctx context.Context) ZoneShareV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneShareV2ArrayOutput)
}

// ZoneShareV2MapInput is an input type that accepts ZoneShareV2Map and ZoneShareV2MapOutput values.
// You can construct a concrete instance of `ZoneShareV2MapInput` via:
//
//	ZoneShareV2Map{ "key": ZoneShareV2Args{...} }
type ZoneShareV2MapInput interface {
	pulumi.Input

	ToZoneShareV2MapOutput() ZoneShareV2MapOutput
	ToZoneShareV2MapOutputWithContext(context.Context) ZoneShareV2MapOutput
}

type ZoneShareV2Map map[string]ZoneShareV2Input

func (ZoneShareV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneShareV2)(nil)).Elem()
}

func (i ZoneShareV2Map) ToZoneShareV2MapOutput() ZoneShareV2MapOutput {
	return i.ToZoneShareV2MapOutputWithContext(context.Background())
}

func (i ZoneShareV2Map) ToZoneShareV2MapOutputWithContext(ctx context.Context) ZoneShareV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneShareV2MapOutput)
}

type ZoneShareV2Output struct{ *pulumi.OutputState }

func (ZoneShareV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneShareV2)(nil)).Elem()
}

func (o ZoneShareV2Output) ToZoneShareV2Output() ZoneShareV2Output {
	return o
}

func (o ZoneShareV2Output) ToZoneShareV2OutputWithContext(ctx context.Context) ZoneShareV2Output {
	return o
}

// The ID of the project DNS zone is created for, sets
// `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target
// project).
func (o ZoneShareV2Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneShareV2) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 DNS client. If
// omitted, the `region` argument of the provider is used. Changing this creates
// a new DNS zone share.
func (o ZoneShareV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneShareV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the target project with which the
// DNS zone will be shared.
func (o ZoneShareV2Output) TargetProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneShareV2) pulumi.StringOutput { return v.TargetProjectId }).(pulumi.StringOutput)
}

// The ID of the DNS zone to be shared.
func (o ZoneShareV2Output) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneShareV2) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneShareV2ArrayOutput struct{ *pulumi.OutputState }

func (ZoneShareV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneShareV2)(nil)).Elem()
}

func (o ZoneShareV2ArrayOutput) ToZoneShareV2ArrayOutput() ZoneShareV2ArrayOutput {
	return o
}

func (o ZoneShareV2ArrayOutput) ToZoneShareV2ArrayOutputWithContext(ctx context.Context) ZoneShareV2ArrayOutput {
	return o
}

func (o ZoneShareV2ArrayOutput) Index(i pulumi.IntInput) ZoneShareV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneShareV2 {
		return vs[0].([]*ZoneShareV2)[vs[1].(int)]
	}).(ZoneShareV2Output)
}

type ZoneShareV2MapOutput struct{ *pulumi.OutputState }

func (ZoneShareV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneShareV2)(nil)).Elem()
}

func (o ZoneShareV2MapOutput) ToZoneShareV2MapOutput() ZoneShareV2MapOutput {
	return o
}

func (o ZoneShareV2MapOutput) ToZoneShareV2MapOutputWithContext(ctx context.Context) ZoneShareV2MapOutput {
	return o
}

func (o ZoneShareV2MapOutput) MapIndex(k pulumi.StringInput) ZoneShareV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneShareV2 {
		return vs[0].(map[string]*ZoneShareV2)[vs[1].(string)]
	}).(ZoneShareV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneShareV2Input)(nil)).Elem(), &ZoneShareV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneShareV2ArrayInput)(nil)).Elem(), ZoneShareV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneShareV2MapInput)(nil)).Elem(), ZoneShareV2Map{})
	pulumi.RegisterOutputType(ZoneShareV2Output{})
	pulumi.RegisterOutputType(ZoneShareV2ArrayOutput{})
	pulumi.RegisterOutputType(ZoneShareV2MapOutput{})
}
