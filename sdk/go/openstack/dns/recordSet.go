// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a DNS record set in the OpenStack DNS Service.
type RecordSet struct {
	s *pulumi.ResourceState
}

// NewRecordSet registers a new resource with the given unique name, arguments, and options.
func NewRecordSet(ctx *pulumi.Context,
	name string, args *RecordSetArgs, opts ...pulumi.ResourceOpt) (*RecordSet, error) {
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["records"] = nil
		inputs["region"] = nil
		inputs["ttl"] = nil
		inputs["type"] = nil
		inputs["valueSpecs"] = nil
		inputs["zoneId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["records"] = args.Records
		inputs["region"] = args.Region
		inputs["ttl"] = args.Ttl
		inputs["type"] = args.Type
		inputs["valueSpecs"] = args.ValueSpecs
		inputs["zoneId"] = args.ZoneId
	}
	s, err := ctx.RegisterResource("openstack:dns/recordSet:RecordSet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RecordSet{s: s}, nil
}

// GetRecordSet gets an existing RecordSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordSet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RecordSetState, opts ...pulumi.ResourceOpt) (*RecordSet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["records"] = state.Records
		inputs["region"] = state.Region
		inputs["ttl"] = state.Ttl
		inputs["type"] = state.Type
		inputs["valueSpecs"] = state.ValueSpecs
		inputs["zoneId"] = state.ZoneId
	}
	s, err := ctx.ReadResource("openstack:dns/recordSet:RecordSet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RecordSet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RecordSet) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RecordSet) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A description of the  record set.
func (r *RecordSet) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The name of the record set. Note the `.` at the end of the name.
// Changing this creates a new DNS  record set.
func (r *RecordSet) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// An array of DNS records.
func (r *RecordSet) Records() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["records"])
}

// The region in which to obtain the V2 DNS client.
// If omitted, the `region` argument of the provider is used.
// Changing this creates a new DNS  record set.
func (r *RecordSet) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The time to live (TTL) of the record set.
func (r *RecordSet) Ttl() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ttl"])
}

// The type of record set. Examples: "A", "MX".
// Changing this creates a new DNS  record set.
func (r *RecordSet) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Map of additional options. Changing this creates a
// new record set.
func (r *RecordSet) ValueSpecs() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["valueSpecs"])
}

// The ID of the zone in which to create the record set.
// Changing this creates a new DNS  record set.
func (r *RecordSet) ZoneId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneId"])
}

// Input properties used for looking up and filtering RecordSet resources.
type RecordSetState struct {
	// A description of the  record set.
	Description interface{}
	// The name of the record set. Note the `.` at the end of the name.
	// Changing this creates a new DNS  record set.
	Name interface{}
	// An array of DNS records.
	Records interface{}
	// The region in which to obtain the V2 DNS client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new DNS  record set.
	Region interface{}
	// The time to live (TTL) of the record set.
	Ttl interface{}
	// The type of record set. Examples: "A", "MX".
	// Changing this creates a new DNS  record set.
	Type interface{}
	// Map of additional options. Changing this creates a
	// new record set.
	ValueSpecs interface{}
	// The ID of the zone in which to create the record set.
	// Changing this creates a new DNS  record set.
	ZoneId interface{}
}

// The set of arguments for constructing a RecordSet resource.
type RecordSetArgs struct {
	// A description of the  record set.
	Description interface{}
	// The name of the record set. Note the `.` at the end of the name.
	// Changing this creates a new DNS  record set.
	Name interface{}
	// An array of DNS records.
	Records interface{}
	// The region in which to obtain the V2 DNS client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new DNS  record set.
	Region interface{}
	// The time to live (TTL) of the record set.
	Ttl interface{}
	// The type of record set. Examples: "A", "MX".
	// Changing this creates a new DNS  record set.
	Type interface{}
	// Map of additional options. Changing this creates a
	// new record set.
	ValueSpecs interface{}
	// The ID of the zone in which to create the record set.
	// Changing this creates a new DNS  record set.
	ZoneId interface{}
}
