// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about server groups
// by name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.GetServergroupV2(ctx, &compute.GetServergroupV2Args{
//				Name: "test",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetServergroupV2(ctx *pulumi.Context, args *GetServergroupV2Args, opts ...pulumi.InvokeOption) (*GetServergroupV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServergroupV2Result
	err := ctx.Invoke("openstack:compute/getServergroupV2:getServergroupV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServergroupV2.
type GetServergroupV2Args struct {
	// The name of the server group.
	Name string `pulumi:"name"`
	// The region in which to obtain the V2 Compute client.
	// If omitted, the `region` argument of the provider is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getServergroupV2.
type GetServergroupV2Result struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The instances that are part of this server group.
	Members []string `pulumi:"members"`
	// Metadata of the server group.
	Metadata map[string]string `pulumi:"metadata"`
	// See Argument Reference above.
	Name string `pulumi:"name"`
	// Policy name associated with the server group.
	Policies []string `pulumi:"policies"`
	// Project ID of the server group.
	ProjectId string `pulumi:"projectId"`
	Region    string `pulumi:"region"`
	// Rules which are applied to specified policy.
	Rules []GetServergroupV2Rule `pulumi:"rules"`
	// User ID of the server group.
	UserId string `pulumi:"userId"`
}

func GetServergroupV2Output(ctx *pulumi.Context, args GetServergroupV2OutputArgs, opts ...pulumi.InvokeOption) GetServergroupV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetServergroupV2ResultOutput, error) {
			args := v.(GetServergroupV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("openstack:compute/getServergroupV2:getServergroupV2", args, GetServergroupV2ResultOutput{}, options).(GetServergroupV2ResultOutput), nil
		}).(GetServergroupV2ResultOutput)
}

// A collection of arguments for invoking getServergroupV2.
type GetServergroupV2OutputArgs struct {
	// The name of the server group.
	Name pulumi.StringInput `pulumi:"name"`
	// The region in which to obtain the V2 Compute client.
	// If omitted, the `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetServergroupV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServergroupV2Args)(nil)).Elem()
}

// A collection of values returned by getServergroupV2.
type GetServergroupV2ResultOutput struct{ *pulumi.OutputState }

func (GetServergroupV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServergroupV2Result)(nil)).Elem()
}

func (o GetServergroupV2ResultOutput) ToGetServergroupV2ResultOutput() GetServergroupV2ResultOutput {
	return o
}

func (o GetServergroupV2ResultOutput) ToGetServergroupV2ResultOutputWithContext(ctx context.Context) GetServergroupV2ResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetServergroupV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServergroupV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// The instances that are part of this server group.
func (o GetServergroupV2ResultOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServergroupV2Result) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Metadata of the server group.
func (o GetServergroupV2ResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServergroupV2Result) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// See Argument Reference above.
func (o GetServergroupV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServergroupV2Result) string { return v.Name }).(pulumi.StringOutput)
}

// Policy name associated with the server group.
func (o GetServergroupV2ResultOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServergroupV2Result) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// Project ID of the server group.
func (o GetServergroupV2ResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServergroupV2Result) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetServergroupV2ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetServergroupV2Result) string { return v.Region }).(pulumi.StringOutput)
}

// Rules which are applied to specified policy.
func (o GetServergroupV2ResultOutput) Rules() GetServergroupV2RuleArrayOutput {
	return o.ApplyT(func(v GetServergroupV2Result) []GetServergroupV2Rule { return v.Rules }).(GetServergroupV2RuleArrayOutput)
}

// User ID of the server group.
func (o GetServergroupV2ResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServergroupV2Result) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServergroupV2ResultOutput{})
}
