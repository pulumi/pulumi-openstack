// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 security group resource within OpenStack.
// 
// Please note that managing security groups through the OpenStack Compute API
// has been deprecated. Unless you are using an older OpenStack environment, it is
// recommended to use the `openstack_networking_secgroup_v2`
// and `openstack_networking_secgroup_rule_v2`
// resources instead, which uses the OpenStack Networking API.
type SecGroup struct {
	s *pulumi.ResourceState
}

// NewSecGroup registers a new resource with the given unique name, arguments, and options.
func NewSecGroup(ctx *pulumi.Context,
	name string, args *SecGroupArgs, opts ...pulumi.ResourceOpt) (*SecGroup, error) {
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["rules"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["rules"] = args.Rules
	}
	s, err := ctx.RegisterResource("openstack:compute/secGroup:SecGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecGroup{s: s}, nil
}

// GetSecGroup gets an existing SecGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecGroupState, opts ...pulumi.ResourceOpt) (*SecGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["rules"] = state.Rules
	}
	s, err := ctx.ReadResource("openstack:compute/secGroup:SecGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A description for the security group. Changing this
// updates the `description` of an existing security group.
func (r *SecGroup) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A unique name for the security group. Changing this
// updates the `name` of an existing security group.
func (r *SecGroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The region in which to obtain the V2 Compute client.
// A Compute client is needed to create a security group. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// security group.
func (r *SecGroup) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// A rule describing how the security group operates. The
// rule object structure is documented below. Changing this updates the
// security group rules. As shown in the example above, multiple rule blocks
// may be used.
func (r *SecGroup) Rules() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["rules"])
}

// Input properties used for looking up and filtering SecGroup resources.
type SecGroupState struct {
	// A description for the security group. Changing this
	// updates the `description` of an existing security group.
	Description interface{}
	// A unique name for the security group. Changing this
	// updates the `name` of an existing security group.
	Name interface{}
	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a security group. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// security group.
	Region interface{}
	// A rule describing how the security group operates. The
	// rule object structure is documented below. Changing this updates the
	// security group rules. As shown in the example above, multiple rule blocks
	// may be used.
	Rules interface{}
}

// The set of arguments for constructing a SecGroup resource.
type SecGroupArgs struct {
	// A description for the security group. Changing this
	// updates the `description` of an existing security group.
	Description interface{}
	// A unique name for the security group. Changing this
	// updates the `name` of an existing security group.
	Name interface{}
	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a security group. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// security group.
	Region interface{}
	// A rule describing how the security group operates. The
	// rule object structure is documented below. Changing this updates the
	// security group rules. As shown in the example above, multiple rule blocks
	// may be used.
	Rules interface{}
}
