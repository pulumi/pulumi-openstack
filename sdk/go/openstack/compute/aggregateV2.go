// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Host Aggregate within Openstack Nova.
//
// ## Example Usage
// ### Full example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewAggregateV2(ctx, "dellServers", &compute.AggregateV2Args{
//				Hosts: pulumi.StringArray{
//					pulumi.String("myhost01.example.com"),
//					pulumi.String("myhost02.example.com"),
//				},
//				Metadata: pulumi.StringMap{
//					"cpus": pulumi.String("56"),
//				},
//				Region: pulumi.String("RegionOne"),
//				Zone:   pulumi.String("nova"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Minimum required example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.NewAggregateV2(ctx, "test", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import an existing Host Aggregate by their ID.
//
// ```sh
//
//	$ pulumi import openstack:compute/aggregateV2:AggregateV2 myaggregate 24
//
// ```
//
//	The ID can be obtained with an openstack command$ openstack aggregate list +----+------+-------------------+ | ID | Name | Availability Zone | +----+------+-------------------+ | 59 | test | None
//
// | +----+------+-------------------+
type AggregateV2 struct {
	pulumi.CustomResourceState

	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The name of the Host Aggregate
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the Host Aggregate. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	Region pulumi.StringOutput `pulumi:"region"`
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewAggregateV2 registers a new resource with the given unique name, arguments, and options.
func NewAggregateV2(ctx *pulumi.Context,
	name string, args *AggregateV2Args, opts ...pulumi.ResourceOption) (*AggregateV2, error) {
	if args == nil {
		args = &AggregateV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AggregateV2
	err := ctx.RegisterResource("openstack:compute/aggregateV2:AggregateV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAggregateV2 gets an existing AggregateV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAggregateV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AggregateV2State, opts ...pulumi.ResourceOption) (*AggregateV2, error) {
	var resource AggregateV2
	err := ctx.ReadResource("openstack:compute/aggregateV2:AggregateV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AggregateV2 resources.
type aggregateV2State struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts []string `pulumi:"hosts"`
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the Host Aggregate
	Name *string `pulumi:"name"`
	// The region in which to create the Host Aggregate. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	Region *string `pulumi:"region"`
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone *string `pulumi:"zone"`
}

type AggregateV2State struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts pulumi.StringArrayInput
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata pulumi.StringMapInput
	// The name of the Host Aggregate
	Name pulumi.StringPtrInput
	// The region in which to create the Host Aggregate. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	Region pulumi.StringPtrInput
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone pulumi.StringPtrInput
}

func (AggregateV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregateV2State)(nil)).Elem()
}

type aggregateV2Args struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts []string `pulumi:"hosts"`
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the Host Aggregate
	Name *string `pulumi:"name"`
	// The region in which to create the Host Aggregate. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	Region *string `pulumi:"region"`
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a AggregateV2 resource.
type AggregateV2Args struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts pulumi.StringArrayInput
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata pulumi.StringMapInput
	// The name of the Host Aggregate
	Name pulumi.StringPtrInput
	// The region in which to create the Host Aggregate. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	Region pulumi.StringPtrInput
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone pulumi.StringPtrInput
}

func (AggregateV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregateV2Args)(nil)).Elem()
}

type AggregateV2Input interface {
	pulumi.Input

	ToAggregateV2Output() AggregateV2Output
	ToAggregateV2OutputWithContext(ctx context.Context) AggregateV2Output
}

func (*AggregateV2) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateV2)(nil)).Elem()
}

func (i *AggregateV2) ToAggregateV2Output() AggregateV2Output {
	return i.ToAggregateV2OutputWithContext(context.Background())
}

func (i *AggregateV2) ToAggregateV2OutputWithContext(ctx context.Context) AggregateV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateV2Output)
}

// AggregateV2ArrayInput is an input type that accepts AggregateV2Array and AggregateV2ArrayOutput values.
// You can construct a concrete instance of `AggregateV2ArrayInput` via:
//
//	AggregateV2Array{ AggregateV2Args{...} }
type AggregateV2ArrayInput interface {
	pulumi.Input

	ToAggregateV2ArrayOutput() AggregateV2ArrayOutput
	ToAggregateV2ArrayOutputWithContext(context.Context) AggregateV2ArrayOutput
}

type AggregateV2Array []AggregateV2Input

func (AggregateV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AggregateV2)(nil)).Elem()
}

func (i AggregateV2Array) ToAggregateV2ArrayOutput() AggregateV2ArrayOutput {
	return i.ToAggregateV2ArrayOutputWithContext(context.Background())
}

func (i AggregateV2Array) ToAggregateV2ArrayOutputWithContext(ctx context.Context) AggregateV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateV2ArrayOutput)
}

// AggregateV2MapInput is an input type that accepts AggregateV2Map and AggregateV2MapOutput values.
// You can construct a concrete instance of `AggregateV2MapInput` via:
//
//	AggregateV2Map{ "key": AggregateV2Args{...} }
type AggregateV2MapInput interface {
	pulumi.Input

	ToAggregateV2MapOutput() AggregateV2MapOutput
	ToAggregateV2MapOutputWithContext(context.Context) AggregateV2MapOutput
}

type AggregateV2Map map[string]AggregateV2Input

func (AggregateV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AggregateV2)(nil)).Elem()
}

func (i AggregateV2Map) ToAggregateV2MapOutput() AggregateV2MapOutput {
	return i.ToAggregateV2MapOutputWithContext(context.Background())
}

func (i AggregateV2Map) ToAggregateV2MapOutputWithContext(ctx context.Context) AggregateV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateV2MapOutput)
}

type AggregateV2Output struct{ *pulumi.OutputState }

func (AggregateV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateV2)(nil)).Elem()
}

func (o AggregateV2Output) ToAggregateV2Output() AggregateV2Output {
	return o
}

func (o AggregateV2Output) ToAggregateV2OutputWithContext(ctx context.Context) AggregateV2Output {
	return o
}

// The list of hosts contained in the Host Aggregate. The hosts must be added
// to Openstack and visible in the web interface, or the provider will fail to add them to the host
// aggregate.
func (o AggregateV2Output) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AggregateV2) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
func (o AggregateV2Output) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AggregateV2) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The name of the Host Aggregate
func (o AggregateV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregateV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the Host Aggregate. If
// omitted, the `region` argument of the provider is used. Changing this
// creates a new Host Aggregate.
func (o AggregateV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregateV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The name of the Availability Zone to use. If ommited, it will take the default
// availability zone.
func (o AggregateV2Output) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregateV2) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type AggregateV2ArrayOutput struct{ *pulumi.OutputState }

func (AggregateV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AggregateV2)(nil)).Elem()
}

func (o AggregateV2ArrayOutput) ToAggregateV2ArrayOutput() AggregateV2ArrayOutput {
	return o
}

func (o AggregateV2ArrayOutput) ToAggregateV2ArrayOutputWithContext(ctx context.Context) AggregateV2ArrayOutput {
	return o
}

func (o AggregateV2ArrayOutput) Index(i pulumi.IntInput) AggregateV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AggregateV2 {
		return vs[0].([]*AggregateV2)[vs[1].(int)]
	}).(AggregateV2Output)
}

type AggregateV2MapOutput struct{ *pulumi.OutputState }

func (AggregateV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AggregateV2)(nil)).Elem()
}

func (o AggregateV2MapOutput) ToAggregateV2MapOutput() AggregateV2MapOutput {
	return o
}

func (o AggregateV2MapOutput) ToAggregateV2MapOutputWithContext(ctx context.Context) AggregateV2MapOutput {
	return o
}

func (o AggregateV2MapOutput) MapIndex(k pulumi.StringInput) AggregateV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AggregateV2 {
		return vs[0].(map[string]*AggregateV2)[vs[1].(string)]
	}).(AggregateV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AggregateV2Input)(nil)).Elem(), &AggregateV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*AggregateV2ArrayInput)(nil)).Elem(), AggregateV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*AggregateV2MapInput)(nil)).Elem(), AggregateV2Map{})
	pulumi.RegisterOutputType(AggregateV2Output{})
	pulumi.RegisterOutputType(AggregateV2ArrayOutput{})
	pulumi.RegisterOutputType(AggregateV2MapOutput{})
}
