// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 floating IP resource within OpenStack Nova (compute)
// that can be used for compute instances.
// 
// Please note that managing floating IPs through the OpenStack Compute API has
// been deprecated. Unless you are using an older OpenStack environment, it is
// recommended to use the `openstack_networking_floatingip_v2`
// resource instead, which uses the OpenStack Networking API.
type FloatingIp struct {
	s *pulumi.ResourceState
}

// NewFloatingIp registers a new resource with the given unique name, arguments, and options.
func NewFloatingIp(ctx *pulumi.Context,
	name string, args *FloatingIpArgs, opts ...pulumi.ResourceOpt) (*FloatingIp, error) {
	if args == nil || args.Pool == nil {
		return nil, errors.New("missing required argument 'Pool'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["pool"] = nil
		inputs["region"] = nil
	} else {
		inputs["pool"] = args.Pool
		inputs["region"] = args.Region
	}
	inputs["address"] = nil
	inputs["fixedIp"] = nil
	inputs["instanceId"] = nil
	s, err := ctx.RegisterResource("openstack:compute/floatingIp:FloatingIp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIp{s: s}, nil
}

// GetFloatingIp gets an existing FloatingIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FloatingIpState, opts ...pulumi.ResourceOpt) (*FloatingIp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["fixedIp"] = state.FixedIp
		inputs["instanceId"] = state.InstanceId
		inputs["pool"] = state.Pool
		inputs["region"] = state.Region
	}
	s, err := ctx.ReadResource("openstack:compute/floatingIp:FloatingIp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FloatingIp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FloatingIp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The actual floating IP address itself.
func (r *FloatingIp) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// The fixed IP address corresponding to the floating IP.
func (r *FloatingIp) FixedIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fixedIp"])
}

// UUID of the compute instance associated with the floating IP.
func (r *FloatingIp) InstanceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceId"])
}

// The name of the pool from which to obtain the floating
// IP. Changing this creates a new floating IP.
func (r *FloatingIp) Pool() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pool"])
}

// The region in which to obtain the V2 Compute client.
// A Compute client is needed to create a floating IP that can be used with
// a compute instance. If omitted, the `region` argument of the provider
// is used. Changing this creates a new floating IP (which may or may not
// have a different address).
func (r *FloatingIp) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Input properties used for looking up and filtering FloatingIp resources.
type FloatingIpState struct {
	// The actual floating IP address itself.
	Address interface{}
	// The fixed IP address corresponding to the floating IP.
	FixedIp interface{}
	// UUID of the compute instance associated with the floating IP.
	InstanceId interface{}
	// The name of the pool from which to obtain the floating
	// IP. Changing this creates a new floating IP.
	Pool interface{}
	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a floating IP that can be used with
	// a compute instance. If omitted, the `region` argument of the provider
	// is used. Changing this creates a new floating IP (which may or may not
	// have a different address).
	Region interface{}
}

// The set of arguments for constructing a FloatingIp resource.
type FloatingIpArgs struct {
	// The name of the pool from which to obtain the floating
	// IP. Changing this creates a new floating IP.
	Pool interface{}
	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a floating IP that can be used with
	// a compute instance. If omitted, the `region` argument of the provider
	// is used. Changing this creates a new floating IP (which may or may not
	// have a different address).
	Region interface{}
}
