// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bgpvpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V2 BGP VPN router association resource within OpenStack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/bgpvpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bgpvpn.NewRouterAssociateV2(ctx, "association_1", &bgpvpn.RouterAssociateV2Args{
//				BgpvpnId: pulumi.String("d57d39e1-dc63-44fd-8cbd-a4e1488100c5"),
//				RouterId: pulumi.String("423fa80f-e0d7-4d02-a9a5-8b8c05812bf6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # BGP VPN router associations can be imported using the BGP VPN ID and BGP VPN
//
// router association ID separated by a slash, e.g.:
//
// hcl
//
// ```sh
// $ pulumi import openstack:bgpvpn/routerAssociateV2:RouterAssociateV2 association_1 e26d509e-fc2d-4fb5-8562-619911a9a6bc/3cc9df2d-80db-4536-8ba6-295d1d0f723f
// ```
type RouterAssociateV2 struct {
	pulumi.CustomResourceState

	// A boolean flag indicating whether extra
	// routes should be advertised. Defaults to true.
	AdvertiseExtraRoutes pulumi.BoolOutput `pulumi:"advertiseExtraRoutes"`
	// The ID of the BGP VPN to which the router will be
	// associated. Changing this creates a new BGP VPN router association.
	BgpvpnId pulumi.StringOutput `pulumi:"bgpvpnId"`
	// The ID of the project that owns the BGP VPN router
	// association. Only administrative and users with `advsvc` role can specify a
	// project ID other than their own. Changing this creates a new BGP VPN router
	// association.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN router association. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new BGP VPN router association.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the router to be associated with the BGP
	// VPN. Changing this creates a new BGP VPN router association.
	RouterId pulumi.StringOutput `pulumi:"routerId"`
}

// NewRouterAssociateV2 registers a new resource with the given unique name, arguments, and options.
func NewRouterAssociateV2(ctx *pulumi.Context,
	name string, args *RouterAssociateV2Args, opts ...pulumi.ResourceOption) (*RouterAssociateV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BgpvpnId == nil {
		return nil, errors.New("invalid value for required argument 'BgpvpnId'")
	}
	if args.RouterId == nil {
		return nil, errors.New("invalid value for required argument 'RouterId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("openstack:index/bgpvpnRouterAssociateV2:BgpvpnRouterAssociateV2"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterAssociateV2
	err := ctx.RegisterResource("openstack:bgpvpn/routerAssociateV2:RouterAssociateV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterAssociateV2 gets an existing RouterAssociateV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterAssociateV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterAssociateV2State, opts ...pulumi.ResourceOption) (*RouterAssociateV2, error) {
	var resource RouterAssociateV2
	err := ctx.ReadResource("openstack:bgpvpn/routerAssociateV2:RouterAssociateV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterAssociateV2 resources.
type routerAssociateV2State struct {
	// A boolean flag indicating whether extra
	// routes should be advertised. Defaults to true.
	AdvertiseExtraRoutes *bool `pulumi:"advertiseExtraRoutes"`
	// The ID of the BGP VPN to which the router will be
	// associated. Changing this creates a new BGP VPN router association.
	BgpvpnId *string `pulumi:"bgpvpnId"`
	// The ID of the project that owns the BGP VPN router
	// association. Only administrative and users with `advsvc` role can specify a
	// project ID other than their own. Changing this creates a new BGP VPN router
	// association.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN router association. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new BGP VPN router association.
	Region *string `pulumi:"region"`
	// The ID of the router to be associated with the BGP
	// VPN. Changing this creates a new BGP VPN router association.
	RouterId *string `pulumi:"routerId"`
}

type RouterAssociateV2State struct {
	// A boolean flag indicating whether extra
	// routes should be advertised. Defaults to true.
	AdvertiseExtraRoutes pulumi.BoolPtrInput
	// The ID of the BGP VPN to which the router will be
	// associated. Changing this creates a new BGP VPN router association.
	BgpvpnId pulumi.StringPtrInput
	// The ID of the project that owns the BGP VPN router
	// association. Only administrative and users with `advsvc` role can specify a
	// project ID other than their own. Changing this creates a new BGP VPN router
	// association.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN router association. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new BGP VPN router association.
	Region pulumi.StringPtrInput
	// The ID of the router to be associated with the BGP
	// VPN. Changing this creates a new BGP VPN router association.
	RouterId pulumi.StringPtrInput
}

func (RouterAssociateV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAssociateV2State)(nil)).Elem()
}

type routerAssociateV2Args struct {
	// A boolean flag indicating whether extra
	// routes should be advertised. Defaults to true.
	AdvertiseExtraRoutes *bool `pulumi:"advertiseExtraRoutes"`
	// The ID of the BGP VPN to which the router will be
	// associated. Changing this creates a new BGP VPN router association.
	BgpvpnId string `pulumi:"bgpvpnId"`
	// The ID of the project that owns the BGP VPN router
	// association. Only administrative and users with `advsvc` role can specify a
	// project ID other than their own. Changing this creates a new BGP VPN router
	// association.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN router association. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new BGP VPN router association.
	Region *string `pulumi:"region"`
	// The ID of the router to be associated with the BGP
	// VPN. Changing this creates a new BGP VPN router association.
	RouterId string `pulumi:"routerId"`
}

// The set of arguments for constructing a RouterAssociateV2 resource.
type RouterAssociateV2Args struct {
	// A boolean flag indicating whether extra
	// routes should be advertised. Defaults to true.
	AdvertiseExtraRoutes pulumi.BoolPtrInput
	// The ID of the BGP VPN to which the router will be
	// associated. Changing this creates a new BGP VPN router association.
	BgpvpnId pulumi.StringInput
	// The ID of the project that owns the BGP VPN router
	// association. Only administrative and users with `advsvc` role can specify a
	// project ID other than their own. Changing this creates a new BGP VPN router
	// association.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN router association. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// a new BGP VPN router association.
	Region pulumi.StringPtrInput
	// The ID of the router to be associated with the BGP
	// VPN. Changing this creates a new BGP VPN router association.
	RouterId pulumi.StringInput
}

func (RouterAssociateV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAssociateV2Args)(nil)).Elem()
}

type RouterAssociateV2Input interface {
	pulumi.Input

	ToRouterAssociateV2Output() RouterAssociateV2Output
	ToRouterAssociateV2OutputWithContext(ctx context.Context) RouterAssociateV2Output
}

func (*RouterAssociateV2) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAssociateV2)(nil)).Elem()
}

func (i *RouterAssociateV2) ToRouterAssociateV2Output() RouterAssociateV2Output {
	return i.ToRouterAssociateV2OutputWithContext(context.Background())
}

func (i *RouterAssociateV2) ToRouterAssociateV2OutputWithContext(ctx context.Context) RouterAssociateV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAssociateV2Output)
}

// RouterAssociateV2ArrayInput is an input type that accepts RouterAssociateV2Array and RouterAssociateV2ArrayOutput values.
// You can construct a concrete instance of `RouterAssociateV2ArrayInput` via:
//
//	RouterAssociateV2Array{ RouterAssociateV2Args{...} }
type RouterAssociateV2ArrayInput interface {
	pulumi.Input

	ToRouterAssociateV2ArrayOutput() RouterAssociateV2ArrayOutput
	ToRouterAssociateV2ArrayOutputWithContext(context.Context) RouterAssociateV2ArrayOutput
}

type RouterAssociateV2Array []RouterAssociateV2Input

func (RouterAssociateV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAssociateV2)(nil)).Elem()
}

func (i RouterAssociateV2Array) ToRouterAssociateV2ArrayOutput() RouterAssociateV2ArrayOutput {
	return i.ToRouterAssociateV2ArrayOutputWithContext(context.Background())
}

func (i RouterAssociateV2Array) ToRouterAssociateV2ArrayOutputWithContext(ctx context.Context) RouterAssociateV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAssociateV2ArrayOutput)
}

// RouterAssociateV2MapInput is an input type that accepts RouterAssociateV2Map and RouterAssociateV2MapOutput values.
// You can construct a concrete instance of `RouterAssociateV2MapInput` via:
//
//	RouterAssociateV2Map{ "key": RouterAssociateV2Args{...} }
type RouterAssociateV2MapInput interface {
	pulumi.Input

	ToRouterAssociateV2MapOutput() RouterAssociateV2MapOutput
	ToRouterAssociateV2MapOutputWithContext(context.Context) RouterAssociateV2MapOutput
}

type RouterAssociateV2Map map[string]RouterAssociateV2Input

func (RouterAssociateV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAssociateV2)(nil)).Elem()
}

func (i RouterAssociateV2Map) ToRouterAssociateV2MapOutput() RouterAssociateV2MapOutput {
	return i.ToRouterAssociateV2MapOutputWithContext(context.Background())
}

func (i RouterAssociateV2Map) ToRouterAssociateV2MapOutputWithContext(ctx context.Context) RouterAssociateV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAssociateV2MapOutput)
}

type RouterAssociateV2Output struct{ *pulumi.OutputState }

func (RouterAssociateV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAssociateV2)(nil)).Elem()
}

func (o RouterAssociateV2Output) ToRouterAssociateV2Output() RouterAssociateV2Output {
	return o
}

func (o RouterAssociateV2Output) ToRouterAssociateV2OutputWithContext(ctx context.Context) RouterAssociateV2Output {
	return o
}

// A boolean flag indicating whether extra
// routes should be advertised. Defaults to true.
func (o RouterAssociateV2Output) AdvertiseExtraRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v *RouterAssociateV2) pulumi.BoolOutput { return v.AdvertiseExtraRoutes }).(pulumi.BoolOutput)
}

// The ID of the BGP VPN to which the router will be
// associated. Changing this creates a new BGP VPN router association.
func (o RouterAssociateV2Output) BgpvpnId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAssociateV2) pulumi.StringOutput { return v.BgpvpnId }).(pulumi.StringOutput)
}

// The ID of the project that owns the BGP VPN router
// association. Only administrative and users with `advsvc` role can specify a
// project ID other than their own. Changing this creates a new BGP VPN router
// association.
func (o RouterAssociateV2Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAssociateV2) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a BGP VPN router association. If
// omitted, the `region` argument of the provider is used. Changing this creates
// a new BGP VPN router association.
func (o RouterAssociateV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAssociateV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the router to be associated with the BGP
// VPN. Changing this creates a new BGP VPN router association.
func (o RouterAssociateV2Output) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAssociateV2) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

type RouterAssociateV2ArrayOutput struct{ *pulumi.OutputState }

func (RouterAssociateV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAssociateV2)(nil)).Elem()
}

func (o RouterAssociateV2ArrayOutput) ToRouterAssociateV2ArrayOutput() RouterAssociateV2ArrayOutput {
	return o
}

func (o RouterAssociateV2ArrayOutput) ToRouterAssociateV2ArrayOutputWithContext(ctx context.Context) RouterAssociateV2ArrayOutput {
	return o
}

func (o RouterAssociateV2ArrayOutput) Index(i pulumi.IntInput) RouterAssociateV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterAssociateV2 {
		return vs[0].([]*RouterAssociateV2)[vs[1].(int)]
	}).(RouterAssociateV2Output)
}

type RouterAssociateV2MapOutput struct{ *pulumi.OutputState }

func (RouterAssociateV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAssociateV2)(nil)).Elem()
}

func (o RouterAssociateV2MapOutput) ToRouterAssociateV2MapOutput() RouterAssociateV2MapOutput {
	return o
}

func (o RouterAssociateV2MapOutput) ToRouterAssociateV2MapOutputWithContext(ctx context.Context) RouterAssociateV2MapOutput {
	return o
}

func (o RouterAssociateV2MapOutput) MapIndex(k pulumi.StringInput) RouterAssociateV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterAssociateV2 {
		return vs[0].(map[string]*RouterAssociateV2)[vs[1].(string)]
	}).(RouterAssociateV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAssociateV2Input)(nil)).Elem(), &RouterAssociateV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAssociateV2ArrayInput)(nil)).Elem(), RouterAssociateV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAssociateV2MapInput)(nil)).Elem(), RouterAssociateV2Map{})
	pulumi.RegisterOutputType(RouterAssociateV2Output{})
	pulumi.RegisterOutputType(RouterAssociateV2ArrayOutput{})
	pulumi.RegisterOutputType(RouterAssociateV2MapOutput{})
}
