// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information of an available OpenStack firewall policy v2.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/firewall"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := firewall.LookupPolicyV2(ctx, &firewall.LookupPolicyV2Args{
//				Name: pulumi.StringRef("tf_test_policy"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPolicyV2(ctx *pulumi.Context, args *LookupPolicyV2Args, opts ...pulumi.InvokeOption) (*LookupPolicyV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyV2Result
	err := ctx.Invoke("openstack:firewall/getPolicyV2:getPolicyV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicyV2.
type LookupPolicyV2Args struct {
	// Whether this policy has been audited.
	Audited *bool `pulumi:"audited"`
	// Human-readable description of the policy.
	Description *string `pulumi:"description"`
	// The name of the firewall policy.
	Name *string `pulumi:"name"`
	// The ID of the firewall policy.
	PolicyId *string `pulumi:"policyId"`
	// This argument conflicts and is interchangeable
	// with `tenantId`. The owner of the firewall policy.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve firewall policy ids. If omitted, the
	// `region` argument of the provider is used.
	Region *string `pulumi:"region"`
	// Whether this policy is shared across all projects.
	Shared *bool `pulumi:"shared"`
	// This argument conflicts and is interchangeable
	// with `projectId`. The owner of the firewall policy.
	TenantId *string `pulumi:"tenantId"`
}

// A collection of values returned by getPolicyV2.
type LookupPolicyV2Result struct {
	// The audit status of the firewall policy.
	Audited     bool    `pulumi:"audited"`
	Description *string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// See Argument Reference above.
	Name *string `pulumi:"name"`
	// See Argument Reference above.
	PolicyId *string `pulumi:"policyId"`
	// See Argument Reference above.
	ProjectId string `pulumi:"projectId"`
	// See Argument Reference above.
	Region string `pulumi:"region"`
	// The array of one or more firewall rules that comprise the policy.
	Rules []string `pulumi:"rules"`
	// The sharing status of the firewall policy.
	Shared bool `pulumi:"shared"`
	// See Argument Reference above.
	TenantId string `pulumi:"tenantId"`
}

func LookupPolicyV2Output(ctx *pulumi.Context, args LookupPolicyV2OutputArgs, opts ...pulumi.InvokeOption) LookupPolicyV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPolicyV2ResultOutput, error) {
			args := v.(LookupPolicyV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("openstack:firewall/getPolicyV2:getPolicyV2", args, LookupPolicyV2ResultOutput{}, options).(LookupPolicyV2ResultOutput), nil
		}).(LookupPolicyV2ResultOutput)
}

// A collection of arguments for invoking getPolicyV2.
type LookupPolicyV2OutputArgs struct {
	// Whether this policy has been audited.
	Audited pulumi.BoolPtrInput `pulumi:"audited"`
	// Human-readable description of the policy.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the firewall policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the firewall policy.
	PolicyId pulumi.StringPtrInput `pulumi:"policyId"`
	// This argument conflicts and is interchangeable
	// with `tenantId`. The owner of the firewall policy.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve firewall policy ids. If omitted, the
	// `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Whether this policy is shared across all projects.
	Shared pulumi.BoolPtrInput `pulumi:"shared"`
	// This argument conflicts and is interchangeable
	// with `projectId`. The owner of the firewall policy.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (LookupPolicyV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyV2Args)(nil)).Elem()
}

// A collection of values returned by getPolicyV2.
type LookupPolicyV2ResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyV2Result)(nil)).Elem()
}

func (o LookupPolicyV2ResultOutput) ToLookupPolicyV2ResultOutput() LookupPolicyV2ResultOutput {
	return o
}

func (o LookupPolicyV2ResultOutput) ToLookupPolicyV2ResultOutputWithContext(ctx context.Context) LookupPolicyV2ResultOutput {
	return o
}

// The audit status of the firewall policy.
func (o LookupPolicyV2ResultOutput) Audited() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) bool { return v.Audited }).(pulumi.BoolOutput)
}

func (o LookupPolicyV2ResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPolicyV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o LookupPolicyV2ResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// See Argument Reference above.
func (o LookupPolicyV2ResultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// See Argument Reference above.
func (o LookupPolicyV2ResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) string { return v.ProjectId }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o LookupPolicyV2ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) string { return v.Region }).(pulumi.StringOutput)
}

// The array of one or more firewall rules that comprise the policy.
func (o LookupPolicyV2ResultOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

// The sharing status of the firewall policy.
func (o LookupPolicyV2ResultOutput) Shared() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) bool { return v.Shared }).(pulumi.BoolOutput)
}

// See Argument Reference above.
func (o LookupPolicyV2ResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyV2Result) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyV2ResultOutput{})
}
