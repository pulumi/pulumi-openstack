// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a v1 firewall resource within OpenStack.
type Firewall struct {
	s *pulumi.ResourceState
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOpt) (*Firewall, error) {
	if args == nil || args.PolicyId == nil {
		return nil, errors.New("missing required argument 'PolicyId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminStateUp"] = nil
		inputs["associatedRouters"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["noRouters"] = nil
		inputs["policyId"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
		inputs["valueSpecs"] = nil
	} else {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["associatedRouters"] = args.AssociatedRouters
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["noRouters"] = args.NoRouters
		inputs["policyId"] = args.PolicyId
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
		inputs["valueSpecs"] = args.ValueSpecs
	}
	s, err := ctx.RegisterResource("openstack:firewall/firewall:Firewall", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Firewall{s: s}, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FirewallState, opts ...pulumi.ResourceOpt) (*Firewall, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["associatedRouters"] = state.AssociatedRouters
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["noRouters"] = state.NoRouters
		inputs["policyId"] = state.PolicyId
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
		inputs["valueSpecs"] = state.ValueSpecs
	}
	s, err := ctx.ReadResource("openstack:firewall/firewall:Firewall", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Firewall{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Firewall) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Firewall) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Administrative up/down status for the firewall
// (must be "true" or "false" if provided - defaults to "true").
// Changing this updates the `admin_state_up` of an existing firewall.
func (r *Firewall) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// Router(s) to associate this firewall instance
// with. Must be a list of strings. Changing this updates the associated routers
// of an existing firewall. Conflicts with `no_routers`.
func (r *Firewall) AssociatedRouters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["associatedRouters"])
}

// A description for the firewall. Changing this
// updates the `description` of an existing firewall.
func (r *Firewall) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A name for the firewall. Changing this
// updates the `name` of an existing firewall.
func (r *Firewall) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Should this firewall not be associated with any routers
// (must be "true" or "false" if provide - defaults to "false").
// Conflicts with `associated_routers`.
func (r *Firewall) NoRouters() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["noRouters"])
}

// The policy resource id for the firewall. Changing
// this updates the `policy_id` of an existing firewall.
func (r *Firewall) PolicyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyId"])
}

// The region in which to obtain the v1 networking client.
// A networking client is needed to create a firewall. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// firewall.
func (r *Firewall) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The owner of the floating IP. Required if admin wants
// to create a firewall for another tenant. Changing this creates a new
// firewall.
func (r *Firewall) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Map of additional options.
func (r *Firewall) ValueSpecs() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["valueSpecs"])
}

// Input properties used for looking up and filtering Firewall resources.
type FirewallState struct {
	// Administrative up/down status for the firewall
	// (must be "true" or "false" if provided - defaults to "true").
	// Changing this updates the `admin_state_up` of an existing firewall.
	AdminStateUp interface{}
	// Router(s) to associate this firewall instance
	// with. Must be a list of strings. Changing this updates the associated routers
	// of an existing firewall. Conflicts with `no_routers`.
	AssociatedRouters interface{}
	// A description for the firewall. Changing this
	// updates the `description` of an existing firewall.
	Description interface{}
	// A name for the firewall. Changing this
	// updates the `name` of an existing firewall.
	Name interface{}
	// Should this firewall not be associated with any routers
	// (must be "true" or "false" if provide - defaults to "false").
	// Conflicts with `associated_routers`.
	NoRouters interface{}
	// The policy resource id for the firewall. Changing
	// this updates the `policy_id` of an existing firewall.
	PolicyId interface{}
	// The region in which to obtain the v1 networking client.
	// A networking client is needed to create a firewall. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// firewall.
	Region interface{}
	// The owner of the floating IP. Required if admin wants
	// to create a firewall for another tenant. Changing this creates a new
	// firewall.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	// Administrative up/down status for the firewall
	// (must be "true" or "false" if provided - defaults to "true").
	// Changing this updates the `admin_state_up` of an existing firewall.
	AdminStateUp interface{}
	// Router(s) to associate this firewall instance
	// with. Must be a list of strings. Changing this updates the associated routers
	// of an existing firewall. Conflicts with `no_routers`.
	AssociatedRouters interface{}
	// A description for the firewall. Changing this
	// updates the `description` of an existing firewall.
	Description interface{}
	// A name for the firewall. Changing this
	// updates the `name` of an existing firewall.
	Name interface{}
	// Should this firewall not be associated with any routers
	// (must be "true" or "false" if provide - defaults to "false").
	// Conflicts with `associated_routers`.
	NoRouters interface{}
	// The policy resource id for the firewall. Changing
	// this updates the `policy_id` of an existing firewall.
	PolicyId interface{}
	// The region in which to obtain the v1 networking client.
	// A networking client is needed to create a firewall. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// firewall.
	Region interface{}
	// The owner of the floating IP. Required if admin wants
	// to create a firewall for another tenant. Changing this creates a new
	// firewall.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
}
