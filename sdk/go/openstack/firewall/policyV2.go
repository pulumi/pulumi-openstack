// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a v2 firewall policy resource within OpenStack.
//
// > **Note:** Firewall v2 has no support for OVN currently.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/firewall"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rule1, err := firewall.NewRuleV2(ctx, "rule_1", &firewall.RuleV2Args{
//				Name:            pulumi.String("firewall_rule_1"),
//				Description:     pulumi.String("drop TELNET traffic"),
//				Action:          pulumi.String("deny"),
//				Protocol:        pulumi.String("tcp"),
//				DestinationPort: pulumi.String("23"),
//				Enabled:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			rule2, err := firewall.NewRuleV2(ctx, "rule_2", &firewall.RuleV2Args{
//				Name:            pulumi.String("firewall_rule_2"),
//				Description:     pulumi.String("drop NTP traffic"),
//				Action:          pulumi.String("deny"),
//				Protocol:        pulumi.String("udp"),
//				DestinationPort: pulumi.String("123"),
//				Enabled:         pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = firewall.NewPolicyV2(ctx, "policy_1", &firewall.PolicyV2Args{
//				Name: pulumi.String("firewall_policy"),
//				Rules: pulumi.StringArray{
//					rule1.ID(),
//					rule2.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Firewall Policies can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import openstack:firewall/policyV2:PolicyV2 policy_1 07f422e6-c596-474b-8b94-fe2c12506ce0
// ```
type PolicyV2 struct {
	pulumi.CustomResourceState

	// Audit status of the firewall policy
	// (must be "true" or "false" if provided - defaults to "false").
	// This status is set to "false" whenever the firewall policy or any of its
	// rules are changed. Changing this updates the `audited` status of an existing
	// firewall policy.
	Audited pulumi.BoolPtrOutput `pulumi:"audited"`
	// A description for the firewall policy. Changing
	// this updates the `description` of an existing firewall policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A name for the firewall policy. Changing this
	// updates the `name` of an existing firewall policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// This argument conflicts and is interchangeable
	// with `tenantId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another project. Changing this creates a new
	// firewall policy.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall policy. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// firewall policy.
	Region pulumi.StringOutput `pulumi:"region"`
	// An array of one or more firewall rules that comprise
	// the policy. Changing this results in adding/removing rules from the
	// existing firewall policy.
	Rules pulumi.StringArrayOutput `pulumi:"rules"`
	// Sharing status of the firewall policy (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// `shared` status of an existing firewall policy. Only administrative users
	// can specify if the policy should be shared.
	Shared pulumi.BoolPtrOutput `pulumi:"shared"`
	// This argument conflicts and is interchangeable
	// with `projectId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another tenant. Changing this creates a new
	// firewall policy.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewPolicyV2 registers a new resource with the given unique name, arguments, and options.
func NewPolicyV2(ctx *pulumi.Context,
	name string, args *PolicyV2Args, opts ...pulumi.ResourceOption) (*PolicyV2, error) {
	if args == nil {
		args = &PolicyV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyV2
	err := ctx.RegisterResource("openstack:firewall/policyV2:PolicyV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyV2 gets an existing PolicyV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyV2State, opts ...pulumi.ResourceOption) (*PolicyV2, error) {
	var resource PolicyV2
	err := ctx.ReadResource("openstack:firewall/policyV2:PolicyV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyV2 resources.
type policyV2State struct {
	// Audit status of the firewall policy
	// (must be "true" or "false" if provided - defaults to "false").
	// This status is set to "false" whenever the firewall policy or any of its
	// rules are changed. Changing this updates the `audited` status of an existing
	// firewall policy.
	Audited *bool `pulumi:"audited"`
	// A description for the firewall policy. Changing
	// this updates the `description` of an existing firewall policy.
	Description *string `pulumi:"description"`
	// A name for the firewall policy. Changing this
	// updates the `name` of an existing firewall policy.
	Name *string `pulumi:"name"`
	// This argument conflicts and is interchangeable
	// with `tenantId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another project. Changing this creates a new
	// firewall policy.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall policy. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// firewall policy.
	Region *string `pulumi:"region"`
	// An array of one or more firewall rules that comprise
	// the policy. Changing this results in adding/removing rules from the
	// existing firewall policy.
	Rules []string `pulumi:"rules"`
	// Sharing status of the firewall policy (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// `shared` status of an existing firewall policy. Only administrative users
	// can specify if the policy should be shared.
	Shared *bool `pulumi:"shared"`
	// This argument conflicts and is interchangeable
	// with `projectId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another tenant. Changing this creates a new
	// firewall policy.
	TenantId *string `pulumi:"tenantId"`
}

type PolicyV2State struct {
	// Audit status of the firewall policy
	// (must be "true" or "false" if provided - defaults to "false").
	// This status is set to "false" whenever the firewall policy or any of its
	// rules are changed. Changing this updates the `audited` status of an existing
	// firewall policy.
	Audited pulumi.BoolPtrInput
	// A description for the firewall policy. Changing
	// this updates the `description` of an existing firewall policy.
	Description pulumi.StringPtrInput
	// A name for the firewall policy. Changing this
	// updates the `name` of an existing firewall policy.
	Name pulumi.StringPtrInput
	// This argument conflicts and is interchangeable
	// with `tenantId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another project. Changing this creates a new
	// firewall policy.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall policy. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// firewall policy.
	Region pulumi.StringPtrInput
	// An array of one or more firewall rules that comprise
	// the policy. Changing this results in adding/removing rules from the
	// existing firewall policy.
	Rules pulumi.StringArrayInput
	// Sharing status of the firewall policy (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// `shared` status of an existing firewall policy. Only administrative users
	// can specify if the policy should be shared.
	Shared pulumi.BoolPtrInput
	// This argument conflicts and is interchangeable
	// with `projectId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another tenant. Changing this creates a new
	// firewall policy.
	TenantId pulumi.StringPtrInput
}

func (PolicyV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*policyV2State)(nil)).Elem()
}

type policyV2Args struct {
	// Audit status of the firewall policy
	// (must be "true" or "false" if provided - defaults to "false").
	// This status is set to "false" whenever the firewall policy or any of its
	// rules are changed. Changing this updates the `audited` status of an existing
	// firewall policy.
	Audited *bool `pulumi:"audited"`
	// A description for the firewall policy. Changing
	// this updates the `description` of an existing firewall policy.
	Description *string `pulumi:"description"`
	// A name for the firewall policy. Changing this
	// updates the `name` of an existing firewall policy.
	Name *string `pulumi:"name"`
	// This argument conflicts and is interchangeable
	// with `tenantId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another project. Changing this creates a new
	// firewall policy.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall policy. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// firewall policy.
	Region *string `pulumi:"region"`
	// An array of one or more firewall rules that comprise
	// the policy. Changing this results in adding/removing rules from the
	// existing firewall policy.
	Rules []string `pulumi:"rules"`
	// Sharing status of the firewall policy (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// `shared` status of an existing firewall policy. Only administrative users
	// can specify if the policy should be shared.
	Shared *bool `pulumi:"shared"`
	// This argument conflicts and is interchangeable
	// with `projectId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another tenant. Changing this creates a new
	// firewall policy.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a PolicyV2 resource.
type PolicyV2Args struct {
	// Audit status of the firewall policy
	// (must be "true" or "false" if provided - defaults to "false").
	// This status is set to "false" whenever the firewall policy or any of its
	// rules are changed. Changing this updates the `audited` status of an existing
	// firewall policy.
	Audited pulumi.BoolPtrInput
	// A description for the firewall policy. Changing
	// this updates the `description` of an existing firewall policy.
	Description pulumi.StringPtrInput
	// A name for the firewall policy. Changing this
	// updates the `name` of an existing firewall policy.
	Name pulumi.StringPtrInput
	// This argument conflicts and is interchangeable
	// with `tenantId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another project. Changing this creates a new
	// firewall policy.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall policy. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// firewall policy.
	Region pulumi.StringPtrInput
	// An array of one or more firewall rules that comprise
	// the policy. Changing this results in adding/removing rules from the
	// existing firewall policy.
	Rules pulumi.StringArrayInput
	// Sharing status of the firewall policy (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// `shared` status of an existing firewall policy. Only administrative users
	// can specify if the policy should be shared.
	Shared pulumi.BoolPtrInput
	// This argument conflicts and is interchangeable
	// with `projectId`. The owner of the firewall policy. Required if admin wants
	// to create a firewall policy for another tenant. Changing this creates a new
	// firewall policy.
	TenantId pulumi.StringPtrInput
}

func (PolicyV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*policyV2Args)(nil)).Elem()
}

type PolicyV2Input interface {
	pulumi.Input

	ToPolicyV2Output() PolicyV2Output
	ToPolicyV2OutputWithContext(ctx context.Context) PolicyV2Output
}

func (*PolicyV2) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyV2)(nil)).Elem()
}

func (i *PolicyV2) ToPolicyV2Output() PolicyV2Output {
	return i.ToPolicyV2OutputWithContext(context.Background())
}

func (i *PolicyV2) ToPolicyV2OutputWithContext(ctx context.Context) PolicyV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyV2Output)
}

// PolicyV2ArrayInput is an input type that accepts PolicyV2Array and PolicyV2ArrayOutput values.
// You can construct a concrete instance of `PolicyV2ArrayInput` via:
//
//	PolicyV2Array{ PolicyV2Args{...} }
type PolicyV2ArrayInput interface {
	pulumi.Input

	ToPolicyV2ArrayOutput() PolicyV2ArrayOutput
	ToPolicyV2ArrayOutputWithContext(context.Context) PolicyV2ArrayOutput
}

type PolicyV2Array []PolicyV2Input

func (PolicyV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyV2)(nil)).Elem()
}

func (i PolicyV2Array) ToPolicyV2ArrayOutput() PolicyV2ArrayOutput {
	return i.ToPolicyV2ArrayOutputWithContext(context.Background())
}

func (i PolicyV2Array) ToPolicyV2ArrayOutputWithContext(ctx context.Context) PolicyV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyV2ArrayOutput)
}

// PolicyV2MapInput is an input type that accepts PolicyV2Map and PolicyV2MapOutput values.
// You can construct a concrete instance of `PolicyV2MapInput` via:
//
//	PolicyV2Map{ "key": PolicyV2Args{...} }
type PolicyV2MapInput interface {
	pulumi.Input

	ToPolicyV2MapOutput() PolicyV2MapOutput
	ToPolicyV2MapOutputWithContext(context.Context) PolicyV2MapOutput
}

type PolicyV2Map map[string]PolicyV2Input

func (PolicyV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyV2)(nil)).Elem()
}

func (i PolicyV2Map) ToPolicyV2MapOutput() PolicyV2MapOutput {
	return i.ToPolicyV2MapOutputWithContext(context.Background())
}

func (i PolicyV2Map) ToPolicyV2MapOutputWithContext(ctx context.Context) PolicyV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyV2MapOutput)
}

type PolicyV2Output struct{ *pulumi.OutputState }

func (PolicyV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyV2)(nil)).Elem()
}

func (o PolicyV2Output) ToPolicyV2Output() PolicyV2Output {
	return o
}

func (o PolicyV2Output) ToPolicyV2OutputWithContext(ctx context.Context) PolicyV2Output {
	return o
}

// Audit status of the firewall policy
// (must be "true" or "false" if provided - defaults to "false").
// This status is set to "false" whenever the firewall policy or any of its
// rules are changed. Changing this updates the `audited` status of an existing
// firewall policy.
func (o PolicyV2Output) Audited() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.BoolPtrOutput { return v.Audited }).(pulumi.BoolPtrOutput)
}

// A description for the firewall policy. Changing
// this updates the `description` of an existing firewall policy.
func (o PolicyV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A name for the firewall policy. Changing this
// updates the `name` of an existing firewall policy.
func (o PolicyV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This argument conflicts and is interchangeable
// with `tenantId`. The owner of the firewall policy. Required if admin wants
// to create a firewall policy for another project. Changing this creates a new
// firewall policy.
func (o PolicyV2Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the v2 networking client.
// A networking client is needed to create a firewall policy. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// firewall policy.
func (o PolicyV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// An array of one or more firewall rules that comprise
// the policy. Changing this results in adding/removing rules from the
// existing firewall policy.
func (o PolicyV2Output) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.StringArrayOutput { return v.Rules }).(pulumi.StringArrayOutput)
}

// Sharing status of the firewall policy (must be "true"
// or "false" if provided). If this is "true" the policy is visible to, and
// can be used in, firewalls in other tenants. Changing this updates the
// `shared` status of an existing firewall policy. Only administrative users
// can specify if the policy should be shared.
func (o PolicyV2Output) Shared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.BoolPtrOutput { return v.Shared }).(pulumi.BoolPtrOutput)
}

// This argument conflicts and is interchangeable
// with `projectId`. The owner of the firewall policy. Required if admin wants
// to create a firewall policy for another tenant. Changing this creates a new
// firewall policy.
func (o PolicyV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type PolicyV2ArrayOutput struct{ *pulumi.OutputState }

func (PolicyV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyV2)(nil)).Elem()
}

func (o PolicyV2ArrayOutput) ToPolicyV2ArrayOutput() PolicyV2ArrayOutput {
	return o
}

func (o PolicyV2ArrayOutput) ToPolicyV2ArrayOutputWithContext(ctx context.Context) PolicyV2ArrayOutput {
	return o
}

func (o PolicyV2ArrayOutput) Index(i pulumi.IntInput) PolicyV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyV2 {
		return vs[0].([]*PolicyV2)[vs[1].(int)]
	}).(PolicyV2Output)
}

type PolicyV2MapOutput struct{ *pulumi.OutputState }

func (PolicyV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyV2)(nil)).Elem()
}

func (o PolicyV2MapOutput) ToPolicyV2MapOutput() PolicyV2MapOutput {
	return o
}

func (o PolicyV2MapOutput) ToPolicyV2MapOutputWithContext(ctx context.Context) PolicyV2MapOutput {
	return o
}

func (o PolicyV2MapOutput) MapIndex(k pulumi.StringInput) PolicyV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyV2 {
		return vs[0].(map[string]*PolicyV2)[vs[1].(string)]
	}).(PolicyV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyV2Input)(nil)).Elem(), &PolicyV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyV2ArrayInput)(nil)).Elem(), PolicyV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyV2MapInput)(nil)).Elem(), PolicyV2Map{})
	pulumi.RegisterOutputType(PolicyV2Output{})
	pulumi.RegisterOutputType(PolicyV2ArrayOutput{})
	pulumi.RegisterOutputType(PolicyV2MapOutput{})
}
