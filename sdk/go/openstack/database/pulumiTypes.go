// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ConfigurationConfiguration struct {
	// A unique name for the resource.
	Name string `pulumi:"name"`
	Value string `pulumi:"value"`
}

type ConfigurationConfigurationInput interface {
	pulumi.Input

	ToConfigurationConfigurationOutput() ConfigurationConfigurationOutput
	ToConfigurationConfigurationOutputWithContext(context.Context) ConfigurationConfigurationOutput
}

type ConfigurationConfigurationArgs struct {
	// A unique name for the resource.
	Name pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConfigurationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationConfiguration)(nil)).Elem()
}

func (i ConfigurationConfigurationArgs) ToConfigurationConfigurationOutput() ConfigurationConfigurationOutput {
	return i.ToConfigurationConfigurationOutputWithContext(context.Background())
}

func (i ConfigurationConfigurationArgs) ToConfigurationConfigurationOutputWithContext(ctx context.Context) ConfigurationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationConfigurationOutput)
}

type ConfigurationConfigurationArrayInput interface {
	pulumi.Input

	ToConfigurationConfigurationArrayOutput() ConfigurationConfigurationArrayOutput
	ToConfigurationConfigurationArrayOutputWithContext(context.Context) ConfigurationConfigurationArrayOutput
}

type ConfigurationConfigurationArray []ConfigurationConfigurationInput

func (ConfigurationConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationConfiguration)(nil)).Elem()
}

func (i ConfigurationConfigurationArray) ToConfigurationConfigurationArrayOutput() ConfigurationConfigurationArrayOutput {
	return i.ToConfigurationConfigurationArrayOutputWithContext(context.Background())
}

func (i ConfigurationConfigurationArray) ToConfigurationConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationConfigurationArrayOutput)
}

type ConfigurationConfigurationOutput struct { *pulumi.OutputState }

func (ConfigurationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationConfiguration)(nil)).Elem()
}

func (o ConfigurationConfigurationOutput) ToConfigurationConfigurationOutput() ConfigurationConfigurationOutput {
	return o
}

func (o ConfigurationConfigurationOutput) ToConfigurationConfigurationOutputWithContext(ctx context.Context) ConfigurationConfigurationOutput {
	return o
}

// A unique name for the resource.
func (o ConfigurationConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v ConfigurationConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

func (o ConfigurationConfigurationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func (v ConfigurationConfiguration) string { return v.Value }).(pulumi.StringOutput)
}

type ConfigurationConfigurationArrayOutput struct { *pulumi.OutputState}

func (ConfigurationConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationConfiguration)(nil)).Elem()
}

func (o ConfigurationConfigurationArrayOutput) ToConfigurationConfigurationArrayOutput() ConfigurationConfigurationArrayOutput {
	return o
}

func (o ConfigurationConfigurationArrayOutput) ToConfigurationConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationConfigurationArrayOutput {
	return o
}

func (o ConfigurationConfigurationArrayOutput) Index(i pulumi.IntInput) ConfigurationConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ConfigurationConfiguration {
		return vs[0].([]ConfigurationConfiguration)[vs[1].(int)]
	}).(ConfigurationConfigurationOutput)
}

type ConfigurationDatastore struct {
	Type string `pulumi:"type"`
	Version string `pulumi:"version"`
}

type ConfigurationDatastoreInput interface {
	pulumi.Input

	ToConfigurationDatastoreOutput() ConfigurationDatastoreOutput
	ToConfigurationDatastoreOutputWithContext(context.Context) ConfigurationDatastoreOutput
}

type ConfigurationDatastoreArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (ConfigurationDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationDatastore)(nil)).Elem()
}

func (i ConfigurationDatastoreArgs) ToConfigurationDatastoreOutput() ConfigurationDatastoreOutput {
	return i.ToConfigurationDatastoreOutputWithContext(context.Background())
}

func (i ConfigurationDatastoreArgs) ToConfigurationDatastoreOutputWithContext(ctx context.Context) ConfigurationDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationDatastoreOutput)
}

func (i ConfigurationDatastoreArgs) ToConfigurationDatastorePtrOutput() ConfigurationDatastorePtrOutput {
	return i.ToConfigurationDatastorePtrOutputWithContext(context.Background())
}

func (i ConfigurationDatastoreArgs) ToConfigurationDatastorePtrOutputWithContext(ctx context.Context) ConfigurationDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationDatastoreOutput).ToConfigurationDatastorePtrOutputWithContext(ctx)
}

type ConfigurationDatastorePtrInput interface {
	pulumi.Input

	ToConfigurationDatastorePtrOutput() ConfigurationDatastorePtrOutput
	ToConfigurationDatastorePtrOutputWithContext(context.Context) ConfigurationDatastorePtrOutput
}

type configurationDatastorePtrType ConfigurationDatastoreArgs

func ConfigurationDatastorePtr(v *ConfigurationDatastoreArgs) ConfigurationDatastorePtrInput {	return (*configurationDatastorePtrType)(v)
}

func (*configurationDatastorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationDatastore)(nil)).Elem()
}

func (i *configurationDatastorePtrType) ToConfigurationDatastorePtrOutput() ConfigurationDatastorePtrOutput {
	return i.ToConfigurationDatastorePtrOutputWithContext(context.Background())
}

func (i *configurationDatastorePtrType) ToConfigurationDatastorePtrOutputWithContext(ctx context.Context) ConfigurationDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationDatastorePtrOutput)
}

type ConfigurationDatastoreOutput struct { *pulumi.OutputState }

func (ConfigurationDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationDatastore)(nil)).Elem()
}

func (o ConfigurationDatastoreOutput) ToConfigurationDatastoreOutput() ConfigurationDatastoreOutput {
	return o
}

func (o ConfigurationDatastoreOutput) ToConfigurationDatastoreOutputWithContext(ctx context.Context) ConfigurationDatastoreOutput {
	return o
}

func (o ConfigurationDatastoreOutput) ToConfigurationDatastorePtrOutput() ConfigurationDatastorePtrOutput {
	return o.ToConfigurationDatastorePtrOutputWithContext(context.Background())
}

func (o ConfigurationDatastoreOutput) ToConfigurationDatastorePtrOutputWithContext(ctx context.Context) ConfigurationDatastorePtrOutput {
	return o.ApplyT(func(v ConfigurationDatastore) *ConfigurationDatastore {
		return &v
	}).(ConfigurationDatastorePtrOutput)
}
func (o ConfigurationDatastoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ConfigurationDatastore) string { return v.Type }).(pulumi.StringOutput)
}

func (o ConfigurationDatastoreOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func (v ConfigurationDatastore) string { return v.Version }).(pulumi.StringOutput)
}

type ConfigurationDatastorePtrOutput struct { *pulumi.OutputState}

func (ConfigurationDatastorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationDatastore)(nil)).Elem()
}

func (o ConfigurationDatastorePtrOutput) ToConfigurationDatastorePtrOutput() ConfigurationDatastorePtrOutput {
	return o
}

func (o ConfigurationDatastorePtrOutput) ToConfigurationDatastorePtrOutputWithContext(ctx context.Context) ConfigurationDatastorePtrOutput {
	return o
}

func (o ConfigurationDatastorePtrOutput) Elem() ConfigurationDatastoreOutput {
	return o.ApplyT(func (v *ConfigurationDatastore) ConfigurationDatastore { return *v }).(ConfigurationDatastoreOutput)
}

func (o ConfigurationDatastorePtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v ConfigurationDatastore) string { return v.Type }).(pulumi.StringOutput)
}

func (o ConfigurationDatastorePtrOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func (v ConfigurationDatastore) string { return v.Version }).(pulumi.StringOutput)
}

type InstanceDatabase struct {
	Charset *string `pulumi:"charset"`
	Collate *string `pulumi:"collate"`
	// A unique name for the resource.
	Name string `pulumi:"name"`
}

type InstanceDatabaseInput interface {
	pulumi.Input

	ToInstanceDatabaseOutput() InstanceDatabaseOutput
	ToInstanceDatabaseOutputWithContext(context.Context) InstanceDatabaseOutput
}

type InstanceDatabaseArgs struct {
	Charset pulumi.StringPtrInput `pulumi:"charset"`
	Collate pulumi.StringPtrInput `pulumi:"collate"`
	// A unique name for the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (InstanceDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabase)(nil)).Elem()
}

func (i InstanceDatabaseArgs) ToInstanceDatabaseOutput() InstanceDatabaseOutput {
	return i.ToInstanceDatabaseOutputWithContext(context.Background())
}

func (i InstanceDatabaseArgs) ToInstanceDatabaseOutputWithContext(ctx context.Context) InstanceDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatabaseOutput)
}

type InstanceDatabaseArrayInput interface {
	pulumi.Input

	ToInstanceDatabaseArrayOutput() InstanceDatabaseArrayOutput
	ToInstanceDatabaseArrayOutputWithContext(context.Context) InstanceDatabaseArrayOutput
}

type InstanceDatabaseArray []InstanceDatabaseInput

func (InstanceDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDatabase)(nil)).Elem()
}

func (i InstanceDatabaseArray) ToInstanceDatabaseArrayOutput() InstanceDatabaseArrayOutput {
	return i.ToInstanceDatabaseArrayOutputWithContext(context.Background())
}

func (i InstanceDatabaseArray) ToInstanceDatabaseArrayOutputWithContext(ctx context.Context) InstanceDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatabaseArrayOutput)
}

type InstanceDatabaseOutput struct { *pulumi.OutputState }

func (InstanceDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabase)(nil)).Elem()
}

func (o InstanceDatabaseOutput) ToInstanceDatabaseOutput() InstanceDatabaseOutput {
	return o
}

func (o InstanceDatabaseOutput) ToInstanceDatabaseOutputWithContext(ctx context.Context) InstanceDatabaseOutput {
	return o
}

func (o InstanceDatabaseOutput) Charset() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceDatabase) *string { return v.Charset }).(pulumi.StringPtrOutput)
}

func (o InstanceDatabaseOutput) Collate() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceDatabase) *string { return v.Collate }).(pulumi.StringPtrOutput)
}

// A unique name for the resource.
func (o InstanceDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceDatabase) string { return v.Name }).(pulumi.StringOutput)
}

type InstanceDatabaseArrayOutput struct { *pulumi.OutputState}

func (InstanceDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDatabase)(nil)).Elem()
}

func (o InstanceDatabaseArrayOutput) ToInstanceDatabaseArrayOutput() InstanceDatabaseArrayOutput {
	return o
}

func (o InstanceDatabaseArrayOutput) ToInstanceDatabaseArrayOutputWithContext(ctx context.Context) InstanceDatabaseArrayOutput {
	return o
}

func (o InstanceDatabaseArrayOutput) Index(i pulumi.IntInput) InstanceDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) InstanceDatabase {
		return vs[0].([]InstanceDatabase)[vs[1].(int)]
	}).(InstanceDatabaseOutput)
}

type InstanceDatastore struct {
	Type string `pulumi:"type"`
	Version string `pulumi:"version"`
}

type InstanceDatastoreInput interface {
	pulumi.Input

	ToInstanceDatastoreOutput() InstanceDatastoreOutput
	ToInstanceDatastoreOutputWithContext(context.Context) InstanceDatastoreOutput
}

type InstanceDatastoreArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (InstanceDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatastore)(nil)).Elem()
}

func (i InstanceDatastoreArgs) ToInstanceDatastoreOutput() InstanceDatastoreOutput {
	return i.ToInstanceDatastoreOutputWithContext(context.Background())
}

func (i InstanceDatastoreArgs) ToInstanceDatastoreOutputWithContext(ctx context.Context) InstanceDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastoreOutput)
}

func (i InstanceDatastoreArgs) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return i.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (i InstanceDatastoreArgs) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastoreOutput).ToInstanceDatastorePtrOutputWithContext(ctx)
}

type InstanceDatastorePtrInput interface {
	pulumi.Input

	ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput
	ToInstanceDatastorePtrOutputWithContext(context.Context) InstanceDatastorePtrOutput
}

type instanceDatastorePtrType InstanceDatastoreArgs

func InstanceDatastorePtr(v *InstanceDatastoreArgs) InstanceDatastorePtrInput {	return (*instanceDatastorePtrType)(v)
}

func (*instanceDatastorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDatastore)(nil)).Elem()
}

func (i *instanceDatastorePtrType) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return i.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (i *instanceDatastorePtrType) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastorePtrOutput)
}

type InstanceDatastoreOutput struct { *pulumi.OutputState }

func (InstanceDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatastore)(nil)).Elem()
}

func (o InstanceDatastoreOutput) ToInstanceDatastoreOutput() InstanceDatastoreOutput {
	return o
}

func (o InstanceDatastoreOutput) ToInstanceDatastoreOutputWithContext(ctx context.Context) InstanceDatastoreOutput {
	return o
}

func (o InstanceDatastoreOutput) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return o.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (o InstanceDatastoreOutput) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return o.ApplyT(func(v InstanceDatastore) *InstanceDatastore {
		return &v
	}).(InstanceDatastorePtrOutput)
}
func (o InstanceDatastoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceDatastore) string { return v.Type }).(pulumi.StringOutput)
}

func (o InstanceDatastoreOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceDatastore) string { return v.Version }).(pulumi.StringOutput)
}

type InstanceDatastorePtrOutput struct { *pulumi.OutputState}

func (InstanceDatastorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDatastore)(nil)).Elem()
}

func (o InstanceDatastorePtrOutput) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return o
}

func (o InstanceDatastorePtrOutput) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return o
}

func (o InstanceDatastorePtrOutput) Elem() InstanceDatastoreOutput {
	return o.ApplyT(func (v *InstanceDatastore) InstanceDatastore { return *v }).(InstanceDatastoreOutput)
}

func (o InstanceDatastorePtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceDatastore) string { return v.Type }).(pulumi.StringOutput)
}

func (o InstanceDatastorePtrOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceDatastore) string { return v.Version }).(pulumi.StringOutput)
}

type InstanceNetwork struct {
	FixedIpV4 *string `pulumi:"fixedIpV4"`
	FixedIpV6 *string `pulumi:"fixedIpV6"`
	Port *string `pulumi:"port"`
	Uuid *string `pulumi:"uuid"`
}

type InstanceNetworkInput interface {
	pulumi.Input

	ToInstanceNetworkOutput() InstanceNetworkOutput
	ToInstanceNetworkOutputWithContext(context.Context) InstanceNetworkOutput
}

type InstanceNetworkArgs struct {
	FixedIpV4 pulumi.StringPtrInput `pulumi:"fixedIpV4"`
	FixedIpV6 pulumi.StringPtrInput `pulumi:"fixedIpV6"`
	Port pulumi.StringPtrInput `pulumi:"port"`
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
}

func (InstanceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetwork)(nil)).Elem()
}

func (i InstanceNetworkArgs) ToInstanceNetworkOutput() InstanceNetworkOutput {
	return i.ToInstanceNetworkOutputWithContext(context.Background())
}

func (i InstanceNetworkArgs) ToInstanceNetworkOutputWithContext(ctx context.Context) InstanceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkOutput)
}

type InstanceNetworkArrayInput interface {
	pulumi.Input

	ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput
	ToInstanceNetworkArrayOutputWithContext(context.Context) InstanceNetworkArrayOutput
}

type InstanceNetworkArray []InstanceNetworkInput

func (InstanceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetwork)(nil)).Elem()
}

func (i InstanceNetworkArray) ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput {
	return i.ToInstanceNetworkArrayOutputWithContext(context.Background())
}

func (i InstanceNetworkArray) ToInstanceNetworkArrayOutputWithContext(ctx context.Context) InstanceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkArrayOutput)
}

type InstanceNetworkOutput struct { *pulumi.OutputState }

func (InstanceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetwork)(nil)).Elem()
}

func (o InstanceNetworkOutput) ToInstanceNetworkOutput() InstanceNetworkOutput {
	return o
}

func (o InstanceNetworkOutput) ToInstanceNetworkOutputWithContext(ctx context.Context) InstanceNetworkOutput {
	return o
}

func (o InstanceNetworkOutput) FixedIpV4() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceNetwork) *string { return v.FixedIpV4 }).(pulumi.StringPtrOutput)
}

func (o InstanceNetworkOutput) FixedIpV6() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceNetwork) *string { return v.FixedIpV6 }).(pulumi.StringPtrOutput)
}

func (o InstanceNetworkOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceNetwork) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o InstanceNetworkOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceNetwork) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

type InstanceNetworkArrayOutput struct { *pulumi.OutputState}

func (InstanceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetwork)(nil)).Elem()
}

func (o InstanceNetworkArrayOutput) ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput {
	return o
}

func (o InstanceNetworkArrayOutput) ToInstanceNetworkArrayOutputWithContext(ctx context.Context) InstanceNetworkArrayOutput {
	return o
}

func (o InstanceNetworkArrayOutput) Index(i pulumi.IntInput) InstanceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) InstanceNetwork {
		return vs[0].([]InstanceNetwork)[vs[1].(int)]
	}).(InstanceNetworkOutput)
}

type InstanceUser struct {
	Databases []string `pulumi:"databases"`
	Host *string `pulumi:"host"`
	// A unique name for the resource.
	Name string `pulumi:"name"`
	Password *string `pulumi:"password"`
}

type InstanceUserInput interface {
	pulumi.Input

	ToInstanceUserOutput() InstanceUserOutput
	ToInstanceUserOutputWithContext(context.Context) InstanceUserOutput
}

type InstanceUserArgs struct {
	Databases pulumi.StringArrayInput `pulumi:"databases"`
	Host pulumi.StringPtrInput `pulumi:"host"`
	// A unique name for the resource.
	Name pulumi.StringInput `pulumi:"name"`
	Password pulumi.StringPtrInput `pulumi:"password"`
}

func (InstanceUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceUser)(nil)).Elem()
}

func (i InstanceUserArgs) ToInstanceUserOutput() InstanceUserOutput {
	return i.ToInstanceUserOutputWithContext(context.Background())
}

func (i InstanceUserArgs) ToInstanceUserOutputWithContext(ctx context.Context) InstanceUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceUserOutput)
}

type InstanceUserArrayInput interface {
	pulumi.Input

	ToInstanceUserArrayOutput() InstanceUserArrayOutput
	ToInstanceUserArrayOutputWithContext(context.Context) InstanceUserArrayOutput
}

type InstanceUserArray []InstanceUserInput

func (InstanceUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceUser)(nil)).Elem()
}

func (i InstanceUserArray) ToInstanceUserArrayOutput() InstanceUserArrayOutput {
	return i.ToInstanceUserArrayOutputWithContext(context.Background())
}

func (i InstanceUserArray) ToInstanceUserArrayOutputWithContext(ctx context.Context) InstanceUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceUserArrayOutput)
}

type InstanceUserOutput struct { *pulumi.OutputState }

func (InstanceUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceUser)(nil)).Elem()
}

func (o InstanceUserOutput) ToInstanceUserOutput() InstanceUserOutput {
	return o
}

func (o InstanceUserOutput) ToInstanceUserOutputWithContext(ctx context.Context) InstanceUserOutput {
	return o
}

func (o InstanceUserOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func (v InstanceUser) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

func (o InstanceUserOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceUser) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// A unique name for the resource.
func (o InstanceUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v InstanceUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o InstanceUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func (v InstanceUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

type InstanceUserArrayOutput struct { *pulumi.OutputState}

func (InstanceUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceUser)(nil)).Elem()
}

func (o InstanceUserArrayOutput) ToInstanceUserArrayOutput() InstanceUserArrayOutput {
	return o
}

func (o InstanceUserArrayOutput) ToInstanceUserArrayOutputWithContext(ctx context.Context) InstanceUserArrayOutput {
	return o
}

func (o InstanceUserArrayOutput) Index(i pulumi.IntInput) InstanceUserOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) InstanceUser {
		return vs[0].([]InstanceUser)[vs[1].(int)]
	}).(InstanceUserOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfigurationConfigurationOutput{})
	pulumi.RegisterOutputType(ConfigurationConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationDatastoreOutput{})
	pulumi.RegisterOutputType(ConfigurationDatastorePtrOutput{})
	pulumi.RegisterOutputType(InstanceDatabaseOutput{})
	pulumi.RegisterOutputType(InstanceDatabaseArrayOutput{})
	pulumi.RegisterOutputType(InstanceDatastoreOutput{})
	pulumi.RegisterOutputType(InstanceDatastorePtrOutput{})
	pulumi.RegisterOutputType(InstanceNetworkOutput{})
	pulumi.RegisterOutputType(InstanceNetworkArrayOutput{})
	pulumi.RegisterOutputType(InstanceUserOutput{})
	pulumi.RegisterOutputType(InstanceUserArrayOutput{})
}
