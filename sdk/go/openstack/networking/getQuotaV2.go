// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the networking quota of an OpenStack project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networking.LookupQuotaV2(ctx, &networking.LookupQuotaV2Args{
//				ProjectId: "2e367a3d29f94fd988e6ec54e305ec9d",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupQuotaV2(ctx *pulumi.Context, args *LookupQuotaV2Args, opts ...pulumi.InvokeOption) (*LookupQuotaV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQuotaV2Result
	err := ctx.Invoke("openstack:networking/getQuotaV2:getQuotaV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQuotaV2.
type LookupQuotaV2Args struct {
	// The id of the project to retrieve the quota.
	ProjectId string `pulumi:"projectId"`
	// The region in which to obtain the V2 Network client.
	// If omitted, the `region` argument of the provider is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getQuotaV2.
type LookupQuotaV2Result struct {
	// The number of allowed floating ips.
	Floatingip int `pulumi:"floatingip"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The number of allowed networks.
	Network int `pulumi:"network"`
	// The number of allowed ports.
	Port int `pulumi:"port"`
	// See Argument Reference above.
	ProjectId string `pulumi:"projectId"`
	// The number of allowed rbac policies.
	RbacPolicy int `pulumi:"rbacPolicy"`
	// See Argument Reference above.
	Region string `pulumi:"region"`
	// The amount of allowed routers.
	Router int `pulumi:"router"`
	// The number of allowed security groups.
	SecurityGroup int `pulumi:"securityGroup"`
	// The number of allowed security group rules.
	SecurityGroupRule int `pulumi:"securityGroupRule"`
	// The number of allowed subnets.
	// * `subnetpool-` - The number of allowed subnet pools.
	Subnet     int `pulumi:"subnet"`
	Subnetpool int `pulumi:"subnetpool"`
}

func LookupQuotaV2Output(ctx *pulumi.Context, args LookupQuotaV2OutputArgs, opts ...pulumi.InvokeOption) LookupQuotaV2ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQuotaV2Result, error) {
			args := v.(LookupQuotaV2Args)
			r, err := LookupQuotaV2(ctx, &args, opts...)
			var s LookupQuotaV2Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQuotaV2ResultOutput)
}

// A collection of arguments for invoking getQuotaV2.
type LookupQuotaV2OutputArgs struct {
	// The id of the project to retrieve the quota.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The region in which to obtain the V2 Network client.
	// If omitted, the `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupQuotaV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQuotaV2Args)(nil)).Elem()
}

// A collection of values returned by getQuotaV2.
type LookupQuotaV2ResultOutput struct{ *pulumi.OutputState }

func (LookupQuotaV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQuotaV2Result)(nil)).Elem()
}

func (o LookupQuotaV2ResultOutput) ToLookupQuotaV2ResultOutput() LookupQuotaV2ResultOutput {
	return o
}

func (o LookupQuotaV2ResultOutput) ToLookupQuotaV2ResultOutputWithContext(ctx context.Context) LookupQuotaV2ResultOutput {
	return o
}

// The number of allowed floating ips.
func (o LookupQuotaV2ResultOutput) Floatingip() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.Floatingip }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupQuotaV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// The number of allowed networks.
func (o LookupQuotaV2ResultOutput) Network() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.Network }).(pulumi.IntOutput)
}

// The number of allowed ports.
func (o LookupQuotaV2ResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.Port }).(pulumi.IntOutput)
}

// See Argument Reference above.
func (o LookupQuotaV2ResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The number of allowed rbac policies.
func (o LookupQuotaV2ResultOutput) RbacPolicy() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.RbacPolicy }).(pulumi.IntOutput)
}

// See Argument Reference above.
func (o LookupQuotaV2ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) string { return v.Region }).(pulumi.StringOutput)
}

// The amount of allowed routers.
func (o LookupQuotaV2ResultOutput) Router() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.Router }).(pulumi.IntOutput)
}

// The number of allowed security groups.
func (o LookupQuotaV2ResultOutput) SecurityGroup() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.SecurityGroup }).(pulumi.IntOutput)
}

// The number of allowed security group rules.
func (o LookupQuotaV2ResultOutput) SecurityGroupRule() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.SecurityGroupRule }).(pulumi.IntOutput)
}

// The number of allowed subnets.
// * `subnetpool-` - The number of allowed subnet pools.
func (o LookupQuotaV2ResultOutput) Subnet() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.Subnet }).(pulumi.IntOutput)
}

func (o LookupQuotaV2ResultOutput) Subnetpool() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQuotaV2Result) int { return v.Subnetpool }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQuotaV2ResultOutput{})
}
