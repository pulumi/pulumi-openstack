// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron subnetpool resource within OpenStack.
type SubnetPool struct {
	s *pulumi.ResourceState
}

// NewSubnetPool registers a new resource with the given unique name, arguments, and options.
func NewSubnetPool(ctx *pulumi.Context,
	name string, args *SubnetPoolArgs, opts ...pulumi.ResourceOpt) (*SubnetPool, error) {
	if args == nil || args.Prefixes == nil {
		return nil, errors.New("missing required argument 'Prefixes'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["addressScopeId"] = nil
		inputs["defaultPrefixlen"] = nil
		inputs["defaultQuota"] = nil
		inputs["description"] = nil
		inputs["ipVersion"] = nil
		inputs["isDefault"] = nil
		inputs["maxPrefixlen"] = nil
		inputs["minPrefixlen"] = nil
		inputs["name"] = nil
		inputs["prefixes"] = nil
		inputs["projectId"] = nil
		inputs["region"] = nil
		inputs["shared"] = nil
		inputs["valueSpecs"] = nil
	} else {
		inputs["addressScopeId"] = args.AddressScopeId
		inputs["defaultPrefixlen"] = args.DefaultPrefixlen
		inputs["defaultQuota"] = args.DefaultQuota
		inputs["description"] = args.Description
		inputs["ipVersion"] = args.IpVersion
		inputs["isDefault"] = args.IsDefault
		inputs["maxPrefixlen"] = args.MaxPrefixlen
		inputs["minPrefixlen"] = args.MinPrefixlen
		inputs["name"] = args.Name
		inputs["prefixes"] = args.Prefixes
		inputs["projectId"] = args.ProjectId
		inputs["region"] = args.Region
		inputs["shared"] = args.Shared
		inputs["valueSpecs"] = args.ValueSpecs
	}
	inputs["createdAt"] = nil
	inputs["revisionNumber"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("openstack:networking/subnetPool:SubnetPool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SubnetPool{s: s}, nil
}

// GetSubnetPool gets an existing SubnetPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetPoolState, opts ...pulumi.ResourceOpt) (*SubnetPool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["addressScopeId"] = state.AddressScopeId
		inputs["createdAt"] = state.CreatedAt
		inputs["defaultPrefixlen"] = state.DefaultPrefixlen
		inputs["defaultQuota"] = state.DefaultQuota
		inputs["description"] = state.Description
		inputs["ipVersion"] = state.IpVersion
		inputs["isDefault"] = state.IsDefault
		inputs["maxPrefixlen"] = state.MaxPrefixlen
		inputs["minPrefixlen"] = state.MinPrefixlen
		inputs["name"] = state.Name
		inputs["prefixes"] = state.Prefixes
		inputs["projectId"] = state.ProjectId
		inputs["region"] = state.Region
		inputs["revisionNumber"] = state.RevisionNumber
		inputs["shared"] = state.Shared
		inputs["updatedAt"] = state.UpdatedAt
		inputs["valueSpecs"] = state.ValueSpecs
	}
	s, err := ctx.ReadResource("openstack:networking/subnetPool:SubnetPool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SubnetPool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SubnetPool) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SubnetPool) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The Neutron address scope to assign to the
// subnetpool. Changing this updates the address scope id of the existing
// subnetpool.
func (r *SubnetPool) AddressScopeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["addressScopeId"])
}

// The time at which subnetpool was created.
func (r *SubnetPool) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// The size of the prefix to allocate when the cidr
// or prefixlen attributes are omitted when you create the subnet. Defaults to the
// MinPrefixLen. Changing this updates the default prefixlen of the existing
// subnetpool.
func (r *SubnetPool) DefaultPrefixlen() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["defaultPrefixlen"])
}

// The per-project quota on the prefix space that can be
// allocated from the subnetpool for project subnets. Changing this updates the
// default quota of the existing subnetpool.
func (r *SubnetPool) DefaultQuota() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["defaultQuota"])
}

// The human-readable description for the subnetpool.
// Changing this updates the description of the existing subnetpool.
func (r *SubnetPool) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The IP protocol version.
func (r *SubnetPool) IpVersion() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ipVersion"])
}

// Indicates whether the subnetpool is default
// subnetpool or not. Changing this updates the default status of the existing
// subnetpool.
func (r *SubnetPool) IsDefault() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isDefault"])
}

// The maximum prefix size that can be allocated from
// the subnetpool. For IPv4 subnetpools, default is 32. For IPv6 subnetpools,
// default is 128. Changing this updates the max prefixlen of the existing
// subnetpool.
func (r *SubnetPool) MaxPrefixlen() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxPrefixlen"])
}

// The smallest prefix that can be allocated from a
// subnetpool. For IPv4 subnetpools, default is 8. For IPv6 subnetpools, default
// is 64. Changing this updates the min prefixlen of the existing subnetpool.
func (r *SubnetPool) MinPrefixlen() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minPrefixlen"])
}

// The name of the subnetpool. Changing this updates the name of
// the existing subnetpool.
func (r *SubnetPool) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A list of subnet prefixes to assign to the subnetpool.
// Neutron API merges adjacent prefixes and treats them as a single prefix. Each
// subnet prefix must be unique among all subnet prefixes in all subnetpools that
// are associated with the address scope. Changing this updates the prefixes list
// of the existing subnetpool.
func (r *SubnetPool) Prefixes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["prefixes"])
}

// The owner of the subnetpool. Required if admin wants to
// create a subnetpool for another project. Changing this creates a new subnetpool.
func (r *SubnetPool) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron subnetpool. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// subnetpool.
func (r *SubnetPool) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The revision number of the subnetpool.
func (r *SubnetPool) RevisionNumber() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["revisionNumber"])
}

// Indicates whether this subnetpool is shared across
// all projects. Changing this updates the shared status of the existing
// subnetpool.
func (r *SubnetPool) Shared() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["shared"])
}

// The time at which subnetpool was created.
func (r *SubnetPool) UpdatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updatedAt"])
}

// Map of additional options.
func (r *SubnetPool) ValueSpecs() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["valueSpecs"])
}

// Input properties used for looking up and filtering SubnetPool resources.
type SubnetPoolState struct {
	// The Neutron address scope to assign to the
	// subnetpool. Changing this updates the address scope id of the existing
	// subnetpool.
	AddressScopeId interface{}
	// The time at which subnetpool was created.
	CreatedAt interface{}
	// The size of the prefix to allocate when the cidr
	// or prefixlen attributes are omitted when you create the subnet. Defaults to the
	// MinPrefixLen. Changing this updates the default prefixlen of the existing
	// subnetpool.
	DefaultPrefixlen interface{}
	// The per-project quota on the prefix space that can be
	// allocated from the subnetpool for project subnets. Changing this updates the
	// default quota of the existing subnetpool.
	DefaultQuota interface{}
	// The human-readable description for the subnetpool.
	// Changing this updates the description of the existing subnetpool.
	Description interface{}
	// The IP protocol version.
	IpVersion interface{}
	// Indicates whether the subnetpool is default
	// subnetpool or not. Changing this updates the default status of the existing
	// subnetpool.
	IsDefault interface{}
	// The maximum prefix size that can be allocated from
	// the subnetpool. For IPv4 subnetpools, default is 32. For IPv6 subnetpools,
	// default is 128. Changing this updates the max prefixlen of the existing
	// subnetpool.
	MaxPrefixlen interface{}
	// The smallest prefix that can be allocated from a
	// subnetpool. For IPv4 subnetpools, default is 8. For IPv6 subnetpools, default
	// is 64. Changing this updates the min prefixlen of the existing subnetpool.
	MinPrefixlen interface{}
	// The name of the subnetpool. Changing this updates the name of
	// the existing subnetpool.
	Name interface{}
	// A list of subnet prefixes to assign to the subnetpool.
	// Neutron API merges adjacent prefixes and treats them as a single prefix. Each
	// subnet prefix must be unique among all subnet prefixes in all subnetpools that
	// are associated with the address scope. Changing this updates the prefixes list
	// of the existing subnetpool.
	Prefixes interface{}
	// The owner of the subnetpool. Required if admin wants to
	// create a subnetpool for another project. Changing this creates a new subnetpool.
	ProjectId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron subnetpool. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// subnetpool.
	Region interface{}
	// The revision number of the subnetpool.
	RevisionNumber interface{}
	// Indicates whether this subnetpool is shared across
	// all projects. Changing this updates the shared status of the existing
	// subnetpool.
	Shared interface{}
	// The time at which subnetpool was created.
	UpdatedAt interface{}
	// Map of additional options.
	ValueSpecs interface{}
}

// The set of arguments for constructing a SubnetPool resource.
type SubnetPoolArgs struct {
	// The Neutron address scope to assign to the
	// subnetpool. Changing this updates the address scope id of the existing
	// subnetpool.
	AddressScopeId interface{}
	// The size of the prefix to allocate when the cidr
	// or prefixlen attributes are omitted when you create the subnet. Defaults to the
	// MinPrefixLen. Changing this updates the default prefixlen of the existing
	// subnetpool.
	DefaultPrefixlen interface{}
	// The per-project quota on the prefix space that can be
	// allocated from the subnetpool for project subnets. Changing this updates the
	// default quota of the existing subnetpool.
	DefaultQuota interface{}
	// The human-readable description for the subnetpool.
	// Changing this updates the description of the existing subnetpool.
	Description interface{}
	// The IP protocol version.
	IpVersion interface{}
	// Indicates whether the subnetpool is default
	// subnetpool or not. Changing this updates the default status of the existing
	// subnetpool.
	IsDefault interface{}
	// The maximum prefix size that can be allocated from
	// the subnetpool. For IPv4 subnetpools, default is 32. For IPv6 subnetpools,
	// default is 128. Changing this updates the max prefixlen of the existing
	// subnetpool.
	MaxPrefixlen interface{}
	// The smallest prefix that can be allocated from a
	// subnetpool. For IPv4 subnetpools, default is 8. For IPv6 subnetpools, default
	// is 64. Changing this updates the min prefixlen of the existing subnetpool.
	MinPrefixlen interface{}
	// The name of the subnetpool. Changing this updates the name of
	// the existing subnetpool.
	Name interface{}
	// A list of subnet prefixes to assign to the subnetpool.
	// Neutron API merges adjacent prefixes and treats them as a single prefix. Each
	// subnet prefix must be unique among all subnet prefixes in all subnetpools that
	// are associated with the address scope. Changing this updates the prefixes list
	// of the existing subnetpool.
	Prefixes interface{}
	// The owner of the subnetpool. Required if admin wants to
	// create a subnetpool for another project. Changing this creates a new subnetpool.
	ProjectId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron subnetpool. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// subnetpool.
	Region interface{}
	// Indicates whether this subnetpool is shared across
	// all projects. Changing this updates the shared status of the existing
	// subnetpool.
	Shared interface{}
	// Map of additional options.
	ValueSpecs interface{}
}
