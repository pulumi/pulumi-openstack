// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V2 Neutron BGP Speaker resource within OpenStack.
//
// This resource allows you to configure a BGP speaker that can be associated with
// a BGP peer to exchange routing information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network1, err := networking.NewNetwork(ctx, "network1", &networking.NetworkArgs{
//				Name: pulumi.String("network1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networking.NewBgpPeerV2(ctx, "peer_1", &networking.BgpPeerV2Args{
//				Name:     pulumi.String("bgp_peer_1"),
//				PeerIp:   pulumi.String("192.0.2.10"),
//				RemoteAs: pulumi.Int(65001),
//				AuthType: pulumi.String("md5"),
//				Password: pulumi.String("supersecret"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networking.NewBgpSpeakerV2(ctx, "speaker_1", &networking.BgpSpeakerV2Args{
//				Name:      pulumi.String("bgp_speaker_1"),
//				IpVersion: pulumi.Int(4),
//				LocalAs:   pulumi.Int(65000),
//				Networks: pulumi.StringArray{
//					network1.ID(),
//				},
//				Peers: pulumi.StringArray{
//					peer1OpestackNetworkingBgpPeerV2.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BGP speakers can be imported using their ID:
//
// ```sh
// $ pulumi import openstack:networking/bgpSpeakerV2:BgpSpeakerV2 speaker_1 8a2ad402-b805-46bf-a60b-008573ca2844
// ```
type BgpSpeakerV2 struct {
	pulumi.CustomResourceState

	// A boolean value indicating
	// whether to advertise floating IP host routes. Defaults to `true`.
	AdvertiseFloatingIpHostRoutes pulumi.BoolOutput `pulumi:"advertiseFloatingIpHostRoutes"`
	// A boolean value indicating whether to
	// advertise tenant networks. Defaults to `true`.
	AdvertiseTenantNetworks pulumi.BoolOutput `pulumi:"advertiseTenantNetworks"`
	// A list of dictionaries containing the `destination` and
	// `nextHop` for each route advertised by the BGP speaker. This attribute is
	// only populated after the BGP speaker has been created and has established BGP
	// sessions with its peers.
	AdvertisedRoutes BgpSpeakerV2AdvertisedRouteArrayOutput `pulumi:"advertisedRoutes"`
	// The IP version of the BGP speaker. Valid values are
	// `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
	IpVersion pulumi.IntPtrOutput `pulumi:"ipVersion"`
	// The local autonomous system number (ASN) for the BGP
	// speaker. This is a mandatory field and must be specified. Changing this
	// creates a new BGP speaker.
	LocalAs pulumi.IntOutput `pulumi:"localAs"`
	// A name for the BGP speaker.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of network IDs to associate with the BGP speaker.
	Networks pulumi.StringArrayOutput `pulumi:"networks"`
	// A list of BGP peer IDs to associate with the BGP speaker.
	Peers pulumi.StringArrayOutput `pulumi:"peers"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new BGP
	// speaker.
	Region pulumi.StringOutput `pulumi:"region"`
	// The tenant/project ID. Required if admin privileges
	// are used. Changing this creates a new BGP speaker.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewBgpSpeakerV2 registers a new resource with the given unique name, arguments, and options.
func NewBgpSpeakerV2(ctx *pulumi.Context,
	name string, args *BgpSpeakerV2Args, opts ...pulumi.ResourceOption) (*BgpSpeakerV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocalAs == nil {
		return nil, errors.New("invalid value for required argument 'LocalAs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BgpSpeakerV2
	err := ctx.RegisterResource("openstack:networking/bgpSpeakerV2:BgpSpeakerV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgpSpeakerV2 gets an existing BgpSpeakerV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpSpeakerV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpSpeakerV2State, opts ...pulumi.ResourceOption) (*BgpSpeakerV2, error) {
	var resource BgpSpeakerV2
	err := ctx.ReadResource("openstack:networking/bgpSpeakerV2:BgpSpeakerV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BgpSpeakerV2 resources.
type bgpSpeakerV2State struct {
	// A boolean value indicating
	// whether to advertise floating IP host routes. Defaults to `true`.
	AdvertiseFloatingIpHostRoutes *bool `pulumi:"advertiseFloatingIpHostRoutes"`
	// A boolean value indicating whether to
	// advertise tenant networks. Defaults to `true`.
	AdvertiseTenantNetworks *bool `pulumi:"advertiseTenantNetworks"`
	// A list of dictionaries containing the `destination` and
	// `nextHop` for each route advertised by the BGP speaker. This attribute is
	// only populated after the BGP speaker has been created and has established BGP
	// sessions with its peers.
	AdvertisedRoutes []BgpSpeakerV2AdvertisedRoute `pulumi:"advertisedRoutes"`
	// The IP version of the BGP speaker. Valid values are
	// `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
	IpVersion *int `pulumi:"ipVersion"`
	// The local autonomous system number (ASN) for the BGP
	// speaker. This is a mandatory field and must be specified. Changing this
	// creates a new BGP speaker.
	LocalAs *int `pulumi:"localAs"`
	// A name for the BGP speaker.
	Name *string `pulumi:"name"`
	// A list of network IDs to associate with the BGP speaker.
	Networks []string `pulumi:"networks"`
	// A list of BGP peer IDs to associate with the BGP speaker.
	Peers []string `pulumi:"peers"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new BGP
	// speaker.
	Region *string `pulumi:"region"`
	// The tenant/project ID. Required if admin privileges
	// are used. Changing this creates a new BGP speaker.
	TenantId *string `pulumi:"tenantId"`
}

type BgpSpeakerV2State struct {
	// A boolean value indicating
	// whether to advertise floating IP host routes. Defaults to `true`.
	AdvertiseFloatingIpHostRoutes pulumi.BoolPtrInput
	// A boolean value indicating whether to
	// advertise tenant networks. Defaults to `true`.
	AdvertiseTenantNetworks pulumi.BoolPtrInput
	// A list of dictionaries containing the `destination` and
	// `nextHop` for each route advertised by the BGP speaker. This attribute is
	// only populated after the BGP speaker has been created and has established BGP
	// sessions with its peers.
	AdvertisedRoutes BgpSpeakerV2AdvertisedRouteArrayInput
	// The IP version of the BGP speaker. Valid values are
	// `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
	IpVersion pulumi.IntPtrInput
	// The local autonomous system number (ASN) for the BGP
	// speaker. This is a mandatory field and must be specified. Changing this
	// creates a new BGP speaker.
	LocalAs pulumi.IntPtrInput
	// A name for the BGP speaker.
	Name pulumi.StringPtrInput
	// A list of network IDs to associate with the BGP speaker.
	Networks pulumi.StringArrayInput
	// A list of BGP peer IDs to associate with the BGP speaker.
	Peers pulumi.StringArrayInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new BGP
	// speaker.
	Region pulumi.StringPtrInput
	// The tenant/project ID. Required if admin privileges
	// are used. Changing this creates a new BGP speaker.
	TenantId pulumi.StringPtrInput
}

func (BgpSpeakerV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpSpeakerV2State)(nil)).Elem()
}

type bgpSpeakerV2Args struct {
	// A boolean value indicating
	// whether to advertise floating IP host routes. Defaults to `true`.
	AdvertiseFloatingIpHostRoutes *bool `pulumi:"advertiseFloatingIpHostRoutes"`
	// A boolean value indicating whether to
	// advertise tenant networks. Defaults to `true`.
	AdvertiseTenantNetworks *bool `pulumi:"advertiseTenantNetworks"`
	// The IP version of the BGP speaker. Valid values are
	// `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
	IpVersion *int `pulumi:"ipVersion"`
	// The local autonomous system number (ASN) for the BGP
	// speaker. This is a mandatory field and must be specified. Changing this
	// creates a new BGP speaker.
	LocalAs int `pulumi:"localAs"`
	// A name for the BGP speaker.
	Name *string `pulumi:"name"`
	// A list of network IDs to associate with the BGP speaker.
	Networks []string `pulumi:"networks"`
	// A list of BGP peer IDs to associate with the BGP speaker.
	Peers []string `pulumi:"peers"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new BGP
	// speaker.
	Region *string `pulumi:"region"`
	// The tenant/project ID. Required if admin privileges
	// are used. Changing this creates a new BGP speaker.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a BgpSpeakerV2 resource.
type BgpSpeakerV2Args struct {
	// A boolean value indicating
	// whether to advertise floating IP host routes. Defaults to `true`.
	AdvertiseFloatingIpHostRoutes pulumi.BoolPtrInput
	// A boolean value indicating whether to
	// advertise tenant networks. Defaults to `true`.
	AdvertiseTenantNetworks pulumi.BoolPtrInput
	// The IP version of the BGP speaker. Valid values are
	// `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
	IpVersion pulumi.IntPtrInput
	// The local autonomous system number (ASN) for the BGP
	// speaker. This is a mandatory field and must be specified. Changing this
	// creates a new BGP speaker.
	LocalAs pulumi.IntInput
	// A name for the BGP speaker.
	Name pulumi.StringPtrInput
	// A list of network IDs to associate with the BGP speaker.
	Networks pulumi.StringArrayInput
	// A list of BGP peer IDs to associate with the BGP speaker.
	Peers pulumi.StringArrayInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new BGP
	// speaker.
	Region pulumi.StringPtrInput
	// The tenant/project ID. Required if admin privileges
	// are used. Changing this creates a new BGP speaker.
	TenantId pulumi.StringPtrInput
}

func (BgpSpeakerV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpSpeakerV2Args)(nil)).Elem()
}

type BgpSpeakerV2Input interface {
	pulumi.Input

	ToBgpSpeakerV2Output() BgpSpeakerV2Output
	ToBgpSpeakerV2OutputWithContext(ctx context.Context) BgpSpeakerV2Output
}

func (*BgpSpeakerV2) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSpeakerV2)(nil)).Elem()
}

func (i *BgpSpeakerV2) ToBgpSpeakerV2Output() BgpSpeakerV2Output {
	return i.ToBgpSpeakerV2OutputWithContext(context.Background())
}

func (i *BgpSpeakerV2) ToBgpSpeakerV2OutputWithContext(ctx context.Context) BgpSpeakerV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSpeakerV2Output)
}

// BgpSpeakerV2ArrayInput is an input type that accepts BgpSpeakerV2Array and BgpSpeakerV2ArrayOutput values.
// You can construct a concrete instance of `BgpSpeakerV2ArrayInput` via:
//
//	BgpSpeakerV2Array{ BgpSpeakerV2Args{...} }
type BgpSpeakerV2ArrayInput interface {
	pulumi.Input

	ToBgpSpeakerV2ArrayOutput() BgpSpeakerV2ArrayOutput
	ToBgpSpeakerV2ArrayOutputWithContext(context.Context) BgpSpeakerV2ArrayOutput
}

type BgpSpeakerV2Array []BgpSpeakerV2Input

func (BgpSpeakerV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpSpeakerV2)(nil)).Elem()
}

func (i BgpSpeakerV2Array) ToBgpSpeakerV2ArrayOutput() BgpSpeakerV2ArrayOutput {
	return i.ToBgpSpeakerV2ArrayOutputWithContext(context.Background())
}

func (i BgpSpeakerV2Array) ToBgpSpeakerV2ArrayOutputWithContext(ctx context.Context) BgpSpeakerV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSpeakerV2ArrayOutput)
}

// BgpSpeakerV2MapInput is an input type that accepts BgpSpeakerV2Map and BgpSpeakerV2MapOutput values.
// You can construct a concrete instance of `BgpSpeakerV2MapInput` via:
//
//	BgpSpeakerV2Map{ "key": BgpSpeakerV2Args{...} }
type BgpSpeakerV2MapInput interface {
	pulumi.Input

	ToBgpSpeakerV2MapOutput() BgpSpeakerV2MapOutput
	ToBgpSpeakerV2MapOutputWithContext(context.Context) BgpSpeakerV2MapOutput
}

type BgpSpeakerV2Map map[string]BgpSpeakerV2Input

func (BgpSpeakerV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpSpeakerV2)(nil)).Elem()
}

func (i BgpSpeakerV2Map) ToBgpSpeakerV2MapOutput() BgpSpeakerV2MapOutput {
	return i.ToBgpSpeakerV2MapOutputWithContext(context.Background())
}

func (i BgpSpeakerV2Map) ToBgpSpeakerV2MapOutputWithContext(ctx context.Context) BgpSpeakerV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSpeakerV2MapOutput)
}

type BgpSpeakerV2Output struct{ *pulumi.OutputState }

func (BgpSpeakerV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSpeakerV2)(nil)).Elem()
}

func (o BgpSpeakerV2Output) ToBgpSpeakerV2Output() BgpSpeakerV2Output {
	return o
}

func (o BgpSpeakerV2Output) ToBgpSpeakerV2OutputWithContext(ctx context.Context) BgpSpeakerV2Output {
	return o
}

// A boolean value indicating
// whether to advertise floating IP host routes. Defaults to `true`.
func (o BgpSpeakerV2Output) AdvertiseFloatingIpHostRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.BoolOutput { return v.AdvertiseFloatingIpHostRoutes }).(pulumi.BoolOutput)
}

// A boolean value indicating whether to
// advertise tenant networks. Defaults to `true`.
func (o BgpSpeakerV2Output) AdvertiseTenantNetworks() pulumi.BoolOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.BoolOutput { return v.AdvertiseTenantNetworks }).(pulumi.BoolOutput)
}

// A list of dictionaries containing the `destination` and
// `nextHop` for each route advertised by the BGP speaker. This attribute is
// only populated after the BGP speaker has been created and has established BGP
// sessions with its peers.
func (o BgpSpeakerV2Output) AdvertisedRoutes() BgpSpeakerV2AdvertisedRouteArrayOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) BgpSpeakerV2AdvertisedRouteArrayOutput { return v.AdvertisedRoutes }).(BgpSpeakerV2AdvertisedRouteArrayOutput)
}

// The IP version of the BGP speaker. Valid values are
// `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
func (o BgpSpeakerV2Output) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.IntPtrOutput { return v.IpVersion }).(pulumi.IntPtrOutput)
}

// The local autonomous system number (ASN) for the BGP
// speaker. This is a mandatory field and must be specified. Changing this
// creates a new BGP speaker.
func (o BgpSpeakerV2Output) LocalAs() pulumi.IntOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.IntOutput { return v.LocalAs }).(pulumi.IntOutput)
}

// A name for the BGP speaker.
func (o BgpSpeakerV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of network IDs to associate with the BGP speaker.
func (o BgpSpeakerV2Output) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.StringArrayOutput { return v.Networks }).(pulumi.StringArrayOutput)
}

// A list of BGP peer IDs to associate with the BGP speaker.
func (o BgpSpeakerV2Output) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.StringArrayOutput { return v.Peers }).(pulumi.StringArrayOutput)
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron network. If omitted, the
// `region` argument of the provider is used. Changing this creates a new BGP
// speaker.
func (o BgpSpeakerV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The tenant/project ID. Required if admin privileges
// are used. Changing this creates a new BGP speaker.
func (o BgpSpeakerV2Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpSpeakerV2) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type BgpSpeakerV2ArrayOutput struct{ *pulumi.OutputState }

func (BgpSpeakerV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpSpeakerV2)(nil)).Elem()
}

func (o BgpSpeakerV2ArrayOutput) ToBgpSpeakerV2ArrayOutput() BgpSpeakerV2ArrayOutput {
	return o
}

func (o BgpSpeakerV2ArrayOutput) ToBgpSpeakerV2ArrayOutputWithContext(ctx context.Context) BgpSpeakerV2ArrayOutput {
	return o
}

func (o BgpSpeakerV2ArrayOutput) Index(i pulumi.IntInput) BgpSpeakerV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BgpSpeakerV2 {
		return vs[0].([]*BgpSpeakerV2)[vs[1].(int)]
	}).(BgpSpeakerV2Output)
}

type BgpSpeakerV2MapOutput struct{ *pulumi.OutputState }

func (BgpSpeakerV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpSpeakerV2)(nil)).Elem()
}

func (o BgpSpeakerV2MapOutput) ToBgpSpeakerV2MapOutput() BgpSpeakerV2MapOutput {
	return o
}

func (o BgpSpeakerV2MapOutput) ToBgpSpeakerV2MapOutputWithContext(ctx context.Context) BgpSpeakerV2MapOutput {
	return o
}

func (o BgpSpeakerV2MapOutput) MapIndex(k pulumi.StringInput) BgpSpeakerV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BgpSpeakerV2 {
		return vs[0].(map[string]*BgpSpeakerV2)[vs[1].(string)]
	}).(BgpSpeakerV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BgpSpeakerV2Input)(nil)).Elem(), &BgpSpeakerV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpSpeakerV2ArrayInput)(nil)).Elem(), BgpSpeakerV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpSpeakerV2MapInput)(nil)).Elem(), BgpSpeakerV2Map{})
	pulumi.RegisterOutputType(BgpSpeakerV2Output{})
	pulumi.RegisterOutputType(BgpSpeakerV2ArrayOutput{})
	pulumi.RegisterOutputType(BgpSpeakerV2MapOutput{})
}
