// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the ID of an available OpenStack security group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networking.LookupSecGroup(ctx, &networking.LookupSecGroupArgs{
//				Name: pulumi.StringRef("tf_test_secgroup"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSecGroup(ctx *pulumi.Context, args *LookupSecGroupArgs, opts ...pulumi.InvokeOption) (*LookupSecGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecGroupResult
	err := ctx.Invoke("openstack:networking/getSecGroup:getSecGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecGroup.
type LookupSecGroupArgs struct {
	// Human-readable description the the subnet.
	Description *string `pulumi:"description"`
	// The name of the security group.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve security groups ids. If omitted, the
	// `region` argument of the provider is used.
	Region *string `pulumi:"region"`
	// The ID of the security group.
	SecgroupId *string `pulumi:"secgroupId"`
	// The list of security group tags to filter.
	Tags []string `pulumi:"tags"`
	// The owner of the security group.
	TenantId *string `pulumi:"tenantId"`
}

// A collection of values returned by getSecGroup.
type LookupSecGroupResult struct {
	// The set of string tags applied on the security group.
	AllTags []string `pulumi:"allTags"`
	// See Argument Reference above.
	Description *string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// See Argument Reference above.
	Name *string `pulumi:"name"`
	// See Argument Reference above.
	Region     string   `pulumi:"region"`
	SecgroupId *string  `pulumi:"secgroupId"`
	Tags       []string `pulumi:"tags"`
	TenantId   string   `pulumi:"tenantId"`
}

func LookupSecGroupOutput(ctx *pulumi.Context, args LookupSecGroupOutputArgs, opts ...pulumi.InvokeOption) LookupSecGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSecGroupResult, error) {
			args := v.(LookupSecGroupArgs)
			r, err := LookupSecGroup(ctx, &args, opts...)
			var s LookupSecGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSecGroupResultOutput)
}

// A collection of arguments for invoking getSecGroup.
type LookupSecGroupOutputArgs struct {
	// Human-readable description the the subnet.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the security group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve security groups ids. If omitted, the
	// `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The ID of the security group.
	SecgroupId pulumi.StringPtrInput `pulumi:"secgroupId"`
	// The list of security group tags to filter.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The owner of the security group.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (LookupSecGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecGroupArgs)(nil)).Elem()
}

// A collection of values returned by getSecGroup.
type LookupSecGroupResultOutput struct{ *pulumi.OutputState }

func (LookupSecGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecGroupResult)(nil)).Elem()
}

func (o LookupSecGroupResultOutput) ToLookupSecGroupResultOutput() LookupSecGroupResultOutput {
	return o
}

func (o LookupSecGroupResultOutput) ToLookupSecGroupResultOutputWithContext(ctx context.Context) LookupSecGroupResultOutput {
	return o
}

// The set of string tags applied on the security group.
func (o LookupSecGroupResultOutput) AllTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecGroupResult) []string { return v.AllTags }).(pulumi.StringArrayOutput)
}

// See Argument Reference above.
func (o LookupSecGroupResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecGroupResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSecGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// See Argument Reference above.
func (o LookupSecGroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecGroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// See Argument Reference above.
func (o LookupSecGroupResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecGroupResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupSecGroupResultOutput) SecgroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecGroupResult) *string { return v.SecgroupId }).(pulumi.StringPtrOutput)
}

func (o LookupSecGroupResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecGroupResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupSecGroupResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecGroupResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecGroupResultOutput{})
}
