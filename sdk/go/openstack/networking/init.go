// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "openstack:networking/addressScope:AddressScope":
		r = &AddressScope{}
	case "openstack:networking/floatingIp:FloatingIp":
		r = &FloatingIp{}
	case "openstack:networking/floatingIpAssociate:FloatingIpAssociate":
		r = &FloatingIpAssociate{}
	case "openstack:networking/network:Network":
		r = &Network{}
	case "openstack:networking/port:Port":
		r = &Port{}
	case "openstack:networking/portForwardingV2:PortForwardingV2":
		r = &PortForwardingV2{}
	case "openstack:networking/portSecGroupAssociate:PortSecGroupAssociate":
		r = &PortSecGroupAssociate{}
	case "openstack:networking/qosBandwidthLimitRule:QosBandwidthLimitRule":
		r = &QosBandwidthLimitRule{}
	case "openstack:networking/qosDscpMarkingRule:QosDscpMarkingRule":
		r = &QosDscpMarkingRule{}
	case "openstack:networking/qosMinimumBandwidthRule:QosMinimumBandwidthRule":
		r = &QosMinimumBandwidthRule{}
	case "openstack:networking/qosPolicy:QosPolicy":
		r = &QosPolicy{}
	case "openstack:networking/quotaV2:QuotaV2":
		r = &QuotaV2{}
	case "openstack:networking/rbacPolicyV2:RbacPolicyV2":
		r = &RbacPolicyV2{}
	case "openstack:networking/router:Router":
		r = &Router{}
	case "openstack:networking/routerInterface:RouterInterface":
		r = &RouterInterface{}
	case "openstack:networking/routerRoute:RouterRoute":
		r = &RouterRoute{}
	case "openstack:networking/secGroup:SecGroup":
		r = &SecGroup{}
	case "openstack:networking/secGroupRule:SecGroupRule":
		r = &SecGroupRule{}
	case "openstack:networking/subnet:Subnet":
		r = &Subnet{}
	case "openstack:networking/subnetPool:SubnetPool":
		r = &SubnetPool{}
	case "openstack:networking/subnetRoute:SubnetRoute":
		r = &SubnetRoute{}
	case "openstack:networking/trunk:Trunk":
		r = &Trunk{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/addressScope",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/floatingIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/floatingIpAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/network",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/port",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/portForwardingV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/portSecGroupAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/qosBandwidthLimitRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/qosDscpMarkingRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/qosMinimumBandwidthRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/qosPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/quotaV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/rbacPolicyV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/router",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/routerInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/routerRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/secGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/secGroupRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/subnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/subnetPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/subnetRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"openstack",
		"networking/trunk",
		&module{version},
	)
}
