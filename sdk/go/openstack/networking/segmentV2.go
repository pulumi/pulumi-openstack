// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Neutron network segment resource within OpenStack.
//
// > **Note:** This resource is only available if the Neutron service is
// configured with the `segments` extension.
//
// > **Note:** This ussually requires admin privileges to create or manage
// segments.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net1, err := networking.NewNetwork(ctx, "net_1", &networking.NetworkArgs{
//				Name: pulumi.String("demo-net"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networking.NewSegmentV2(ctx, "segment_1", &networking.SegmentV2Args{
//				Name:            pulumi.String("flat-segment"),
//				Description:     pulumi.String("Example flat segment"),
//				NetworkId:       net1.ID(),
//				NetworkType:     pulumi.String("flat"),
//				PhysicalNetwork: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported by specifying the segment ID:
//
// ```sh
// $ pulumi import openstack:networking/segmentV2:SegmentV2 segment1 a5e3a494-26ee-4fde-ad26-2d846c47072e
// ```
type SegmentV2 struct {
	pulumi.CustomResourceState

	// Creation timestamp (RFC3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A description for the segment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A name for the segment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The UUID of the network this segment belongs to.
	// Changing this will create a new segment.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The network type. Valid values depend on the
	// backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
	// this will create a new segment.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The name of the physical network. Changing this
	// will create a new segment.
	PhysicalNetwork pulumi.StringPtrOutput `pulumi:"physicalNetwork"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// segment.
	Region pulumi.StringOutput `pulumi:"region"`
	// The revision number of the segment.
	RevisionNumber pulumi.IntOutput `pulumi:"revisionNumber"`
	// A segmentation identifier. Changing is allowed
	// only for `vlan`.
	SegmentationId pulumi.IntOutput `pulumi:"segmentationId"`
	// Last update timestamp (RFC3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewSegmentV2 registers a new resource with the given unique name, arguments, and options.
func NewSegmentV2(ctx *pulumi.Context,
	name string, args *SegmentV2Args, opts ...pulumi.ResourceOption) (*SegmentV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.NetworkType == nil {
		return nil, errors.New("invalid value for required argument 'NetworkType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SegmentV2
	err := ctx.RegisterResource("openstack:networking/segmentV2:SegmentV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSegmentV2 gets an existing SegmentV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSegmentV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SegmentV2State, opts ...pulumi.ResourceOption) (*SegmentV2, error) {
	var resource SegmentV2
	err := ctx.ReadResource("openstack:networking/segmentV2:SegmentV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SegmentV2 resources.
type segmentV2State struct {
	// Creation timestamp (RFC3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// A description for the segment.
	Description *string `pulumi:"description"`
	// A name for the segment.
	Name *string `pulumi:"name"`
	// The UUID of the network this segment belongs to.
	// Changing this will create a new segment.
	NetworkId *string `pulumi:"networkId"`
	// The network type. Valid values depend on the
	// backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
	// this will create a new segment.
	NetworkType *string `pulumi:"networkType"`
	// The name of the physical network. Changing this
	// will create a new segment.
	PhysicalNetwork *string `pulumi:"physicalNetwork"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// segment.
	Region *string `pulumi:"region"`
	// The revision number of the segment.
	RevisionNumber *int `pulumi:"revisionNumber"`
	// A segmentation identifier. Changing is allowed
	// only for `vlan`.
	SegmentationId *int `pulumi:"segmentationId"`
	// Last update timestamp (RFC3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SegmentV2State struct {
	// Creation timestamp (RFC3339 format).
	CreatedAt pulumi.StringPtrInput
	// A description for the segment.
	Description pulumi.StringPtrInput
	// A name for the segment.
	Name pulumi.StringPtrInput
	// The UUID of the network this segment belongs to.
	// Changing this will create a new segment.
	NetworkId pulumi.StringPtrInput
	// The network type. Valid values depend on the
	// backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
	// this will create a new segment.
	NetworkType pulumi.StringPtrInput
	// The name of the physical network. Changing this
	// will create a new segment.
	PhysicalNetwork pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// segment.
	Region pulumi.StringPtrInput
	// The revision number of the segment.
	RevisionNumber pulumi.IntPtrInput
	// A segmentation identifier. Changing is allowed
	// only for `vlan`.
	SegmentationId pulumi.IntPtrInput
	// Last update timestamp (RFC3339 format).
	UpdatedAt pulumi.StringPtrInput
}

func (SegmentV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentV2State)(nil)).Elem()
}

type segmentV2Args struct {
	// A description for the segment.
	Description *string `pulumi:"description"`
	// A name for the segment.
	Name *string `pulumi:"name"`
	// The UUID of the network this segment belongs to.
	// Changing this will create a new segment.
	NetworkId string `pulumi:"networkId"`
	// The network type. Valid values depend on the
	// backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
	// this will create a new segment.
	NetworkType string `pulumi:"networkType"`
	// The name of the physical network. Changing this
	// will create a new segment.
	PhysicalNetwork *string `pulumi:"physicalNetwork"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// segment.
	Region *string `pulumi:"region"`
	// A segmentation identifier. Changing is allowed
	// only for `vlan`.
	SegmentationId *int `pulumi:"segmentationId"`
}

// The set of arguments for constructing a SegmentV2 resource.
type SegmentV2Args struct {
	// A description for the segment.
	Description pulumi.StringPtrInput
	// A name for the segment.
	Name pulumi.StringPtrInput
	// The UUID of the network this segment belongs to.
	// Changing this will create a new segment.
	NetworkId pulumi.StringInput
	// The network type. Valid values depend on the
	// backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
	// this will create a new segment.
	NetworkType pulumi.StringInput
	// The name of the physical network. Changing this
	// will create a new segment.
	PhysicalNetwork pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// segment.
	Region pulumi.StringPtrInput
	// A segmentation identifier. Changing is allowed
	// only for `vlan`.
	SegmentationId pulumi.IntPtrInput
}

func (SegmentV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentV2Args)(nil)).Elem()
}

type SegmentV2Input interface {
	pulumi.Input

	ToSegmentV2Output() SegmentV2Output
	ToSegmentV2OutputWithContext(ctx context.Context) SegmentV2Output
}

func (*SegmentV2) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentV2)(nil)).Elem()
}

func (i *SegmentV2) ToSegmentV2Output() SegmentV2Output {
	return i.ToSegmentV2OutputWithContext(context.Background())
}

func (i *SegmentV2) ToSegmentV2OutputWithContext(ctx context.Context) SegmentV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentV2Output)
}

// SegmentV2ArrayInput is an input type that accepts SegmentV2Array and SegmentV2ArrayOutput values.
// You can construct a concrete instance of `SegmentV2ArrayInput` via:
//
//	SegmentV2Array{ SegmentV2Args{...} }
type SegmentV2ArrayInput interface {
	pulumi.Input

	ToSegmentV2ArrayOutput() SegmentV2ArrayOutput
	ToSegmentV2ArrayOutputWithContext(context.Context) SegmentV2ArrayOutput
}

type SegmentV2Array []SegmentV2Input

func (SegmentV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SegmentV2)(nil)).Elem()
}

func (i SegmentV2Array) ToSegmentV2ArrayOutput() SegmentV2ArrayOutput {
	return i.ToSegmentV2ArrayOutputWithContext(context.Background())
}

func (i SegmentV2Array) ToSegmentV2ArrayOutputWithContext(ctx context.Context) SegmentV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentV2ArrayOutput)
}

// SegmentV2MapInput is an input type that accepts SegmentV2Map and SegmentV2MapOutput values.
// You can construct a concrete instance of `SegmentV2MapInput` via:
//
//	SegmentV2Map{ "key": SegmentV2Args{...} }
type SegmentV2MapInput interface {
	pulumi.Input

	ToSegmentV2MapOutput() SegmentV2MapOutput
	ToSegmentV2MapOutputWithContext(context.Context) SegmentV2MapOutput
}

type SegmentV2Map map[string]SegmentV2Input

func (SegmentV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SegmentV2)(nil)).Elem()
}

func (i SegmentV2Map) ToSegmentV2MapOutput() SegmentV2MapOutput {
	return i.ToSegmentV2MapOutputWithContext(context.Background())
}

func (i SegmentV2Map) ToSegmentV2MapOutputWithContext(ctx context.Context) SegmentV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentV2MapOutput)
}

type SegmentV2Output struct{ *pulumi.OutputState }

func (SegmentV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentV2)(nil)).Elem()
}

func (o SegmentV2Output) ToSegmentV2Output() SegmentV2Output {
	return o
}

func (o SegmentV2Output) ToSegmentV2OutputWithContext(ctx context.Context) SegmentV2Output {
	return o
}

// Creation timestamp (RFC3339 format).
func (o SegmentV2Output) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A description for the segment.
func (o SegmentV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A name for the segment.
func (o SegmentV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The UUID of the network this segment belongs to.
// Changing this will create a new segment.
func (o SegmentV2Output) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The network type. Valid values depend on the
// backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
// this will create a new segment.
func (o SegmentV2Output) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// The name of the physical network. Changing this
// will create a new segment.
func (o SegmentV2Output) PhysicalNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringPtrOutput { return v.PhysicalNetwork }).(pulumi.StringPtrOutput)
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron network. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// segment.
func (o SegmentV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The revision number of the segment.
func (o SegmentV2Output) RevisionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.IntOutput { return v.RevisionNumber }).(pulumi.IntOutput)
}

// A segmentation identifier. Changing is allowed
// only for `vlan`.
func (o SegmentV2Output) SegmentationId() pulumi.IntOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.IntOutput { return v.SegmentationId }).(pulumi.IntOutput)
}

// Last update timestamp (RFC3339 format).
func (o SegmentV2Output) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentV2) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SegmentV2ArrayOutput struct{ *pulumi.OutputState }

func (SegmentV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SegmentV2)(nil)).Elem()
}

func (o SegmentV2ArrayOutput) ToSegmentV2ArrayOutput() SegmentV2ArrayOutput {
	return o
}

func (o SegmentV2ArrayOutput) ToSegmentV2ArrayOutputWithContext(ctx context.Context) SegmentV2ArrayOutput {
	return o
}

func (o SegmentV2ArrayOutput) Index(i pulumi.IntInput) SegmentV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SegmentV2 {
		return vs[0].([]*SegmentV2)[vs[1].(int)]
	}).(SegmentV2Output)
}

type SegmentV2MapOutput struct{ *pulumi.OutputState }

func (SegmentV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SegmentV2)(nil)).Elem()
}

func (o SegmentV2MapOutput) ToSegmentV2MapOutput() SegmentV2MapOutput {
	return o
}

func (o SegmentV2MapOutput) ToSegmentV2MapOutputWithContext(ctx context.Context) SegmentV2MapOutput {
	return o
}

func (o SegmentV2MapOutput) MapIndex(k pulumi.StringInput) SegmentV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SegmentV2 {
		return vs[0].(map[string]*SegmentV2)[vs[1].(string)]
	}).(SegmentV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentV2Input)(nil)).Elem(), &SegmentV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentV2ArrayInput)(nil)).Elem(), SegmentV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentV2MapInput)(nil)).Elem(), SegmentV2Map{})
	pulumi.RegisterOutputType(SegmentV2Output{})
	pulumi.RegisterOutputType(SegmentV2ArrayOutput{})
	pulumi.RegisterOutputType(SegmentV2MapOutput{})
}
