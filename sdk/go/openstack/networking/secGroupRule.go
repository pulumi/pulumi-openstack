// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 neutron security group rule resource within OpenStack.
// Unlike Nova security groups, neutron separates the group from the rules
// and also allows an admin to target a specific tenant_id.
type SecGroupRule struct {
	s *pulumi.ResourceState
}

// NewSecGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecGroupRule(ctx *pulumi.Context,
	name string, args *SecGroupRuleArgs, opts ...pulumi.ResourceOpt) (*SecGroupRule, error) {
	if args == nil || args.Direction == nil {
		return nil, errors.New("missing required argument 'Direction'")
	}
	if args == nil || args.Ethertype == nil {
		return nil, errors.New("missing required argument 'Ethertype'")
	}
	if args == nil || args.SecurityGroupId == nil {
		return nil, errors.New("missing required argument 'SecurityGroupId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["direction"] = nil
		inputs["ethertype"] = nil
		inputs["portRangeMax"] = nil
		inputs["portRangeMin"] = nil
		inputs["protocol"] = nil
		inputs["region"] = nil
		inputs["remoteGroupId"] = nil
		inputs["remoteIpPrefix"] = nil
		inputs["securityGroupId"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["direction"] = args.Direction
		inputs["ethertype"] = args.Ethertype
		inputs["portRangeMax"] = args.PortRangeMax
		inputs["portRangeMin"] = args.PortRangeMin
		inputs["protocol"] = args.Protocol
		inputs["region"] = args.Region
		inputs["remoteGroupId"] = args.RemoteGroupId
		inputs["remoteIpPrefix"] = args.RemoteIpPrefix
		inputs["securityGroupId"] = args.SecurityGroupId
		inputs["tenantId"] = args.TenantId
	}
	s, err := ctx.RegisterResource("openstack:networking/secGroupRule:SecGroupRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecGroupRule{s: s}, nil
}

// GetSecGroupRule gets an existing SecGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecGroupRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecGroupRuleState, opts ...pulumi.ResourceOpt) (*SecGroupRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["direction"] = state.Direction
		inputs["ethertype"] = state.Ethertype
		inputs["portRangeMax"] = state.PortRangeMax
		inputs["portRangeMin"] = state.PortRangeMin
		inputs["protocol"] = state.Protocol
		inputs["region"] = state.Region
		inputs["remoteGroupId"] = state.RemoteGroupId
		inputs["remoteIpPrefix"] = state.RemoteIpPrefix
		inputs["securityGroupId"] = state.SecurityGroupId
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("openstack:networking/secGroupRule:SecGroupRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecGroupRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecGroupRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecGroupRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A description of the rule. Changing this creates a new security group rule.
func (r *SecGroupRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The direction of the rule, valid values are __ingress__
// or __egress__. Changing this creates a new security group rule.
func (r *SecGroupRule) Direction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["direction"])
}

// The layer 3 protocol type, valid values are __IPv4__
// or __IPv6__. Changing this creates a new security group rule.
func (r *SecGroupRule) Ethertype() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ethertype"])
}

// The higher part of the allowed port range, valid
// integer value needs to be between 1 and 65535. Changing this creates a new
// security group rule.
func (r *SecGroupRule) PortRangeMax() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["portRangeMax"])
}

// The lower part of the allowed port range, valid
// integer value needs to be between 1 and 65535. Changing this creates a new
// security group rule.
func (r *SecGroupRule) PortRangeMin() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["portRangeMin"])
}

// The layer 4 protocol type, valid values are following. Changing this creates a new security group rule. This is required if you want to specify a port range.
// * __tcp__
// * __udp__
// * __icmp__
// * __ah__
// * __dccp__
// * __egp__
// * __esp__
// * __gre__
// * __igmp__
// * __ipv6-encap__
// * __ipv6-frag__
// * __ipv6-icmp__
// * __ipv6-nonxt__
// * __ipv6-opts__
// * __ipv6-route__
// * __ospf__
// * __pgm__
// * __rsvp__
// * __sctp__
// * __udplite__
// * __vrrp__
func (r *SecGroupRule) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// The region in which to obtain the V2 networking client.
// A networking client is needed to create a port. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// security group rule.
func (r *SecGroupRule) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The remote group id, the value needs to be an
// Openstack ID of a security group in the same tenant. Changing this creates
// a new security group rule.
func (r *SecGroupRule) RemoteGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["remoteGroupId"])
}

// The remote CIDR, the value needs to be a valid
// CIDR (i.e. 192.168.0.0/16). Changing this creates a new security group rule.
func (r *SecGroupRule) RemoteIpPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["remoteIpPrefix"])
}

// The security group id the rule should belong
// to, the value needs to be an Openstack ID of a security group in the same
// tenant. Changing this creates a new security group rule.
func (r *SecGroupRule) SecurityGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["securityGroupId"])
}

// The owner of the security group. Required if admin
// wants to create a port for another tenant. Changing this creates a new
// security group rule.
func (r *SecGroupRule) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering SecGroupRule resources.
type SecGroupRuleState struct {
	// A description of the rule. Changing this creates a new security group rule.
	Description interface{}
	// The direction of the rule, valid values are __ingress__
	// or __egress__. Changing this creates a new security group rule.
	Direction interface{}
	// The layer 3 protocol type, valid values are __IPv4__
	// or __IPv6__. Changing this creates a new security group rule.
	Ethertype interface{}
	// The higher part of the allowed port range, valid
	// integer value needs to be between 1 and 65535. Changing this creates a new
	// security group rule.
	PortRangeMax interface{}
	// The lower part of the allowed port range, valid
	// integer value needs to be between 1 and 65535. Changing this creates a new
	// security group rule.
	PortRangeMin interface{}
	// The layer 4 protocol type, valid values are following. Changing this creates a new security group rule. This is required if you want to specify a port range.
	// * __tcp__
	// * __udp__
	// * __icmp__
	// * __ah__
	// * __dccp__
	// * __egp__
	// * __esp__
	// * __gre__
	// * __igmp__
	// * __ipv6-encap__
	// * __ipv6-frag__
	// * __ipv6-icmp__
	// * __ipv6-nonxt__
	// * __ipv6-opts__
	// * __ipv6-route__
	// * __ospf__
	// * __pgm__
	// * __rsvp__
	// * __sctp__
	// * __udplite__
	// * __vrrp__
	Protocol interface{}
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to create a port. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// security group rule.
	Region interface{}
	// The remote group id, the value needs to be an
	// Openstack ID of a security group in the same tenant. Changing this creates
	// a new security group rule.
	RemoteGroupId interface{}
	// The remote CIDR, the value needs to be a valid
	// CIDR (i.e. 192.168.0.0/16). Changing this creates a new security group rule.
	RemoteIpPrefix interface{}
	// The security group id the rule should belong
	// to, the value needs to be an Openstack ID of a security group in the same
	// tenant. Changing this creates a new security group rule.
	SecurityGroupId interface{}
	// The owner of the security group. Required if admin
	// wants to create a port for another tenant. Changing this creates a new
	// security group rule.
	TenantId interface{}
}

// The set of arguments for constructing a SecGroupRule resource.
type SecGroupRuleArgs struct {
	// A description of the rule. Changing this creates a new security group rule.
	Description interface{}
	// The direction of the rule, valid values are __ingress__
	// or __egress__. Changing this creates a new security group rule.
	Direction interface{}
	// The layer 3 protocol type, valid values are __IPv4__
	// or __IPv6__. Changing this creates a new security group rule.
	Ethertype interface{}
	// The higher part of the allowed port range, valid
	// integer value needs to be between 1 and 65535. Changing this creates a new
	// security group rule.
	PortRangeMax interface{}
	// The lower part of the allowed port range, valid
	// integer value needs to be between 1 and 65535. Changing this creates a new
	// security group rule.
	PortRangeMin interface{}
	// The layer 4 protocol type, valid values are following. Changing this creates a new security group rule. This is required if you want to specify a port range.
	// * __tcp__
	// * __udp__
	// * __icmp__
	// * __ah__
	// * __dccp__
	// * __egp__
	// * __esp__
	// * __gre__
	// * __igmp__
	// * __ipv6-encap__
	// * __ipv6-frag__
	// * __ipv6-icmp__
	// * __ipv6-nonxt__
	// * __ipv6-opts__
	// * __ipv6-route__
	// * __ospf__
	// * __pgm__
	// * __rsvp__
	// * __sctp__
	// * __udplite__
	// * __vrrp__
	Protocol interface{}
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to create a port. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// security group rule.
	Region interface{}
	// The remote group id, the value needs to be an
	// Openstack ID of a security group in the same tenant. Changing this creates
	// a new security group rule.
	RemoteGroupId interface{}
	// The remote CIDR, the value needs to be a valid
	// CIDR (i.e. 192.168.0.0/16). Changing this creates a new security group rule.
	RemoteIpPrefix interface{}
	// The security group id the rule should belong
	// to, the value needs to be an Openstack ID of a security group in the same
	// tenant. Changing this creates a new security group rule.
	SecurityGroupId interface{}
	// The owner of the security group. Required if admin
	// wants to create a port for another tenant. Changing this creates a new
	// security group rule.
	TenantId interface{}
}
