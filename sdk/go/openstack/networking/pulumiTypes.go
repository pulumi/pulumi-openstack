// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NetworkSegment struct {
	// The type of physical network.
	NetworkType *string `pulumi:"networkType"`
	// The physical network where this network is implemented.
	PhysicalNetwork *string `pulumi:"physicalNetwork"`
	// An isolated segment on the physical network.
	SegmentationId *int `pulumi:"segmentationId"`
}

// NetworkSegmentInput is an input type that accepts NetworkSegmentArgs and NetworkSegmentOutput values.
// You can construct a concrete instance of `NetworkSegmentInput` via:
//
//          NetworkSegmentArgs{...}
type NetworkSegmentInput interface {
	pulumi.Input

	ToNetworkSegmentOutput() NetworkSegmentOutput
	ToNetworkSegmentOutputWithContext(context.Context) NetworkSegmentOutput
}

type NetworkSegmentArgs struct {
	// The type of physical network.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The physical network where this network is implemented.
	PhysicalNetwork pulumi.StringPtrInput `pulumi:"physicalNetwork"`
	// An isolated segment on the physical network.
	SegmentationId pulumi.IntPtrInput `pulumi:"segmentationId"`
}

func (NetworkSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSegment)(nil)).Elem()
}

func (i NetworkSegmentArgs) ToNetworkSegmentOutput() NetworkSegmentOutput {
	return i.ToNetworkSegmentOutputWithContext(context.Background())
}

func (i NetworkSegmentArgs) ToNetworkSegmentOutputWithContext(ctx context.Context) NetworkSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSegmentOutput)
}

// NetworkSegmentArrayInput is an input type that accepts NetworkSegmentArray and NetworkSegmentArrayOutput values.
// You can construct a concrete instance of `NetworkSegmentArrayInput` via:
//
//          NetworkSegmentArray{ NetworkSegmentArgs{...} }
type NetworkSegmentArrayInput interface {
	pulumi.Input

	ToNetworkSegmentArrayOutput() NetworkSegmentArrayOutput
	ToNetworkSegmentArrayOutputWithContext(context.Context) NetworkSegmentArrayOutput
}

type NetworkSegmentArray []NetworkSegmentInput

func (NetworkSegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSegment)(nil)).Elem()
}

func (i NetworkSegmentArray) ToNetworkSegmentArrayOutput() NetworkSegmentArrayOutput {
	return i.ToNetworkSegmentArrayOutputWithContext(context.Background())
}

func (i NetworkSegmentArray) ToNetworkSegmentArrayOutputWithContext(ctx context.Context) NetworkSegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSegmentArrayOutput)
}

type NetworkSegmentOutput struct{ *pulumi.OutputState }

func (NetworkSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSegment)(nil)).Elem()
}

func (o NetworkSegmentOutput) ToNetworkSegmentOutput() NetworkSegmentOutput {
	return o
}

func (o NetworkSegmentOutput) ToNetworkSegmentOutputWithContext(ctx context.Context) NetworkSegmentOutput {
	return o
}

// The type of physical network.
func (o NetworkSegmentOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkSegment) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The physical network where this network is implemented.
func (o NetworkSegmentOutput) PhysicalNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkSegment) *string { return v.PhysicalNetwork }).(pulumi.StringPtrOutput)
}

// An isolated segment on the physical network.
func (o NetworkSegmentOutput) SegmentationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkSegment) *int { return v.SegmentationId }).(pulumi.IntPtrOutput)
}

type NetworkSegmentArrayOutput struct{ *pulumi.OutputState }

func (NetworkSegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSegment)(nil)).Elem()
}

func (o NetworkSegmentArrayOutput) ToNetworkSegmentArrayOutput() NetworkSegmentArrayOutput {
	return o
}

func (o NetworkSegmentArrayOutput) ToNetworkSegmentArrayOutputWithContext(ctx context.Context) NetworkSegmentArrayOutput {
	return o
}

func (o NetworkSegmentArrayOutput) Index(i pulumi.IntInput) NetworkSegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkSegment {
		return vs[0].([]NetworkSegment)[vs[1].(int)]
	}).(NetworkSegmentOutput)
}

type PortAllowedAddressPair struct {
	// The additional IP address.
	IpAddress string `pulumi:"ipAddress"`
	// The additional MAC address.
	MacAddress *string `pulumi:"macAddress"`
}

// PortAllowedAddressPairInput is an input type that accepts PortAllowedAddressPairArgs and PortAllowedAddressPairOutput values.
// You can construct a concrete instance of `PortAllowedAddressPairInput` via:
//
//          PortAllowedAddressPairArgs{...}
type PortAllowedAddressPairInput interface {
	pulumi.Input

	ToPortAllowedAddressPairOutput() PortAllowedAddressPairOutput
	ToPortAllowedAddressPairOutputWithContext(context.Context) PortAllowedAddressPairOutput
}

type PortAllowedAddressPairArgs struct {
	// The additional IP address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The additional MAC address.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
}

func (PortAllowedAddressPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortAllowedAddressPair)(nil)).Elem()
}

func (i PortAllowedAddressPairArgs) ToPortAllowedAddressPairOutput() PortAllowedAddressPairOutput {
	return i.ToPortAllowedAddressPairOutputWithContext(context.Background())
}

func (i PortAllowedAddressPairArgs) ToPortAllowedAddressPairOutputWithContext(ctx context.Context) PortAllowedAddressPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortAllowedAddressPairOutput)
}

// PortAllowedAddressPairArrayInput is an input type that accepts PortAllowedAddressPairArray and PortAllowedAddressPairArrayOutput values.
// You can construct a concrete instance of `PortAllowedAddressPairArrayInput` via:
//
//          PortAllowedAddressPairArray{ PortAllowedAddressPairArgs{...} }
type PortAllowedAddressPairArrayInput interface {
	pulumi.Input

	ToPortAllowedAddressPairArrayOutput() PortAllowedAddressPairArrayOutput
	ToPortAllowedAddressPairArrayOutputWithContext(context.Context) PortAllowedAddressPairArrayOutput
}

type PortAllowedAddressPairArray []PortAllowedAddressPairInput

func (PortAllowedAddressPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortAllowedAddressPair)(nil)).Elem()
}

func (i PortAllowedAddressPairArray) ToPortAllowedAddressPairArrayOutput() PortAllowedAddressPairArrayOutput {
	return i.ToPortAllowedAddressPairArrayOutputWithContext(context.Background())
}

func (i PortAllowedAddressPairArray) ToPortAllowedAddressPairArrayOutputWithContext(ctx context.Context) PortAllowedAddressPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortAllowedAddressPairArrayOutput)
}

type PortAllowedAddressPairOutput struct{ *pulumi.OutputState }

func (PortAllowedAddressPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortAllowedAddressPair)(nil)).Elem()
}

func (o PortAllowedAddressPairOutput) ToPortAllowedAddressPairOutput() PortAllowedAddressPairOutput {
	return o
}

func (o PortAllowedAddressPairOutput) ToPortAllowedAddressPairOutputWithContext(ctx context.Context) PortAllowedAddressPairOutput {
	return o
}

// The additional IP address.
func (o PortAllowedAddressPairOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v PortAllowedAddressPair) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The additional MAC address.
func (o PortAllowedAddressPairOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortAllowedAddressPair) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

type PortAllowedAddressPairArrayOutput struct{ *pulumi.OutputState }

func (PortAllowedAddressPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortAllowedAddressPair)(nil)).Elem()
}

func (o PortAllowedAddressPairArrayOutput) ToPortAllowedAddressPairArrayOutput() PortAllowedAddressPairArrayOutput {
	return o
}

func (o PortAllowedAddressPairArrayOutput) ToPortAllowedAddressPairArrayOutputWithContext(ctx context.Context) PortAllowedAddressPairArrayOutput {
	return o
}

func (o PortAllowedAddressPairArrayOutput) Index(i pulumi.IntInput) PortAllowedAddressPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortAllowedAddressPair {
		return vs[0].([]PortAllowedAddressPair)[vs[1].(int)]
	}).(PortAllowedAddressPairOutput)
}

type PortBinding struct {
	// The ID of the host to allocate port on.
	HostId *string `pulumi:"hostId"`
	// Custom data to be passed as `binding:profile`. Data
	// must be passed as JSON.
	Profile *string `pulumi:"profile"`
	// A map of JSON strings containing additional
	// details for this specific binding.
	VifDetails map[string]interface{} `pulumi:"vifDetails"`
	// The VNIC type of the port binding.
	VifType *string `pulumi:"vifType"`
	// VNIC type for the port. Can either be `direct`,
	// `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
	// Default value is `normal`.
	VnicType *string `pulumi:"vnicType"`
}

// PortBindingInput is an input type that accepts PortBindingArgs and PortBindingOutput values.
// You can construct a concrete instance of `PortBindingInput` via:
//
//          PortBindingArgs{...}
type PortBindingInput interface {
	pulumi.Input

	ToPortBindingOutput() PortBindingOutput
	ToPortBindingOutputWithContext(context.Context) PortBindingOutput
}

type PortBindingArgs struct {
	// The ID of the host to allocate port on.
	HostId pulumi.StringPtrInput `pulumi:"hostId"`
	// Custom data to be passed as `binding:profile`. Data
	// must be passed as JSON.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// A map of JSON strings containing additional
	// details for this specific binding.
	VifDetails pulumi.MapInput `pulumi:"vifDetails"`
	// The VNIC type of the port binding.
	VifType pulumi.StringPtrInput `pulumi:"vifType"`
	// VNIC type for the port. Can either be `direct`,
	// `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
	// Default value is `normal`.
	VnicType pulumi.StringPtrInput `pulumi:"vnicType"`
}

func (PortBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortBinding)(nil)).Elem()
}

func (i PortBindingArgs) ToPortBindingOutput() PortBindingOutput {
	return i.ToPortBindingOutputWithContext(context.Background())
}

func (i PortBindingArgs) ToPortBindingOutputWithContext(ctx context.Context) PortBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortBindingOutput)
}

func (i PortBindingArgs) ToPortBindingPtrOutput() PortBindingPtrOutput {
	return i.ToPortBindingPtrOutputWithContext(context.Background())
}

func (i PortBindingArgs) ToPortBindingPtrOutputWithContext(ctx context.Context) PortBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortBindingOutput).ToPortBindingPtrOutputWithContext(ctx)
}

// PortBindingPtrInput is an input type that accepts PortBindingArgs, PortBindingPtr and PortBindingPtrOutput values.
// You can construct a concrete instance of `PortBindingPtrInput` via:
//
//          PortBindingArgs{...}
//
//  or:
//
//          nil
type PortBindingPtrInput interface {
	pulumi.Input

	ToPortBindingPtrOutput() PortBindingPtrOutput
	ToPortBindingPtrOutputWithContext(context.Context) PortBindingPtrOutput
}

type portBindingPtrType PortBindingArgs

func PortBindingPtr(v *PortBindingArgs) PortBindingPtrInput {
	return (*portBindingPtrType)(v)
}

func (*portBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PortBinding)(nil)).Elem()
}

func (i *portBindingPtrType) ToPortBindingPtrOutput() PortBindingPtrOutput {
	return i.ToPortBindingPtrOutputWithContext(context.Background())
}

func (i *portBindingPtrType) ToPortBindingPtrOutputWithContext(ctx context.Context) PortBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortBindingPtrOutput)
}

type PortBindingOutput struct{ *pulumi.OutputState }

func (PortBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortBinding)(nil)).Elem()
}

func (o PortBindingOutput) ToPortBindingOutput() PortBindingOutput {
	return o
}

func (o PortBindingOutput) ToPortBindingOutputWithContext(ctx context.Context) PortBindingOutput {
	return o
}

func (o PortBindingOutput) ToPortBindingPtrOutput() PortBindingPtrOutput {
	return o.ToPortBindingPtrOutputWithContext(context.Background())
}

func (o PortBindingOutput) ToPortBindingPtrOutputWithContext(ctx context.Context) PortBindingPtrOutput {
	return o.ApplyT(func(v PortBinding) *PortBinding {
		return &v
	}).(PortBindingPtrOutput)
}

// The ID of the host to allocate port on.
func (o PortBindingOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortBinding) *string { return v.HostId }).(pulumi.StringPtrOutput)
}

// Custom data to be passed as `binding:profile`. Data
// must be passed as JSON.
func (o PortBindingOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortBinding) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// A map of JSON strings containing additional
// details for this specific binding.
func (o PortBindingOutput) VifDetails() pulumi.MapOutput {
	return o.ApplyT(func(v PortBinding) map[string]interface{} { return v.VifDetails }).(pulumi.MapOutput)
}

// The VNIC type of the port binding.
func (o PortBindingOutput) VifType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortBinding) *string { return v.VifType }).(pulumi.StringPtrOutput)
}

// VNIC type for the port. Can either be `direct`,
// `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
// Default value is `normal`.
func (o PortBindingOutput) VnicType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortBinding) *string { return v.VnicType }).(pulumi.StringPtrOutput)
}

type PortBindingPtrOutput struct{ *pulumi.OutputState }

func (PortBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortBinding)(nil)).Elem()
}

func (o PortBindingPtrOutput) ToPortBindingPtrOutput() PortBindingPtrOutput {
	return o
}

func (o PortBindingPtrOutput) ToPortBindingPtrOutputWithContext(ctx context.Context) PortBindingPtrOutput {
	return o
}

func (o PortBindingPtrOutput) Elem() PortBindingOutput {
	return o.ApplyT(func(v *PortBinding) PortBinding { return *v }).(PortBindingOutput)
}

// The ID of the host to allocate port on.
func (o PortBindingPtrOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortBinding) *string {
		if v == nil {
			return nil
		}
		return v.HostId
	}).(pulumi.StringPtrOutput)
}

// Custom data to be passed as `binding:profile`. Data
// must be passed as JSON.
func (o PortBindingPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortBinding) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// A map of JSON strings containing additional
// details for this specific binding.
func (o PortBindingPtrOutput) VifDetails() pulumi.MapOutput {
	return o.ApplyT(func(v *PortBinding) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.VifDetails
	}).(pulumi.MapOutput)
}

// The VNIC type of the port binding.
func (o PortBindingPtrOutput) VifType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortBinding) *string {
		if v == nil {
			return nil
		}
		return v.VifType
	}).(pulumi.StringPtrOutput)
}

// VNIC type for the port. Can either be `direct`,
// `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
// Default value is `normal`.
func (o PortBindingPtrOutput) VnicType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortBinding) *string {
		if v == nil {
			return nil
		}
		return v.VnicType
	}).(pulumi.StringPtrOutput)
}

type PortExtraDhcpOption struct {
	// IP protocol version. Defaults to 4.
	IpVersion *int `pulumi:"ipVersion"`
	// Name of the DHCP option.
	Name string `pulumi:"name"`
	// Value of the DHCP option.
	Value string `pulumi:"value"`
}

// PortExtraDhcpOptionInput is an input type that accepts PortExtraDhcpOptionArgs and PortExtraDhcpOptionOutput values.
// You can construct a concrete instance of `PortExtraDhcpOptionInput` via:
//
//          PortExtraDhcpOptionArgs{...}
type PortExtraDhcpOptionInput interface {
	pulumi.Input

	ToPortExtraDhcpOptionOutput() PortExtraDhcpOptionOutput
	ToPortExtraDhcpOptionOutputWithContext(context.Context) PortExtraDhcpOptionOutput
}

type PortExtraDhcpOptionArgs struct {
	// IP protocol version. Defaults to 4.
	IpVersion pulumi.IntPtrInput `pulumi:"ipVersion"`
	// Name of the DHCP option.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the DHCP option.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PortExtraDhcpOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortExtraDhcpOption)(nil)).Elem()
}

func (i PortExtraDhcpOptionArgs) ToPortExtraDhcpOptionOutput() PortExtraDhcpOptionOutput {
	return i.ToPortExtraDhcpOptionOutputWithContext(context.Background())
}

func (i PortExtraDhcpOptionArgs) ToPortExtraDhcpOptionOutputWithContext(ctx context.Context) PortExtraDhcpOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortExtraDhcpOptionOutput)
}

// PortExtraDhcpOptionArrayInput is an input type that accepts PortExtraDhcpOptionArray and PortExtraDhcpOptionArrayOutput values.
// You can construct a concrete instance of `PortExtraDhcpOptionArrayInput` via:
//
//          PortExtraDhcpOptionArray{ PortExtraDhcpOptionArgs{...} }
type PortExtraDhcpOptionArrayInput interface {
	pulumi.Input

	ToPortExtraDhcpOptionArrayOutput() PortExtraDhcpOptionArrayOutput
	ToPortExtraDhcpOptionArrayOutputWithContext(context.Context) PortExtraDhcpOptionArrayOutput
}

type PortExtraDhcpOptionArray []PortExtraDhcpOptionInput

func (PortExtraDhcpOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortExtraDhcpOption)(nil)).Elem()
}

func (i PortExtraDhcpOptionArray) ToPortExtraDhcpOptionArrayOutput() PortExtraDhcpOptionArrayOutput {
	return i.ToPortExtraDhcpOptionArrayOutputWithContext(context.Background())
}

func (i PortExtraDhcpOptionArray) ToPortExtraDhcpOptionArrayOutputWithContext(ctx context.Context) PortExtraDhcpOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortExtraDhcpOptionArrayOutput)
}

type PortExtraDhcpOptionOutput struct{ *pulumi.OutputState }

func (PortExtraDhcpOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortExtraDhcpOption)(nil)).Elem()
}

func (o PortExtraDhcpOptionOutput) ToPortExtraDhcpOptionOutput() PortExtraDhcpOptionOutput {
	return o
}

func (o PortExtraDhcpOptionOutput) ToPortExtraDhcpOptionOutputWithContext(ctx context.Context) PortExtraDhcpOptionOutput {
	return o
}

// IP protocol version. Defaults to 4.
func (o PortExtraDhcpOptionOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortExtraDhcpOption) *int { return v.IpVersion }).(pulumi.IntPtrOutput)
}

// Name of the DHCP option.
func (o PortExtraDhcpOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PortExtraDhcpOption) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the DHCP option.
func (o PortExtraDhcpOptionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PortExtraDhcpOption) string { return v.Value }).(pulumi.StringOutput)
}

type PortExtraDhcpOptionArrayOutput struct{ *pulumi.OutputState }

func (PortExtraDhcpOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortExtraDhcpOption)(nil)).Elem()
}

func (o PortExtraDhcpOptionArrayOutput) ToPortExtraDhcpOptionArrayOutput() PortExtraDhcpOptionArrayOutput {
	return o
}

func (o PortExtraDhcpOptionArrayOutput) ToPortExtraDhcpOptionArrayOutputWithContext(ctx context.Context) PortExtraDhcpOptionArrayOutput {
	return o
}

func (o PortExtraDhcpOptionArrayOutput) Index(i pulumi.IntInput) PortExtraDhcpOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortExtraDhcpOption {
		return vs[0].([]PortExtraDhcpOption)[vs[1].(int)]
	}).(PortExtraDhcpOptionOutput)
}

type PortFixedIp struct {
	// The additional IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// Subnet in which to allocate IP address for
	// this port.
	SubnetId string `pulumi:"subnetId"`
}

// PortFixedIpInput is an input type that accepts PortFixedIpArgs and PortFixedIpOutput values.
// You can construct a concrete instance of `PortFixedIpInput` via:
//
//          PortFixedIpArgs{...}
type PortFixedIpInput interface {
	pulumi.Input

	ToPortFixedIpOutput() PortFixedIpOutput
	ToPortFixedIpOutputWithContext(context.Context) PortFixedIpOutput
}

type PortFixedIpArgs struct {
	// The additional IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Subnet in which to allocate IP address for
	// this port.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (PortFixedIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortFixedIp)(nil)).Elem()
}

func (i PortFixedIpArgs) ToPortFixedIpOutput() PortFixedIpOutput {
	return i.ToPortFixedIpOutputWithContext(context.Background())
}

func (i PortFixedIpArgs) ToPortFixedIpOutputWithContext(ctx context.Context) PortFixedIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortFixedIpOutput)
}

// PortFixedIpArrayInput is an input type that accepts PortFixedIpArray and PortFixedIpArrayOutput values.
// You can construct a concrete instance of `PortFixedIpArrayInput` via:
//
//          PortFixedIpArray{ PortFixedIpArgs{...} }
type PortFixedIpArrayInput interface {
	pulumi.Input

	ToPortFixedIpArrayOutput() PortFixedIpArrayOutput
	ToPortFixedIpArrayOutputWithContext(context.Context) PortFixedIpArrayOutput
}

type PortFixedIpArray []PortFixedIpInput

func (PortFixedIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortFixedIp)(nil)).Elem()
}

func (i PortFixedIpArray) ToPortFixedIpArrayOutput() PortFixedIpArrayOutput {
	return i.ToPortFixedIpArrayOutputWithContext(context.Background())
}

func (i PortFixedIpArray) ToPortFixedIpArrayOutputWithContext(ctx context.Context) PortFixedIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortFixedIpArrayOutput)
}

type PortFixedIpOutput struct{ *pulumi.OutputState }

func (PortFixedIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortFixedIp)(nil)).Elem()
}

func (o PortFixedIpOutput) ToPortFixedIpOutput() PortFixedIpOutput {
	return o
}

func (o PortFixedIpOutput) ToPortFixedIpOutputWithContext(ctx context.Context) PortFixedIpOutput {
	return o
}

// The additional IP address.
func (o PortFixedIpOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortFixedIp) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Subnet in which to allocate IP address for
// this port.
func (o PortFixedIpOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v PortFixedIp) string { return v.SubnetId }).(pulumi.StringOutput)
}

type PortFixedIpArrayOutput struct{ *pulumi.OutputState }

func (PortFixedIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortFixedIp)(nil)).Elem()
}

func (o PortFixedIpArrayOutput) ToPortFixedIpArrayOutput() PortFixedIpArrayOutput {
	return o
}

func (o PortFixedIpArrayOutput) ToPortFixedIpArrayOutputWithContext(ctx context.Context) PortFixedIpArrayOutput {
	return o
}

func (o PortFixedIpArrayOutput) Index(i pulumi.IntInput) PortFixedIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortFixedIp {
		return vs[0].([]PortFixedIp)[vs[1].(int)]
	}).(PortFixedIpOutput)
}

type RouterExternalFixedIp struct {
	// The IP address to set on the router.
	IpAddress *string `pulumi:"ipAddress"`
	// Subnet in which the fixed IP belongs to.
	SubnetId *string `pulumi:"subnetId"`
}

// RouterExternalFixedIpInput is an input type that accepts RouterExternalFixedIpArgs and RouterExternalFixedIpOutput values.
// You can construct a concrete instance of `RouterExternalFixedIpInput` via:
//
//          RouterExternalFixedIpArgs{...}
type RouterExternalFixedIpInput interface {
	pulumi.Input

	ToRouterExternalFixedIpOutput() RouterExternalFixedIpOutput
	ToRouterExternalFixedIpOutputWithContext(context.Context) RouterExternalFixedIpOutput
}

type RouterExternalFixedIpArgs struct {
	// The IP address to set on the router.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Subnet in which the fixed IP belongs to.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (RouterExternalFixedIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterExternalFixedIp)(nil)).Elem()
}

func (i RouterExternalFixedIpArgs) ToRouterExternalFixedIpOutput() RouterExternalFixedIpOutput {
	return i.ToRouterExternalFixedIpOutputWithContext(context.Background())
}

func (i RouterExternalFixedIpArgs) ToRouterExternalFixedIpOutputWithContext(ctx context.Context) RouterExternalFixedIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterExternalFixedIpOutput)
}

// RouterExternalFixedIpArrayInput is an input type that accepts RouterExternalFixedIpArray and RouterExternalFixedIpArrayOutput values.
// You can construct a concrete instance of `RouterExternalFixedIpArrayInput` via:
//
//          RouterExternalFixedIpArray{ RouterExternalFixedIpArgs{...} }
type RouterExternalFixedIpArrayInput interface {
	pulumi.Input

	ToRouterExternalFixedIpArrayOutput() RouterExternalFixedIpArrayOutput
	ToRouterExternalFixedIpArrayOutputWithContext(context.Context) RouterExternalFixedIpArrayOutput
}

type RouterExternalFixedIpArray []RouterExternalFixedIpInput

func (RouterExternalFixedIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterExternalFixedIp)(nil)).Elem()
}

func (i RouterExternalFixedIpArray) ToRouterExternalFixedIpArrayOutput() RouterExternalFixedIpArrayOutput {
	return i.ToRouterExternalFixedIpArrayOutputWithContext(context.Background())
}

func (i RouterExternalFixedIpArray) ToRouterExternalFixedIpArrayOutputWithContext(ctx context.Context) RouterExternalFixedIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterExternalFixedIpArrayOutput)
}

type RouterExternalFixedIpOutput struct{ *pulumi.OutputState }

func (RouterExternalFixedIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterExternalFixedIp)(nil)).Elem()
}

func (o RouterExternalFixedIpOutput) ToRouterExternalFixedIpOutput() RouterExternalFixedIpOutput {
	return o
}

func (o RouterExternalFixedIpOutput) ToRouterExternalFixedIpOutputWithContext(ctx context.Context) RouterExternalFixedIpOutput {
	return o
}

// The IP address to set on the router.
func (o RouterExternalFixedIpOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterExternalFixedIp) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Subnet in which the fixed IP belongs to.
func (o RouterExternalFixedIpOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterExternalFixedIp) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type RouterExternalFixedIpArrayOutput struct{ *pulumi.OutputState }

func (RouterExternalFixedIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterExternalFixedIp)(nil)).Elem()
}

func (o RouterExternalFixedIpArrayOutput) ToRouterExternalFixedIpArrayOutput() RouterExternalFixedIpArrayOutput {
	return o
}

func (o RouterExternalFixedIpArrayOutput) ToRouterExternalFixedIpArrayOutputWithContext(ctx context.Context) RouterExternalFixedIpArrayOutput {
	return o
}

func (o RouterExternalFixedIpArrayOutput) Index(i pulumi.IntInput) RouterExternalFixedIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterExternalFixedIp {
		return vs[0].([]RouterExternalFixedIp)[vs[1].(int)]
	}).(RouterExternalFixedIpOutput)
}

type RouterVendorOptions struct {
	// Boolean to control whether
	// the Router gateway is assigned during creation or updated after creation.
	SetRouterGatewayAfterCreate *bool `pulumi:"setRouterGatewayAfterCreate"`
}

// RouterVendorOptionsInput is an input type that accepts RouterVendorOptionsArgs and RouterVendorOptionsOutput values.
// You can construct a concrete instance of `RouterVendorOptionsInput` via:
//
//          RouterVendorOptionsArgs{...}
type RouterVendorOptionsInput interface {
	pulumi.Input

	ToRouterVendorOptionsOutput() RouterVendorOptionsOutput
	ToRouterVendorOptionsOutputWithContext(context.Context) RouterVendorOptionsOutput
}

type RouterVendorOptionsArgs struct {
	// Boolean to control whether
	// the Router gateway is assigned during creation or updated after creation.
	SetRouterGatewayAfterCreate pulumi.BoolPtrInput `pulumi:"setRouterGatewayAfterCreate"`
}

func (RouterVendorOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterVendorOptions)(nil)).Elem()
}

func (i RouterVendorOptionsArgs) ToRouterVendorOptionsOutput() RouterVendorOptionsOutput {
	return i.ToRouterVendorOptionsOutputWithContext(context.Background())
}

func (i RouterVendorOptionsArgs) ToRouterVendorOptionsOutputWithContext(ctx context.Context) RouterVendorOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterVendorOptionsOutput)
}

func (i RouterVendorOptionsArgs) ToRouterVendorOptionsPtrOutput() RouterVendorOptionsPtrOutput {
	return i.ToRouterVendorOptionsPtrOutputWithContext(context.Background())
}

func (i RouterVendorOptionsArgs) ToRouterVendorOptionsPtrOutputWithContext(ctx context.Context) RouterVendorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterVendorOptionsOutput).ToRouterVendorOptionsPtrOutputWithContext(ctx)
}

// RouterVendorOptionsPtrInput is an input type that accepts RouterVendorOptionsArgs, RouterVendorOptionsPtr and RouterVendorOptionsPtrOutput values.
// You can construct a concrete instance of `RouterVendorOptionsPtrInput` via:
//
//          RouterVendorOptionsArgs{...}
//
//  or:
//
//          nil
type RouterVendorOptionsPtrInput interface {
	pulumi.Input

	ToRouterVendorOptionsPtrOutput() RouterVendorOptionsPtrOutput
	ToRouterVendorOptionsPtrOutputWithContext(context.Context) RouterVendorOptionsPtrOutput
}

type routerVendorOptionsPtrType RouterVendorOptionsArgs

func RouterVendorOptionsPtr(v *RouterVendorOptionsArgs) RouterVendorOptionsPtrInput {
	return (*routerVendorOptionsPtrType)(v)
}

func (*routerVendorOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterVendorOptions)(nil)).Elem()
}

func (i *routerVendorOptionsPtrType) ToRouterVendorOptionsPtrOutput() RouterVendorOptionsPtrOutput {
	return i.ToRouterVendorOptionsPtrOutputWithContext(context.Background())
}

func (i *routerVendorOptionsPtrType) ToRouterVendorOptionsPtrOutputWithContext(ctx context.Context) RouterVendorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterVendorOptionsPtrOutput)
}

type RouterVendorOptionsOutput struct{ *pulumi.OutputState }

func (RouterVendorOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterVendorOptions)(nil)).Elem()
}

func (o RouterVendorOptionsOutput) ToRouterVendorOptionsOutput() RouterVendorOptionsOutput {
	return o
}

func (o RouterVendorOptionsOutput) ToRouterVendorOptionsOutputWithContext(ctx context.Context) RouterVendorOptionsOutput {
	return o
}

func (o RouterVendorOptionsOutput) ToRouterVendorOptionsPtrOutput() RouterVendorOptionsPtrOutput {
	return o.ToRouterVendorOptionsPtrOutputWithContext(context.Background())
}

func (o RouterVendorOptionsOutput) ToRouterVendorOptionsPtrOutputWithContext(ctx context.Context) RouterVendorOptionsPtrOutput {
	return o.ApplyT(func(v RouterVendorOptions) *RouterVendorOptions {
		return &v
	}).(RouterVendorOptionsPtrOutput)
}

// Boolean to control whether
// the Router gateway is assigned during creation or updated after creation.
func (o RouterVendorOptionsOutput) SetRouterGatewayAfterCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouterVendorOptions) *bool { return v.SetRouterGatewayAfterCreate }).(pulumi.BoolPtrOutput)
}

type RouterVendorOptionsPtrOutput struct{ *pulumi.OutputState }

func (RouterVendorOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterVendorOptions)(nil)).Elem()
}

func (o RouterVendorOptionsPtrOutput) ToRouterVendorOptionsPtrOutput() RouterVendorOptionsPtrOutput {
	return o
}

func (o RouterVendorOptionsPtrOutput) ToRouterVendorOptionsPtrOutputWithContext(ctx context.Context) RouterVendorOptionsPtrOutput {
	return o
}

func (o RouterVendorOptionsPtrOutput) Elem() RouterVendorOptionsOutput {
	return o.ApplyT(func(v *RouterVendorOptions) RouterVendorOptions { return *v }).(RouterVendorOptionsOutput)
}

// Boolean to control whether
// the Router gateway is assigned during creation or updated after creation.
func (o RouterVendorOptionsPtrOutput) SetRouterGatewayAfterCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouterVendorOptions) *bool {
		if v == nil {
			return nil
		}
		return v.SetRouterGatewayAfterCreate
	}).(pulumi.BoolPtrOutput)
}

type SubnetAllocationPool struct {
	// The ending address.
	End string `pulumi:"end"`
	// The starting address.
	Start string `pulumi:"start"`
}

// SubnetAllocationPoolInput is an input type that accepts SubnetAllocationPoolArgs and SubnetAllocationPoolOutput values.
// You can construct a concrete instance of `SubnetAllocationPoolInput` via:
//
//          SubnetAllocationPoolArgs{...}
type SubnetAllocationPoolInput interface {
	pulumi.Input

	ToSubnetAllocationPoolOutput() SubnetAllocationPoolOutput
	ToSubnetAllocationPoolOutputWithContext(context.Context) SubnetAllocationPoolOutput
}

type SubnetAllocationPoolArgs struct {
	// The ending address.
	End pulumi.StringInput `pulumi:"end"`
	// The starting address.
	Start pulumi.StringInput `pulumi:"start"`
}

func (SubnetAllocationPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetAllocationPool)(nil)).Elem()
}

func (i SubnetAllocationPoolArgs) ToSubnetAllocationPoolOutput() SubnetAllocationPoolOutput {
	return i.ToSubnetAllocationPoolOutputWithContext(context.Background())
}

func (i SubnetAllocationPoolArgs) ToSubnetAllocationPoolOutputWithContext(ctx context.Context) SubnetAllocationPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetAllocationPoolOutput)
}

// SubnetAllocationPoolArrayInput is an input type that accepts SubnetAllocationPoolArray and SubnetAllocationPoolArrayOutput values.
// You can construct a concrete instance of `SubnetAllocationPoolArrayInput` via:
//
//          SubnetAllocationPoolArray{ SubnetAllocationPoolArgs{...} }
type SubnetAllocationPoolArrayInput interface {
	pulumi.Input

	ToSubnetAllocationPoolArrayOutput() SubnetAllocationPoolArrayOutput
	ToSubnetAllocationPoolArrayOutputWithContext(context.Context) SubnetAllocationPoolArrayOutput
}

type SubnetAllocationPoolArray []SubnetAllocationPoolInput

func (SubnetAllocationPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetAllocationPool)(nil)).Elem()
}

func (i SubnetAllocationPoolArray) ToSubnetAllocationPoolArrayOutput() SubnetAllocationPoolArrayOutput {
	return i.ToSubnetAllocationPoolArrayOutputWithContext(context.Background())
}

func (i SubnetAllocationPoolArray) ToSubnetAllocationPoolArrayOutputWithContext(ctx context.Context) SubnetAllocationPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetAllocationPoolArrayOutput)
}

type SubnetAllocationPoolOutput struct{ *pulumi.OutputState }

func (SubnetAllocationPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetAllocationPool)(nil)).Elem()
}

func (o SubnetAllocationPoolOutput) ToSubnetAllocationPoolOutput() SubnetAllocationPoolOutput {
	return o
}

func (o SubnetAllocationPoolOutput) ToSubnetAllocationPoolOutputWithContext(ctx context.Context) SubnetAllocationPoolOutput {
	return o
}

// The ending address.
func (o SubnetAllocationPoolOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetAllocationPool) string { return v.End }).(pulumi.StringOutput)
}

// The starting address.
func (o SubnetAllocationPoolOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetAllocationPool) string { return v.Start }).(pulumi.StringOutput)
}

type SubnetAllocationPoolArrayOutput struct{ *pulumi.OutputState }

func (SubnetAllocationPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetAllocationPool)(nil)).Elem()
}

func (o SubnetAllocationPoolArrayOutput) ToSubnetAllocationPoolArrayOutput() SubnetAllocationPoolArrayOutput {
	return o
}

func (o SubnetAllocationPoolArrayOutput) ToSubnetAllocationPoolArrayOutputWithContext(ctx context.Context) SubnetAllocationPoolArrayOutput {
	return o
}

func (o SubnetAllocationPoolArrayOutput) Index(i pulumi.IntInput) SubnetAllocationPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetAllocationPool {
		return vs[0].([]SubnetAllocationPool)[vs[1].(int)]
	}).(SubnetAllocationPoolOutput)
}

type SubnetAllocationPoolsCollection struct {
	// The ending address.
	End string `pulumi:"end"`
	// The starting address.
	Start string `pulumi:"start"`
}

// SubnetAllocationPoolsCollectionInput is an input type that accepts SubnetAllocationPoolsCollectionArgs and SubnetAllocationPoolsCollectionOutput values.
// You can construct a concrete instance of `SubnetAllocationPoolsCollectionInput` via:
//
//          SubnetAllocationPoolsCollectionArgs{...}
type SubnetAllocationPoolsCollectionInput interface {
	pulumi.Input

	ToSubnetAllocationPoolsCollectionOutput() SubnetAllocationPoolsCollectionOutput
	ToSubnetAllocationPoolsCollectionOutputWithContext(context.Context) SubnetAllocationPoolsCollectionOutput
}

type SubnetAllocationPoolsCollectionArgs struct {
	// The ending address.
	End pulumi.StringInput `pulumi:"end"`
	// The starting address.
	Start pulumi.StringInput `pulumi:"start"`
}

func (SubnetAllocationPoolsCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetAllocationPoolsCollection)(nil)).Elem()
}

func (i SubnetAllocationPoolsCollectionArgs) ToSubnetAllocationPoolsCollectionOutput() SubnetAllocationPoolsCollectionOutput {
	return i.ToSubnetAllocationPoolsCollectionOutputWithContext(context.Background())
}

func (i SubnetAllocationPoolsCollectionArgs) ToSubnetAllocationPoolsCollectionOutputWithContext(ctx context.Context) SubnetAllocationPoolsCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetAllocationPoolsCollectionOutput)
}

// SubnetAllocationPoolsCollectionArrayInput is an input type that accepts SubnetAllocationPoolsCollectionArray and SubnetAllocationPoolsCollectionArrayOutput values.
// You can construct a concrete instance of `SubnetAllocationPoolsCollectionArrayInput` via:
//
//          SubnetAllocationPoolsCollectionArray{ SubnetAllocationPoolsCollectionArgs{...} }
type SubnetAllocationPoolsCollectionArrayInput interface {
	pulumi.Input

	ToSubnetAllocationPoolsCollectionArrayOutput() SubnetAllocationPoolsCollectionArrayOutput
	ToSubnetAllocationPoolsCollectionArrayOutputWithContext(context.Context) SubnetAllocationPoolsCollectionArrayOutput
}

type SubnetAllocationPoolsCollectionArray []SubnetAllocationPoolsCollectionInput

func (SubnetAllocationPoolsCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetAllocationPoolsCollection)(nil)).Elem()
}

func (i SubnetAllocationPoolsCollectionArray) ToSubnetAllocationPoolsCollectionArrayOutput() SubnetAllocationPoolsCollectionArrayOutput {
	return i.ToSubnetAllocationPoolsCollectionArrayOutputWithContext(context.Background())
}

func (i SubnetAllocationPoolsCollectionArray) ToSubnetAllocationPoolsCollectionArrayOutputWithContext(ctx context.Context) SubnetAllocationPoolsCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetAllocationPoolsCollectionArrayOutput)
}

type SubnetAllocationPoolsCollectionOutput struct{ *pulumi.OutputState }

func (SubnetAllocationPoolsCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetAllocationPoolsCollection)(nil)).Elem()
}

func (o SubnetAllocationPoolsCollectionOutput) ToSubnetAllocationPoolsCollectionOutput() SubnetAllocationPoolsCollectionOutput {
	return o
}

func (o SubnetAllocationPoolsCollectionOutput) ToSubnetAllocationPoolsCollectionOutputWithContext(ctx context.Context) SubnetAllocationPoolsCollectionOutput {
	return o
}

// The ending address.
func (o SubnetAllocationPoolsCollectionOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetAllocationPoolsCollection) string { return v.End }).(pulumi.StringOutput)
}

// The starting address.
func (o SubnetAllocationPoolsCollectionOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetAllocationPoolsCollection) string { return v.Start }).(pulumi.StringOutput)
}

type SubnetAllocationPoolsCollectionArrayOutput struct{ *pulumi.OutputState }

func (SubnetAllocationPoolsCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetAllocationPoolsCollection)(nil)).Elem()
}

func (o SubnetAllocationPoolsCollectionArrayOutput) ToSubnetAllocationPoolsCollectionArrayOutput() SubnetAllocationPoolsCollectionArrayOutput {
	return o
}

func (o SubnetAllocationPoolsCollectionArrayOutput) ToSubnetAllocationPoolsCollectionArrayOutputWithContext(ctx context.Context) SubnetAllocationPoolsCollectionArrayOutput {
	return o
}

func (o SubnetAllocationPoolsCollectionArrayOutput) Index(i pulumi.IntInput) SubnetAllocationPoolsCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetAllocationPoolsCollection {
		return vs[0].([]SubnetAllocationPoolsCollection)[vs[1].(int)]
	}).(SubnetAllocationPoolsCollectionOutput)
}

type SubnetHostRoute struct {
	// The destination CIDR.
	DestinationCidr string `pulumi:"destinationCidr"`
	// The next hop in the route.
	NextHop string `pulumi:"nextHop"`
}

// SubnetHostRouteInput is an input type that accepts SubnetHostRouteArgs and SubnetHostRouteOutput values.
// You can construct a concrete instance of `SubnetHostRouteInput` via:
//
//          SubnetHostRouteArgs{...}
type SubnetHostRouteInput interface {
	pulumi.Input

	ToSubnetHostRouteOutput() SubnetHostRouteOutput
	ToSubnetHostRouteOutputWithContext(context.Context) SubnetHostRouteOutput
}

type SubnetHostRouteArgs struct {
	// The destination CIDR.
	DestinationCidr pulumi.StringInput `pulumi:"destinationCidr"`
	// The next hop in the route.
	NextHop pulumi.StringInput `pulumi:"nextHop"`
}

func (SubnetHostRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetHostRoute)(nil)).Elem()
}

func (i SubnetHostRouteArgs) ToSubnetHostRouteOutput() SubnetHostRouteOutput {
	return i.ToSubnetHostRouteOutputWithContext(context.Background())
}

func (i SubnetHostRouteArgs) ToSubnetHostRouteOutputWithContext(ctx context.Context) SubnetHostRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetHostRouteOutput)
}

// SubnetHostRouteArrayInput is an input type that accepts SubnetHostRouteArray and SubnetHostRouteArrayOutput values.
// You can construct a concrete instance of `SubnetHostRouteArrayInput` via:
//
//          SubnetHostRouteArray{ SubnetHostRouteArgs{...} }
type SubnetHostRouteArrayInput interface {
	pulumi.Input

	ToSubnetHostRouteArrayOutput() SubnetHostRouteArrayOutput
	ToSubnetHostRouteArrayOutputWithContext(context.Context) SubnetHostRouteArrayOutput
}

type SubnetHostRouteArray []SubnetHostRouteInput

func (SubnetHostRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetHostRoute)(nil)).Elem()
}

func (i SubnetHostRouteArray) ToSubnetHostRouteArrayOutput() SubnetHostRouteArrayOutput {
	return i.ToSubnetHostRouteArrayOutputWithContext(context.Background())
}

func (i SubnetHostRouteArray) ToSubnetHostRouteArrayOutputWithContext(ctx context.Context) SubnetHostRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetHostRouteArrayOutput)
}

type SubnetHostRouteOutput struct{ *pulumi.OutputState }

func (SubnetHostRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetHostRoute)(nil)).Elem()
}

func (o SubnetHostRouteOutput) ToSubnetHostRouteOutput() SubnetHostRouteOutput {
	return o
}

func (o SubnetHostRouteOutput) ToSubnetHostRouteOutputWithContext(ctx context.Context) SubnetHostRouteOutput {
	return o
}

// The destination CIDR.
func (o SubnetHostRouteOutput) DestinationCidr() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetHostRoute) string { return v.DestinationCidr }).(pulumi.StringOutput)
}

// The next hop in the route.
func (o SubnetHostRouteOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetHostRoute) string { return v.NextHop }).(pulumi.StringOutput)
}

type SubnetHostRouteArrayOutput struct{ *pulumi.OutputState }

func (SubnetHostRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetHostRoute)(nil)).Elem()
}

func (o SubnetHostRouteArrayOutput) ToSubnetHostRouteArrayOutput() SubnetHostRouteArrayOutput {
	return o
}

func (o SubnetHostRouteArrayOutput) ToSubnetHostRouteArrayOutputWithContext(ctx context.Context) SubnetHostRouteArrayOutput {
	return o
}

func (o SubnetHostRouteArrayOutput) Index(i pulumi.IntInput) SubnetHostRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetHostRoute {
		return vs[0].([]SubnetHostRoute)[vs[1].(int)]
	}).(SubnetHostRouteOutput)
}

type TrunkSubPort struct {
	// The ID of the port to be made a subport of the trunk.
	PortId string `pulumi:"portId"`
	// The numeric id of the subport segment.
	SegmentationId int `pulumi:"segmentationId"`
	// The segmentation technology to use, e.g., "vlan".
	SegmentationType string `pulumi:"segmentationType"`
}

// TrunkSubPortInput is an input type that accepts TrunkSubPortArgs and TrunkSubPortOutput values.
// You can construct a concrete instance of `TrunkSubPortInput` via:
//
//          TrunkSubPortArgs{...}
type TrunkSubPortInput interface {
	pulumi.Input

	ToTrunkSubPortOutput() TrunkSubPortOutput
	ToTrunkSubPortOutputWithContext(context.Context) TrunkSubPortOutput
}

type TrunkSubPortArgs struct {
	// The ID of the port to be made a subport of the trunk.
	PortId pulumi.StringInput `pulumi:"portId"`
	// The numeric id of the subport segment.
	SegmentationId pulumi.IntInput `pulumi:"segmentationId"`
	// The segmentation technology to use, e.g., "vlan".
	SegmentationType pulumi.StringInput `pulumi:"segmentationType"`
}

func (TrunkSubPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrunkSubPort)(nil)).Elem()
}

func (i TrunkSubPortArgs) ToTrunkSubPortOutput() TrunkSubPortOutput {
	return i.ToTrunkSubPortOutputWithContext(context.Background())
}

func (i TrunkSubPortArgs) ToTrunkSubPortOutputWithContext(ctx context.Context) TrunkSubPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrunkSubPortOutput)
}

// TrunkSubPortArrayInput is an input type that accepts TrunkSubPortArray and TrunkSubPortArrayOutput values.
// You can construct a concrete instance of `TrunkSubPortArrayInput` via:
//
//          TrunkSubPortArray{ TrunkSubPortArgs{...} }
type TrunkSubPortArrayInput interface {
	pulumi.Input

	ToTrunkSubPortArrayOutput() TrunkSubPortArrayOutput
	ToTrunkSubPortArrayOutputWithContext(context.Context) TrunkSubPortArrayOutput
}

type TrunkSubPortArray []TrunkSubPortInput

func (TrunkSubPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrunkSubPort)(nil)).Elem()
}

func (i TrunkSubPortArray) ToTrunkSubPortArrayOutput() TrunkSubPortArrayOutput {
	return i.ToTrunkSubPortArrayOutputWithContext(context.Background())
}

func (i TrunkSubPortArray) ToTrunkSubPortArrayOutputWithContext(ctx context.Context) TrunkSubPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrunkSubPortArrayOutput)
}

type TrunkSubPortOutput struct{ *pulumi.OutputState }

func (TrunkSubPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrunkSubPort)(nil)).Elem()
}

func (o TrunkSubPortOutput) ToTrunkSubPortOutput() TrunkSubPortOutput {
	return o
}

func (o TrunkSubPortOutput) ToTrunkSubPortOutputWithContext(ctx context.Context) TrunkSubPortOutput {
	return o
}

// The ID of the port to be made a subport of the trunk.
func (o TrunkSubPortOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v TrunkSubPort) string { return v.PortId }).(pulumi.StringOutput)
}

// The numeric id of the subport segment.
func (o TrunkSubPortOutput) SegmentationId() pulumi.IntOutput {
	return o.ApplyT(func(v TrunkSubPort) int { return v.SegmentationId }).(pulumi.IntOutput)
}

// The segmentation technology to use, e.g., "vlan".
func (o TrunkSubPortOutput) SegmentationType() pulumi.StringOutput {
	return o.ApplyT(func(v TrunkSubPort) string { return v.SegmentationType }).(pulumi.StringOutput)
}

type TrunkSubPortArrayOutput struct{ *pulumi.OutputState }

func (TrunkSubPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrunkSubPort)(nil)).Elem()
}

func (o TrunkSubPortArrayOutput) ToTrunkSubPortArrayOutput() TrunkSubPortArrayOutput {
	return o
}

func (o TrunkSubPortArrayOutput) ToTrunkSubPortArrayOutputWithContext(ctx context.Context) TrunkSubPortArrayOutput {
	return o
}

func (o TrunkSubPortArrayOutput) Index(i pulumi.IntInput) TrunkSubPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrunkSubPort {
		return vs[0].([]TrunkSubPort)[vs[1].(int)]
	}).(TrunkSubPortOutput)
}

type GetPortAllowedAddressPair struct {
	// The additional IP address.
	IpAddress string `pulumi:"ipAddress"`
	// The MAC address of the port.
	MacAddress string `pulumi:"macAddress"`
}

// GetPortAllowedAddressPairInput is an input type that accepts GetPortAllowedAddressPairArgs and GetPortAllowedAddressPairOutput values.
// You can construct a concrete instance of `GetPortAllowedAddressPairInput` via:
//
//          GetPortAllowedAddressPairArgs{...}
type GetPortAllowedAddressPairInput interface {
	pulumi.Input

	ToGetPortAllowedAddressPairOutput() GetPortAllowedAddressPairOutput
	ToGetPortAllowedAddressPairOutputWithContext(context.Context) GetPortAllowedAddressPairOutput
}

type GetPortAllowedAddressPairArgs struct {
	// The additional IP address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The MAC address of the port.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
}

func (GetPortAllowedAddressPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPortAllowedAddressPair)(nil)).Elem()
}

func (i GetPortAllowedAddressPairArgs) ToGetPortAllowedAddressPairOutput() GetPortAllowedAddressPairOutput {
	return i.ToGetPortAllowedAddressPairOutputWithContext(context.Background())
}

func (i GetPortAllowedAddressPairArgs) ToGetPortAllowedAddressPairOutputWithContext(ctx context.Context) GetPortAllowedAddressPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPortAllowedAddressPairOutput)
}

// GetPortAllowedAddressPairArrayInput is an input type that accepts GetPortAllowedAddressPairArray and GetPortAllowedAddressPairArrayOutput values.
// You can construct a concrete instance of `GetPortAllowedAddressPairArrayInput` via:
//
//          GetPortAllowedAddressPairArray{ GetPortAllowedAddressPairArgs{...} }
type GetPortAllowedAddressPairArrayInput interface {
	pulumi.Input

	ToGetPortAllowedAddressPairArrayOutput() GetPortAllowedAddressPairArrayOutput
	ToGetPortAllowedAddressPairArrayOutputWithContext(context.Context) GetPortAllowedAddressPairArrayOutput
}

type GetPortAllowedAddressPairArray []GetPortAllowedAddressPairInput

func (GetPortAllowedAddressPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPortAllowedAddressPair)(nil)).Elem()
}

func (i GetPortAllowedAddressPairArray) ToGetPortAllowedAddressPairArrayOutput() GetPortAllowedAddressPairArrayOutput {
	return i.ToGetPortAllowedAddressPairArrayOutputWithContext(context.Background())
}

func (i GetPortAllowedAddressPairArray) ToGetPortAllowedAddressPairArrayOutputWithContext(ctx context.Context) GetPortAllowedAddressPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPortAllowedAddressPairArrayOutput)
}

type GetPortAllowedAddressPairOutput struct{ *pulumi.OutputState }

func (GetPortAllowedAddressPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPortAllowedAddressPair)(nil)).Elem()
}

func (o GetPortAllowedAddressPairOutput) ToGetPortAllowedAddressPairOutput() GetPortAllowedAddressPairOutput {
	return o
}

func (o GetPortAllowedAddressPairOutput) ToGetPortAllowedAddressPairOutputWithContext(ctx context.Context) GetPortAllowedAddressPairOutput {
	return o
}

// The additional IP address.
func (o GetPortAllowedAddressPairOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortAllowedAddressPair) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The MAC address of the port.
func (o GetPortAllowedAddressPairOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortAllowedAddressPair) string { return v.MacAddress }).(pulumi.StringOutput)
}

type GetPortAllowedAddressPairArrayOutput struct{ *pulumi.OutputState }

func (GetPortAllowedAddressPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPortAllowedAddressPair)(nil)).Elem()
}

func (o GetPortAllowedAddressPairArrayOutput) ToGetPortAllowedAddressPairArrayOutput() GetPortAllowedAddressPairArrayOutput {
	return o
}

func (o GetPortAllowedAddressPairArrayOutput) ToGetPortAllowedAddressPairArrayOutputWithContext(ctx context.Context) GetPortAllowedAddressPairArrayOutput {
	return o
}

func (o GetPortAllowedAddressPairArrayOutput) Index(i pulumi.IntInput) GetPortAllowedAddressPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPortAllowedAddressPair {
		return vs[0].([]GetPortAllowedAddressPair)[vs[1].(int)]
	}).(GetPortAllowedAddressPairOutput)
}

type GetPortBinding struct {
	// The ID of the host, which has the allocatee port.
	HostId string `pulumi:"hostId"`
	// A JSON string containing the binding profile information.
	Profile string `pulumi:"profile"`
	// A map of JSON strings containing additional details for this
	// specific binding.
	VifDetails map[string]interface{} `pulumi:"vifDetails"`
	// The VNIC type of the port binding.
	VifType string `pulumi:"vifType"`
	// VNIC type for the port.
	VnicType string `pulumi:"vnicType"`
}

// GetPortBindingInput is an input type that accepts GetPortBindingArgs and GetPortBindingOutput values.
// You can construct a concrete instance of `GetPortBindingInput` via:
//
//          GetPortBindingArgs{...}
type GetPortBindingInput interface {
	pulumi.Input

	ToGetPortBindingOutput() GetPortBindingOutput
	ToGetPortBindingOutputWithContext(context.Context) GetPortBindingOutput
}

type GetPortBindingArgs struct {
	// The ID of the host, which has the allocatee port.
	HostId pulumi.StringInput `pulumi:"hostId"`
	// A JSON string containing the binding profile information.
	Profile pulumi.StringInput `pulumi:"profile"`
	// A map of JSON strings containing additional details for this
	// specific binding.
	VifDetails pulumi.MapInput `pulumi:"vifDetails"`
	// The VNIC type of the port binding.
	VifType pulumi.StringInput `pulumi:"vifType"`
	// VNIC type for the port.
	VnicType pulumi.StringInput `pulumi:"vnicType"`
}

func (GetPortBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPortBinding)(nil)).Elem()
}

func (i GetPortBindingArgs) ToGetPortBindingOutput() GetPortBindingOutput {
	return i.ToGetPortBindingOutputWithContext(context.Background())
}

func (i GetPortBindingArgs) ToGetPortBindingOutputWithContext(ctx context.Context) GetPortBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPortBindingOutput)
}

// GetPortBindingArrayInput is an input type that accepts GetPortBindingArray and GetPortBindingArrayOutput values.
// You can construct a concrete instance of `GetPortBindingArrayInput` via:
//
//          GetPortBindingArray{ GetPortBindingArgs{...} }
type GetPortBindingArrayInput interface {
	pulumi.Input

	ToGetPortBindingArrayOutput() GetPortBindingArrayOutput
	ToGetPortBindingArrayOutputWithContext(context.Context) GetPortBindingArrayOutput
}

type GetPortBindingArray []GetPortBindingInput

func (GetPortBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPortBinding)(nil)).Elem()
}

func (i GetPortBindingArray) ToGetPortBindingArrayOutput() GetPortBindingArrayOutput {
	return i.ToGetPortBindingArrayOutputWithContext(context.Background())
}

func (i GetPortBindingArray) ToGetPortBindingArrayOutputWithContext(ctx context.Context) GetPortBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPortBindingArrayOutput)
}

type GetPortBindingOutput struct{ *pulumi.OutputState }

func (GetPortBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPortBinding)(nil)).Elem()
}

func (o GetPortBindingOutput) ToGetPortBindingOutput() GetPortBindingOutput {
	return o
}

func (o GetPortBindingOutput) ToGetPortBindingOutputWithContext(ctx context.Context) GetPortBindingOutput {
	return o
}

// The ID of the host, which has the allocatee port.
func (o GetPortBindingOutput) HostId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortBinding) string { return v.HostId }).(pulumi.StringOutput)
}

// A JSON string containing the binding profile information.
func (o GetPortBindingOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortBinding) string { return v.Profile }).(pulumi.StringOutput)
}

// A map of JSON strings containing additional details for this
// specific binding.
func (o GetPortBindingOutput) VifDetails() pulumi.MapOutput {
	return o.ApplyT(func(v GetPortBinding) map[string]interface{} { return v.VifDetails }).(pulumi.MapOutput)
}

// The VNIC type of the port binding.
func (o GetPortBindingOutput) VifType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortBinding) string { return v.VifType }).(pulumi.StringOutput)
}

// VNIC type for the port.
func (o GetPortBindingOutput) VnicType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortBinding) string { return v.VnicType }).(pulumi.StringOutput)
}

type GetPortBindingArrayOutput struct{ *pulumi.OutputState }

func (GetPortBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPortBinding)(nil)).Elem()
}

func (o GetPortBindingArrayOutput) ToGetPortBindingArrayOutput() GetPortBindingArrayOutput {
	return o
}

func (o GetPortBindingArrayOutput) ToGetPortBindingArrayOutputWithContext(ctx context.Context) GetPortBindingArrayOutput {
	return o
}

func (o GetPortBindingArrayOutput) Index(i pulumi.IntInput) GetPortBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPortBinding {
		return vs[0].([]GetPortBinding)[vs[1].(int)]
	}).(GetPortBindingOutput)
}

type GetPortExtraDhcpOption struct {
	// IP protocol version
	IpVersion int `pulumi:"ipVersion"`
	// The name of the port.
	Name string `pulumi:"name"`
	// Value of the DHCP option.
	Value string `pulumi:"value"`
}

// GetPortExtraDhcpOptionInput is an input type that accepts GetPortExtraDhcpOptionArgs and GetPortExtraDhcpOptionOutput values.
// You can construct a concrete instance of `GetPortExtraDhcpOptionInput` via:
//
//          GetPortExtraDhcpOptionArgs{...}
type GetPortExtraDhcpOptionInput interface {
	pulumi.Input

	ToGetPortExtraDhcpOptionOutput() GetPortExtraDhcpOptionOutput
	ToGetPortExtraDhcpOptionOutputWithContext(context.Context) GetPortExtraDhcpOptionOutput
}

type GetPortExtraDhcpOptionArgs struct {
	// IP protocol version
	IpVersion pulumi.IntInput `pulumi:"ipVersion"`
	// The name of the port.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the DHCP option.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetPortExtraDhcpOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPortExtraDhcpOption)(nil)).Elem()
}

func (i GetPortExtraDhcpOptionArgs) ToGetPortExtraDhcpOptionOutput() GetPortExtraDhcpOptionOutput {
	return i.ToGetPortExtraDhcpOptionOutputWithContext(context.Background())
}

func (i GetPortExtraDhcpOptionArgs) ToGetPortExtraDhcpOptionOutputWithContext(ctx context.Context) GetPortExtraDhcpOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPortExtraDhcpOptionOutput)
}

// GetPortExtraDhcpOptionArrayInput is an input type that accepts GetPortExtraDhcpOptionArray and GetPortExtraDhcpOptionArrayOutput values.
// You can construct a concrete instance of `GetPortExtraDhcpOptionArrayInput` via:
//
//          GetPortExtraDhcpOptionArray{ GetPortExtraDhcpOptionArgs{...} }
type GetPortExtraDhcpOptionArrayInput interface {
	pulumi.Input

	ToGetPortExtraDhcpOptionArrayOutput() GetPortExtraDhcpOptionArrayOutput
	ToGetPortExtraDhcpOptionArrayOutputWithContext(context.Context) GetPortExtraDhcpOptionArrayOutput
}

type GetPortExtraDhcpOptionArray []GetPortExtraDhcpOptionInput

func (GetPortExtraDhcpOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPortExtraDhcpOption)(nil)).Elem()
}

func (i GetPortExtraDhcpOptionArray) ToGetPortExtraDhcpOptionArrayOutput() GetPortExtraDhcpOptionArrayOutput {
	return i.ToGetPortExtraDhcpOptionArrayOutputWithContext(context.Background())
}

func (i GetPortExtraDhcpOptionArray) ToGetPortExtraDhcpOptionArrayOutputWithContext(ctx context.Context) GetPortExtraDhcpOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPortExtraDhcpOptionArrayOutput)
}

type GetPortExtraDhcpOptionOutput struct{ *pulumi.OutputState }

func (GetPortExtraDhcpOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPortExtraDhcpOption)(nil)).Elem()
}

func (o GetPortExtraDhcpOptionOutput) ToGetPortExtraDhcpOptionOutput() GetPortExtraDhcpOptionOutput {
	return o
}

func (o GetPortExtraDhcpOptionOutput) ToGetPortExtraDhcpOptionOutputWithContext(ctx context.Context) GetPortExtraDhcpOptionOutput {
	return o
}

// IP protocol version
func (o GetPortExtraDhcpOptionOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetPortExtraDhcpOption) int { return v.IpVersion }).(pulumi.IntOutput)
}

// The name of the port.
func (o GetPortExtraDhcpOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortExtraDhcpOption) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the DHCP option.
func (o GetPortExtraDhcpOptionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetPortExtraDhcpOption) string { return v.Value }).(pulumi.StringOutput)
}

type GetPortExtraDhcpOptionArrayOutput struct{ *pulumi.OutputState }

func (GetPortExtraDhcpOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPortExtraDhcpOption)(nil)).Elem()
}

func (o GetPortExtraDhcpOptionArrayOutput) ToGetPortExtraDhcpOptionArrayOutput() GetPortExtraDhcpOptionArrayOutput {
	return o
}

func (o GetPortExtraDhcpOptionArrayOutput) ToGetPortExtraDhcpOptionArrayOutputWithContext(ctx context.Context) GetPortExtraDhcpOptionArrayOutput {
	return o
}

func (o GetPortExtraDhcpOptionArrayOutput) Index(i pulumi.IntInput) GetPortExtraDhcpOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPortExtraDhcpOption {
		return vs[0].([]GetPortExtraDhcpOption)[vs[1].(int)]
	}).(GetPortExtraDhcpOptionOutput)
}

type GetRouterExternalFixedIp struct {
	// The IP address to set on the router.
	IpAddress *string `pulumi:"ipAddress"`
	SubnetId  *string `pulumi:"subnetId"`
}

// GetRouterExternalFixedIpInput is an input type that accepts GetRouterExternalFixedIpArgs and GetRouterExternalFixedIpOutput values.
// You can construct a concrete instance of `GetRouterExternalFixedIpInput` via:
//
//          GetRouterExternalFixedIpArgs{...}
type GetRouterExternalFixedIpInput interface {
	pulumi.Input

	ToGetRouterExternalFixedIpOutput() GetRouterExternalFixedIpOutput
	ToGetRouterExternalFixedIpOutputWithContext(context.Context) GetRouterExternalFixedIpOutput
}

type GetRouterExternalFixedIpArgs struct {
	// The IP address to set on the router.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	SubnetId  pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (GetRouterExternalFixedIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterExternalFixedIp)(nil)).Elem()
}

func (i GetRouterExternalFixedIpArgs) ToGetRouterExternalFixedIpOutput() GetRouterExternalFixedIpOutput {
	return i.ToGetRouterExternalFixedIpOutputWithContext(context.Background())
}

func (i GetRouterExternalFixedIpArgs) ToGetRouterExternalFixedIpOutputWithContext(ctx context.Context) GetRouterExternalFixedIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterExternalFixedIpOutput)
}

// GetRouterExternalFixedIpArrayInput is an input type that accepts GetRouterExternalFixedIpArray and GetRouterExternalFixedIpArrayOutput values.
// You can construct a concrete instance of `GetRouterExternalFixedIpArrayInput` via:
//
//          GetRouterExternalFixedIpArray{ GetRouterExternalFixedIpArgs{...} }
type GetRouterExternalFixedIpArrayInput interface {
	pulumi.Input

	ToGetRouterExternalFixedIpArrayOutput() GetRouterExternalFixedIpArrayOutput
	ToGetRouterExternalFixedIpArrayOutputWithContext(context.Context) GetRouterExternalFixedIpArrayOutput
}

type GetRouterExternalFixedIpArray []GetRouterExternalFixedIpInput

func (GetRouterExternalFixedIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterExternalFixedIp)(nil)).Elem()
}

func (i GetRouterExternalFixedIpArray) ToGetRouterExternalFixedIpArrayOutput() GetRouterExternalFixedIpArrayOutput {
	return i.ToGetRouterExternalFixedIpArrayOutputWithContext(context.Background())
}

func (i GetRouterExternalFixedIpArray) ToGetRouterExternalFixedIpArrayOutputWithContext(ctx context.Context) GetRouterExternalFixedIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouterExternalFixedIpArrayOutput)
}

type GetRouterExternalFixedIpOutput struct{ *pulumi.OutputState }

func (GetRouterExternalFixedIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouterExternalFixedIp)(nil)).Elem()
}

func (o GetRouterExternalFixedIpOutput) ToGetRouterExternalFixedIpOutput() GetRouterExternalFixedIpOutput {
	return o
}

func (o GetRouterExternalFixedIpOutput) ToGetRouterExternalFixedIpOutputWithContext(ctx context.Context) GetRouterExternalFixedIpOutput {
	return o
}

// The IP address to set on the router.
func (o GetRouterExternalFixedIpOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouterExternalFixedIp) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o GetRouterExternalFixedIpOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouterExternalFixedIp) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type GetRouterExternalFixedIpArrayOutput struct{ *pulumi.OutputState }

func (GetRouterExternalFixedIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouterExternalFixedIp)(nil)).Elem()
}

func (o GetRouterExternalFixedIpArrayOutput) ToGetRouterExternalFixedIpArrayOutput() GetRouterExternalFixedIpArrayOutput {
	return o
}

func (o GetRouterExternalFixedIpArrayOutput) ToGetRouterExternalFixedIpArrayOutputWithContext(ctx context.Context) GetRouterExternalFixedIpArrayOutput {
	return o
}

func (o GetRouterExternalFixedIpArrayOutput) Index(i pulumi.IntInput) GetRouterExternalFixedIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouterExternalFixedIp {
		return vs[0].([]GetRouterExternalFixedIp)[vs[1].(int)]
	}).(GetRouterExternalFixedIpOutput)
}

type GetSubnetAllocationPool struct {
	End   string `pulumi:"end"`
	Start string `pulumi:"start"`
}

// GetSubnetAllocationPoolInput is an input type that accepts GetSubnetAllocationPoolArgs and GetSubnetAllocationPoolOutput values.
// You can construct a concrete instance of `GetSubnetAllocationPoolInput` via:
//
//          GetSubnetAllocationPoolArgs{...}
type GetSubnetAllocationPoolInput interface {
	pulumi.Input

	ToGetSubnetAllocationPoolOutput() GetSubnetAllocationPoolOutput
	ToGetSubnetAllocationPoolOutputWithContext(context.Context) GetSubnetAllocationPoolOutput
}

type GetSubnetAllocationPoolArgs struct {
	End   pulumi.StringInput `pulumi:"end"`
	Start pulumi.StringInput `pulumi:"start"`
}

func (GetSubnetAllocationPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetAllocationPool)(nil)).Elem()
}

func (i GetSubnetAllocationPoolArgs) ToGetSubnetAllocationPoolOutput() GetSubnetAllocationPoolOutput {
	return i.ToGetSubnetAllocationPoolOutputWithContext(context.Background())
}

func (i GetSubnetAllocationPoolArgs) ToGetSubnetAllocationPoolOutputWithContext(ctx context.Context) GetSubnetAllocationPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetAllocationPoolOutput)
}

// GetSubnetAllocationPoolArrayInput is an input type that accepts GetSubnetAllocationPoolArray and GetSubnetAllocationPoolArrayOutput values.
// You can construct a concrete instance of `GetSubnetAllocationPoolArrayInput` via:
//
//          GetSubnetAllocationPoolArray{ GetSubnetAllocationPoolArgs{...} }
type GetSubnetAllocationPoolArrayInput interface {
	pulumi.Input

	ToGetSubnetAllocationPoolArrayOutput() GetSubnetAllocationPoolArrayOutput
	ToGetSubnetAllocationPoolArrayOutputWithContext(context.Context) GetSubnetAllocationPoolArrayOutput
}

type GetSubnetAllocationPoolArray []GetSubnetAllocationPoolInput

func (GetSubnetAllocationPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetAllocationPool)(nil)).Elem()
}

func (i GetSubnetAllocationPoolArray) ToGetSubnetAllocationPoolArrayOutput() GetSubnetAllocationPoolArrayOutput {
	return i.ToGetSubnetAllocationPoolArrayOutputWithContext(context.Background())
}

func (i GetSubnetAllocationPoolArray) ToGetSubnetAllocationPoolArrayOutputWithContext(ctx context.Context) GetSubnetAllocationPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetAllocationPoolArrayOutput)
}

type GetSubnetAllocationPoolOutput struct{ *pulumi.OutputState }

func (GetSubnetAllocationPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetAllocationPool)(nil)).Elem()
}

func (o GetSubnetAllocationPoolOutput) ToGetSubnetAllocationPoolOutput() GetSubnetAllocationPoolOutput {
	return o
}

func (o GetSubnetAllocationPoolOutput) ToGetSubnetAllocationPoolOutputWithContext(ctx context.Context) GetSubnetAllocationPoolOutput {
	return o
}

func (o GetSubnetAllocationPoolOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetAllocationPool) string { return v.End }).(pulumi.StringOutput)
}

func (o GetSubnetAllocationPoolOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetAllocationPool) string { return v.Start }).(pulumi.StringOutput)
}

type GetSubnetAllocationPoolArrayOutput struct{ *pulumi.OutputState }

func (GetSubnetAllocationPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetAllocationPool)(nil)).Elem()
}

func (o GetSubnetAllocationPoolArrayOutput) ToGetSubnetAllocationPoolArrayOutput() GetSubnetAllocationPoolArrayOutput {
	return o
}

func (o GetSubnetAllocationPoolArrayOutput) ToGetSubnetAllocationPoolArrayOutputWithContext(ctx context.Context) GetSubnetAllocationPoolArrayOutput {
	return o
}

func (o GetSubnetAllocationPoolArrayOutput) Index(i pulumi.IntInput) GetSubnetAllocationPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubnetAllocationPool {
		return vs[0].([]GetSubnetAllocationPool)[vs[1].(int)]
	}).(GetSubnetAllocationPoolOutput)
}

type GetSubnetHostRoute struct {
	DestinationCidr string `pulumi:"destinationCidr"`
	NextHop         string `pulumi:"nextHop"`
}

// GetSubnetHostRouteInput is an input type that accepts GetSubnetHostRouteArgs and GetSubnetHostRouteOutput values.
// You can construct a concrete instance of `GetSubnetHostRouteInput` via:
//
//          GetSubnetHostRouteArgs{...}
type GetSubnetHostRouteInput interface {
	pulumi.Input

	ToGetSubnetHostRouteOutput() GetSubnetHostRouteOutput
	ToGetSubnetHostRouteOutputWithContext(context.Context) GetSubnetHostRouteOutput
}

type GetSubnetHostRouteArgs struct {
	DestinationCidr pulumi.StringInput `pulumi:"destinationCidr"`
	NextHop         pulumi.StringInput `pulumi:"nextHop"`
}

func (GetSubnetHostRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetHostRoute)(nil)).Elem()
}

func (i GetSubnetHostRouteArgs) ToGetSubnetHostRouteOutput() GetSubnetHostRouteOutput {
	return i.ToGetSubnetHostRouteOutputWithContext(context.Background())
}

func (i GetSubnetHostRouteArgs) ToGetSubnetHostRouteOutputWithContext(ctx context.Context) GetSubnetHostRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetHostRouteOutput)
}

// GetSubnetHostRouteArrayInput is an input type that accepts GetSubnetHostRouteArray and GetSubnetHostRouteArrayOutput values.
// You can construct a concrete instance of `GetSubnetHostRouteArrayInput` via:
//
//          GetSubnetHostRouteArray{ GetSubnetHostRouteArgs{...} }
type GetSubnetHostRouteArrayInput interface {
	pulumi.Input

	ToGetSubnetHostRouteArrayOutput() GetSubnetHostRouteArrayOutput
	ToGetSubnetHostRouteArrayOutputWithContext(context.Context) GetSubnetHostRouteArrayOutput
}

type GetSubnetHostRouteArray []GetSubnetHostRouteInput

func (GetSubnetHostRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetHostRoute)(nil)).Elem()
}

func (i GetSubnetHostRouteArray) ToGetSubnetHostRouteArrayOutput() GetSubnetHostRouteArrayOutput {
	return i.ToGetSubnetHostRouteArrayOutputWithContext(context.Background())
}

func (i GetSubnetHostRouteArray) ToGetSubnetHostRouteArrayOutputWithContext(ctx context.Context) GetSubnetHostRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetHostRouteArrayOutput)
}

type GetSubnetHostRouteOutput struct{ *pulumi.OutputState }

func (GetSubnetHostRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetHostRoute)(nil)).Elem()
}

func (o GetSubnetHostRouteOutput) ToGetSubnetHostRouteOutput() GetSubnetHostRouteOutput {
	return o
}

func (o GetSubnetHostRouteOutput) ToGetSubnetHostRouteOutputWithContext(ctx context.Context) GetSubnetHostRouteOutput {
	return o
}

func (o GetSubnetHostRouteOutput) DestinationCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetHostRoute) string { return v.DestinationCidr }).(pulumi.StringOutput)
}

func (o GetSubnetHostRouteOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetHostRoute) string { return v.NextHop }).(pulumi.StringOutput)
}

type GetSubnetHostRouteArrayOutput struct{ *pulumi.OutputState }

func (GetSubnetHostRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetHostRoute)(nil)).Elem()
}

func (o GetSubnetHostRouteArrayOutput) ToGetSubnetHostRouteArrayOutput() GetSubnetHostRouteArrayOutput {
	return o
}

func (o GetSubnetHostRouteArrayOutput) ToGetSubnetHostRouteArrayOutputWithContext(ctx context.Context) GetSubnetHostRouteArrayOutput {
	return o
}

func (o GetSubnetHostRouteArrayOutput) Index(i pulumi.IntInput) GetSubnetHostRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubnetHostRoute {
		return vs[0].([]GetSubnetHostRoute)[vs[1].(int)]
	}).(GetSubnetHostRouteOutput)
}

type GetTrunkSubPort struct {
	// The ID of the trunk parent port.
	PortId string `pulumi:"portId"`
	// The numeric id of the subport segment.
	SegmentationId int `pulumi:"segmentationId"`
	// The segmenation tecnology used, e.g., "vlan".
	SegmentationType string `pulumi:"segmentationType"`
}

// GetTrunkSubPortInput is an input type that accepts GetTrunkSubPortArgs and GetTrunkSubPortOutput values.
// You can construct a concrete instance of `GetTrunkSubPortInput` via:
//
//          GetTrunkSubPortArgs{...}
type GetTrunkSubPortInput interface {
	pulumi.Input

	ToGetTrunkSubPortOutput() GetTrunkSubPortOutput
	ToGetTrunkSubPortOutputWithContext(context.Context) GetTrunkSubPortOutput
}

type GetTrunkSubPortArgs struct {
	// The ID of the trunk parent port.
	PortId pulumi.StringInput `pulumi:"portId"`
	// The numeric id of the subport segment.
	SegmentationId pulumi.IntInput `pulumi:"segmentationId"`
	// The segmenation tecnology used, e.g., "vlan".
	SegmentationType pulumi.StringInput `pulumi:"segmentationType"`
}

func (GetTrunkSubPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrunkSubPort)(nil)).Elem()
}

func (i GetTrunkSubPortArgs) ToGetTrunkSubPortOutput() GetTrunkSubPortOutput {
	return i.ToGetTrunkSubPortOutputWithContext(context.Background())
}

func (i GetTrunkSubPortArgs) ToGetTrunkSubPortOutputWithContext(ctx context.Context) GetTrunkSubPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrunkSubPortOutput)
}

// GetTrunkSubPortArrayInput is an input type that accepts GetTrunkSubPortArray and GetTrunkSubPortArrayOutput values.
// You can construct a concrete instance of `GetTrunkSubPortArrayInput` via:
//
//          GetTrunkSubPortArray{ GetTrunkSubPortArgs{...} }
type GetTrunkSubPortArrayInput interface {
	pulumi.Input

	ToGetTrunkSubPortArrayOutput() GetTrunkSubPortArrayOutput
	ToGetTrunkSubPortArrayOutputWithContext(context.Context) GetTrunkSubPortArrayOutput
}

type GetTrunkSubPortArray []GetTrunkSubPortInput

func (GetTrunkSubPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrunkSubPort)(nil)).Elem()
}

func (i GetTrunkSubPortArray) ToGetTrunkSubPortArrayOutput() GetTrunkSubPortArrayOutput {
	return i.ToGetTrunkSubPortArrayOutputWithContext(context.Background())
}

func (i GetTrunkSubPortArray) ToGetTrunkSubPortArrayOutputWithContext(ctx context.Context) GetTrunkSubPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrunkSubPortArrayOutput)
}

type GetTrunkSubPortOutput struct{ *pulumi.OutputState }

func (GetTrunkSubPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrunkSubPort)(nil)).Elem()
}

func (o GetTrunkSubPortOutput) ToGetTrunkSubPortOutput() GetTrunkSubPortOutput {
	return o
}

func (o GetTrunkSubPortOutput) ToGetTrunkSubPortOutputWithContext(ctx context.Context) GetTrunkSubPortOutput {
	return o
}

// The ID of the trunk parent port.
func (o GetTrunkSubPortOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrunkSubPort) string { return v.PortId }).(pulumi.StringOutput)
}

// The numeric id of the subport segment.
func (o GetTrunkSubPortOutput) SegmentationId() pulumi.IntOutput {
	return o.ApplyT(func(v GetTrunkSubPort) int { return v.SegmentationId }).(pulumi.IntOutput)
}

// The segmenation tecnology used, e.g., "vlan".
func (o GetTrunkSubPortOutput) SegmentationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrunkSubPort) string { return v.SegmentationType }).(pulumi.StringOutput)
}

type GetTrunkSubPortArrayOutput struct{ *pulumi.OutputState }

func (GetTrunkSubPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTrunkSubPort)(nil)).Elem()
}

func (o GetTrunkSubPortArrayOutput) ToGetTrunkSubPortArrayOutput() GetTrunkSubPortArrayOutput {
	return o
}

func (o GetTrunkSubPortArrayOutput) ToGetTrunkSubPortArrayOutputWithContext(ctx context.Context) GetTrunkSubPortArrayOutput {
	return o
}

func (o GetTrunkSubPortArrayOutput) Index(i pulumi.IntInput) GetTrunkSubPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTrunkSubPort {
		return vs[0].([]GetTrunkSubPort)[vs[1].(int)]
	}).(GetTrunkSubPortOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkSegmentOutput{})
	pulumi.RegisterOutputType(NetworkSegmentArrayOutput{})
	pulumi.RegisterOutputType(PortAllowedAddressPairOutput{})
	pulumi.RegisterOutputType(PortAllowedAddressPairArrayOutput{})
	pulumi.RegisterOutputType(PortBindingOutput{})
	pulumi.RegisterOutputType(PortBindingPtrOutput{})
	pulumi.RegisterOutputType(PortExtraDhcpOptionOutput{})
	pulumi.RegisterOutputType(PortExtraDhcpOptionArrayOutput{})
	pulumi.RegisterOutputType(PortFixedIpOutput{})
	pulumi.RegisterOutputType(PortFixedIpArrayOutput{})
	pulumi.RegisterOutputType(RouterExternalFixedIpOutput{})
	pulumi.RegisterOutputType(RouterExternalFixedIpArrayOutput{})
	pulumi.RegisterOutputType(RouterVendorOptionsOutput{})
	pulumi.RegisterOutputType(RouterVendorOptionsPtrOutput{})
	pulumi.RegisterOutputType(SubnetAllocationPoolOutput{})
	pulumi.RegisterOutputType(SubnetAllocationPoolArrayOutput{})
	pulumi.RegisterOutputType(SubnetAllocationPoolsCollectionOutput{})
	pulumi.RegisterOutputType(SubnetAllocationPoolsCollectionArrayOutput{})
	pulumi.RegisterOutputType(SubnetHostRouteOutput{})
	pulumi.RegisterOutputType(SubnetHostRouteArrayOutput{})
	pulumi.RegisterOutputType(TrunkSubPortOutput{})
	pulumi.RegisterOutputType(TrunkSubPortArrayOutput{})
	pulumi.RegisterOutputType(GetPortAllowedAddressPairOutput{})
	pulumi.RegisterOutputType(GetPortAllowedAddressPairArrayOutput{})
	pulumi.RegisterOutputType(GetPortBindingOutput{})
	pulumi.RegisterOutputType(GetPortBindingArrayOutput{})
	pulumi.RegisterOutputType(GetPortExtraDhcpOptionOutput{})
	pulumi.RegisterOutputType(GetPortExtraDhcpOptionArrayOutput{})
	pulumi.RegisterOutputType(GetRouterExternalFixedIpOutput{})
	pulumi.RegisterOutputType(GetRouterExternalFixedIpArrayOutput{})
	pulumi.RegisterOutputType(GetSubnetAllocationPoolOutput{})
	pulumi.RegisterOutputType(GetSubnetAllocationPoolArrayOutput{})
	pulumi.RegisterOutputType(GetSubnetHostRouteOutput{})
	pulumi.RegisterOutputType(GetSubnetHostRouteArrayOutput{})
	pulumi.RegisterOutputType(GetTrunkSubPortOutput{})
	pulumi.RegisterOutputType(GetTrunkSubPortArrayOutput{})
}
