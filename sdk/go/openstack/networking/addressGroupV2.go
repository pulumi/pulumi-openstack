// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V2 neutron address group resource within OpenStack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networking.NewAddressGroupV2(ctx, "group_1", &networking.AddressGroupV2Args{
//				Name:        pulumi.String("group_1"),
//				Description: pulumi.String("My neutron address group"),
//				Addresses: pulumi.StringArray{
//					pulumi.String("192.168.0.1/32"),
//					pulumi.String("2001:db8::1/128"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Address Groups can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import openstack:networking/addressGroupV2:AddressGroupV2 group_1 782fef9c-d03c-400a-9735-2f9af5681cb3
// ```
type AddressGroupV2 struct {
	pulumi.CustomResourceState

	// A list of CIDR blocks that define the addresses in
	// the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
	Addresses pulumi.StringArrayOutput `pulumi:"addresses"`
	// A description of the address group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A name of the address group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The owner of the address group. Required if admin
	// wants to create a group for a specific project. Changing this creates a new
	// address group.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V2 networking client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new address group.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewAddressGroupV2 registers a new resource with the given unique name, arguments, and options.
func NewAddressGroupV2(ctx *pulumi.Context,
	name string, args *AddressGroupV2Args, opts ...pulumi.ResourceOption) (*AddressGroupV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Addresses == nil {
		return nil, errors.New("invalid value for required argument 'Addresses'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AddressGroupV2
	err := ctx.RegisterResource("openstack:networking/addressGroupV2:AddressGroupV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAddressGroupV2 gets an existing AddressGroupV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddressGroupV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AddressGroupV2State, opts ...pulumi.ResourceOption) (*AddressGroupV2, error) {
	var resource AddressGroupV2
	err := ctx.ReadResource("openstack:networking/addressGroupV2:AddressGroupV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AddressGroupV2 resources.
type addressGroupV2State struct {
	// A list of CIDR blocks that define the addresses in
	// the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
	Addresses []string `pulumi:"addresses"`
	// A description of the address group.
	Description *string `pulumi:"description"`
	// A name of the address group.
	Name *string `pulumi:"name"`
	// The owner of the address group. Required if admin
	// wants to create a group for a specific project. Changing this creates a new
	// address group.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 networking client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new address group.
	Region *string `pulumi:"region"`
}

type AddressGroupV2State struct {
	// A list of CIDR blocks that define the addresses in
	// the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
	Addresses pulumi.StringArrayInput
	// A description of the address group.
	Description pulumi.StringPtrInput
	// A name of the address group.
	Name pulumi.StringPtrInput
	// The owner of the address group. Required if admin
	// wants to create a group for a specific project. Changing this creates a new
	// address group.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 networking client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new address group.
	Region pulumi.StringPtrInput
}

func (AddressGroupV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*addressGroupV2State)(nil)).Elem()
}

type addressGroupV2Args struct {
	// A list of CIDR blocks that define the addresses in
	// the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
	Addresses []string `pulumi:"addresses"`
	// A description of the address group.
	Description *string `pulumi:"description"`
	// A name of the address group.
	Name *string `pulumi:"name"`
	// The owner of the address group. Required if admin
	// wants to create a group for a specific project. Changing this creates a new
	// address group.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 networking client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new address group.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AddressGroupV2 resource.
type AddressGroupV2Args struct {
	// A list of CIDR blocks that define the addresses in
	// the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
	Addresses pulumi.StringArrayInput
	// A description of the address group.
	Description pulumi.StringPtrInput
	// A name of the address group.
	Name pulumi.StringPtrInput
	// The owner of the address group. Required if admin
	// wants to create a group for a specific project. Changing this creates a new
	// address group.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 networking client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new address group.
	Region pulumi.StringPtrInput
}

func (AddressGroupV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*addressGroupV2Args)(nil)).Elem()
}

type AddressGroupV2Input interface {
	pulumi.Input

	ToAddressGroupV2Output() AddressGroupV2Output
	ToAddressGroupV2OutputWithContext(ctx context.Context) AddressGroupV2Output
}

func (*AddressGroupV2) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroupV2)(nil)).Elem()
}

func (i *AddressGroupV2) ToAddressGroupV2Output() AddressGroupV2Output {
	return i.ToAddressGroupV2OutputWithContext(context.Background())
}

func (i *AddressGroupV2) ToAddressGroupV2OutputWithContext(ctx context.Context) AddressGroupV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupV2Output)
}

// AddressGroupV2ArrayInput is an input type that accepts AddressGroupV2Array and AddressGroupV2ArrayOutput values.
// You can construct a concrete instance of `AddressGroupV2ArrayInput` via:
//
//	AddressGroupV2Array{ AddressGroupV2Args{...} }
type AddressGroupV2ArrayInput interface {
	pulumi.Input

	ToAddressGroupV2ArrayOutput() AddressGroupV2ArrayOutput
	ToAddressGroupV2ArrayOutputWithContext(context.Context) AddressGroupV2ArrayOutput
}

type AddressGroupV2Array []AddressGroupV2Input

func (AddressGroupV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddressGroupV2)(nil)).Elem()
}

func (i AddressGroupV2Array) ToAddressGroupV2ArrayOutput() AddressGroupV2ArrayOutput {
	return i.ToAddressGroupV2ArrayOutputWithContext(context.Background())
}

func (i AddressGroupV2Array) ToAddressGroupV2ArrayOutputWithContext(ctx context.Context) AddressGroupV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupV2ArrayOutput)
}

// AddressGroupV2MapInput is an input type that accepts AddressGroupV2Map and AddressGroupV2MapOutput values.
// You can construct a concrete instance of `AddressGroupV2MapInput` via:
//
//	AddressGroupV2Map{ "key": AddressGroupV2Args{...} }
type AddressGroupV2MapInput interface {
	pulumi.Input

	ToAddressGroupV2MapOutput() AddressGroupV2MapOutput
	ToAddressGroupV2MapOutputWithContext(context.Context) AddressGroupV2MapOutput
}

type AddressGroupV2Map map[string]AddressGroupV2Input

func (AddressGroupV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddressGroupV2)(nil)).Elem()
}

func (i AddressGroupV2Map) ToAddressGroupV2MapOutput() AddressGroupV2MapOutput {
	return i.ToAddressGroupV2MapOutputWithContext(context.Background())
}

func (i AddressGroupV2Map) ToAddressGroupV2MapOutputWithContext(ctx context.Context) AddressGroupV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressGroupV2MapOutput)
}

type AddressGroupV2Output struct{ *pulumi.OutputState }

func (AddressGroupV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressGroupV2)(nil)).Elem()
}

func (o AddressGroupV2Output) ToAddressGroupV2Output() AddressGroupV2Output {
	return o
}

func (o AddressGroupV2Output) ToAddressGroupV2OutputWithContext(ctx context.Context) AddressGroupV2Output {
	return o
}

// A list of CIDR blocks that define the addresses in
// the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
func (o AddressGroupV2Output) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AddressGroupV2) pulumi.StringArrayOutput { return v.Addresses }).(pulumi.StringArrayOutput)
}

// A description of the address group.
func (o AddressGroupV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressGroupV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A name of the address group.
func (o AddressGroupV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AddressGroupV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The owner of the address group. Required if admin
// wants to create a group for a specific project. Changing this creates a new
// address group.
func (o AddressGroupV2Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AddressGroupV2) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 networking client.
// If omitted, the `region` argument of the provider is used. Changing this
// creates a new address group.
func (o AddressGroupV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AddressGroupV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AddressGroupV2ArrayOutput struct{ *pulumi.OutputState }

func (AddressGroupV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddressGroupV2)(nil)).Elem()
}

func (o AddressGroupV2ArrayOutput) ToAddressGroupV2ArrayOutput() AddressGroupV2ArrayOutput {
	return o
}

func (o AddressGroupV2ArrayOutput) ToAddressGroupV2ArrayOutputWithContext(ctx context.Context) AddressGroupV2ArrayOutput {
	return o
}

func (o AddressGroupV2ArrayOutput) Index(i pulumi.IntInput) AddressGroupV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AddressGroupV2 {
		return vs[0].([]*AddressGroupV2)[vs[1].(int)]
	}).(AddressGroupV2Output)
}

type AddressGroupV2MapOutput struct{ *pulumi.OutputState }

func (AddressGroupV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddressGroupV2)(nil)).Elem()
}

func (o AddressGroupV2MapOutput) ToAddressGroupV2MapOutput() AddressGroupV2MapOutput {
	return o
}

func (o AddressGroupV2MapOutput) ToAddressGroupV2MapOutputWithContext(ctx context.Context) AddressGroupV2MapOutput {
	return o
}

func (o AddressGroupV2MapOutput) MapIndex(k pulumi.StringInput) AddressGroupV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AddressGroupV2 {
		return vs[0].(map[string]*AddressGroupV2)[vs[1].(string)]
	}).(AddressGroupV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupV2Input)(nil)).Elem(), &AddressGroupV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupV2ArrayInput)(nil)).Elem(), AddressGroupV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddressGroupV2MapInput)(nil)).Elem(), AddressGroupV2Map{})
	pulumi.RegisterOutputType(AddressGroupV2Output{})
	pulumi.RegisterOutputType(AddressGroupV2ArrayOutput{})
	pulumi.RegisterOutputType(AddressGroupV2MapOutput{})
}
