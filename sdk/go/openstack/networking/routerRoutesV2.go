// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates routing entries on a OpenStack V2 router.
//
// > **Note:** This resource uses the OpenStack Neutron `extraroute-atomic`
// extension. If your environment does not have this extension, you should use the
// `networking.RouterRoute` resource to add routes instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			router1, err := networking.NewRouter(ctx, "router_1", &networking.RouterArgs{
//				Name:         pulumi.String("router_1"),
//				AdminStateUp: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			network1, err := networking.NewNetwork(ctx, "network_1", &networking.NetworkArgs{
//				Name:         pulumi.String("network_1"),
//				AdminStateUp: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			subnet1, err := networking.NewSubnet(ctx, "subnet_1", &networking.SubnetArgs{
//				NetworkId: network1.ID(),
//				Cidr:      pulumi.String("192.168.199.0/24"),
//				IpVersion: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			int1, err := networking.NewRouterInterface(ctx, "int_1", &networking.RouterInterfaceArgs{
//				RouterId: router1.ID(),
//				SubnetId: subnet1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networking.NewRouterRoutesV2(ctx, "router_routes_1", &networking.RouterRoutesV2Args{
//				RouterId: int1.RouterId,
//				Routes: networking.RouterRoutesV2RouteArray{
//					&networking.RouterRoutesV2RouteArgs{
//						DestinationCidr: pulumi.String("10.0.1.0/24"),
//						NextHop:         pulumi.String("192.168.199.254"),
//					},
//					&networking.RouterRoutesV2RouteArgs{
//						DestinationCidr: pulumi.String("10.0.2.0/24"),
//						NextHop:         pulumi.String("192.168.199.254"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Notes
//
// The `nextHop` IP address must be directly reachable from the router at the
// “networking.RouterRoutesV2“ resource creation time.  You can
// ensure that by explicitly specifying a dependency on the
// “networking.RouterInterface“ resource that connects the next
// hop to the router, as in the example above.
//
// ## Import
//
// Routing entries can be imported using a router `id`:
//
// ```sh
// $ pulumi import openstack:networking/routerRoutesV2:RouterRoutesV2 router_routes_1 686fe248-386c-4f70-9f6c-281607dad079
// ```
type RouterRoutesV2 struct {
	pulumi.CustomResourceState

	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure routing entres on a router. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// new routing entries.
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of the router these routing entries belong to.
	// Changing this creates new routing entries.
	RouterId pulumi.StringOutput `pulumi:"routerId"`
	// A set of routing entries to add to the router.
	Routes RouterRoutesV2RouteArrayOutput `pulumi:"routes"`
}

// NewRouterRoutesV2 registers a new resource with the given unique name, arguments, and options.
func NewRouterRoutesV2(ctx *pulumi.Context,
	name string, args *RouterRoutesV2Args, opts ...pulumi.ResourceOption) (*RouterRoutesV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouterId == nil {
		return nil, errors.New("invalid value for required argument 'RouterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterRoutesV2
	err := ctx.RegisterResource("openstack:networking/routerRoutesV2:RouterRoutesV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterRoutesV2 gets an existing RouterRoutesV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterRoutesV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterRoutesV2State, opts ...pulumi.ResourceOption) (*RouterRoutesV2, error) {
	var resource RouterRoutesV2
	err := ctx.ReadResource("openstack:networking/routerRoutesV2:RouterRoutesV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterRoutesV2 resources.
type routerRoutesV2State struct {
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure routing entres on a router. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// new routing entries.
	Region *string `pulumi:"region"`
	// ID of the router these routing entries belong to.
	// Changing this creates new routing entries.
	RouterId *string `pulumi:"routerId"`
	// A set of routing entries to add to the router.
	Routes []RouterRoutesV2Route `pulumi:"routes"`
}

type RouterRoutesV2State struct {
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure routing entres on a router. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// new routing entries.
	Region pulumi.StringPtrInput
	// ID of the router these routing entries belong to.
	// Changing this creates new routing entries.
	RouterId pulumi.StringPtrInput
	// A set of routing entries to add to the router.
	Routes RouterRoutesV2RouteArrayInput
}

func (RouterRoutesV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRoutesV2State)(nil)).Elem()
}

type routerRoutesV2Args struct {
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure routing entres on a router. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// new routing entries.
	Region *string `pulumi:"region"`
	// ID of the router these routing entries belong to.
	// Changing this creates new routing entries.
	RouterId string `pulumi:"routerId"`
	// A set of routing entries to add to the router.
	Routes []RouterRoutesV2Route `pulumi:"routes"`
}

// The set of arguments for constructing a RouterRoutesV2 resource.
type RouterRoutesV2Args struct {
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure routing entres on a router. If
	// omitted, the `region` argument of the provider is used. Changing this creates
	// new routing entries.
	Region pulumi.StringPtrInput
	// ID of the router these routing entries belong to.
	// Changing this creates new routing entries.
	RouterId pulumi.StringInput
	// A set of routing entries to add to the router.
	Routes RouterRoutesV2RouteArrayInput
}

func (RouterRoutesV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRoutesV2Args)(nil)).Elem()
}

type RouterRoutesV2Input interface {
	pulumi.Input

	ToRouterRoutesV2Output() RouterRoutesV2Output
	ToRouterRoutesV2OutputWithContext(ctx context.Context) RouterRoutesV2Output
}

func (*RouterRoutesV2) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRoutesV2)(nil)).Elem()
}

func (i *RouterRoutesV2) ToRouterRoutesV2Output() RouterRoutesV2Output {
	return i.ToRouterRoutesV2OutputWithContext(context.Background())
}

func (i *RouterRoutesV2) ToRouterRoutesV2OutputWithContext(ctx context.Context) RouterRoutesV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRoutesV2Output)
}

// RouterRoutesV2ArrayInput is an input type that accepts RouterRoutesV2Array and RouterRoutesV2ArrayOutput values.
// You can construct a concrete instance of `RouterRoutesV2ArrayInput` via:
//
//	RouterRoutesV2Array{ RouterRoutesV2Args{...} }
type RouterRoutesV2ArrayInput interface {
	pulumi.Input

	ToRouterRoutesV2ArrayOutput() RouterRoutesV2ArrayOutput
	ToRouterRoutesV2ArrayOutputWithContext(context.Context) RouterRoutesV2ArrayOutput
}

type RouterRoutesV2Array []RouterRoutesV2Input

func (RouterRoutesV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRoutesV2)(nil)).Elem()
}

func (i RouterRoutesV2Array) ToRouterRoutesV2ArrayOutput() RouterRoutesV2ArrayOutput {
	return i.ToRouterRoutesV2ArrayOutputWithContext(context.Background())
}

func (i RouterRoutesV2Array) ToRouterRoutesV2ArrayOutputWithContext(ctx context.Context) RouterRoutesV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRoutesV2ArrayOutput)
}

// RouterRoutesV2MapInput is an input type that accepts RouterRoutesV2Map and RouterRoutesV2MapOutput values.
// You can construct a concrete instance of `RouterRoutesV2MapInput` via:
//
//	RouterRoutesV2Map{ "key": RouterRoutesV2Args{...} }
type RouterRoutesV2MapInput interface {
	pulumi.Input

	ToRouterRoutesV2MapOutput() RouterRoutesV2MapOutput
	ToRouterRoutesV2MapOutputWithContext(context.Context) RouterRoutesV2MapOutput
}

type RouterRoutesV2Map map[string]RouterRoutesV2Input

func (RouterRoutesV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRoutesV2)(nil)).Elem()
}

func (i RouterRoutesV2Map) ToRouterRoutesV2MapOutput() RouterRoutesV2MapOutput {
	return i.ToRouterRoutesV2MapOutputWithContext(context.Background())
}

func (i RouterRoutesV2Map) ToRouterRoutesV2MapOutputWithContext(ctx context.Context) RouterRoutesV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRoutesV2MapOutput)
}

type RouterRoutesV2Output struct{ *pulumi.OutputState }

func (RouterRoutesV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRoutesV2)(nil)).Elem()
}

func (o RouterRoutesV2Output) ToRouterRoutesV2Output() RouterRoutesV2Output {
	return o
}

func (o RouterRoutesV2Output) ToRouterRoutesV2OutputWithContext(ctx context.Context) RouterRoutesV2Output {
	return o
}

// The region in which to obtain the V2 networking client.
// A networking client is needed to configure routing entres on a router. If
// omitted, the `region` argument of the provider is used. Changing this creates
// new routing entries.
func (o RouterRoutesV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoutesV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ID of the router these routing entries belong to.
// Changing this creates new routing entries.
func (o RouterRoutesV2Output) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoutesV2) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

// A set of routing entries to add to the router.
func (o RouterRoutesV2Output) Routes() RouterRoutesV2RouteArrayOutput {
	return o.ApplyT(func(v *RouterRoutesV2) RouterRoutesV2RouteArrayOutput { return v.Routes }).(RouterRoutesV2RouteArrayOutput)
}

type RouterRoutesV2ArrayOutput struct{ *pulumi.OutputState }

func (RouterRoutesV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRoutesV2)(nil)).Elem()
}

func (o RouterRoutesV2ArrayOutput) ToRouterRoutesV2ArrayOutput() RouterRoutesV2ArrayOutput {
	return o
}

func (o RouterRoutesV2ArrayOutput) ToRouterRoutesV2ArrayOutputWithContext(ctx context.Context) RouterRoutesV2ArrayOutput {
	return o
}

func (o RouterRoutesV2ArrayOutput) Index(i pulumi.IntInput) RouterRoutesV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterRoutesV2 {
		return vs[0].([]*RouterRoutesV2)[vs[1].(int)]
	}).(RouterRoutesV2Output)
}

type RouterRoutesV2MapOutput struct{ *pulumi.OutputState }

func (RouterRoutesV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRoutesV2)(nil)).Elem()
}

func (o RouterRoutesV2MapOutput) ToRouterRoutesV2MapOutput() RouterRoutesV2MapOutput {
	return o
}

func (o RouterRoutesV2MapOutput) ToRouterRoutesV2MapOutputWithContext(ctx context.Context) RouterRoutesV2MapOutput {
	return o
}

func (o RouterRoutesV2MapOutput) MapIndex(k pulumi.StringInput) RouterRoutesV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterRoutesV2 {
		return vs[0].(map[string]*RouterRoutesV2)[vs[1].(string)]
	}).(RouterRoutesV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRoutesV2Input)(nil)).Elem(), &RouterRoutesV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRoutesV2ArrayInput)(nil)).Elem(), RouterRoutesV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRoutesV2MapInput)(nil)).Elem(), RouterRoutesV2Map{})
	pulumi.RegisterOutputType(RouterRoutesV2Output{})
	pulumi.RegisterOutputType(RouterRoutesV2ArrayOutput{})
	pulumi.RegisterOutputType(RouterRoutesV2MapOutput{})
}
