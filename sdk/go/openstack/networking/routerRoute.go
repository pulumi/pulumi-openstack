// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a routing entry on a OpenStack V2 router.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			router1, err := networking.NewRouter(ctx, "router1", &networking.RouterArgs{
//				AdminStateUp: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			network1, err := networking.NewNetwork(ctx, "network1", &networking.NetworkArgs{
//				AdminStateUp: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			subnet1, err := networking.NewSubnet(ctx, "subnet1", &networking.SubnetArgs{
//				NetworkId: network1.ID(),
//				Cidr:      pulumi.String("192.168.199.0/24"),
//				IpVersion: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networking.NewRouterInterface(ctx, "int1", &networking.RouterInterfaceArgs{
//				RouterId: router1.ID(),
//				SubnetId: subnet1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networking.NewRouterRoute(ctx, "routerRoute1", &networking.RouterRouteArgs{
//				RouterId:        router1.ID(),
//				DestinationCidr: pulumi.String("10.0.1.0/24"),
//				NextHop:         pulumi.String("192.168.199.254"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pulumi.Resource("openstack_networking_router_interface_v2.int_1"),
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Notes
//
// The `nextHop` IP address must be directly reachable from the router at the “networking.RouterRoute“
// resource creation time.  You can ensure that by explicitly specifying a dependency on the “networking.RouterInterface“
// resource that connects the next hop to the router, as in the example above.
//
// ## Import
//
// Routing entries can be imported using a combined ID using the following format`<router_id>-route-<destination_cidr>-<next_hop>`
//
// ```sh
//
//	$ pulumi import openstack:networking/routerRoute:RouterRoute router_route_1 686fe248-386c-4f70-9f6c-281607dad079-route-10.0.1.0/24-192.168.199.25
//
// ```
type RouterRoute struct {
	pulumi.CustomResourceState

	// CIDR block to match on the packet’s destination IP. Changing
	// this creates a new routing entry.
	DestinationCidr pulumi.StringOutput `pulumi:"destinationCidr"`
	// IP address of the next hop gateway.  Changing
	// this creates a new routing entry.
	NextHop pulumi.StringOutput `pulumi:"nextHop"`
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure a routing entry on a router. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// routing entry.
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of the router this routing entry belongs to. Changing
	// this creates a new routing entry.
	RouterId pulumi.StringOutput `pulumi:"routerId"`
}

// NewRouterRoute registers a new resource with the given unique name, arguments, and options.
func NewRouterRoute(ctx *pulumi.Context,
	name string, args *RouterRouteArgs, opts ...pulumi.ResourceOption) (*RouterRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidr == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidr'")
	}
	if args.NextHop == nil {
		return nil, errors.New("invalid value for required argument 'NextHop'")
	}
	if args.RouterId == nil {
		return nil, errors.New("invalid value for required argument 'RouterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouterRoute
	err := ctx.RegisterResource("openstack:networking/routerRoute:RouterRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterRoute gets an existing RouterRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterRouteState, opts ...pulumi.ResourceOption) (*RouterRoute, error) {
	var resource RouterRoute
	err := ctx.ReadResource("openstack:networking/routerRoute:RouterRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterRoute resources.
type routerRouteState struct {
	// CIDR block to match on the packet’s destination IP. Changing
	// this creates a new routing entry.
	DestinationCidr *string `pulumi:"destinationCidr"`
	// IP address of the next hop gateway.  Changing
	// this creates a new routing entry.
	NextHop *string `pulumi:"nextHop"`
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure a routing entry on a router. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// routing entry.
	Region *string `pulumi:"region"`
	// ID of the router this routing entry belongs to. Changing
	// this creates a new routing entry.
	RouterId *string `pulumi:"routerId"`
}

type RouterRouteState struct {
	// CIDR block to match on the packet’s destination IP. Changing
	// this creates a new routing entry.
	DestinationCidr pulumi.StringPtrInput
	// IP address of the next hop gateway.  Changing
	// this creates a new routing entry.
	NextHop pulumi.StringPtrInput
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure a routing entry on a router. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// routing entry.
	Region pulumi.StringPtrInput
	// ID of the router this routing entry belongs to. Changing
	// this creates a new routing entry.
	RouterId pulumi.StringPtrInput
}

func (RouterRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRouteState)(nil)).Elem()
}

type routerRouteArgs struct {
	// CIDR block to match on the packet’s destination IP. Changing
	// this creates a new routing entry.
	DestinationCidr string `pulumi:"destinationCidr"`
	// IP address of the next hop gateway.  Changing
	// this creates a new routing entry.
	NextHop string `pulumi:"nextHop"`
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure a routing entry on a router. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// routing entry.
	Region *string `pulumi:"region"`
	// ID of the router this routing entry belongs to. Changing
	// this creates a new routing entry.
	RouterId string `pulumi:"routerId"`
}

// The set of arguments for constructing a RouterRoute resource.
type RouterRouteArgs struct {
	// CIDR block to match on the packet’s destination IP. Changing
	// this creates a new routing entry.
	DestinationCidr pulumi.StringInput
	// IP address of the next hop gateway.  Changing
	// this creates a new routing entry.
	NextHop pulumi.StringInput
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure a routing entry on a router. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// routing entry.
	Region pulumi.StringPtrInput
	// ID of the router this routing entry belongs to. Changing
	// this creates a new routing entry.
	RouterId pulumi.StringInput
}

func (RouterRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerRouteArgs)(nil)).Elem()
}

type RouterRouteInput interface {
	pulumi.Input

	ToRouterRouteOutput() RouterRouteOutput
	ToRouterRouteOutputWithContext(ctx context.Context) RouterRouteOutput
}

func (*RouterRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRoute)(nil)).Elem()
}

func (i *RouterRoute) ToRouterRouteOutput() RouterRouteOutput {
	return i.ToRouterRouteOutputWithContext(context.Background())
}

func (i *RouterRoute) ToRouterRouteOutputWithContext(ctx context.Context) RouterRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRouteOutput)
}

// RouterRouteArrayInput is an input type that accepts RouterRouteArray and RouterRouteArrayOutput values.
// You can construct a concrete instance of `RouterRouteArrayInput` via:
//
//	RouterRouteArray{ RouterRouteArgs{...} }
type RouterRouteArrayInput interface {
	pulumi.Input

	ToRouterRouteArrayOutput() RouterRouteArrayOutput
	ToRouterRouteArrayOutputWithContext(context.Context) RouterRouteArrayOutput
}

type RouterRouteArray []RouterRouteInput

func (RouterRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRoute)(nil)).Elem()
}

func (i RouterRouteArray) ToRouterRouteArrayOutput() RouterRouteArrayOutput {
	return i.ToRouterRouteArrayOutputWithContext(context.Background())
}

func (i RouterRouteArray) ToRouterRouteArrayOutputWithContext(ctx context.Context) RouterRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRouteArrayOutput)
}

// RouterRouteMapInput is an input type that accepts RouterRouteMap and RouterRouteMapOutput values.
// You can construct a concrete instance of `RouterRouteMapInput` via:
//
//	RouterRouteMap{ "key": RouterRouteArgs{...} }
type RouterRouteMapInput interface {
	pulumi.Input

	ToRouterRouteMapOutput() RouterRouteMapOutput
	ToRouterRouteMapOutputWithContext(context.Context) RouterRouteMapOutput
}

type RouterRouteMap map[string]RouterRouteInput

func (RouterRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRoute)(nil)).Elem()
}

func (i RouterRouteMap) ToRouterRouteMapOutput() RouterRouteMapOutput {
	return i.ToRouterRouteMapOutputWithContext(context.Background())
}

func (i RouterRouteMap) ToRouterRouteMapOutputWithContext(ctx context.Context) RouterRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterRouteMapOutput)
}

type RouterRouteOutput struct{ *pulumi.OutputState }

func (RouterRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterRoute)(nil)).Elem()
}

func (o RouterRouteOutput) ToRouterRouteOutput() RouterRouteOutput {
	return o
}

func (o RouterRouteOutput) ToRouterRouteOutputWithContext(ctx context.Context) RouterRouteOutput {
	return o
}

// CIDR block to match on the packet’s destination IP. Changing
// this creates a new routing entry.
func (o RouterRouteOutput) DestinationCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoute) pulumi.StringOutput { return v.DestinationCidr }).(pulumi.StringOutput)
}

// IP address of the next hop gateway.  Changing
// this creates a new routing entry.
func (o RouterRouteOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoute) pulumi.StringOutput { return v.NextHop }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 networking client.
// A networking client is needed to configure a routing entry on a router. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// routing entry.
func (o RouterRouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoute) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ID of the router this routing entry belongs to. Changing
// this creates a new routing entry.
func (o RouterRouteOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterRoute) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

type RouterRouteArrayOutput struct{ *pulumi.OutputState }

func (RouterRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterRoute)(nil)).Elem()
}

func (o RouterRouteArrayOutput) ToRouterRouteArrayOutput() RouterRouteArrayOutput {
	return o
}

func (o RouterRouteArrayOutput) ToRouterRouteArrayOutputWithContext(ctx context.Context) RouterRouteArrayOutput {
	return o
}

func (o RouterRouteArrayOutput) Index(i pulumi.IntInput) RouterRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterRoute {
		return vs[0].([]*RouterRoute)[vs[1].(int)]
	}).(RouterRouteOutput)
}

type RouterRouteMapOutput struct{ *pulumi.OutputState }

func (RouterRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterRoute)(nil)).Elem()
}

func (o RouterRouteMapOutput) ToRouterRouteMapOutput() RouterRouteMapOutput {
	return o
}

func (o RouterRouteMapOutput) ToRouterRouteMapOutputWithContext(ctx context.Context) RouterRouteMapOutput {
	return o
}

func (o RouterRouteMapOutput) MapIndex(k pulumi.StringInput) RouterRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterRoute {
		return vs[0].(map[string]*RouterRoute)[vs[1].(string)]
	}).(RouterRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRouteInput)(nil)).Elem(), &RouterRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRouteArrayInput)(nil)).Elem(), RouterRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterRouteMapInput)(nil)).Elem(), RouterRouteMap{})
	pulumi.RegisterOutputType(RouterRouteOutput{})
	pulumi.RegisterOutputType(RouterRouteArrayOutput{})
	pulumi.RegisterOutputType(RouterRouteMapOutput{})
}
