// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpnaas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron IPSec site connection resource within OpenStack.
type SiteConnection struct {
	s *pulumi.ResourceState
}

// NewSiteConnection registers a new resource with the given unique name, arguments, and options.
func NewSiteConnection(ctx *pulumi.Context,
	name string, args *SiteConnectionArgs, opts ...pulumi.ResourceOpt) (*SiteConnection, error) {
	if args == nil || args.IkepolicyId == nil {
		return nil, errors.New("missing required argument 'IkepolicyId'")
	}
	if args == nil || args.IpsecpolicyId == nil {
		return nil, errors.New("missing required argument 'IpsecpolicyId'")
	}
	if args == nil || args.PeerAddress == nil {
		return nil, errors.New("missing required argument 'PeerAddress'")
	}
	if args == nil || args.PeerId == nil {
		return nil, errors.New("missing required argument 'PeerId'")
	}
	if args == nil || args.Psk == nil {
		return nil, errors.New("missing required argument 'Psk'")
	}
	if args == nil || args.VpnserviceId == nil {
		return nil, errors.New("missing required argument 'VpnserviceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminStateUp"] = nil
		inputs["description"] = nil
		inputs["dpds"] = nil
		inputs["ikepolicyId"] = nil
		inputs["initiator"] = nil
		inputs["ipsecpolicyId"] = nil
		inputs["localEpGroupId"] = nil
		inputs["localId"] = nil
		inputs["mtu"] = nil
		inputs["name"] = nil
		inputs["peerAddress"] = nil
		inputs["peerCidrs"] = nil
		inputs["peerEpGroupId"] = nil
		inputs["peerId"] = nil
		inputs["psk"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
		inputs["valueSpecs"] = nil
		inputs["vpnserviceId"] = nil
	} else {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["description"] = args.Description
		inputs["dpds"] = args.Dpds
		inputs["ikepolicyId"] = args.IkepolicyId
		inputs["initiator"] = args.Initiator
		inputs["ipsecpolicyId"] = args.IpsecpolicyId
		inputs["localEpGroupId"] = args.LocalEpGroupId
		inputs["localId"] = args.LocalId
		inputs["mtu"] = args.Mtu
		inputs["name"] = args.Name
		inputs["peerAddress"] = args.PeerAddress
		inputs["peerCidrs"] = args.PeerCidrs
		inputs["peerEpGroupId"] = args.PeerEpGroupId
		inputs["peerId"] = args.PeerId
		inputs["psk"] = args.Psk
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
		inputs["valueSpecs"] = args.ValueSpecs
		inputs["vpnserviceId"] = args.VpnserviceId
	}
	s, err := ctx.RegisterResource("openstack:vpnaas/siteConnection:SiteConnection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SiteConnection{s: s}, nil
}

// GetSiteConnection gets an existing SiteConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteConnection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SiteConnectionState, opts ...pulumi.ResourceOpt) (*SiteConnection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["description"] = state.Description
		inputs["dpds"] = state.Dpds
		inputs["ikepolicyId"] = state.IkepolicyId
		inputs["initiator"] = state.Initiator
		inputs["ipsecpolicyId"] = state.IpsecpolicyId
		inputs["localEpGroupId"] = state.LocalEpGroupId
		inputs["localId"] = state.LocalId
		inputs["mtu"] = state.Mtu
		inputs["name"] = state.Name
		inputs["peerAddress"] = state.PeerAddress
		inputs["peerCidrs"] = state.PeerCidrs
		inputs["peerEpGroupId"] = state.PeerEpGroupId
		inputs["peerId"] = state.PeerId
		inputs["psk"] = state.Psk
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
		inputs["valueSpecs"] = state.ValueSpecs
		inputs["vpnserviceId"] = state.VpnserviceId
	}
	s, err := ctx.ReadResource("openstack:vpnaas/siteConnection:SiteConnection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SiteConnection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SiteConnection) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SiteConnection) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The administrative state of the resource. Can either be up(true) or down(false).
// Changing this updates the administrative state of the existing connection.
func (r *SiteConnection) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// The human-readable description for the connection.
// Changing this updates the description of the existing connection.
func (r *SiteConnection) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A dictionary with dead peer detection (DPD) protocol controls.
// - `action` - (Optional) The dead peer detection (DPD) action.
// A valid value is clear, hold, restart, disabled, or restart-by-peer.
// Default value is hold.
func (r *SiteConnection) Dpds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dpds"])
}

// The ID of the IKE policy. Changing this creates a new connection.
func (r *SiteConnection) IkepolicyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ikepolicyId"])
}

// A valid value is response-only or bi-directional. Default is bi-directional.
func (r *SiteConnection) Initiator() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["initiator"])
}

// The ID of the IPsec policy. Changing this creates a new connection.
func (r *SiteConnection) IpsecpolicyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipsecpolicyId"])
}

// The ID for the endpoint group that contains private subnets for the local side of the connection.
// You must specify this parameter with the peer_ep_group_id parameter unless
// in backward- compatible mode where peer_cidrs is provided with a subnet_id for the VPN service.
// Changing this updates the existing connection.
func (r *SiteConnection) LocalEpGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["localEpGroupId"])
}

// An ID to be used instead of the external IP address for a virtual router used in traffic between instances on different networks in east-west traffic.
// Most often, local ID would be domain name, email address, etc.
// If this is not configured then the external IP address will be used as the ID.
func (r *SiteConnection) LocalId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["localId"])
}

// The maximum transmission unit (MTU) value to address fragmentation.
// Minimum value is 68 for IPv4, and 1280 for IPv6.
func (r *SiteConnection) Mtu() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["mtu"])
}

// The name of the connection. Changing this updates the name of
// the existing connection.
func (r *SiteConnection) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The peer gateway public IPv4 or IPv6 address or FQDN.
func (r *SiteConnection) PeerAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["peerAddress"])
}

// Unique list of valid peer private CIDRs in the form < net_address > / < prefix > .
func (r *SiteConnection) PeerCidrs() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["peerCidrs"])
}

// The ID for the endpoint group that contains private CIDRs in the form < net_address > / < prefix > for the peer side of the connection.
// You must specify this parameter with the local_ep_group_id parameter unless in backward-compatible mode
// where peer_cidrs is provided with a subnet_id for the VPN service.
func (r *SiteConnection) PeerEpGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["peerEpGroupId"])
}

// The peer router identity for authentication. A valid value is an IPv4 address, IPv6 address, e-mail address, key ID, or FQDN.
// Typically, this value matches the peer_address value.
// Changing this updates the existing policy.
func (r *SiteConnection) PeerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["peerId"])
}

// The pre-shared key. A valid value is any string.
func (r *SiteConnection) Psk() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["psk"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an IPSec site connection. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// site connection.
func (r *SiteConnection) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The owner of the connection. Required if admin wants to
// create a connection for another project. Changing this creates a new connection.
func (r *SiteConnection) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Map of additional options.
func (r *SiteConnection) ValueSpecs() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["valueSpecs"])
}

// The ID of the VPN service. Changing this creates a new connection.
func (r *SiteConnection) VpnserviceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpnserviceId"])
}

// Input properties used for looking up and filtering SiteConnection resources.
type SiteConnectionState struct {
	// The administrative state of the resource. Can either be up(true) or down(false).
	// Changing this updates the administrative state of the existing connection.
	AdminStateUp interface{}
	// The human-readable description for the connection.
	// Changing this updates the description of the existing connection.
	Description interface{}
	// A dictionary with dead peer detection (DPD) protocol controls.
	// - `action` - (Optional) The dead peer detection (DPD) action.
	// A valid value is clear, hold, restart, disabled, or restart-by-peer.
	// Default value is hold.
	Dpds interface{}
	// The ID of the IKE policy. Changing this creates a new connection.
	IkepolicyId interface{}
	// A valid value is response-only or bi-directional. Default is bi-directional.
	Initiator interface{}
	// The ID of the IPsec policy. Changing this creates a new connection.
	IpsecpolicyId interface{}
	// The ID for the endpoint group that contains private subnets for the local side of the connection.
	// You must specify this parameter with the peer_ep_group_id parameter unless
	// in backward- compatible mode where peer_cidrs is provided with a subnet_id for the VPN service.
	// Changing this updates the existing connection.
	LocalEpGroupId interface{}
	// An ID to be used instead of the external IP address for a virtual router used in traffic between instances on different networks in east-west traffic.
	// Most often, local ID would be domain name, email address, etc.
	// If this is not configured then the external IP address will be used as the ID.
	LocalId interface{}
	// The maximum transmission unit (MTU) value to address fragmentation.
	// Minimum value is 68 for IPv4, and 1280 for IPv6.
	Mtu interface{}
	// The name of the connection. Changing this updates the name of
	// the existing connection.
	Name interface{}
	// The peer gateway public IPv4 or IPv6 address or FQDN.
	PeerAddress interface{}
	// Unique list of valid peer private CIDRs in the form < net_address > / < prefix > .
	PeerCidrs interface{}
	// The ID for the endpoint group that contains private CIDRs in the form < net_address > / < prefix > for the peer side of the connection.
	// You must specify this parameter with the local_ep_group_id parameter unless in backward-compatible mode
	// where peer_cidrs is provided with a subnet_id for the VPN service.
	PeerEpGroupId interface{}
	// The peer router identity for authentication. A valid value is an IPv4 address, IPv6 address, e-mail address, key ID, or FQDN.
	// Typically, this value matches the peer_address value.
	// Changing this updates the existing policy.
	PeerId interface{}
	// The pre-shared key. A valid value is any string.
	Psk interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an IPSec site connection. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// site connection.
	Region interface{}
	// The owner of the connection. Required if admin wants to
	// create a connection for another project. Changing this creates a new connection.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
	// The ID of the VPN service. Changing this creates a new connection.
	VpnserviceId interface{}
}

// The set of arguments for constructing a SiteConnection resource.
type SiteConnectionArgs struct {
	// The administrative state of the resource. Can either be up(true) or down(false).
	// Changing this updates the administrative state of the existing connection.
	AdminStateUp interface{}
	// The human-readable description for the connection.
	// Changing this updates the description of the existing connection.
	Description interface{}
	// A dictionary with dead peer detection (DPD) protocol controls.
	// - `action` - (Optional) The dead peer detection (DPD) action.
	// A valid value is clear, hold, restart, disabled, or restart-by-peer.
	// Default value is hold.
	Dpds interface{}
	// The ID of the IKE policy. Changing this creates a new connection.
	IkepolicyId interface{}
	// A valid value is response-only or bi-directional. Default is bi-directional.
	Initiator interface{}
	// The ID of the IPsec policy. Changing this creates a new connection.
	IpsecpolicyId interface{}
	// The ID for the endpoint group that contains private subnets for the local side of the connection.
	// You must specify this parameter with the peer_ep_group_id parameter unless
	// in backward- compatible mode where peer_cidrs is provided with a subnet_id for the VPN service.
	// Changing this updates the existing connection.
	LocalEpGroupId interface{}
	// An ID to be used instead of the external IP address for a virtual router used in traffic between instances on different networks in east-west traffic.
	// Most often, local ID would be domain name, email address, etc.
	// If this is not configured then the external IP address will be used as the ID.
	LocalId interface{}
	// The maximum transmission unit (MTU) value to address fragmentation.
	// Minimum value is 68 for IPv4, and 1280 for IPv6.
	Mtu interface{}
	// The name of the connection. Changing this updates the name of
	// the existing connection.
	Name interface{}
	// The peer gateway public IPv4 or IPv6 address or FQDN.
	PeerAddress interface{}
	// Unique list of valid peer private CIDRs in the form < net_address > / < prefix > .
	PeerCidrs interface{}
	// The ID for the endpoint group that contains private CIDRs in the form < net_address > / < prefix > for the peer side of the connection.
	// You must specify this parameter with the local_ep_group_id parameter unless in backward-compatible mode
	// where peer_cidrs is provided with a subnet_id for the VPN service.
	PeerEpGroupId interface{}
	// The peer router identity for authentication. A valid value is an IPv4 address, IPv6 address, e-mail address, key ID, or FQDN.
	// Typically, this value matches the peer_address value.
	// Changing this updates the existing policy.
	PeerId interface{}
	// The pre-shared key. A valid value is any string.
	Psk interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an IPSec site connection. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// site connection.
	Region interface{}
	// The owner of the connection. Required if admin wants to
	// create a connection for another project. Changing this creates a new connection.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
	// The ID of the VPN service. Changing this creates a new connection.
	VpnserviceId interface{}
}
