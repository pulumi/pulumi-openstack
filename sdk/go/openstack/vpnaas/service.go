// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpnaas

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron VPN service resource within OpenStack.
type Service struct {
	s *pulumi.ResourceState
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOpt) (*Service, error) {
	if args == nil || args.RouterId == nil {
		return nil, errors.New("missing required argument 'RouterId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminStateUp"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["routerId"] = nil
		inputs["subnetId"] = nil
		inputs["tenantId"] = nil
		inputs["valueSpecs"] = nil
	} else {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["routerId"] = args.RouterId
		inputs["subnetId"] = args.SubnetId
		inputs["tenantId"] = args.TenantId
		inputs["valueSpecs"] = args.ValueSpecs
	}
	inputs["externalV4Ip"] = nil
	inputs["externalV6Ip"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("openstack:vpnaas/service:Service", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceState, opts ...pulumi.ResourceOpt) (*Service, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["description"] = state.Description
		inputs["externalV4Ip"] = state.ExternalV4Ip
		inputs["externalV6Ip"] = state.ExternalV6Ip
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["routerId"] = state.RouterId
		inputs["status"] = state.Status
		inputs["subnetId"] = state.SubnetId
		inputs["tenantId"] = state.TenantId
		inputs["valueSpecs"] = state.ValueSpecs
	}
	s, err := ctx.ReadResource("openstack:vpnaas/service:Service", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Service) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Service) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The administrative state of the resource. Can either be up(true) or down(false).
// Changing this updates the administrative state of the existing service.
func (r *Service) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// The human-readable description for the service.
// Changing this updates the description of the existing service.
func (r *Service) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The read-only external (public) IPv4 address that is used for the VPN service.
func (r *Service) ExternalV4Ip() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["externalV4Ip"])
}

// The read-only external (public) IPv6 address that is used for the VPN service.
func (r *Service) ExternalV6Ip() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["externalV6Ip"])
}

// The name of the service. Changing this updates the name of
// the existing service.
func (r *Service) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a VPN service. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// service.
func (r *Service) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The ID of the router. Changing this creates a new service.
func (r *Service) RouterId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["routerId"])
}

// Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.
func (r *Service) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// SubnetID is the ID of the subnet. Default is null.
func (r *Service) SubnetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetId"])
}

// The owner of the service. Required if admin wants to
// create a service for another project. Changing this creates a new service.
func (r *Service) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Map of additional options.
func (r *Service) ValueSpecs() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["valueSpecs"])
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	// The administrative state of the resource. Can either be up(true) or down(false).
	// Changing this updates the administrative state of the existing service.
	AdminStateUp interface{}
	// The human-readable description for the service.
	// Changing this updates the description of the existing service.
	Description interface{}
	// The read-only external (public) IPv4 address that is used for the VPN service.
	ExternalV4Ip interface{}
	// The read-only external (public) IPv6 address that is used for the VPN service.
	ExternalV6Ip interface{}
	// The name of the service. Changing this updates the name of
	// the existing service.
	Name interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VPN service. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// service.
	Region interface{}
	// The ID of the router. Changing this creates a new service.
	RouterId interface{}
	// Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.
	Status interface{}
	// SubnetID is the ID of the subnet. Default is null.
	SubnetId interface{}
	// The owner of the service. Required if admin wants to
	// create a service for another project. Changing this creates a new service.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The administrative state of the resource. Can either be up(true) or down(false).
	// Changing this updates the administrative state of the existing service.
	AdminStateUp interface{}
	// The human-readable description for the service.
	// Changing this updates the description of the existing service.
	Description interface{}
	// The name of the service. Changing this updates the name of
	// the existing service.
	Name interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VPN service. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// service.
	Region interface{}
	// The ID of the router. Changing this creates a new service.
	RouterId interface{}
	// SubnetID is the ID of the subnet. Default is null.
	SubnetId interface{}
	// The owner of the service. Required if admin wants to
	// create a service for another project. Changing this creates a new service.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
}
