// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sharedfilesystem

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this resource to configure a share.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/networking"
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/sharedfilesystem"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		network1, err := networking.NewNetwork(ctx, "network1", &networking.NetworkArgs{
// 			AdminStateUp: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		subnet1, err := networking.NewSubnet(ctx, "subnet1", &networking.SubnetArgs{
// 			Cidr:      pulumi.String("192.168.199.0/24"),
// 			IpVersion: pulumi.Int(4),
// 			NetworkId: network1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		sharenetwork1, err := sharedfilesystem.NewShareNetwork(ctx, "sharenetwork1", &sharedfilesystem.ShareNetworkArgs{
// 			Description:     pulumi.String("test share network with security services"),
// 			NeutronNetId:    network1.ID(),
// 			NeutronSubnetId: subnet1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sharedfilesystem.NewShare(ctx, "share1", &sharedfilesystem.ShareArgs{
// 			Description:    pulumi.String("test share description"),
// 			ShareNetworkId: sharenetwork1.ID(),
// 			ShareProto:     pulumi.String("NFS"),
// 			Size:           pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Share struct {
	pulumi.CustomResourceState

	// The map of metadata, assigned on the share, which has been
	// explicitly and implicitly added.
	AllMetadata pulumi.MapOutput `pulumi:"allMetadata"`
	// The share availability zone. Changing this creates a
	// new share.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The human-readable description for the share.
	// Changing this updates the description of the existing share.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of export locations. For example, when a share server
	// has more than one network interface, it can have multiple export locations.
	ExportLocations ShareExportLocationArrayOutput `pulumi:"exportLocations"`
	// Indicates whether a share has replicas or not.
	HasReplicas pulumi.BoolOutput `pulumi:"hasReplicas"`
	// The share host name.
	Host pulumi.StringOutput `pulumi:"host"`
	// The level of visibility for the share. Set to true to make
	// share public. Set to false to make it private. Default value is false. Changing this
	// updates the existing share.
	IsPublic pulumi.BoolPtrOutput `pulumi:"isPublic"`
	// One or more metadata key and value pairs as a dictionary of
	// strings.
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// The name of the share. Changing this updates the name
	// of the existing share.
	Name pulumi.StringOutput `pulumi:"name"`
	// The owner of the Share.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share. Changing this
	// creates a new share.
	Region pulumi.StringOutput `pulumi:"region"`
	// The share replication type.
	ReplicationType pulumi.StringOutput `pulumi:"replicationType"`
	// The UUID of a share network where the share server exists
	// or will be created. If `shareNetworkId` is not set and you provide a `snapshotId`,
	// the shareNetworkId value from the snapshot is used. Changing this creates a new share.
	ShareNetworkId pulumi.StringOutput `pulumi:"shareNetworkId"`
	// The share protocol - can either be NFS, CIFS,
	// CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
	ShareProto pulumi.StringOutput `pulumi:"shareProto"`
	// The UUID of the share server.
	ShareServerId pulumi.StringOutput `pulumi:"shareServerId"`
	// The share type name. If you omit this parameter, the default
	// share type is used.
	ShareType pulumi.StringOutput `pulumi:"shareType"`
	// The share size, in GBs. The requested share size cannot be greater
	// than the allowed GB quota. Changing this resizes the existing share.
	Size pulumi.IntOutput `pulumi:"size"`
	// The UUID of the share's base snapshot. Changing this creates
	// a new share.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
}

// NewShare registers a new resource with the given unique name, arguments, and options.
func NewShare(ctx *pulumi.Context,
	name string, args *ShareArgs, opts ...pulumi.ResourceOption) (*Share, error) {
	if args == nil || args.ShareProto == nil {
		return nil, errors.New("missing required argument 'ShareProto'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil {
		args = &ShareArgs{}
	}
	var resource Share
	err := ctx.RegisterResource("openstack:sharedfilesystem/share:Share", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShare gets an existing Share resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareState, opts ...pulumi.ResourceOption) (*Share, error) {
	var resource Share
	err := ctx.ReadResource("openstack:sharedfilesystem/share:Share", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Share resources.
type shareState struct {
	// The map of metadata, assigned on the share, which has been
	// explicitly and implicitly added.
	AllMetadata map[string]interface{} `pulumi:"allMetadata"`
	// The share availability zone. Changing this creates a
	// new share.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The human-readable description for the share.
	// Changing this updates the description of the existing share.
	Description *string `pulumi:"description"`
	// A list of export locations. For example, when a share server
	// has more than one network interface, it can have multiple export locations.
	ExportLocations []ShareExportLocation `pulumi:"exportLocations"`
	// Indicates whether a share has replicas or not.
	HasReplicas *bool `pulumi:"hasReplicas"`
	// The share host name.
	Host *string `pulumi:"host"`
	// The level of visibility for the share. Set to true to make
	// share public. Set to false to make it private. Default value is false. Changing this
	// updates the existing share.
	IsPublic *bool `pulumi:"isPublic"`
	// One or more metadata key and value pairs as a dictionary of
	// strings.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The name of the share. Changing this updates the name
	// of the existing share.
	Name *string `pulumi:"name"`
	// The owner of the Share.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share. Changing this
	// creates a new share.
	Region *string `pulumi:"region"`
	// The share replication type.
	ReplicationType *string `pulumi:"replicationType"`
	// The UUID of a share network where the share server exists
	// or will be created. If `shareNetworkId` is not set and you provide a `snapshotId`,
	// the shareNetworkId value from the snapshot is used. Changing this creates a new share.
	ShareNetworkId *string `pulumi:"shareNetworkId"`
	// The share protocol - can either be NFS, CIFS,
	// CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
	ShareProto *string `pulumi:"shareProto"`
	// The UUID of the share server.
	ShareServerId *string `pulumi:"shareServerId"`
	// The share type name. If you omit this parameter, the default
	// share type is used.
	ShareType *string `pulumi:"shareType"`
	// The share size, in GBs. The requested share size cannot be greater
	// than the allowed GB quota. Changing this resizes the existing share.
	Size *int `pulumi:"size"`
	// The UUID of the share's base snapshot. Changing this creates
	// a new share.
	SnapshotId *string `pulumi:"snapshotId"`
}

type ShareState struct {
	// The map of metadata, assigned on the share, which has been
	// explicitly and implicitly added.
	AllMetadata pulumi.MapInput
	// The share availability zone. Changing this creates a
	// new share.
	AvailabilityZone pulumi.StringPtrInput
	// The human-readable description for the share.
	// Changing this updates the description of the existing share.
	Description pulumi.StringPtrInput
	// A list of export locations. For example, when a share server
	// has more than one network interface, it can have multiple export locations.
	ExportLocations ShareExportLocationArrayInput
	// Indicates whether a share has replicas or not.
	HasReplicas pulumi.BoolPtrInput
	// The share host name.
	Host pulumi.StringPtrInput
	// The level of visibility for the share. Set to true to make
	// share public. Set to false to make it private. Default value is false. Changing this
	// updates the existing share.
	IsPublic pulumi.BoolPtrInput
	// One or more metadata key and value pairs as a dictionary of
	// strings.
	Metadata pulumi.MapInput
	// The name of the share. Changing this updates the name
	// of the existing share.
	Name pulumi.StringPtrInput
	// The owner of the Share.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share. Changing this
	// creates a new share.
	Region pulumi.StringPtrInput
	// The share replication type.
	ReplicationType pulumi.StringPtrInput
	// The UUID of a share network where the share server exists
	// or will be created. If `shareNetworkId` is not set and you provide a `snapshotId`,
	// the shareNetworkId value from the snapshot is used. Changing this creates a new share.
	ShareNetworkId pulumi.StringPtrInput
	// The share protocol - can either be NFS, CIFS,
	// CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
	ShareProto pulumi.StringPtrInput
	// The UUID of the share server.
	ShareServerId pulumi.StringPtrInput
	// The share type name. If you omit this parameter, the default
	// share type is used.
	ShareType pulumi.StringPtrInput
	// The share size, in GBs. The requested share size cannot be greater
	// than the allowed GB quota. Changing this resizes the existing share.
	Size pulumi.IntPtrInput
	// The UUID of the share's base snapshot. Changing this creates
	// a new share.
	SnapshotId pulumi.StringPtrInput
}

func (ShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareState)(nil)).Elem()
}

type shareArgs struct {
	// The share availability zone. Changing this creates a
	// new share.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The human-readable description for the share.
	// Changing this updates the description of the existing share.
	Description *string `pulumi:"description"`
	// The level of visibility for the share. Set to true to make
	// share public. Set to false to make it private. Default value is false. Changing this
	// updates the existing share.
	IsPublic *bool `pulumi:"isPublic"`
	// One or more metadata key and value pairs as a dictionary of
	// strings.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The name of the share. Changing this updates the name
	// of the existing share.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share. Changing this
	// creates a new share.
	Region *string `pulumi:"region"`
	// The UUID of a share network where the share server exists
	// or will be created. If `shareNetworkId` is not set and you provide a `snapshotId`,
	// the shareNetworkId value from the snapshot is used. Changing this creates a new share.
	ShareNetworkId *string `pulumi:"shareNetworkId"`
	// The share protocol - can either be NFS, CIFS,
	// CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
	ShareProto string `pulumi:"shareProto"`
	// The share type name. If you omit this parameter, the default
	// share type is used.
	ShareType *string `pulumi:"shareType"`
	// The share size, in GBs. The requested share size cannot be greater
	// than the allowed GB quota. Changing this resizes the existing share.
	Size int `pulumi:"size"`
	// The UUID of the share's base snapshot. Changing this creates
	// a new share.
	SnapshotId *string `pulumi:"snapshotId"`
}

// The set of arguments for constructing a Share resource.
type ShareArgs struct {
	// The share availability zone. Changing this creates a
	// new share.
	AvailabilityZone pulumi.StringPtrInput
	// The human-readable description for the share.
	// Changing this updates the description of the existing share.
	Description pulumi.StringPtrInput
	// The level of visibility for the share. Set to true to make
	// share public. Set to false to make it private. Default value is false. Changing this
	// updates the existing share.
	IsPublic pulumi.BoolPtrInput
	// One or more metadata key and value pairs as a dictionary of
	// strings.
	Metadata pulumi.MapInput
	// The name of the share. Changing this updates the name
	// of the existing share.
	Name pulumi.StringPtrInput
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share. Changing this
	// creates a new share.
	Region pulumi.StringPtrInput
	// The UUID of a share network where the share server exists
	// or will be created. If `shareNetworkId` is not set and you provide a `snapshotId`,
	// the shareNetworkId value from the snapshot is used. Changing this creates a new share.
	ShareNetworkId pulumi.StringPtrInput
	// The share protocol - can either be NFS, CIFS,
	// CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
	ShareProto pulumi.StringInput
	// The share type name. If you omit this parameter, the default
	// share type is used.
	ShareType pulumi.StringPtrInput
	// The share size, in GBs. The requested share size cannot be greater
	// than the allowed GB quota. Changing this resizes the existing share.
	Size pulumi.IntInput
	// The UUID of the share's base snapshot. Changing this creates
	// a new share.
	SnapshotId pulumi.StringPtrInput
}

func (ShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareArgs)(nil)).Elem()
}
