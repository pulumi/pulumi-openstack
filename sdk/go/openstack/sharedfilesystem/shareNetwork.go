// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sharedfilesystem

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this resource to configure a share network.
//
// A share network stores network information that share servers can use when
// shares are created.
//
// ## Example Usage
// ### Basic share network
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/networking"
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/sharedfilesystem"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		network1, err := networking.NewNetwork(ctx, "network1", &networking.NetworkArgs{
// 			AdminStateUp: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		subnet1, err := networking.NewSubnet(ctx, "subnet1", &networking.SubnetArgs{
// 			Cidr:      pulumi.String("192.168.199.0/24"),
// 			IpVersion: pulumi.Int(4),
// 			NetworkId: network1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sharedfilesystem.NewShareNetwork(ctx, "sharenetwork1", &sharedfilesystem.ShareNetworkArgs{
// 			Description:     pulumi.String("test share network"),
// 			NeutronNetId:    network1.ID(),
// 			NeutronSubnetId: subnet1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Share network with associated security services
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/networking"
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/sharedfilesystem"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		network1, err := networking.NewNetwork(ctx, "network1", &networking.NetworkArgs{
// 			AdminStateUp: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		subnet1, err := networking.NewSubnet(ctx, "subnet1", &networking.SubnetArgs{
// 			Cidr:      pulumi.String("192.168.199.0/24"),
// 			IpVersion: pulumi.Int(4),
// 			NetworkId: network1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		securityservice1, err := sharedfilesystem.NewSecurityService(ctx, "securityservice1", &sharedfilesystem.SecurityServiceArgs{
// 			Description: pulumi.String("created by terraform"),
// 			DnsIp:       pulumi.String("192.168.199.10"),
// 			Domain:      pulumi.String("example.com"),
// 			Ou:          pulumi.String("CN=Computers,DC=example,DC=com"),
// 			Password:    pulumi.String("s8cret"),
// 			Server:      pulumi.String("192.168.199.10"),
// 			Type:        pulumi.String("active_directory"),
// 			User:        pulumi.String("joinDomainUser"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sharedfilesystem.NewShareNetwork(ctx, "sharenetwork1", &sharedfilesystem.ShareNetworkArgs{
// 			Description:     pulumi.String("test share network with security services"),
// 			NeutronNetId:    network1.ID(),
// 			NeutronSubnetId: subnet1.ID(),
// 			SecurityServiceIds: pulumi.StringArray{
// 				securityservice1.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ShareNetwork struct {
	pulumi.CustomResourceState

	// The share network CIDR.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The IP version of the share network. Can either be 4 or 6.
	IpVersion pulumi.IntOutput `pulumi:"ipVersion"`
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name pulumi.StringOutput `pulumi:"name"`
	// The share network type. Can either be VLAN, VXLAN, GRE, or flat.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId pulumi.StringOutput `pulumi:"neutronNetId"`
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId pulumi.StringOutput `pulumi:"neutronSubnetId"`
	// The owner of the Share Network.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region pulumi.StringOutput `pulumi:"region"`
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds pulumi.StringArrayOutput `pulumi:"securityServiceIds"`
	// The share network segmentation ID.
	SegmentationId pulumi.IntOutput `pulumi:"segmentationId"`
}

// NewShareNetwork registers a new resource with the given unique name, arguments, and options.
func NewShareNetwork(ctx *pulumi.Context,
	name string, args *ShareNetworkArgs, opts ...pulumi.ResourceOption) (*ShareNetwork, error) {
	if args == nil || args.NeutronNetId == nil {
		return nil, errors.New("missing required argument 'NeutronNetId'")
	}
	if args == nil || args.NeutronSubnetId == nil {
		return nil, errors.New("missing required argument 'NeutronSubnetId'")
	}
	if args == nil {
		args = &ShareNetworkArgs{}
	}
	var resource ShareNetwork
	err := ctx.RegisterResource("openstack:sharedfilesystem/shareNetwork:ShareNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShareNetwork gets an existing ShareNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShareNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareNetworkState, opts ...pulumi.ResourceOption) (*ShareNetwork, error) {
	var resource ShareNetwork
	err := ctx.ReadResource("openstack:sharedfilesystem/shareNetwork:ShareNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShareNetwork resources.
type shareNetworkState struct {
	// The share network CIDR.
	Cidr *string `pulumi:"cidr"`
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description *string `pulumi:"description"`
	// The IP version of the share network. Can either be 4 or 6.
	IpVersion *int `pulumi:"ipVersion"`
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name *string `pulumi:"name"`
	// The share network type. Can either be VLAN, VXLAN, GRE, or flat.
	NetworkType *string `pulumi:"networkType"`
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId *string `pulumi:"neutronNetId"`
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId *string `pulumi:"neutronSubnetId"`
	// The owner of the Share Network.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region *string `pulumi:"region"`
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds []string `pulumi:"securityServiceIds"`
	// The share network segmentation ID.
	SegmentationId *int `pulumi:"segmentationId"`
}

type ShareNetworkState struct {
	// The share network CIDR.
	Cidr pulumi.StringPtrInput
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description pulumi.StringPtrInput
	// The IP version of the share network. Can either be 4 or 6.
	IpVersion pulumi.IntPtrInput
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name pulumi.StringPtrInput
	// The share network type. Can either be VLAN, VXLAN, GRE, or flat.
	NetworkType pulumi.StringPtrInput
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId pulumi.StringPtrInput
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId pulumi.StringPtrInput
	// The owner of the Share Network.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region pulumi.StringPtrInput
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds pulumi.StringArrayInput
	// The share network segmentation ID.
	SegmentationId pulumi.IntPtrInput
}

func (ShareNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareNetworkState)(nil)).Elem()
}

type shareNetworkArgs struct {
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description *string `pulumi:"description"`
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name *string `pulumi:"name"`
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId string `pulumi:"neutronNetId"`
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId string `pulumi:"neutronSubnetId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region *string `pulumi:"region"`
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds []string `pulumi:"securityServiceIds"`
}

// The set of arguments for constructing a ShareNetwork resource.
type ShareNetworkArgs struct {
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description pulumi.StringPtrInput
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name pulumi.StringPtrInput
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId pulumi.StringInput
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId pulumi.StringInput
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region pulumi.StringPtrInput
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds pulumi.StringArrayInput
}

func (ShareNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareNetworkArgs)(nil)).Elem()
}
