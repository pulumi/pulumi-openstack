// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sharedfilesystem

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this resource to configure a share network.
//
// A share network stores network information that share servers can use when
// shares are created.
//
// ## Example Usage
//
// ## Import
//
// This resource can be imported by specifying the ID of the share network:
//
// ```sh
//
//	$ pulumi import openstack:sharedfilesystem/shareNetwork:ShareNetwork sharenetwork_1 id
//
// ```
type ShareNetwork struct {
	pulumi.CustomResourceState

	// The share network CIDR.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The IP version of the share network. Can either be 4 or 6.
	IpVersion pulumi.IntOutput `pulumi:"ipVersion"`
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name pulumi.StringOutput `pulumi:"name"`
	// The share network type. Can either be VLAN, VXLAN, GRE, or flat.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId pulumi.StringOutput `pulumi:"neutronNetId"`
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId pulumi.StringOutput `pulumi:"neutronSubnetId"`
	// The owner of the Share Network.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region pulumi.StringOutput `pulumi:"region"`
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds pulumi.StringArrayOutput `pulumi:"securityServiceIds"`
	// The share network segmentation ID.
	SegmentationId pulumi.IntOutput `pulumi:"segmentationId"`
}

// NewShareNetwork registers a new resource with the given unique name, arguments, and options.
func NewShareNetwork(ctx *pulumi.Context,
	name string, args *ShareNetworkArgs, opts ...pulumi.ResourceOption) (*ShareNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NeutronNetId == nil {
		return nil, errors.New("invalid value for required argument 'NeutronNetId'")
	}
	if args.NeutronSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'NeutronSubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ShareNetwork
	err := ctx.RegisterResource("openstack:sharedfilesystem/shareNetwork:ShareNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShareNetwork gets an existing ShareNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShareNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareNetworkState, opts ...pulumi.ResourceOption) (*ShareNetwork, error) {
	var resource ShareNetwork
	err := ctx.ReadResource("openstack:sharedfilesystem/shareNetwork:ShareNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShareNetwork resources.
type shareNetworkState struct {
	// The share network CIDR.
	Cidr *string `pulumi:"cidr"`
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description *string `pulumi:"description"`
	// The IP version of the share network. Can either be 4 or 6.
	IpVersion *int `pulumi:"ipVersion"`
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name *string `pulumi:"name"`
	// The share network type. Can either be VLAN, VXLAN, GRE, or flat.
	NetworkType *string `pulumi:"networkType"`
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId *string `pulumi:"neutronNetId"`
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId *string `pulumi:"neutronSubnetId"`
	// The owner of the Share Network.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region *string `pulumi:"region"`
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds []string `pulumi:"securityServiceIds"`
	// The share network segmentation ID.
	SegmentationId *int `pulumi:"segmentationId"`
}

type ShareNetworkState struct {
	// The share network CIDR.
	Cidr pulumi.StringPtrInput
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description pulumi.StringPtrInput
	// The IP version of the share network. Can either be 4 or 6.
	IpVersion pulumi.IntPtrInput
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name pulumi.StringPtrInput
	// The share network type. Can either be VLAN, VXLAN, GRE, or flat.
	NetworkType pulumi.StringPtrInput
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId pulumi.StringPtrInput
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId pulumi.StringPtrInput
	// The owner of the Share Network.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region pulumi.StringPtrInput
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds pulumi.StringArrayInput
	// The share network segmentation ID.
	SegmentationId pulumi.IntPtrInput
}

func (ShareNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareNetworkState)(nil)).Elem()
}

type shareNetworkArgs struct {
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description *string `pulumi:"description"`
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name *string `pulumi:"name"`
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId string `pulumi:"neutronNetId"`
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId string `pulumi:"neutronSubnetId"`
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region *string `pulumi:"region"`
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds []string `pulumi:"securityServiceIds"`
}

// The set of arguments for constructing a ShareNetwork resource.
type ShareNetworkArgs struct {
	// The human-readable description for the share network.
	// Changing this updates the description of the existing share network.
	Description pulumi.StringPtrInput
	// The name for the share network. Changing this updates the name
	// of the existing share network.
	Name pulumi.StringPtrInput
	// The UUID of a neutron network when setting up or updating
	// a share network. Changing this updates the existing share network if it's not used by
	// shares.
	NeutronNetId pulumi.StringInput
	// The UUID of the neutron subnet when setting up or
	// updating a share network. Changing this updates the existing share network if it's
	// not used by shares.
	NeutronSubnetId pulumi.StringInput
	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a share network. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// share network.
	Region pulumi.StringPtrInput
	// The list of security service IDs to associate with
	// the share network. The security service must be specified by ID and not name.
	SecurityServiceIds pulumi.StringArrayInput
}

func (ShareNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareNetworkArgs)(nil)).Elem()
}

type ShareNetworkInput interface {
	pulumi.Input

	ToShareNetworkOutput() ShareNetworkOutput
	ToShareNetworkOutputWithContext(ctx context.Context) ShareNetworkOutput
}

func (*ShareNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareNetwork)(nil)).Elem()
}

func (i *ShareNetwork) ToShareNetworkOutput() ShareNetworkOutput {
	return i.ToShareNetworkOutputWithContext(context.Background())
}

func (i *ShareNetwork) ToShareNetworkOutputWithContext(ctx context.Context) ShareNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareNetworkOutput)
}

func (i *ShareNetwork) ToOutput(ctx context.Context) pulumix.Output[*ShareNetwork] {
	return pulumix.Output[*ShareNetwork]{
		OutputState: i.ToShareNetworkOutputWithContext(ctx).OutputState,
	}
}

// ShareNetworkArrayInput is an input type that accepts ShareNetworkArray and ShareNetworkArrayOutput values.
// You can construct a concrete instance of `ShareNetworkArrayInput` via:
//
//	ShareNetworkArray{ ShareNetworkArgs{...} }
type ShareNetworkArrayInput interface {
	pulumi.Input

	ToShareNetworkArrayOutput() ShareNetworkArrayOutput
	ToShareNetworkArrayOutputWithContext(context.Context) ShareNetworkArrayOutput
}

type ShareNetworkArray []ShareNetworkInput

func (ShareNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShareNetwork)(nil)).Elem()
}

func (i ShareNetworkArray) ToShareNetworkArrayOutput() ShareNetworkArrayOutput {
	return i.ToShareNetworkArrayOutputWithContext(context.Background())
}

func (i ShareNetworkArray) ToShareNetworkArrayOutputWithContext(ctx context.Context) ShareNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareNetworkArrayOutput)
}

func (i ShareNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]*ShareNetwork] {
	return pulumix.Output[[]*ShareNetwork]{
		OutputState: i.ToShareNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

// ShareNetworkMapInput is an input type that accepts ShareNetworkMap and ShareNetworkMapOutput values.
// You can construct a concrete instance of `ShareNetworkMapInput` via:
//
//	ShareNetworkMap{ "key": ShareNetworkArgs{...} }
type ShareNetworkMapInput interface {
	pulumi.Input

	ToShareNetworkMapOutput() ShareNetworkMapOutput
	ToShareNetworkMapOutputWithContext(context.Context) ShareNetworkMapOutput
}

type ShareNetworkMap map[string]ShareNetworkInput

func (ShareNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShareNetwork)(nil)).Elem()
}

func (i ShareNetworkMap) ToShareNetworkMapOutput() ShareNetworkMapOutput {
	return i.ToShareNetworkMapOutputWithContext(context.Background())
}

func (i ShareNetworkMap) ToShareNetworkMapOutputWithContext(ctx context.Context) ShareNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareNetworkMapOutput)
}

func (i ShareNetworkMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ShareNetwork] {
	return pulumix.Output[map[string]*ShareNetwork]{
		OutputState: i.ToShareNetworkMapOutputWithContext(ctx).OutputState,
	}
}

type ShareNetworkOutput struct{ *pulumi.OutputState }

func (ShareNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareNetwork)(nil)).Elem()
}

func (o ShareNetworkOutput) ToShareNetworkOutput() ShareNetworkOutput {
	return o
}

func (o ShareNetworkOutput) ToShareNetworkOutputWithContext(ctx context.Context) ShareNetworkOutput {
	return o
}

func (o ShareNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[*ShareNetwork] {
	return pulumix.Output[*ShareNetwork]{
		OutputState: o.OutputState,
	}
}

// The share network CIDR.
func (o ShareNetworkOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// The human-readable description for the share network.
// Changing this updates the description of the existing share network.
func (o ShareNetworkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The IP version of the share network. Can either be 4 or 6.
func (o ShareNetworkOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.IntOutput { return v.IpVersion }).(pulumi.IntOutput)
}

// The name for the share network. Changing this updates the name
// of the existing share network.
func (o ShareNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The share network type. Can either be VLAN, VXLAN, GRE, or flat.
func (o ShareNetworkOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// The UUID of a neutron network when setting up or updating
// a share network. Changing this updates the existing share network if it's not used by
// shares.
func (o ShareNetworkOutput) NeutronNetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringOutput { return v.NeutronNetId }).(pulumi.StringOutput)
}

// The UUID of the neutron subnet when setting up or
// updating a share network. Changing this updates the existing share network if it's
// not used by shares.
func (o ShareNetworkOutput) NeutronSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringOutput { return v.NeutronSubnetId }).(pulumi.StringOutput)
}

// The owner of the Share Network.
func (o ShareNetworkOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 Shared File System client.
// A Shared File System client is needed to create a share network. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// share network.
func (o ShareNetworkOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The list of security service IDs to associate with
// the share network. The security service must be specified by ID and not name.
func (o ShareNetworkOutput) SecurityServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.StringArrayOutput { return v.SecurityServiceIds }).(pulumi.StringArrayOutput)
}

// The share network segmentation ID.
func (o ShareNetworkOutput) SegmentationId() pulumi.IntOutput {
	return o.ApplyT(func(v *ShareNetwork) pulumi.IntOutput { return v.SegmentationId }).(pulumi.IntOutput)
}

type ShareNetworkArrayOutput struct{ *pulumi.OutputState }

func (ShareNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShareNetwork)(nil)).Elem()
}

func (o ShareNetworkArrayOutput) ToShareNetworkArrayOutput() ShareNetworkArrayOutput {
	return o
}

func (o ShareNetworkArrayOutput) ToShareNetworkArrayOutputWithContext(ctx context.Context) ShareNetworkArrayOutput {
	return o
}

func (o ShareNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ShareNetwork] {
	return pulumix.Output[[]*ShareNetwork]{
		OutputState: o.OutputState,
	}
}

func (o ShareNetworkArrayOutput) Index(i pulumi.IntInput) ShareNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ShareNetwork {
		return vs[0].([]*ShareNetwork)[vs[1].(int)]
	}).(ShareNetworkOutput)
}

type ShareNetworkMapOutput struct{ *pulumi.OutputState }

func (ShareNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShareNetwork)(nil)).Elem()
}

func (o ShareNetworkMapOutput) ToShareNetworkMapOutput() ShareNetworkMapOutput {
	return o
}

func (o ShareNetworkMapOutput) ToShareNetworkMapOutputWithContext(ctx context.Context) ShareNetworkMapOutput {
	return o
}

func (o ShareNetworkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ShareNetwork] {
	return pulumix.Output[map[string]*ShareNetwork]{
		OutputState: o.OutputState,
	}
}

func (o ShareNetworkMapOutput) MapIndex(k pulumi.StringInput) ShareNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ShareNetwork {
		return vs[0].(map[string]*ShareNetwork)[vs[1].(string)]
	}).(ShareNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShareNetworkInput)(nil)).Elem(), &ShareNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareNetworkArrayInput)(nil)).Elem(), ShareNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareNetworkMapInput)(nil)).Elem(), ShareNetworkMap{})
	pulumi.RegisterOutputType(ShareNetworkOutput{})
	pulumi.RegisterOutputType(ShareNetworkArrayOutput{})
	pulumi.RegisterOutputType(ShareNetworkMapOutput{})
}
