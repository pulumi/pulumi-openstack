// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V2 load balancer flavor resource within OpenStack.
//
// > **Note:** This usually requires admin privileges.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"loadbalancer_topology": "ACTIVE_STANDBY",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			fp1, err := loadbalancer.NewFlavorprofileV2(ctx, "fp_1", &loadbalancer.FlavorprofileV2Args{
//				Name:         pulumi.String("test"),
//				ProviderName: pulumi.String("amphora"),
//				FlavorData:   pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancer.NewFlavorV2(ctx, "flavor_1", &loadbalancer.FlavorV2Args{
//				Name:            pulumi.String("test"),
//				Description:     pulumi.String("This is a test flavor"),
//				FlavorProfileId: fp1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// flavors can be imported using their `id`. Example:
//
// ```sh
// $ pulumi import openstack:loadbalancer/flavorV2:FlavorV2 flavor_1 2a0f2240-c5e6-41de-896d-e80d97428d6b
// ```
type FlavorV2 struct {
	pulumi.CustomResourceState

	// The description of the flavor. Changing this
	// updates the existing flavor.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the flavor is enabled or not. Defaults to `true`.
	// Changing this updates the existing flavor.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The flavorProfileId that the flavor
	// will use. Changing this creates a new flavor.
	FlavorProfileId pulumi.StringOutput `pulumi:"flavorProfileId"`
	// Name of the flavor. Changing this updates the existing
	// flavor.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB member. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB flavor.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewFlavorV2 registers a new resource with the given unique name, arguments, and options.
func NewFlavorV2(ctx *pulumi.Context,
	name string, args *FlavorV2Args, opts ...pulumi.ResourceOption) (*FlavorV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlavorProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlavorV2
	err := ctx.RegisterResource("openstack:loadbalancer/flavorV2:FlavorV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlavorV2 gets an existing FlavorV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlavorV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlavorV2State, opts ...pulumi.ResourceOption) (*FlavorV2, error) {
	var resource FlavorV2
	err := ctx.ReadResource("openstack:loadbalancer/flavorV2:FlavorV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlavorV2 resources.
type flavorV2State struct {
	// The description of the flavor. Changing this
	// updates the existing flavor.
	Description *string `pulumi:"description"`
	// Whether the flavor is enabled or not. Defaults to `true`.
	// Changing this updates the existing flavor.
	Enabled *bool `pulumi:"enabled"`
	// The flavorProfileId that the flavor
	// will use. Changing this creates a new flavor.
	FlavorProfileId *string `pulumi:"flavorProfileId"`
	// Name of the flavor. Changing this updates the existing
	// flavor.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB member. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB flavor.
	Region *string `pulumi:"region"`
}

type FlavorV2State struct {
	// The description of the flavor. Changing this
	// updates the existing flavor.
	Description pulumi.StringPtrInput
	// Whether the flavor is enabled or not. Defaults to `true`.
	// Changing this updates the existing flavor.
	Enabled pulumi.BoolPtrInput
	// The flavorProfileId that the flavor
	// will use. Changing this creates a new flavor.
	FlavorProfileId pulumi.StringPtrInput
	// Name of the flavor. Changing this updates the existing
	// flavor.
	Name pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB member. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB flavor.
	Region pulumi.StringPtrInput
}

func (FlavorV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*flavorV2State)(nil)).Elem()
}

type flavorV2Args struct {
	// The description of the flavor. Changing this
	// updates the existing flavor.
	Description *string `pulumi:"description"`
	// Whether the flavor is enabled or not. Defaults to `true`.
	// Changing this updates the existing flavor.
	Enabled *bool `pulumi:"enabled"`
	// The flavorProfileId that the flavor
	// will use. Changing this creates a new flavor.
	FlavorProfileId string `pulumi:"flavorProfileId"`
	// Name of the flavor. Changing this updates the existing
	// flavor.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB member. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB flavor.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a FlavorV2 resource.
type FlavorV2Args struct {
	// The description of the flavor. Changing this
	// updates the existing flavor.
	Description pulumi.StringPtrInput
	// Whether the flavor is enabled or not. Defaults to `true`.
	// Changing this updates the existing flavor.
	Enabled pulumi.BoolPtrInput
	// The flavorProfileId that the flavor
	// will use. Changing this creates a new flavor.
	FlavorProfileId pulumi.StringInput
	// Name of the flavor. Changing this updates the existing
	// flavor.
	Name pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB member. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB flavor.
	Region pulumi.StringPtrInput
}

func (FlavorV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*flavorV2Args)(nil)).Elem()
}

type FlavorV2Input interface {
	pulumi.Input

	ToFlavorV2Output() FlavorV2Output
	ToFlavorV2OutputWithContext(ctx context.Context) FlavorV2Output
}

func (*FlavorV2) ElementType() reflect.Type {
	return reflect.TypeOf((**FlavorV2)(nil)).Elem()
}

func (i *FlavorV2) ToFlavorV2Output() FlavorV2Output {
	return i.ToFlavorV2OutputWithContext(context.Background())
}

func (i *FlavorV2) ToFlavorV2OutputWithContext(ctx context.Context) FlavorV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorV2Output)
}

// FlavorV2ArrayInput is an input type that accepts FlavorV2Array and FlavorV2ArrayOutput values.
// You can construct a concrete instance of `FlavorV2ArrayInput` via:
//
//	FlavorV2Array{ FlavorV2Args{...} }
type FlavorV2ArrayInput interface {
	pulumi.Input

	ToFlavorV2ArrayOutput() FlavorV2ArrayOutput
	ToFlavorV2ArrayOutputWithContext(context.Context) FlavorV2ArrayOutput
}

type FlavorV2Array []FlavorV2Input

func (FlavorV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlavorV2)(nil)).Elem()
}

func (i FlavorV2Array) ToFlavorV2ArrayOutput() FlavorV2ArrayOutput {
	return i.ToFlavorV2ArrayOutputWithContext(context.Background())
}

func (i FlavorV2Array) ToFlavorV2ArrayOutputWithContext(ctx context.Context) FlavorV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorV2ArrayOutput)
}

// FlavorV2MapInput is an input type that accepts FlavorV2Map and FlavorV2MapOutput values.
// You can construct a concrete instance of `FlavorV2MapInput` via:
//
//	FlavorV2Map{ "key": FlavorV2Args{...} }
type FlavorV2MapInput interface {
	pulumi.Input

	ToFlavorV2MapOutput() FlavorV2MapOutput
	ToFlavorV2MapOutputWithContext(context.Context) FlavorV2MapOutput
}

type FlavorV2Map map[string]FlavorV2Input

func (FlavorV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlavorV2)(nil)).Elem()
}

func (i FlavorV2Map) ToFlavorV2MapOutput() FlavorV2MapOutput {
	return i.ToFlavorV2MapOutputWithContext(context.Background())
}

func (i FlavorV2Map) ToFlavorV2MapOutputWithContext(ctx context.Context) FlavorV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorV2MapOutput)
}

type FlavorV2Output struct{ *pulumi.OutputState }

func (FlavorV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FlavorV2)(nil)).Elem()
}

func (o FlavorV2Output) ToFlavorV2Output() FlavorV2Output {
	return o
}

func (o FlavorV2Output) ToFlavorV2OutputWithContext(ctx context.Context) FlavorV2Output {
	return o
}

// The description of the flavor. Changing this
// updates the existing flavor.
func (o FlavorV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlavorV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the flavor is enabled or not. Defaults to `true`.
// Changing this updates the existing flavor.
func (o FlavorV2Output) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *FlavorV2) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The flavorProfileId that the flavor
// will use. Changing this creates a new flavor.
func (o FlavorV2Output) FlavorProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlavorV2) pulumi.StringOutput { return v.FlavorProfileId }).(pulumi.StringOutput)
}

// Name of the flavor. Changing this updates the existing
// flavor.
func (o FlavorV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlavorV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an LB member. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// LB flavor.
func (o FlavorV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FlavorV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type FlavorV2ArrayOutput struct{ *pulumi.OutputState }

func (FlavorV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlavorV2)(nil)).Elem()
}

func (o FlavorV2ArrayOutput) ToFlavorV2ArrayOutput() FlavorV2ArrayOutput {
	return o
}

func (o FlavorV2ArrayOutput) ToFlavorV2ArrayOutputWithContext(ctx context.Context) FlavorV2ArrayOutput {
	return o
}

func (o FlavorV2ArrayOutput) Index(i pulumi.IntInput) FlavorV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlavorV2 {
		return vs[0].([]*FlavorV2)[vs[1].(int)]
	}).(FlavorV2Output)
}

type FlavorV2MapOutput struct{ *pulumi.OutputState }

func (FlavorV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlavorV2)(nil)).Elem()
}

func (o FlavorV2MapOutput) ToFlavorV2MapOutput() FlavorV2MapOutput {
	return o
}

func (o FlavorV2MapOutput) ToFlavorV2MapOutputWithContext(ctx context.Context) FlavorV2MapOutput {
	return o
}

func (o FlavorV2MapOutput) MapIndex(k pulumi.StringInput) FlavorV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlavorV2 {
		return vs[0].(map[string]*FlavorV2)[vs[1].(string)]
	}).(FlavorV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlavorV2Input)(nil)).Elem(), &FlavorV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlavorV2ArrayInput)(nil)).Elem(), FlavorV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlavorV2MapInput)(nil)).Elem(), FlavorV2Map{})
	pulumi.RegisterOutputType(FlavorV2Output{})
	pulumi.RegisterOutputType(FlavorV2ArrayOutput{})
	pulumi.RegisterOutputType(FlavorV2MapOutput{})
}
