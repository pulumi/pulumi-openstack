// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 pool resource within OpenStack.
type Pool struct {
	s *pulumi.ResourceState
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOpt) (*Pool, error) {
	if args == nil || args.LbMethod == nil {
		return nil, errors.New("missing required argument 'LbMethod'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminStateUp"] = nil
		inputs["description"] = nil
		inputs["lbMethod"] = nil
		inputs["listenerId"] = nil
		inputs["loadbalancerId"] = nil
		inputs["name"] = nil
		inputs["persistences"] = nil
		inputs["protocol"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["description"] = args.Description
		inputs["lbMethod"] = args.LbMethod
		inputs["listenerId"] = args.ListenerId
		inputs["loadbalancerId"] = args.LoadbalancerId
		inputs["name"] = args.Name
		inputs["persistences"] = args.Persistences
		inputs["protocol"] = args.Protocol
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
	}
	s, err := ctx.RegisterResource("openstack:loadbalancer/pool:Pool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pool{s: s}, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PoolState, opts ...pulumi.ResourceOpt) (*Pool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["description"] = state.Description
		inputs["lbMethod"] = state.LbMethod
		inputs["listenerId"] = state.ListenerId
		inputs["loadbalancerId"] = state.LoadbalancerId
		inputs["name"] = state.Name
		inputs["persistences"] = state.Persistences
		inputs["protocol"] = state.Protocol
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("openstack:loadbalancer/pool:Pool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Pool) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Pool) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The administrative state of the pool.
// A valid value is true (UP) or false (DOWN).
func (r *Pool) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// Human-readable description for the pool.
func (r *Pool) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The load balancing algorithm to
// distribute traffic to the pool's members. Must be one of
// ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP.
func (r *Pool) LbMethod() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lbMethod"])
}

// The Listener on which the members of the pool
// will be associated with. Changing this creates a new pool.
// Note:  One of LoadbalancerID or ListenerID must be provided.
func (r *Pool) ListenerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["listenerId"])
}

// The load balancer on which to provision this
// pool. Changing this creates a new pool.
// Note:  One of LoadbalancerID or ListenerID must be provided.
func (r *Pool) LoadbalancerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadbalancerId"])
}

// Human-readable name for the pool.
func (r *Pool) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Omit this field to prevent session persistence.  Indicates
// whether connections in the same session will be processed by the same Pool
// member or not. Changing this creates a new pool.
func (r *Pool) Persistences() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["persistences"])
}

// See Argument Reference above.
func (r *Pool) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an . If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// pool.
func (r *Pool) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Required for admins. The UUID of the tenant who owns
// the pool.  Only administrative users can specify a tenant UUID
// other than their own. Changing this creates a new pool.
func (r *Pool) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering Pool resources.
type PoolState struct {
	// The administrative state of the pool.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// Human-readable description for the pool.
	Description interface{}
	// The load balancing algorithm to
	// distribute traffic to the pool's members. Must be one of
	// ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP.
	LbMethod interface{}
	// The Listener on which the members of the pool
	// will be associated with. Changing this creates a new pool.
	// Note:  One of LoadbalancerID or ListenerID must be provided.
	ListenerId interface{}
	// The load balancer on which to provision this
	// pool. Changing this creates a new pool.
	// Note:  One of LoadbalancerID or ListenerID must be provided.
	LoadbalancerId interface{}
	// Human-readable name for the pool.
	Name interface{}
	// Omit this field to prevent session persistence.  Indicates
	// whether connections in the same session will be processed by the same Pool
	// member or not. Changing this creates a new pool.
	Persistences interface{}
	// See Argument Reference above.
	Protocol interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// pool.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the pool.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new pool.
	TenantId interface{}
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// The administrative state of the pool.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// Human-readable description for the pool.
	Description interface{}
	// The load balancing algorithm to
	// distribute traffic to the pool's members. Must be one of
	// ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP.
	LbMethod interface{}
	// The Listener on which the members of the pool
	// will be associated with. Changing this creates a new pool.
	// Note:  One of LoadbalancerID or ListenerID must be provided.
	ListenerId interface{}
	// The load balancer on which to provision this
	// pool. Changing this creates a new pool.
	// Note:  One of LoadbalancerID or ListenerID must be provided.
	LoadbalancerId interface{}
	// Human-readable name for the pool.
	Name interface{}
	// Omit this field to prevent session persistence.  Indicates
	// whether connections in the same session will be processed by the same Pool
	// member or not. Changing this creates a new pool.
	Persistences interface{}
	// See Argument Reference above.
	Protocol interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// pool.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the pool.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new pool.
	TenantId interface{}
}
