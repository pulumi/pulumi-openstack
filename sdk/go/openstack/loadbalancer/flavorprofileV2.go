// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V2 load balancer flavorprofile resource within OpenStack.
//
// > **Note:** This usually requires admin privileges.
//
// ## Example Usage
//
// ### Using jsonencode
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"loadbalancer_topology": "SINGLE",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = loadbalancer.NewFlavorprofileV2(ctx, "flavorprofile_1", &loadbalancer.FlavorprofileV2Args{
//				Name:         pulumi.String("amphora-single-profile"),
//				ProviderName: pulumi.String("amphora"),
//				FlavorData:   pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Using plain string
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.NewFlavorprofileV2(ctx, "flavorprofile_1", &loadbalancer.FlavorprofileV2Args{
//				Name:         pulumi.String("amphora-single-profile"),
//				ProviderName: pulumi.String("amphora"),
//				FlavorData:   pulumi.String("{\"loadbalancer_topology\": \"SINGLE\"}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// flavorprofiles can be imported using their `id`. Example:
//
// ```sh
// $ pulumi import openstack:loadbalancer/flavorprofileV2:FlavorprofileV2 flavorprofile_1 2a0f2240-c5e6-41de-896d-e80d97428d6b
// ```
type FlavorprofileV2 struct {
	pulumi.CustomResourceState

	// String that passes the flavorData for the flavorprofile.
	// The data that are allowed depend on the `providerName` that is passed. jsonencode
	// can be used for readability as shown in the example above.
	// Changing this updates the existing flavorprofile.
	FlavorData pulumi.StringOutput `pulumi:"flavorData"`
	// Name of the flavorprofile. Changing this updates the existing
	// flavorprofile.
	Name pulumi.StringOutput `pulumi:"name"`
	// The providerName that the flavorProfile will use.
	// Changing this updates the existing flavorprofile.
	ProviderName pulumi.StringOutput `pulumi:"providerName"`
	Region       pulumi.StringOutput `pulumi:"region"`
}

// NewFlavorprofileV2 registers a new resource with the given unique name, arguments, and options.
func NewFlavorprofileV2(ctx *pulumi.Context,
	name string, args *FlavorprofileV2Args, opts ...pulumi.ResourceOption) (*FlavorprofileV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlavorData == nil {
		return nil, errors.New("invalid value for required argument 'FlavorData'")
	}
	if args.ProviderName == nil {
		return nil, errors.New("invalid value for required argument 'ProviderName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("openstack:index/lbFlavorprofileV2:LbFlavorprofileV2"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlavorprofileV2
	err := ctx.RegisterResource("openstack:loadbalancer/flavorprofileV2:FlavorprofileV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlavorprofileV2 gets an existing FlavorprofileV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlavorprofileV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlavorprofileV2State, opts ...pulumi.ResourceOption) (*FlavorprofileV2, error) {
	var resource FlavorprofileV2
	err := ctx.ReadResource("openstack:loadbalancer/flavorprofileV2:FlavorprofileV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlavorprofileV2 resources.
type flavorprofileV2State struct {
	// String that passes the flavorData for the flavorprofile.
	// The data that are allowed depend on the `providerName` that is passed. jsonencode
	// can be used for readability as shown in the example above.
	// Changing this updates the existing flavorprofile.
	FlavorData *string `pulumi:"flavorData"`
	// Name of the flavorprofile. Changing this updates the existing
	// flavorprofile.
	Name *string `pulumi:"name"`
	// The providerName that the flavorProfile will use.
	// Changing this updates the existing flavorprofile.
	ProviderName *string `pulumi:"providerName"`
	Region       *string `pulumi:"region"`
}

type FlavorprofileV2State struct {
	// String that passes the flavorData for the flavorprofile.
	// The data that are allowed depend on the `providerName` that is passed. jsonencode
	// can be used for readability as shown in the example above.
	// Changing this updates the existing flavorprofile.
	FlavorData pulumi.StringPtrInput
	// Name of the flavorprofile. Changing this updates the existing
	// flavorprofile.
	Name pulumi.StringPtrInput
	// The providerName that the flavorProfile will use.
	// Changing this updates the existing flavorprofile.
	ProviderName pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
}

func (FlavorprofileV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*flavorprofileV2State)(nil)).Elem()
}

type flavorprofileV2Args struct {
	// String that passes the flavorData for the flavorprofile.
	// The data that are allowed depend on the `providerName` that is passed. jsonencode
	// can be used for readability as shown in the example above.
	// Changing this updates the existing flavorprofile.
	FlavorData string `pulumi:"flavorData"`
	// Name of the flavorprofile. Changing this updates the existing
	// flavorprofile.
	Name *string `pulumi:"name"`
	// The providerName that the flavorProfile will use.
	// Changing this updates the existing flavorprofile.
	ProviderName string  `pulumi:"providerName"`
	Region       *string `pulumi:"region"`
}

// The set of arguments for constructing a FlavorprofileV2 resource.
type FlavorprofileV2Args struct {
	// String that passes the flavorData for the flavorprofile.
	// The data that are allowed depend on the `providerName` that is passed. jsonencode
	// can be used for readability as shown in the example above.
	// Changing this updates the existing flavorprofile.
	FlavorData pulumi.StringInput
	// Name of the flavorprofile. Changing this updates the existing
	// flavorprofile.
	Name pulumi.StringPtrInput
	// The providerName that the flavorProfile will use.
	// Changing this updates the existing flavorprofile.
	ProviderName pulumi.StringInput
	Region       pulumi.StringPtrInput
}

func (FlavorprofileV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*flavorprofileV2Args)(nil)).Elem()
}

type FlavorprofileV2Input interface {
	pulumi.Input

	ToFlavorprofileV2Output() FlavorprofileV2Output
	ToFlavorprofileV2OutputWithContext(ctx context.Context) FlavorprofileV2Output
}

func (*FlavorprofileV2) ElementType() reflect.Type {
	return reflect.TypeOf((**FlavorprofileV2)(nil)).Elem()
}

func (i *FlavorprofileV2) ToFlavorprofileV2Output() FlavorprofileV2Output {
	return i.ToFlavorprofileV2OutputWithContext(context.Background())
}

func (i *FlavorprofileV2) ToFlavorprofileV2OutputWithContext(ctx context.Context) FlavorprofileV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorprofileV2Output)
}

// FlavorprofileV2ArrayInput is an input type that accepts FlavorprofileV2Array and FlavorprofileV2ArrayOutput values.
// You can construct a concrete instance of `FlavorprofileV2ArrayInput` via:
//
//	FlavorprofileV2Array{ FlavorprofileV2Args{...} }
type FlavorprofileV2ArrayInput interface {
	pulumi.Input

	ToFlavorprofileV2ArrayOutput() FlavorprofileV2ArrayOutput
	ToFlavorprofileV2ArrayOutputWithContext(context.Context) FlavorprofileV2ArrayOutput
}

type FlavorprofileV2Array []FlavorprofileV2Input

func (FlavorprofileV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlavorprofileV2)(nil)).Elem()
}

func (i FlavorprofileV2Array) ToFlavorprofileV2ArrayOutput() FlavorprofileV2ArrayOutput {
	return i.ToFlavorprofileV2ArrayOutputWithContext(context.Background())
}

func (i FlavorprofileV2Array) ToFlavorprofileV2ArrayOutputWithContext(ctx context.Context) FlavorprofileV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorprofileV2ArrayOutput)
}

// FlavorprofileV2MapInput is an input type that accepts FlavorprofileV2Map and FlavorprofileV2MapOutput values.
// You can construct a concrete instance of `FlavorprofileV2MapInput` via:
//
//	FlavorprofileV2Map{ "key": FlavorprofileV2Args{...} }
type FlavorprofileV2MapInput interface {
	pulumi.Input

	ToFlavorprofileV2MapOutput() FlavorprofileV2MapOutput
	ToFlavorprofileV2MapOutputWithContext(context.Context) FlavorprofileV2MapOutput
}

type FlavorprofileV2Map map[string]FlavorprofileV2Input

func (FlavorprofileV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlavorprofileV2)(nil)).Elem()
}

func (i FlavorprofileV2Map) ToFlavorprofileV2MapOutput() FlavorprofileV2MapOutput {
	return i.ToFlavorprofileV2MapOutputWithContext(context.Background())
}

func (i FlavorprofileV2Map) ToFlavorprofileV2MapOutputWithContext(ctx context.Context) FlavorprofileV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorprofileV2MapOutput)
}

type FlavorprofileV2Output struct{ *pulumi.OutputState }

func (FlavorprofileV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FlavorprofileV2)(nil)).Elem()
}

func (o FlavorprofileV2Output) ToFlavorprofileV2Output() FlavorprofileV2Output {
	return o
}

func (o FlavorprofileV2Output) ToFlavorprofileV2OutputWithContext(ctx context.Context) FlavorprofileV2Output {
	return o
}

// String that passes the flavorData for the flavorprofile.
// The data that are allowed depend on the `providerName` that is passed. jsonencode
// can be used for readability as shown in the example above.
// Changing this updates the existing flavorprofile.
func (o FlavorprofileV2Output) FlavorData() pulumi.StringOutput {
	return o.ApplyT(func(v *FlavorprofileV2) pulumi.StringOutput { return v.FlavorData }).(pulumi.StringOutput)
}

// Name of the flavorprofile. Changing this updates the existing
// flavorprofile.
func (o FlavorprofileV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlavorprofileV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The providerName that the flavorProfile will use.
// Changing this updates the existing flavorprofile.
func (o FlavorprofileV2Output) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlavorprofileV2) pulumi.StringOutput { return v.ProviderName }).(pulumi.StringOutput)
}

func (o FlavorprofileV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FlavorprofileV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type FlavorprofileV2ArrayOutput struct{ *pulumi.OutputState }

func (FlavorprofileV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlavorprofileV2)(nil)).Elem()
}

func (o FlavorprofileV2ArrayOutput) ToFlavorprofileV2ArrayOutput() FlavorprofileV2ArrayOutput {
	return o
}

func (o FlavorprofileV2ArrayOutput) ToFlavorprofileV2ArrayOutputWithContext(ctx context.Context) FlavorprofileV2ArrayOutput {
	return o
}

func (o FlavorprofileV2ArrayOutput) Index(i pulumi.IntInput) FlavorprofileV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlavorprofileV2 {
		return vs[0].([]*FlavorprofileV2)[vs[1].(int)]
	}).(FlavorprofileV2Output)
}

type FlavorprofileV2MapOutput struct{ *pulumi.OutputState }

func (FlavorprofileV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlavorprofileV2)(nil)).Elem()
}

func (o FlavorprofileV2MapOutput) ToFlavorprofileV2MapOutput() FlavorprofileV2MapOutput {
	return o
}

func (o FlavorprofileV2MapOutput) ToFlavorprofileV2MapOutputWithContext(ctx context.Context) FlavorprofileV2MapOutput {
	return o
}

func (o FlavorprofileV2MapOutput) MapIndex(k pulumi.StringInput) FlavorprofileV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlavorprofileV2 {
		return vs[0].(map[string]*FlavorprofileV2)[vs[1].(string)]
	}).(FlavorprofileV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlavorprofileV2Input)(nil)).Elem(), &FlavorprofileV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlavorprofileV2ArrayInput)(nil)).Elem(), FlavorprofileV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlavorprofileV2MapInput)(nil)).Elem(), FlavorprofileV2Map{})
	pulumi.RegisterOutputType(FlavorprofileV2Output{})
	pulumi.RegisterOutputType(FlavorprofileV2ArrayOutput{})
	pulumi.RegisterOutputType(FlavorprofileV2MapOutput{})
}
