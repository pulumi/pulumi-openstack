// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 member resource within OpenStack.
type Member struct {
	s *pulumi.ResourceState
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOpt) (*Member, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.PoolId == nil {
		return nil, errors.New("missing required argument 'PoolId'")
	}
	if args == nil || args.ProtocolPort == nil {
		return nil, errors.New("missing required argument 'ProtocolPort'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["adminStateUp"] = nil
		inputs["name"] = nil
		inputs["poolId"] = nil
		inputs["protocolPort"] = nil
		inputs["region"] = nil
		inputs["subnetId"] = nil
		inputs["tenantId"] = nil
		inputs["weight"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["name"] = args.Name
		inputs["poolId"] = args.PoolId
		inputs["protocolPort"] = args.ProtocolPort
		inputs["region"] = args.Region
		inputs["subnetId"] = args.SubnetId
		inputs["tenantId"] = args.TenantId
		inputs["weight"] = args.Weight
	}
	s, err := ctx.RegisterResource("openstack:loadbalancer/member:Member", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Member{s: s}, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MemberState, opts ...pulumi.ResourceOpt) (*Member, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["name"] = state.Name
		inputs["poolId"] = state.PoolId
		inputs["protocolPort"] = state.ProtocolPort
		inputs["region"] = state.Region
		inputs["subnetId"] = state.SubnetId
		inputs["tenantId"] = state.TenantId
		inputs["weight"] = state.Weight
	}
	s, err := ctx.ReadResource("openstack:loadbalancer/member:Member", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Member{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Member) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Member) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The IP address of the member to receive traffic from
// the load balancer. Changing this creates a new member.
func (r *Member) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// The administrative state of the member.
// A valid value is true (UP) or false (DOWN).
func (r *Member) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// Human-readable name for the member.
func (r *Member) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The id of the pool that this member will be
// assigned to.
func (r *Member) PoolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["poolId"])
}

// The port on which to listen for client traffic.
// Changing this creates a new member.
func (r *Member) ProtocolPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["protocolPort"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an . If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// member.
func (r *Member) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The subnet in which to access the member
func (r *Member) SubnetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetId"])
}

// Required for admins. The UUID of the tenant who owns
// the member.  Only administrative users can specify a tenant UUID
// other than their own. Changing this creates a new member.
func (r *Member) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// A positive integer value that indicates the relative
// portion of traffic that this member should receive from the pool. For
// example, a member with a weight of 10 receives five times as much traffic
// as a member with a weight of 2.
func (r *Member) Weight() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["weight"])
}

// Input properties used for looking up and filtering Member resources.
type MemberState struct {
	// The IP address of the member to receive traffic from
	// the load balancer. Changing this creates a new member.
	Address interface{}
	// The administrative state of the member.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// Human-readable name for the member.
	Name interface{}
	// The id of the pool that this member will be
	// assigned to.
	PoolId interface{}
	// The port on which to listen for client traffic.
	// Changing this creates a new member.
	ProtocolPort interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// member.
	Region interface{}
	// The subnet in which to access the member
	SubnetId interface{}
	// Required for admins. The UUID of the tenant who owns
	// the member.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new member.
	TenantId interface{}
	// A positive integer value that indicates the relative
	// portion of traffic that this member should receive from the pool. For
	// example, a member with a weight of 10 receives five times as much traffic
	// as a member with a weight of 2.
	Weight interface{}
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// The IP address of the member to receive traffic from
	// the load balancer. Changing this creates a new member.
	Address interface{}
	// The administrative state of the member.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// Human-readable name for the member.
	Name interface{}
	// The id of the pool that this member will be
	// assigned to.
	PoolId interface{}
	// The port on which to listen for client traffic.
	// Changing this creates a new member.
	ProtocolPort interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// member.
	Region interface{}
	// The subnet in which to access the member
	SubnetId interface{}
	// Required for admins. The UUID of the tenant who owns
	// the member.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new member.
	TenantId interface{}
	// A positive integer value that indicates the relative
	// portion of traffic that this member should receive from the pool. For
	// example, a member with a weight of 10 receives five times as much traffic
	// as a member with a weight of 2.
	Weight interface{}
}
