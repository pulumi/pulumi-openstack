// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 load balancer member resource within OpenStack.
type MemberV1 struct {
	s *pulumi.ResourceState
}

// NewMemberV1 registers a new resource with the given unique name, arguments, and options.
func NewMemberV1(ctx *pulumi.Context,
	name string, args *MemberV1Args, opts ...pulumi.ResourceOpt) (*MemberV1, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.PoolId == nil {
		return nil, errors.New("missing required argument 'PoolId'")
	}
	if args == nil || args.Port == nil {
		return nil, errors.New("missing required argument 'Port'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["adminStateUp"] = nil
		inputs["poolId"] = nil
		inputs["port"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
		inputs["weight"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["poolId"] = args.PoolId
		inputs["port"] = args.Port
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
		inputs["weight"] = args.Weight
	}
	s, err := ctx.RegisterResource("openstack:loadbalancer/memberV1:MemberV1", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MemberV1{s: s}, nil
}

// GetMemberV1 gets an existing MemberV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMemberV1(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MemberV1State, opts ...pulumi.ResourceOpt) (*MemberV1, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["poolId"] = state.PoolId
		inputs["port"] = state.Port
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
		inputs["weight"] = state.Weight
	}
	s, err := ctx.ReadResource("openstack:loadbalancer/memberV1:MemberV1", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MemberV1{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MemberV1) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MemberV1) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The IP address of the member. Changing this creates a
// new member.
func (r *MemberV1) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// The administrative state of the member.
// Acceptable values are 'true' and 'false'. Changing this value updates the
// state of the existing member.
func (r *MemberV1) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// The ID of the LB pool. Changing this creates a new
// member.
func (r *MemberV1) PoolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["poolId"])
}

// An integer representing the port on which the member is
// hosted. Changing this creates a new member.
func (r *MemberV1) Port() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["port"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an LB member. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// LB member.
func (r *MemberV1) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The owner of the member. Required if admin wants to
// create a member for another tenant. Changing this creates a new member.
func (r *MemberV1) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// The load balancing weight of the member. This is currently unable
// to be set through Terraform.
func (r *MemberV1) Weight() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["weight"])
}

// Input properties used for looking up and filtering MemberV1 resources.
type MemberV1State struct {
	// The IP address of the member. Changing this creates a
	// new member.
	Address interface{}
	// The administrative state of the member.
	// Acceptable values are 'true' and 'false'. Changing this value updates the
	// state of the existing member.
	AdminStateUp interface{}
	// The ID of the LB pool. Changing this creates a new
	// member.
	PoolId interface{}
	// An integer representing the port on which the member is
	// hosted. Changing this creates a new member.
	Port interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB member. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB member.
	Region interface{}
	// The owner of the member. Required if admin wants to
	// create a member for another tenant. Changing this creates a new member.
	TenantId interface{}
	// The load balancing weight of the member. This is currently unable
	// to be set through Terraform.
	Weight interface{}
}

// The set of arguments for constructing a MemberV1 resource.
type MemberV1Args struct {
	// The IP address of the member. Changing this creates a
	// new member.
	Address interface{}
	// The administrative state of the member.
	// Acceptable values are 'true' and 'false'. Changing this value updates the
	// state of the existing member.
	AdminStateUp interface{}
	// The ID of the LB pool. Changing this creates a new
	// member.
	PoolId interface{}
	// An integer representing the port on which the member is
	// hosted. Changing this creates a new member.
	Port interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB member. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB member.
	Region interface{}
	// The owner of the member. Required if admin wants to
	// create a member for another tenant. Changing this creates a new member.
	TenantId interface{}
	// The load balancing weight of the member. This is currently unable
	// to be set through Terraform.
	Weight interface{}
}
