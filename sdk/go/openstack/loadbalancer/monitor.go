// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 monitor resource within OpenStack.
type Monitor struct {
	s *pulumi.ResourceState
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOpt) (*Monitor, error) {
	if args == nil || args.Delay == nil {
		return nil, errors.New("missing required argument 'Delay'")
	}
	if args == nil || args.MaxRetries == nil {
		return nil, errors.New("missing required argument 'MaxRetries'")
	}
	if args == nil || args.PoolId == nil {
		return nil, errors.New("missing required argument 'PoolId'")
	}
	if args == nil || args.Timeout == nil {
		return nil, errors.New("missing required argument 'Timeout'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminStateUp"] = nil
		inputs["delay"] = nil
		inputs["expectedCodes"] = nil
		inputs["httpMethod"] = nil
		inputs["maxRetries"] = nil
		inputs["name"] = nil
		inputs["poolId"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
		inputs["timeout"] = nil
		inputs["type"] = nil
		inputs["urlPath"] = nil
	} else {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["delay"] = args.Delay
		inputs["expectedCodes"] = args.ExpectedCodes
		inputs["httpMethod"] = args.HttpMethod
		inputs["maxRetries"] = args.MaxRetries
		inputs["name"] = args.Name
		inputs["poolId"] = args.PoolId
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
		inputs["timeout"] = args.Timeout
		inputs["type"] = args.Type
		inputs["urlPath"] = args.UrlPath
	}
	s, err := ctx.RegisterResource("openstack:loadbalancer/monitor:Monitor", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Monitor{s: s}, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MonitorState, opts ...pulumi.ResourceOpt) (*Monitor, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["delay"] = state.Delay
		inputs["expectedCodes"] = state.ExpectedCodes
		inputs["httpMethod"] = state.HttpMethod
		inputs["maxRetries"] = state.MaxRetries
		inputs["name"] = state.Name
		inputs["poolId"] = state.PoolId
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
		inputs["timeout"] = state.Timeout
		inputs["type"] = state.Type
		inputs["urlPath"] = state.UrlPath
	}
	s, err := ctx.ReadResource("openstack:loadbalancer/monitor:Monitor", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Monitor{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Monitor) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Monitor) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The administrative state of the monitor.
// A valid value is true (UP) or false (DOWN).
func (r *Monitor) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// The time, in seconds, between sending probes to members.
func (r *Monitor) Delay() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["delay"])
}

// Required for HTTP(S) types. Expected HTTP codes
// for a passing HTTP(S) monitor. You can either specify a single status like
// "200", or a range like "200-202".
func (r *Monitor) ExpectedCodes() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expectedCodes"])
}

// Required for HTTP(S) types. The HTTP method used
// for requests by the monitor. If this attribute is not specified, it
// defaults to "GET".
func (r *Monitor) HttpMethod() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["httpMethod"])
}

// Number of permissible ping failures before
// changing the member's status to INACTIVE. Must be a number between 1
// and 10..
func (r *Monitor) MaxRetries() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxRetries"])
}

// The Name of the Monitor.
func (r *Monitor) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The id of the pool that this monitor will be assigned to.
func (r *Monitor) PoolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["poolId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an . If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// monitor.
func (r *Monitor) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Required for admins. The UUID of the tenant who owns
// the monitor.  Only administrative users can specify a tenant UUID
// other than their own. Changing this creates a new monitor.
func (r *Monitor) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Maximum number of seconds for a monitor to wait for a
// ping reply before it times out. The value must be less than the delay
// value.
func (r *Monitor) Timeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeout"])
}

// The type of probe, which is PING, TCP, HTTP, or HTTPS,
// that is sent by the load balancer to verify the member state. Changing this
// creates a new monitor.
func (r *Monitor) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Required for HTTP(S) types. URI path that will be
// accessed if monitor type is HTTP or HTTPS.
func (r *Monitor) UrlPath() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["urlPath"])
}

// Input properties used for looking up and filtering Monitor resources.
type MonitorState struct {
	// The administrative state of the monitor.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// The time, in seconds, between sending probes to members.
	Delay interface{}
	// Required for HTTP(S) types. Expected HTTP codes
	// for a passing HTTP(S) monitor. You can either specify a single status like
	// "200", or a range like "200-202".
	ExpectedCodes interface{}
	// Required for HTTP(S) types. The HTTP method used
	// for requests by the monitor. If this attribute is not specified, it
	// defaults to "GET".
	HttpMethod interface{}
	// Number of permissible ping failures before
	// changing the member's status to INACTIVE. Must be a number between 1
	// and 10..
	MaxRetries interface{}
	// The Name of the Monitor.
	Name interface{}
	// The id of the pool that this monitor will be assigned to.
	PoolId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// monitor.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the monitor.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new monitor.
	TenantId interface{}
	// Maximum number of seconds for a monitor to wait for a
	// ping reply before it times out. The value must be less than the delay
	// value.
	Timeout interface{}
	// The type of probe, which is PING, TCP, HTTP, or HTTPS,
	// that is sent by the load balancer to verify the member state. Changing this
	// creates a new monitor.
	Type interface{}
	// Required for HTTP(S) types. URI path that will be
	// accessed if monitor type is HTTP or HTTPS.
	UrlPath interface{}
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// The administrative state of the monitor.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// The time, in seconds, between sending probes to members.
	Delay interface{}
	// Required for HTTP(S) types. Expected HTTP codes
	// for a passing HTTP(S) monitor. You can either specify a single status like
	// "200", or a range like "200-202".
	ExpectedCodes interface{}
	// Required for HTTP(S) types. The HTTP method used
	// for requests by the monitor. If this attribute is not specified, it
	// defaults to "GET".
	HttpMethod interface{}
	// Number of permissible ping failures before
	// changing the member's status to INACTIVE. Must be a number between 1
	// and 10..
	MaxRetries interface{}
	// The Name of the Monitor.
	Name interface{}
	// The id of the pool that this monitor will be assigned to.
	PoolId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// monitor.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the monitor.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new monitor.
	TenantId interface{}
	// Maximum number of seconds for a monitor to wait for a
	// ping reply before it times out. The value must be less than the delay
	// value.
	Timeout interface{}
	// The type of probe, which is PING, TCP, HTTP, or HTTPS,
	// that is sent by the load balancer to verify the member state. Changing this
	// creates a new monitor.
	Type interface{}
	// Required for HTTP(S) types. URI path that will be
	// accessed if monitor type is HTTP or HTTPS.
	UrlPath interface{}
}
