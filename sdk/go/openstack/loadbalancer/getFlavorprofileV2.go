// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the ID of an OpenStack Load Balancer flavorprofile.
//
// > **Note:** This usually requires admin privileges.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.LookupFlavorprofileV2(ctx, &loadbalancer.LookupFlavorprofileV2Args{
//				Name: pulumi.StringRef("flavorprofile_1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFlavorprofileV2(ctx *pulumi.Context, args *LookupFlavorprofileV2Args, opts ...pulumi.InvokeOption) (*LookupFlavorprofileV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFlavorprofileV2Result
	err := ctx.Invoke("openstack:loadbalancer/getFlavorprofileV2:getFlavorprofileV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlavorprofileV2.
type LookupFlavorprofileV2Args struct {
	// The ID of the flavorprofile. Conflicts with `name` and
	// `providerName`.
	FlavorprofileId *string `pulumi:"flavorprofileId"`
	// The name of the flavorprofile. Conflicts with `flavorprofileId`.
	Name *string `pulumi:"name"`
	// The name of the provider that the flavorprofile uses. Conflicts
	// with `flavorprofileId`.
	ProviderName *string `pulumi:"providerName"`
	// The region in which to obtain the V2 Load Balancer client.
	// If omitted, the `region` argument of the provider is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getFlavorprofileV2.
type LookupFlavorprofileV2Result struct {
	// Extra data of the flavorprofile depending on the provider.
	FlavorData      string `pulumi:"flavorData"`
	FlavorprofileId string `pulumi:"flavorprofileId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the flavorprofile.
	Name string `pulumi:"name"`
	// The name of the provider that the flavorprofile uses.
	ProviderName string `pulumi:"providerName"`
	Region       string `pulumi:"region"`
}

func LookupFlavorprofileV2Output(ctx *pulumi.Context, args LookupFlavorprofileV2OutputArgs, opts ...pulumi.InvokeOption) LookupFlavorprofileV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFlavorprofileV2ResultOutput, error) {
			args := v.(LookupFlavorprofileV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("openstack:loadbalancer/getFlavorprofileV2:getFlavorprofileV2", args, LookupFlavorprofileV2ResultOutput{}, options).(LookupFlavorprofileV2ResultOutput), nil
		}).(LookupFlavorprofileV2ResultOutput)
}

// A collection of arguments for invoking getFlavorprofileV2.
type LookupFlavorprofileV2OutputArgs struct {
	// The ID of the flavorprofile. Conflicts with `name` and
	// `providerName`.
	FlavorprofileId pulumi.StringPtrInput `pulumi:"flavorprofileId"`
	// The name of the flavorprofile. Conflicts with `flavorprofileId`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the provider that the flavorprofile uses. Conflicts
	// with `flavorprofileId`.
	ProviderName pulumi.StringPtrInput `pulumi:"providerName"`
	// The region in which to obtain the V2 Load Balancer client.
	// If omitted, the `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupFlavorprofileV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFlavorprofileV2Args)(nil)).Elem()
}

// A collection of values returned by getFlavorprofileV2.
type LookupFlavorprofileV2ResultOutput struct{ *pulumi.OutputState }

func (LookupFlavorprofileV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFlavorprofileV2Result)(nil)).Elem()
}

func (o LookupFlavorprofileV2ResultOutput) ToLookupFlavorprofileV2ResultOutput() LookupFlavorprofileV2ResultOutput {
	return o
}

func (o LookupFlavorprofileV2ResultOutput) ToLookupFlavorprofileV2ResultOutputWithContext(ctx context.Context) LookupFlavorprofileV2ResultOutput {
	return o
}

// Extra data of the flavorprofile depending on the provider.
func (o LookupFlavorprofileV2ResultOutput) FlavorData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlavorprofileV2Result) string { return v.FlavorData }).(pulumi.StringOutput)
}

func (o LookupFlavorprofileV2ResultOutput) FlavorprofileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlavorprofileV2Result) string { return v.FlavorprofileId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFlavorprofileV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlavorprofileV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the flavorprofile.
func (o LookupFlavorprofileV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlavorprofileV2Result) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the provider that the flavorprofile uses.
func (o LookupFlavorprofileV2ResultOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlavorprofileV2Result) string { return v.ProviderName }).(pulumi.StringOutput)
}

func (o LookupFlavorprofileV2ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlavorprofileV2Result) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFlavorprofileV2ResultOutput{})
}
