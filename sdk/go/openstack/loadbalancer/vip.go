// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V1 load balancer vip resource within OpenStack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.NewVip(ctx, "vip1", &loadbalancer.VipArgs{
//				PoolId:   pulumi.String("67890"),
//				Port:     pulumi.Int(80),
//				Protocol: pulumi.String("HTTP"),
//				SubnetId: pulumi.String("12345"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load Balancer VIPs can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import openstack:loadbalancer/vip:Vip vip_1 50e16b26-89c1-475e-a492-76167182511e
//
// ```
type Vip struct {
	pulumi.CustomResourceState

	// The IP address of the vip. Changing this creates a new
	// vip.
	Address pulumi.StringOutput `pulumi:"address"`
	// The administrative state of the vip.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing vip.
	AdminStateUp pulumi.BoolOutput `pulumi:"adminStateUp"`
	// The maximum number of connections allowed for the
	// vip. Default is -1, meaning no limit. Changing this updates the connLimit
	// of the existing vip.
	ConnLimit pulumi.IntOutput `pulumi:"connLimit"`
	// Human-readable description for the vip. Changing
	// this updates the description of the existing vip.
	Description pulumi.StringOutput `pulumi:"description"`
	// A *Networking* Floating IP that will be associated
	// with the vip. The Floating IP must be provisioned already.
	FloatingIp pulumi.StringPtrOutput `pulumi:"floatingIp"`
	// The name of the vip. Changing this updates the name of
	// the existing vip.
	Name pulumi.StringOutput `pulumi:"name"`
	// Omit this field to prevent session persistence.
	// The persistence object structure is documented below. Changing this updates
	// the persistence of the existing vip.
	Persistence pulumi.MapOutput `pulumi:"persistence"`
	// The ID of the pool with which the vip is associated.
	// Changing this updates the poolId of the existing vip.
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing
	// this creates a new vip.
	Port pulumi.IntOutput `pulumi:"port"`
	// Port UUID for this VIP at associated floating IP (if any).
	PortId pulumi.StringOutput `pulumi:"portId"`
	// The protocol - can be either 'TCP, 'HTTP', or
	// HTTPS'. Changing this creates a new vip.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VIP. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// VIP.
	Region pulumi.StringOutput `pulumi:"region"`
	// The network on which to allocate the vip's address. A
	// tenant can only create vips on networks authorized by policy (e.g. networks
	// that belong to them or networks that are shared). Changing this creates a
	// new vip.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The owner of the vip. Required if admin wants to
	// create a vip member for another tenant. Changing this creates a new vip.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewVip registers a new resource with the given unique name, arguments, and options.
func NewVip(ctx *pulumi.Context,
	name string, args *VipArgs, opts ...pulumi.ResourceOption) (*Vip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vip
	err := ctx.RegisterResource("openstack:loadbalancer/vip:Vip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVip gets an existing Vip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VipState, opts ...pulumi.ResourceOption) (*Vip, error) {
	var resource Vip
	err := ctx.ReadResource("openstack:loadbalancer/vip:Vip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vip resources.
type vipState struct {
	// The IP address of the vip. Changing this creates a new
	// vip.
	Address *string `pulumi:"address"`
	// The administrative state of the vip.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing vip.
	AdminStateUp *bool `pulumi:"adminStateUp"`
	// The maximum number of connections allowed for the
	// vip. Default is -1, meaning no limit. Changing this updates the connLimit
	// of the existing vip.
	ConnLimit *int `pulumi:"connLimit"`
	// Human-readable description for the vip. Changing
	// this updates the description of the existing vip.
	Description *string `pulumi:"description"`
	// A *Networking* Floating IP that will be associated
	// with the vip. The Floating IP must be provisioned already.
	FloatingIp *string `pulumi:"floatingIp"`
	// The name of the vip. Changing this updates the name of
	// the existing vip.
	Name *string `pulumi:"name"`
	// Omit this field to prevent session persistence.
	// The persistence object structure is documented below. Changing this updates
	// the persistence of the existing vip.
	Persistence map[string]interface{} `pulumi:"persistence"`
	// The ID of the pool with which the vip is associated.
	// Changing this updates the poolId of the existing vip.
	PoolId *string `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing
	// this creates a new vip.
	Port *int `pulumi:"port"`
	// Port UUID for this VIP at associated floating IP (if any).
	PortId *string `pulumi:"portId"`
	// The protocol - can be either 'TCP, 'HTTP', or
	// HTTPS'. Changing this creates a new vip.
	Protocol *string `pulumi:"protocol"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VIP. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// VIP.
	Region *string `pulumi:"region"`
	// The network on which to allocate the vip's address. A
	// tenant can only create vips on networks authorized by policy (e.g. networks
	// that belong to them or networks that are shared). Changing this creates a
	// new vip.
	SubnetId *string `pulumi:"subnetId"`
	// The owner of the vip. Required if admin wants to
	// create a vip member for another tenant. Changing this creates a new vip.
	TenantId *string `pulumi:"tenantId"`
}

type VipState struct {
	// The IP address of the vip. Changing this creates a new
	// vip.
	Address pulumi.StringPtrInput
	// The administrative state of the vip.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing vip.
	AdminStateUp pulumi.BoolPtrInput
	// The maximum number of connections allowed for the
	// vip. Default is -1, meaning no limit. Changing this updates the connLimit
	// of the existing vip.
	ConnLimit pulumi.IntPtrInput
	// Human-readable description for the vip. Changing
	// this updates the description of the existing vip.
	Description pulumi.StringPtrInput
	// A *Networking* Floating IP that will be associated
	// with the vip. The Floating IP must be provisioned already.
	FloatingIp pulumi.StringPtrInput
	// The name of the vip. Changing this updates the name of
	// the existing vip.
	Name pulumi.StringPtrInput
	// Omit this field to prevent session persistence.
	// The persistence object structure is documented below. Changing this updates
	// the persistence of the existing vip.
	Persistence pulumi.MapInput
	// The ID of the pool with which the vip is associated.
	// Changing this updates the poolId of the existing vip.
	PoolId pulumi.StringPtrInput
	// The port on which to listen for client traffic. Changing
	// this creates a new vip.
	Port pulumi.IntPtrInput
	// Port UUID for this VIP at associated floating IP (if any).
	PortId pulumi.StringPtrInput
	// The protocol - can be either 'TCP, 'HTTP', or
	// HTTPS'. Changing this creates a new vip.
	Protocol pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VIP. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// VIP.
	Region pulumi.StringPtrInput
	// The network on which to allocate the vip's address. A
	// tenant can only create vips on networks authorized by policy (e.g. networks
	// that belong to them or networks that are shared). Changing this creates a
	// new vip.
	SubnetId pulumi.StringPtrInput
	// The owner of the vip. Required if admin wants to
	// create a vip member for another tenant. Changing this creates a new vip.
	TenantId pulumi.StringPtrInput
}

func (VipState) ElementType() reflect.Type {
	return reflect.TypeOf((*vipState)(nil)).Elem()
}

type vipArgs struct {
	// The IP address of the vip. Changing this creates a new
	// vip.
	Address *string `pulumi:"address"`
	// The administrative state of the vip.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing vip.
	AdminStateUp *bool `pulumi:"adminStateUp"`
	// The maximum number of connections allowed for the
	// vip. Default is -1, meaning no limit. Changing this updates the connLimit
	// of the existing vip.
	ConnLimit *int `pulumi:"connLimit"`
	// Human-readable description for the vip. Changing
	// this updates the description of the existing vip.
	Description *string `pulumi:"description"`
	// A *Networking* Floating IP that will be associated
	// with the vip. The Floating IP must be provisioned already.
	FloatingIp *string `pulumi:"floatingIp"`
	// The name of the vip. Changing this updates the name of
	// the existing vip.
	Name *string `pulumi:"name"`
	// Omit this field to prevent session persistence.
	// The persistence object structure is documented below. Changing this updates
	// the persistence of the existing vip.
	Persistence map[string]interface{} `pulumi:"persistence"`
	// The ID of the pool with which the vip is associated.
	// Changing this updates the poolId of the existing vip.
	PoolId string `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing
	// this creates a new vip.
	Port int `pulumi:"port"`
	// The protocol - can be either 'TCP, 'HTTP', or
	// HTTPS'. Changing this creates a new vip.
	Protocol string `pulumi:"protocol"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VIP. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// VIP.
	Region *string `pulumi:"region"`
	// The network on which to allocate the vip's address. A
	// tenant can only create vips on networks authorized by policy (e.g. networks
	// that belong to them or networks that are shared). Changing this creates a
	// new vip.
	SubnetId string `pulumi:"subnetId"`
	// The owner of the vip. Required if admin wants to
	// create a vip member for another tenant. Changing this creates a new vip.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a Vip resource.
type VipArgs struct {
	// The IP address of the vip. Changing this creates a new
	// vip.
	Address pulumi.StringPtrInput
	// The administrative state of the vip.
	// Acceptable values are "true" and "false". Changing this value updates the
	// state of the existing vip.
	AdminStateUp pulumi.BoolPtrInput
	// The maximum number of connections allowed for the
	// vip. Default is -1, meaning no limit. Changing this updates the connLimit
	// of the existing vip.
	ConnLimit pulumi.IntPtrInput
	// Human-readable description for the vip. Changing
	// this updates the description of the existing vip.
	Description pulumi.StringPtrInput
	// A *Networking* Floating IP that will be associated
	// with the vip. The Floating IP must be provisioned already.
	FloatingIp pulumi.StringPtrInput
	// The name of the vip. Changing this updates the name of
	// the existing vip.
	Name pulumi.StringPtrInput
	// Omit this field to prevent session persistence.
	// The persistence object structure is documented below. Changing this updates
	// the persistence of the existing vip.
	Persistence pulumi.MapInput
	// The ID of the pool with which the vip is associated.
	// Changing this updates the poolId of the existing vip.
	PoolId pulumi.StringInput
	// The port on which to listen for client traffic. Changing
	// this creates a new vip.
	Port pulumi.IntInput
	// The protocol - can be either 'TCP, 'HTTP', or
	// HTTPS'. Changing this creates a new vip.
	Protocol pulumi.StringInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VIP. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// VIP.
	Region pulumi.StringPtrInput
	// The network on which to allocate the vip's address. A
	// tenant can only create vips on networks authorized by policy (e.g. networks
	// that belong to them or networks that are shared). Changing this creates a
	// new vip.
	SubnetId pulumi.StringInput
	// The owner of the vip. Required if admin wants to
	// create a vip member for another tenant. Changing this creates a new vip.
	TenantId pulumi.StringPtrInput
}

func (VipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vipArgs)(nil)).Elem()
}

type VipInput interface {
	pulumi.Input

	ToVipOutput() VipOutput
	ToVipOutputWithContext(ctx context.Context) VipOutput
}

func (*Vip) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (i *Vip) ToVipOutput() VipOutput {
	return i.ToVipOutputWithContext(context.Background())
}

func (i *Vip) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipOutput)
}

// VipArrayInput is an input type that accepts VipArray and VipArrayOutput values.
// You can construct a concrete instance of `VipArrayInput` via:
//
//	VipArray{ VipArgs{...} }
type VipArrayInput interface {
	pulumi.Input

	ToVipArrayOutput() VipArrayOutput
	ToVipArrayOutputWithContext(context.Context) VipArrayOutput
}

type VipArray []VipInput

func (VipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (i VipArray) ToVipArrayOutput() VipArrayOutput {
	return i.ToVipArrayOutputWithContext(context.Background())
}

func (i VipArray) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipArrayOutput)
}

// VipMapInput is an input type that accepts VipMap and VipMapOutput values.
// You can construct a concrete instance of `VipMapInput` via:
//
//	VipMap{ "key": VipArgs{...} }
type VipMapInput interface {
	pulumi.Input

	ToVipMapOutput() VipMapOutput
	ToVipMapOutputWithContext(context.Context) VipMapOutput
}

type VipMap map[string]VipInput

func (VipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (i VipMap) ToVipMapOutput() VipMapOutput {
	return i.ToVipMapOutputWithContext(context.Background())
}

func (i VipMap) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipMapOutput)
}

type VipOutput struct{ *pulumi.OutputState }

func (VipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (o VipOutput) ToVipOutput() VipOutput {
	return o
}

func (o VipOutput) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return o
}

// The IP address of the vip. Changing this creates a new
// vip.
func (o VipOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The administrative state of the vip.
// Acceptable values are "true" and "false". Changing this value updates the
// state of the existing vip.
func (o VipOutput) AdminStateUp() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vip) pulumi.BoolOutput { return v.AdminStateUp }).(pulumi.BoolOutput)
}

// The maximum number of connections allowed for the
// vip. Default is -1, meaning no limit. Changing this updates the connLimit
// of the existing vip.
func (o VipOutput) ConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.ConnLimit }).(pulumi.IntOutput)
}

// Human-readable description for the vip. Changing
// this updates the description of the existing vip.
func (o VipOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A *Networking* Floating IP that will be associated
// with the vip. The Floating IP must be provisioned already.
func (o VipOutput) FloatingIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringPtrOutput { return v.FloatingIp }).(pulumi.StringPtrOutput)
}

// The name of the vip. Changing this updates the name of
// the existing vip.
func (o VipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Omit this field to prevent session persistence.
// The persistence object structure is documented below. Changing this updates
// the persistence of the existing vip.
func (o VipOutput) Persistence() pulumi.MapOutput {
	return o.ApplyT(func(v *Vip) pulumi.MapOutput { return v.Persistence }).(pulumi.MapOutput)
}

// The ID of the pool with which the vip is associated.
// Changing this updates the poolId of the existing vip.
func (o VipOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// The port on which to listen for client traffic. Changing
// this creates a new vip.
func (o VipOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Port UUID for this VIP at associated floating IP (if any).
func (o VipOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// The protocol - can be either 'TCP, 'HTTP', or
// HTTPS'. Changing this creates a new vip.
func (o VipOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a VIP. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// VIP.
func (o VipOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The network on which to allocate the vip's address. A
// tenant can only create vips on networks authorized by policy (e.g. networks
// that belong to them or networks that are shared). Changing this creates a
// new vip.
func (o VipOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The owner of the vip. Required if admin wants to
// create a vip member for another tenant. Changing this creates a new vip.
func (o VipOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type VipArrayOutput struct{ *pulumi.OutputState }

func (VipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (o VipArrayOutput) ToVipArrayOutput() VipArrayOutput {
	return o
}

func (o VipArrayOutput) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return o
}

func (o VipArrayOutput) Index(i pulumi.IntInput) VipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].([]*Vip)[vs[1].(int)]
	}).(VipOutput)
}

type VipMapOutput struct{ *pulumi.OutputState }

func (VipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (o VipMapOutput) ToVipMapOutput() VipMapOutput {
	return o
}

func (o VipMapOutput) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return o
}

func (o VipMapOutput) MapIndex(k pulumi.StringInput) VipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].(map[string]*Vip)[vs[1].(string)]
	}).(VipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VipInput)(nil)).Elem(), &Vip{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipArrayInput)(nil)).Elem(), VipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipMapInput)(nil)).Elem(), VipMap{})
	pulumi.RegisterOutputType(VipOutput{})
	pulumi.RegisterOutputType(VipArrayOutput{})
	pulumi.RegisterOutputType(VipMapOutput{})
}
