// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V1 load balancer pool resource within OpenStack.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.NewPoolV1(ctx, "pool1", &loadbalancer.PoolV1Args{
//				LbMethod:   pulumi.String("ROUND_ROBIN"),
//				LbProvider: pulumi.String("haproxy"),
//				MonitorIds: pulumi.StringArray{
//					pulumi.String("67890"),
//				},
//				Protocol: pulumi.String("HTTP"),
//				SubnetId: pulumi.String("12345"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Complete Load Balancing Stack Example
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/compute"
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/networking"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			network1, err := networking.NewNetwork(ctx, "network1", &networking.NetworkArgs{
//				AdminStateUp: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			subnet1, err := networking.NewSubnet(ctx, "subnet1", &networking.SubnetArgs{
//				NetworkId: network1.ID(),
//				Cidr:      pulumi.String("192.168.199.0/24"),
//				IpVersion: pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			secgroup1, err := compute.NewSecGroup(ctx, "secgroup1", &compute.SecGroupArgs{
//				Description: pulumi.String("Rules for secgroup_1"),
//				Rules: compute.SecGroupRuleArray{
//					&compute.SecGroupRuleArgs{
//						FromPort:   -1,
//						ToPort:     -1,
//						IpProtocol: pulumi.String("icmp"),
//						Cidr:       pulumi.String("0.0.0.0/0"),
//					},
//					&compute.SecGroupRuleArgs{
//						FromPort:   pulumi.Int(80),
//						ToPort:     pulumi.Int(80),
//						IpProtocol: pulumi.String("tcp"),
//						Cidr:       pulumi.String("0.0.0.0/0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			instance1, err := compute.NewInstance(ctx, "instance1", &compute.InstanceArgs{
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("default"),
//					secgroup1.Name,
//				},
//				Networks: compute.InstanceNetworkArray{
//					&compute.InstanceNetworkArgs{
//						Uuid: network1.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			instance2, err := compute.NewInstance(ctx, "instance2", &compute.InstanceArgs{
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("default"),
//					secgroup1.Name,
//				},
//				Networks: compute.InstanceNetworkArray{
//					&compute.InstanceNetworkArgs{
//						Uuid: network1.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			monitor1, err := loadbalancer.NewMonitorV1(ctx, "monitor1", &loadbalancer.MonitorV1Args{
//				Type:         pulumi.String("TCP"),
//				Delay:        pulumi.Int(30),
//				Timeout:      pulumi.Int(5),
//				MaxRetries:   pulumi.Int(3),
//				AdminStateUp: pulumi.String("true"),
//			})
//			if err != nil {
//				return err
//			}
//			pool1, err := loadbalancer.NewPoolV1(ctx, "pool1", &loadbalancer.PoolV1Args{
//				Protocol: pulumi.String("TCP"),
//				SubnetId: subnet1.ID(),
//				LbMethod: pulumi.String("ROUND_ROBIN"),
//				MonitorIds: pulumi.StringArray{
//					monitor1.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancer.NewMemberV1(ctx, "member1", &loadbalancer.MemberV1Args{
//				PoolId:  pool1.ID(),
//				Address: instance1.AccessIpV4,
//				Port:    pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancer.NewMemberV1(ctx, "member2", &loadbalancer.MemberV1Args{
//				PoolId:  pool1.ID(),
//				Address: instance2.AccessIpV4,
//				Port:    pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancer.NewVip(ctx, "vip1", &loadbalancer.VipArgs{
//				SubnetId: subnet1.ID(),
//				Protocol: pulumi.String("TCP"),
//				Port:     pulumi.Int(80),
//				PoolId:   pool1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Notes
//
// The `member` block is deprecated in favor of the `loadbalancer.MemberV1` resource.
//
// ## Import
//
// Load Balancer Pools can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import openstack:loadbalancer/poolV1:PoolV1 pool_1 b255e6ba-02ad-43e6-8951-3428ca26b713
// ```
type PoolV1 struct {
	pulumi.CustomResourceState

	// The algorithm used to distribute load between the
	// members of the pool. The current specification supports 'ROUND_ROBIN' and
	// 'LEAST_CONNECTIONS' as valid values for this attribute.
	LbMethod pulumi.StringOutput `pulumi:"lbMethod"`
	// The backend load balancing provider. For example:
	// `haproxy`, `F5`, etc.
	LbProvider pulumi.StringOutput `pulumi:"lbProvider"`
	// An existing node to add to the pool. Changing this
	// updates the members of the pool. The member object structure is documented
	// below. Please note that the `member` block is deprecated in favor of the
	// `loadbalancer.MemberV1` resource.
	//
	// Deprecated: Use loadbalancer.MemberV1 instead
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// A list of IDs of monitors to associate with the
	// pool.
	MonitorIds pulumi.StringArrayOutput `pulumi:"monitorIds"`
	// The name of the pool. Changing this updates the name of
	// the existing pool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The protocol used by the pool members, you can use
	// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB pool. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB pool.
	Region pulumi.StringOutput `pulumi:"region"`
	// The network on which the members of the pool will be
	// located. Only members that are on this network can be added to the pool.
	// Changing this creates a new pool.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The owner of the pool. Required if admin wants to
	// create a pool member for another tenant. Changing this creates a new pool.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewPoolV1 registers a new resource with the given unique name, arguments, and options.
func NewPoolV1(ctx *pulumi.Context,
	name string, args *PoolV1Args, opts ...pulumi.ResourceOption) (*PoolV1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbMethod == nil {
		return nil, errors.New("invalid value for required argument 'LbMethod'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PoolV1
	err := ctx.RegisterResource("openstack:loadbalancer/poolV1:PoolV1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPoolV1 gets an existing PoolV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPoolV1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolV1State, opts ...pulumi.ResourceOption) (*PoolV1, error) {
	var resource PoolV1
	err := ctx.ReadResource("openstack:loadbalancer/poolV1:PoolV1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PoolV1 resources.
type poolV1State struct {
	// The algorithm used to distribute load between the
	// members of the pool. The current specification supports 'ROUND_ROBIN' and
	// 'LEAST_CONNECTIONS' as valid values for this attribute.
	LbMethod *string `pulumi:"lbMethod"`
	// The backend load balancing provider. For example:
	// `haproxy`, `F5`, etc.
	LbProvider *string `pulumi:"lbProvider"`
	// An existing node to add to the pool. Changing this
	// updates the members of the pool. The member object structure is documented
	// below. Please note that the `member` block is deprecated in favor of the
	// `loadbalancer.MemberV1` resource.
	//
	// Deprecated: Use loadbalancer.MemberV1 instead
	Members []string `pulumi:"members"`
	// A list of IDs of monitors to associate with the
	// pool.
	MonitorIds []string `pulumi:"monitorIds"`
	// The name of the pool. Changing this updates the name of
	// the existing pool.
	Name *string `pulumi:"name"`
	// The protocol used by the pool members, you can use
	// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
	Protocol *string `pulumi:"protocol"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB pool. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB pool.
	Region *string `pulumi:"region"`
	// The network on which the members of the pool will be
	// located. Only members that are on this network can be added to the pool.
	// Changing this creates a new pool.
	SubnetId *string `pulumi:"subnetId"`
	// The owner of the pool. Required if admin wants to
	// create a pool member for another tenant. Changing this creates a new pool.
	TenantId *string `pulumi:"tenantId"`
}

type PoolV1State struct {
	// The algorithm used to distribute load between the
	// members of the pool. The current specification supports 'ROUND_ROBIN' and
	// 'LEAST_CONNECTIONS' as valid values for this attribute.
	LbMethod pulumi.StringPtrInput
	// The backend load balancing provider. For example:
	// `haproxy`, `F5`, etc.
	LbProvider pulumi.StringPtrInput
	// An existing node to add to the pool. Changing this
	// updates the members of the pool. The member object structure is documented
	// below. Please note that the `member` block is deprecated in favor of the
	// `loadbalancer.MemberV1` resource.
	//
	// Deprecated: Use loadbalancer.MemberV1 instead
	Members pulumi.StringArrayInput
	// A list of IDs of monitors to associate with the
	// pool.
	MonitorIds pulumi.StringArrayInput
	// The name of the pool. Changing this updates the name of
	// the existing pool.
	Name pulumi.StringPtrInput
	// The protocol used by the pool members, you can use
	// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
	Protocol pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB pool. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB pool.
	Region pulumi.StringPtrInput
	// The network on which the members of the pool will be
	// located. Only members that are on this network can be added to the pool.
	// Changing this creates a new pool.
	SubnetId pulumi.StringPtrInput
	// The owner of the pool. Required if admin wants to
	// create a pool member for another tenant. Changing this creates a new pool.
	TenantId pulumi.StringPtrInput
}

func (PoolV1State) ElementType() reflect.Type {
	return reflect.TypeOf((*poolV1State)(nil)).Elem()
}

type poolV1Args struct {
	// The algorithm used to distribute load between the
	// members of the pool. The current specification supports 'ROUND_ROBIN' and
	// 'LEAST_CONNECTIONS' as valid values for this attribute.
	LbMethod string `pulumi:"lbMethod"`
	// The backend load balancing provider. For example:
	// `haproxy`, `F5`, etc.
	LbProvider *string `pulumi:"lbProvider"`
	// An existing node to add to the pool. Changing this
	// updates the members of the pool. The member object structure is documented
	// below. Please note that the `member` block is deprecated in favor of the
	// `loadbalancer.MemberV1` resource.
	//
	// Deprecated: Use loadbalancer.MemberV1 instead
	Members []string `pulumi:"members"`
	// A list of IDs of monitors to associate with the
	// pool.
	MonitorIds []string `pulumi:"monitorIds"`
	// The name of the pool. Changing this updates the name of
	// the existing pool.
	Name *string `pulumi:"name"`
	// The protocol used by the pool members, you can use
	// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
	Protocol string `pulumi:"protocol"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB pool. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB pool.
	Region *string `pulumi:"region"`
	// The network on which the members of the pool will be
	// located. Only members that are on this network can be added to the pool.
	// Changing this creates a new pool.
	SubnetId string `pulumi:"subnetId"`
	// The owner of the pool. Required if admin wants to
	// create a pool member for another tenant. Changing this creates a new pool.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a PoolV1 resource.
type PoolV1Args struct {
	// The algorithm used to distribute load between the
	// members of the pool. The current specification supports 'ROUND_ROBIN' and
	// 'LEAST_CONNECTIONS' as valid values for this attribute.
	LbMethod pulumi.StringInput
	// The backend load balancing provider. For example:
	// `haproxy`, `F5`, etc.
	LbProvider pulumi.StringPtrInput
	// An existing node to add to the pool. Changing this
	// updates the members of the pool. The member object structure is documented
	// below. Please note that the `member` block is deprecated in favor of the
	// `loadbalancer.MemberV1` resource.
	//
	// Deprecated: Use loadbalancer.MemberV1 instead
	Members pulumi.StringArrayInput
	// A list of IDs of monitors to associate with the
	// pool.
	MonitorIds pulumi.StringArrayInput
	// The name of the pool. Changing this updates the name of
	// the existing pool.
	Name pulumi.StringPtrInput
	// The protocol used by the pool members, you can use
	// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
	Protocol pulumi.StringInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an LB pool. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// LB pool.
	Region pulumi.StringPtrInput
	// The network on which the members of the pool will be
	// located. Only members that are on this network can be added to the pool.
	// Changing this creates a new pool.
	SubnetId pulumi.StringInput
	// The owner of the pool. Required if admin wants to
	// create a pool member for another tenant. Changing this creates a new pool.
	TenantId pulumi.StringPtrInput
}

func (PoolV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*poolV1Args)(nil)).Elem()
}

type PoolV1Input interface {
	pulumi.Input

	ToPoolV1Output() PoolV1Output
	ToPoolV1OutputWithContext(ctx context.Context) PoolV1Output
}

func (*PoolV1) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolV1)(nil)).Elem()
}

func (i *PoolV1) ToPoolV1Output() PoolV1Output {
	return i.ToPoolV1OutputWithContext(context.Background())
}

func (i *PoolV1) ToPoolV1OutputWithContext(ctx context.Context) PoolV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(PoolV1Output)
}

// PoolV1ArrayInput is an input type that accepts PoolV1Array and PoolV1ArrayOutput values.
// You can construct a concrete instance of `PoolV1ArrayInput` via:
//
//	PoolV1Array{ PoolV1Args{...} }
type PoolV1ArrayInput interface {
	pulumi.Input

	ToPoolV1ArrayOutput() PoolV1ArrayOutput
	ToPoolV1ArrayOutputWithContext(context.Context) PoolV1ArrayOutput
}

type PoolV1Array []PoolV1Input

func (PoolV1Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PoolV1)(nil)).Elem()
}

func (i PoolV1Array) ToPoolV1ArrayOutput() PoolV1ArrayOutput {
	return i.ToPoolV1ArrayOutputWithContext(context.Background())
}

func (i PoolV1Array) ToPoolV1ArrayOutputWithContext(ctx context.Context) PoolV1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolV1ArrayOutput)
}

// PoolV1MapInput is an input type that accepts PoolV1Map and PoolV1MapOutput values.
// You can construct a concrete instance of `PoolV1MapInput` via:
//
//	PoolV1Map{ "key": PoolV1Args{...} }
type PoolV1MapInput interface {
	pulumi.Input

	ToPoolV1MapOutput() PoolV1MapOutput
	ToPoolV1MapOutputWithContext(context.Context) PoolV1MapOutput
}

type PoolV1Map map[string]PoolV1Input

func (PoolV1Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PoolV1)(nil)).Elem()
}

func (i PoolV1Map) ToPoolV1MapOutput() PoolV1MapOutput {
	return i.ToPoolV1MapOutputWithContext(context.Background())
}

func (i PoolV1Map) ToPoolV1MapOutputWithContext(ctx context.Context) PoolV1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolV1MapOutput)
}

type PoolV1Output struct{ *pulumi.OutputState }

func (PoolV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolV1)(nil)).Elem()
}

func (o PoolV1Output) ToPoolV1Output() PoolV1Output {
	return o
}

func (o PoolV1Output) ToPoolV1OutputWithContext(ctx context.Context) PoolV1Output {
	return o
}

// The algorithm used to distribute load between the
// members of the pool. The current specification supports 'ROUND_ROBIN' and
// 'LEAST_CONNECTIONS' as valid values for this attribute.
func (o PoolV1Output) LbMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringOutput { return v.LbMethod }).(pulumi.StringOutput)
}

// The backend load balancing provider. For example:
// `haproxy`, `F5`, etc.
func (o PoolV1Output) LbProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringOutput { return v.LbProvider }).(pulumi.StringOutput)
}

// An existing node to add to the pool. Changing this
// updates the members of the pool. The member object structure is documented
// below. Please note that the `member` block is deprecated in favor of the
// `loadbalancer.MemberV1` resource.
//
// Deprecated: Use loadbalancer.MemberV1 instead
func (o PoolV1Output) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// A list of IDs of monitors to associate with the
// pool.
func (o PoolV1Output) MonitorIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringArrayOutput { return v.MonitorIds }).(pulumi.StringArrayOutput)
}

// The name of the pool. Changing this updates the name of
// the existing pool.
func (o PoolV1Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The protocol used by the pool members, you can use
// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
func (o PoolV1Output) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an LB pool. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// LB pool.
func (o PoolV1Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The network on which the members of the pool will be
// located. Only members that are on this network can be added to the pool.
// Changing this creates a new pool.
func (o PoolV1Output) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The owner of the pool. Required if admin wants to
// create a pool member for another tenant. Changing this creates a new pool.
func (o PoolV1Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolV1) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type PoolV1ArrayOutput struct{ *pulumi.OutputState }

func (PoolV1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PoolV1)(nil)).Elem()
}

func (o PoolV1ArrayOutput) ToPoolV1ArrayOutput() PoolV1ArrayOutput {
	return o
}

func (o PoolV1ArrayOutput) ToPoolV1ArrayOutputWithContext(ctx context.Context) PoolV1ArrayOutput {
	return o
}

func (o PoolV1ArrayOutput) Index(i pulumi.IntInput) PoolV1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PoolV1 {
		return vs[0].([]*PoolV1)[vs[1].(int)]
	}).(PoolV1Output)
}

type PoolV1MapOutput struct{ *pulumi.OutputState }

func (PoolV1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PoolV1)(nil)).Elem()
}

func (o PoolV1MapOutput) ToPoolV1MapOutput() PoolV1MapOutput {
	return o
}

func (o PoolV1MapOutput) ToPoolV1MapOutputWithContext(ctx context.Context) PoolV1MapOutput {
	return o
}

func (o PoolV1MapOutput) MapIndex(k pulumi.StringInput) PoolV1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PoolV1 {
		return vs[0].(map[string]*PoolV1)[vs[1].(string)]
	}).(PoolV1Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolV1Input)(nil)).Elem(), &PoolV1{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolV1ArrayInput)(nil)).Elem(), PoolV1Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolV1MapInput)(nil)).Elem(), PoolV1Map{})
	pulumi.RegisterOutputType(PoolV1Output{})
	pulumi.RegisterOutputType(PoolV1ArrayOutput{})
	pulumi.RegisterOutputType(PoolV1MapOutput{})
}
