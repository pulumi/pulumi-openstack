// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v4/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the ID of an OpenStack Load Balancer flavor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v4/go/openstack/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.GetFlavorV2(ctx, &loadbalancer.GetFlavorV2Args{
//				Name: pulumi.StringRef("flavor_1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFlavorV2(ctx *pulumi.Context, args *GetFlavorV2Args, opts ...pulumi.InvokeOption) (*GetFlavorV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFlavorV2Result
	err := ctx.Invoke("openstack:loadbalancer/getFlavorV2:getFlavorV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlavorV2.
type GetFlavorV2Args struct {
	// The ID of the flavor. Exactly one of `name`, `flavorId` is required to be set.
	FlavorId *string `pulumi:"flavorId"`
	// The name of the flavor. Exactly one of `name`, `flavorId` is required to be set.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V2 Load Balancer client.
	// If omitted, the `region` argument of the provider is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getFlavorV2.
type GetFlavorV2Result struct {
	// The description of the flavor.
	Description string `pulumi:"description"`
	// Is the flavor enabled.
	Enabled bool `pulumi:"enabled"`
	// The ID of the flavor.
	FlavorId string `pulumi:"flavorId"`
	// The ID of the flavor profile.
	FlavorProfileId string `pulumi:"flavorProfileId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the flavor.
	Name   string  `pulumi:"name"`
	Region *string `pulumi:"region"`
}

func GetFlavorV2Output(ctx *pulumi.Context, args GetFlavorV2OutputArgs, opts ...pulumi.InvokeOption) GetFlavorV2ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFlavorV2ResultOutput, error) {
			args := v.(GetFlavorV2Args)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetFlavorV2Result
			secret, err := ctx.InvokePackageRaw("openstack:loadbalancer/getFlavorV2:getFlavorV2", args, &rv, "", opts...)
			if err != nil {
				return GetFlavorV2ResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetFlavorV2ResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetFlavorV2ResultOutput), nil
			}
			return output, nil
		}).(GetFlavorV2ResultOutput)
}

// A collection of arguments for invoking getFlavorV2.
type GetFlavorV2OutputArgs struct {
	// The ID of the flavor. Exactly one of `name`, `flavorId` is required to be set.
	FlavorId pulumi.StringPtrInput `pulumi:"flavorId"`
	// The name of the flavor. Exactly one of `name`, `flavorId` is required to be set.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The region in which to obtain the V2 Load Balancer client.
	// If omitted, the `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetFlavorV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorV2Args)(nil)).Elem()
}

// A collection of values returned by getFlavorV2.
type GetFlavorV2ResultOutput struct{ *pulumi.OutputState }

func (GetFlavorV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorV2Result)(nil)).Elem()
}

func (o GetFlavorV2ResultOutput) ToGetFlavorV2ResultOutput() GetFlavorV2ResultOutput {
	return o
}

func (o GetFlavorV2ResultOutput) ToGetFlavorV2ResultOutputWithContext(ctx context.Context) GetFlavorV2ResultOutput {
	return o
}

// The description of the flavor.
func (o GetFlavorV2ResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorV2Result) string { return v.Description }).(pulumi.StringOutput)
}

// Is the flavor enabled.
func (o GetFlavorV2ResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFlavorV2Result) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the flavor.
func (o GetFlavorV2ResultOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorV2Result) string { return v.FlavorId }).(pulumi.StringOutput)
}

// The ID of the flavor profile.
func (o GetFlavorV2ResultOutput) FlavorProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorV2Result) string { return v.FlavorProfileId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFlavorV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the flavor.
func (o GetFlavorV2ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorV2Result) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetFlavorV2ResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorV2Result) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFlavorV2ResultOutput{})
}
