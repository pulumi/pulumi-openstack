// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keymanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ContainerV1Acl struct {
	Read *ContainerV1AclRead `pulumi:"read"`
}

// ContainerV1AclInput is an input type that accepts ContainerV1AclArgs and ContainerV1AclOutput values.
// You can construct a concrete instance of `ContainerV1AclInput` via:
//
// 		 ContainerV1AclArgs{...}
//
type ContainerV1AclInput interface {
	pulumi.Input

	ToContainerV1AclOutput() ContainerV1AclOutput
	ToContainerV1AclOutputWithContext(context.Context) ContainerV1AclOutput
}

type ContainerV1AclArgs struct {
	Read ContainerV1AclReadPtrInput `pulumi:"read"`
}

func (ContainerV1AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1Acl)(nil)).Elem()
}

func (i ContainerV1AclArgs) ToContainerV1AclOutput() ContainerV1AclOutput {
	return i.ToContainerV1AclOutputWithContext(context.Background())
}

func (i ContainerV1AclArgs) ToContainerV1AclOutputWithContext(ctx context.Context) ContainerV1AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1AclOutput)
}

func (i ContainerV1AclArgs) ToContainerV1AclPtrOutput() ContainerV1AclPtrOutput {
	return i.ToContainerV1AclPtrOutputWithContext(context.Background())
}

func (i ContainerV1AclArgs) ToContainerV1AclPtrOutputWithContext(ctx context.Context) ContainerV1AclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1AclOutput).ToContainerV1AclPtrOutputWithContext(ctx)
}

// ContainerV1AclPtrInput is an input type that accepts ContainerV1AclArgs, ContainerV1AclPtr and ContainerV1AclPtrOutput values.
// You can construct a concrete instance of `ContainerV1AclPtrInput` via:
//
// 		 ContainerV1AclArgs{...}
//
//  or:
//
// 		 nil
//
type ContainerV1AclPtrInput interface {
	pulumi.Input

	ToContainerV1AclPtrOutput() ContainerV1AclPtrOutput
	ToContainerV1AclPtrOutputWithContext(context.Context) ContainerV1AclPtrOutput
}

type containerV1AclPtrType ContainerV1AclArgs

func ContainerV1AclPtr(v *ContainerV1AclArgs) ContainerV1AclPtrInput {
	return (*containerV1AclPtrType)(v)
}

func (*containerV1AclPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerV1Acl)(nil)).Elem()
}

func (i *containerV1AclPtrType) ToContainerV1AclPtrOutput() ContainerV1AclPtrOutput {
	return i.ToContainerV1AclPtrOutputWithContext(context.Background())
}

func (i *containerV1AclPtrType) ToContainerV1AclPtrOutputWithContext(ctx context.Context) ContainerV1AclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1AclPtrOutput)
}

type ContainerV1AclOutput struct{ *pulumi.OutputState }

func (ContainerV1AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1Acl)(nil)).Elem()
}

func (o ContainerV1AclOutput) ToContainerV1AclOutput() ContainerV1AclOutput {
	return o
}

func (o ContainerV1AclOutput) ToContainerV1AclOutputWithContext(ctx context.Context) ContainerV1AclOutput {
	return o
}

func (o ContainerV1AclOutput) ToContainerV1AclPtrOutput() ContainerV1AclPtrOutput {
	return o.ToContainerV1AclPtrOutputWithContext(context.Background())
}

func (o ContainerV1AclOutput) ToContainerV1AclPtrOutputWithContext(ctx context.Context) ContainerV1AclPtrOutput {
	return o.ApplyT(func(v ContainerV1Acl) *ContainerV1Acl {
		return &v
	}).(ContainerV1AclPtrOutput)
}
func (o ContainerV1AclOutput) Read() ContainerV1AclReadPtrOutput {
	return o.ApplyT(func(v ContainerV1Acl) *ContainerV1AclRead { return v.Read }).(ContainerV1AclReadPtrOutput)
}

type ContainerV1AclPtrOutput struct{ *pulumi.OutputState }

func (ContainerV1AclPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerV1Acl)(nil)).Elem()
}

func (o ContainerV1AclPtrOutput) ToContainerV1AclPtrOutput() ContainerV1AclPtrOutput {
	return o
}

func (o ContainerV1AclPtrOutput) ToContainerV1AclPtrOutputWithContext(ctx context.Context) ContainerV1AclPtrOutput {
	return o
}

func (o ContainerV1AclPtrOutput) Elem() ContainerV1AclOutput {
	return o.ApplyT(func(v *ContainerV1Acl) ContainerV1Acl { return *v }).(ContainerV1AclOutput)
}

func (o ContainerV1AclPtrOutput) Read() ContainerV1AclReadPtrOutput {
	return o.ApplyT(func(v ContainerV1Acl) *ContainerV1AclRead { return v.Read }).(ContainerV1AclReadPtrOutput)
}

type ContainerV1AclRead struct {
	// The date the container ACL was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Whether the container is accessible project wide.
	// Defaults to `true`.
	ProjectAccess *bool `pulumi:"projectAccess"`
	// The date the container ACL was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the
	// container, when `projectAccess` is set to `false`.
	Users []string `pulumi:"users"`
}

// ContainerV1AclReadInput is an input type that accepts ContainerV1AclReadArgs and ContainerV1AclReadOutput values.
// You can construct a concrete instance of `ContainerV1AclReadInput` via:
//
// 		 ContainerV1AclReadArgs{...}
//
type ContainerV1AclReadInput interface {
	pulumi.Input

	ToContainerV1AclReadOutput() ContainerV1AclReadOutput
	ToContainerV1AclReadOutputWithContext(context.Context) ContainerV1AclReadOutput
}

type ContainerV1AclReadArgs struct {
	// The date the container ACL was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// Whether the container is accessible project wide.
	// Defaults to `true`.
	ProjectAccess pulumi.BoolPtrInput `pulumi:"projectAccess"`
	// The date the container ACL was last updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the
	// container, when `projectAccess` is set to `false`.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (ContainerV1AclReadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1AclRead)(nil)).Elem()
}

func (i ContainerV1AclReadArgs) ToContainerV1AclReadOutput() ContainerV1AclReadOutput {
	return i.ToContainerV1AclReadOutputWithContext(context.Background())
}

func (i ContainerV1AclReadArgs) ToContainerV1AclReadOutputWithContext(ctx context.Context) ContainerV1AclReadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1AclReadOutput)
}

func (i ContainerV1AclReadArgs) ToContainerV1AclReadPtrOutput() ContainerV1AclReadPtrOutput {
	return i.ToContainerV1AclReadPtrOutputWithContext(context.Background())
}

func (i ContainerV1AclReadArgs) ToContainerV1AclReadPtrOutputWithContext(ctx context.Context) ContainerV1AclReadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1AclReadOutput).ToContainerV1AclReadPtrOutputWithContext(ctx)
}

// ContainerV1AclReadPtrInput is an input type that accepts ContainerV1AclReadArgs, ContainerV1AclReadPtr and ContainerV1AclReadPtrOutput values.
// You can construct a concrete instance of `ContainerV1AclReadPtrInput` via:
//
// 		 ContainerV1AclReadArgs{...}
//
//  or:
//
// 		 nil
//
type ContainerV1AclReadPtrInput interface {
	pulumi.Input

	ToContainerV1AclReadPtrOutput() ContainerV1AclReadPtrOutput
	ToContainerV1AclReadPtrOutputWithContext(context.Context) ContainerV1AclReadPtrOutput
}

type containerV1AclReadPtrType ContainerV1AclReadArgs

func ContainerV1AclReadPtr(v *ContainerV1AclReadArgs) ContainerV1AclReadPtrInput {
	return (*containerV1AclReadPtrType)(v)
}

func (*containerV1AclReadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerV1AclRead)(nil)).Elem()
}

func (i *containerV1AclReadPtrType) ToContainerV1AclReadPtrOutput() ContainerV1AclReadPtrOutput {
	return i.ToContainerV1AclReadPtrOutputWithContext(context.Background())
}

func (i *containerV1AclReadPtrType) ToContainerV1AclReadPtrOutputWithContext(ctx context.Context) ContainerV1AclReadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1AclReadPtrOutput)
}

type ContainerV1AclReadOutput struct{ *pulumi.OutputState }

func (ContainerV1AclReadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1AclRead)(nil)).Elem()
}

func (o ContainerV1AclReadOutput) ToContainerV1AclReadOutput() ContainerV1AclReadOutput {
	return o
}

func (o ContainerV1AclReadOutput) ToContainerV1AclReadOutputWithContext(ctx context.Context) ContainerV1AclReadOutput {
	return o
}

func (o ContainerV1AclReadOutput) ToContainerV1AclReadPtrOutput() ContainerV1AclReadPtrOutput {
	return o.ToContainerV1AclReadPtrOutputWithContext(context.Background())
}

func (o ContainerV1AclReadOutput) ToContainerV1AclReadPtrOutputWithContext(ctx context.Context) ContainerV1AclReadPtrOutput {
	return o.ApplyT(func(v ContainerV1AclRead) *ContainerV1AclRead {
		return &v
	}).(ContainerV1AclReadPtrOutput)
}

// The date the container ACL was created.
func (o ContainerV1AclReadOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerV1AclRead) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Whether the container is accessible project wide.
// Defaults to `true`.
func (o ContainerV1AclReadOutput) ProjectAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerV1AclRead) *bool { return v.ProjectAccess }).(pulumi.BoolPtrOutput)
}

// The date the container ACL was last updated.
func (o ContainerV1AclReadOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerV1AclRead) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// The list of user IDs, which are allowed to access the
// container, when `projectAccess` is set to `false`.
func (o ContainerV1AclReadOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerV1AclRead) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type ContainerV1AclReadPtrOutput struct{ *pulumi.OutputState }

func (ContainerV1AclReadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerV1AclRead)(nil)).Elem()
}

func (o ContainerV1AclReadPtrOutput) ToContainerV1AclReadPtrOutput() ContainerV1AclReadPtrOutput {
	return o
}

func (o ContainerV1AclReadPtrOutput) ToContainerV1AclReadPtrOutputWithContext(ctx context.Context) ContainerV1AclReadPtrOutput {
	return o
}

func (o ContainerV1AclReadPtrOutput) Elem() ContainerV1AclReadOutput {
	return o.ApplyT(func(v *ContainerV1AclRead) ContainerV1AclRead { return *v }).(ContainerV1AclReadOutput)
}

// The date the container ACL was created.
func (o ContainerV1AclReadPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerV1AclRead) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Whether the container is accessible project wide.
// Defaults to `true`.
func (o ContainerV1AclReadPtrOutput) ProjectAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerV1AclRead) *bool { return v.ProjectAccess }).(pulumi.BoolPtrOutput)
}

// The date the container ACL was last updated.
func (o ContainerV1AclReadPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerV1AclRead) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// The list of user IDs, which are allowed to access the
// container, when `projectAccess` is set to `false`.
func (o ContainerV1AclReadPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerV1AclRead) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type ContainerV1Consumer struct {
	// The name of the secret reference. The reference names must correspond the container type, more details are available [here](https://docs.openstack.org/barbican/stein/api/reference/containers.html).
	Name *string `pulumi:"name"`
	// The consumer URL.
	Url *string `pulumi:"url"`
}

// ContainerV1ConsumerInput is an input type that accepts ContainerV1ConsumerArgs and ContainerV1ConsumerOutput values.
// You can construct a concrete instance of `ContainerV1ConsumerInput` via:
//
// 		 ContainerV1ConsumerArgs{...}
//
type ContainerV1ConsumerInput interface {
	pulumi.Input

	ToContainerV1ConsumerOutput() ContainerV1ConsumerOutput
	ToContainerV1ConsumerOutputWithContext(context.Context) ContainerV1ConsumerOutput
}

type ContainerV1ConsumerArgs struct {
	// The name of the secret reference. The reference names must correspond the container type, more details are available [here](https://docs.openstack.org/barbican/stein/api/reference/containers.html).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The consumer URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContainerV1ConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1Consumer)(nil)).Elem()
}

func (i ContainerV1ConsumerArgs) ToContainerV1ConsumerOutput() ContainerV1ConsumerOutput {
	return i.ToContainerV1ConsumerOutputWithContext(context.Background())
}

func (i ContainerV1ConsumerArgs) ToContainerV1ConsumerOutputWithContext(ctx context.Context) ContainerV1ConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1ConsumerOutput)
}

// ContainerV1ConsumerArrayInput is an input type that accepts ContainerV1ConsumerArray and ContainerV1ConsumerArrayOutput values.
// You can construct a concrete instance of `ContainerV1ConsumerArrayInput` via:
//
// 		 ContainerV1ConsumerArray{ ContainerV1ConsumerArgs{...} }
//
type ContainerV1ConsumerArrayInput interface {
	pulumi.Input

	ToContainerV1ConsumerArrayOutput() ContainerV1ConsumerArrayOutput
	ToContainerV1ConsumerArrayOutputWithContext(context.Context) ContainerV1ConsumerArrayOutput
}

type ContainerV1ConsumerArray []ContainerV1ConsumerInput

func (ContainerV1ConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerV1Consumer)(nil)).Elem()
}

func (i ContainerV1ConsumerArray) ToContainerV1ConsumerArrayOutput() ContainerV1ConsumerArrayOutput {
	return i.ToContainerV1ConsumerArrayOutputWithContext(context.Background())
}

func (i ContainerV1ConsumerArray) ToContainerV1ConsumerArrayOutputWithContext(ctx context.Context) ContainerV1ConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1ConsumerArrayOutput)
}

type ContainerV1ConsumerOutput struct{ *pulumi.OutputState }

func (ContainerV1ConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1Consumer)(nil)).Elem()
}

func (o ContainerV1ConsumerOutput) ToContainerV1ConsumerOutput() ContainerV1ConsumerOutput {
	return o
}

func (o ContainerV1ConsumerOutput) ToContainerV1ConsumerOutputWithContext(ctx context.Context) ContainerV1ConsumerOutput {
	return o
}

// The name of the secret reference. The reference names must correspond the container type, more details are available [here](https://docs.openstack.org/barbican/stein/api/reference/containers.html).
func (o ContainerV1ConsumerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerV1Consumer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The consumer URL.
func (o ContainerV1ConsumerOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerV1Consumer) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContainerV1ConsumerArrayOutput struct{ *pulumi.OutputState }

func (ContainerV1ConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerV1Consumer)(nil)).Elem()
}

func (o ContainerV1ConsumerArrayOutput) ToContainerV1ConsumerArrayOutput() ContainerV1ConsumerArrayOutput {
	return o
}

func (o ContainerV1ConsumerArrayOutput) ToContainerV1ConsumerArrayOutputWithContext(ctx context.Context) ContainerV1ConsumerArrayOutput {
	return o
}

func (o ContainerV1ConsumerArrayOutput) Index(i pulumi.IntInput) ContainerV1ConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerV1Consumer {
		return vs[0].([]ContainerV1Consumer)[vs[1].(int)]
	}).(ContainerV1ConsumerOutput)
}

type ContainerV1SecretRef struct {
	// The name of the secret reference. The reference names must correspond the container type, more details are available [here](https://docs.openstack.org/barbican/stein/api/reference/containers.html).
	Name *string `pulumi:"name"`
	// The secret reference / where to find the secret, URL.
	SecretRef string `pulumi:"secretRef"`
}

// ContainerV1SecretRefInput is an input type that accepts ContainerV1SecretRefArgs and ContainerV1SecretRefOutput values.
// You can construct a concrete instance of `ContainerV1SecretRefInput` via:
//
// 		 ContainerV1SecretRefArgs{...}
//
type ContainerV1SecretRefInput interface {
	pulumi.Input

	ToContainerV1SecretRefOutput() ContainerV1SecretRefOutput
	ToContainerV1SecretRefOutputWithContext(context.Context) ContainerV1SecretRefOutput
}

type ContainerV1SecretRefArgs struct {
	// The name of the secret reference. The reference names must correspond the container type, more details are available [here](https://docs.openstack.org/barbican/stein/api/reference/containers.html).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The secret reference / where to find the secret, URL.
	SecretRef pulumi.StringInput `pulumi:"secretRef"`
}

func (ContainerV1SecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1SecretRef)(nil)).Elem()
}

func (i ContainerV1SecretRefArgs) ToContainerV1SecretRefOutput() ContainerV1SecretRefOutput {
	return i.ToContainerV1SecretRefOutputWithContext(context.Background())
}

func (i ContainerV1SecretRefArgs) ToContainerV1SecretRefOutputWithContext(ctx context.Context) ContainerV1SecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1SecretRefOutput)
}

// ContainerV1SecretRefArrayInput is an input type that accepts ContainerV1SecretRefArray and ContainerV1SecretRefArrayOutput values.
// You can construct a concrete instance of `ContainerV1SecretRefArrayInput` via:
//
// 		 ContainerV1SecretRefArray{ ContainerV1SecretRefArgs{...} }
//
type ContainerV1SecretRefArrayInput interface {
	pulumi.Input

	ToContainerV1SecretRefArrayOutput() ContainerV1SecretRefArrayOutput
	ToContainerV1SecretRefArrayOutputWithContext(context.Context) ContainerV1SecretRefArrayOutput
}

type ContainerV1SecretRefArray []ContainerV1SecretRefInput

func (ContainerV1SecretRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerV1SecretRef)(nil)).Elem()
}

func (i ContainerV1SecretRefArray) ToContainerV1SecretRefArrayOutput() ContainerV1SecretRefArrayOutput {
	return i.ToContainerV1SecretRefArrayOutputWithContext(context.Background())
}

func (i ContainerV1SecretRefArray) ToContainerV1SecretRefArrayOutputWithContext(ctx context.Context) ContainerV1SecretRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerV1SecretRefArrayOutput)
}

type ContainerV1SecretRefOutput struct{ *pulumi.OutputState }

func (ContainerV1SecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerV1SecretRef)(nil)).Elem()
}

func (o ContainerV1SecretRefOutput) ToContainerV1SecretRefOutput() ContainerV1SecretRefOutput {
	return o
}

func (o ContainerV1SecretRefOutput) ToContainerV1SecretRefOutputWithContext(ctx context.Context) ContainerV1SecretRefOutput {
	return o
}

// The name of the secret reference. The reference names must correspond the container type, more details are available [here](https://docs.openstack.org/barbican/stein/api/reference/containers.html).
func (o ContainerV1SecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerV1SecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The secret reference / where to find the secret, URL.
func (o ContainerV1SecretRefOutput) SecretRef() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerV1SecretRef) string { return v.SecretRef }).(pulumi.StringOutput)
}

type ContainerV1SecretRefArrayOutput struct{ *pulumi.OutputState }

func (ContainerV1SecretRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerV1SecretRef)(nil)).Elem()
}

func (o ContainerV1SecretRefArrayOutput) ToContainerV1SecretRefArrayOutput() ContainerV1SecretRefArrayOutput {
	return o
}

func (o ContainerV1SecretRefArrayOutput) ToContainerV1SecretRefArrayOutputWithContext(ctx context.Context) ContainerV1SecretRefArrayOutput {
	return o
}

func (o ContainerV1SecretRefArrayOutput) Index(i pulumi.IntInput) ContainerV1SecretRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerV1SecretRef {
		return vs[0].([]ContainerV1SecretRef)[vs[1].(int)]
	}).(ContainerV1SecretRefOutput)
}

type SecretV1Acl struct {
	Read *SecretV1AclRead `pulumi:"read"`
}

// SecretV1AclInput is an input type that accepts SecretV1AclArgs and SecretV1AclOutput values.
// You can construct a concrete instance of `SecretV1AclInput` via:
//
// 		 SecretV1AclArgs{...}
//
type SecretV1AclInput interface {
	pulumi.Input

	ToSecretV1AclOutput() SecretV1AclOutput
	ToSecretV1AclOutputWithContext(context.Context) SecretV1AclOutput
}

type SecretV1AclArgs struct {
	Read SecretV1AclReadPtrInput `pulumi:"read"`
}

func (SecretV1AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretV1Acl)(nil)).Elem()
}

func (i SecretV1AclArgs) ToSecretV1AclOutput() SecretV1AclOutput {
	return i.ToSecretV1AclOutputWithContext(context.Background())
}

func (i SecretV1AclArgs) ToSecretV1AclOutputWithContext(ctx context.Context) SecretV1AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretV1AclOutput)
}

func (i SecretV1AclArgs) ToSecretV1AclPtrOutput() SecretV1AclPtrOutput {
	return i.ToSecretV1AclPtrOutputWithContext(context.Background())
}

func (i SecretV1AclArgs) ToSecretV1AclPtrOutputWithContext(ctx context.Context) SecretV1AclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretV1AclOutput).ToSecretV1AclPtrOutputWithContext(ctx)
}

// SecretV1AclPtrInput is an input type that accepts SecretV1AclArgs, SecretV1AclPtr and SecretV1AclPtrOutput values.
// You can construct a concrete instance of `SecretV1AclPtrInput` via:
//
// 		 SecretV1AclArgs{...}
//
//  or:
//
// 		 nil
//
type SecretV1AclPtrInput interface {
	pulumi.Input

	ToSecretV1AclPtrOutput() SecretV1AclPtrOutput
	ToSecretV1AclPtrOutputWithContext(context.Context) SecretV1AclPtrOutput
}

type secretV1AclPtrType SecretV1AclArgs

func SecretV1AclPtr(v *SecretV1AclArgs) SecretV1AclPtrInput {
	return (*secretV1AclPtrType)(v)
}

func (*secretV1AclPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretV1Acl)(nil)).Elem()
}

func (i *secretV1AclPtrType) ToSecretV1AclPtrOutput() SecretV1AclPtrOutput {
	return i.ToSecretV1AclPtrOutputWithContext(context.Background())
}

func (i *secretV1AclPtrType) ToSecretV1AclPtrOutputWithContext(ctx context.Context) SecretV1AclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretV1AclPtrOutput)
}

type SecretV1AclOutput struct{ *pulumi.OutputState }

func (SecretV1AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretV1Acl)(nil)).Elem()
}

func (o SecretV1AclOutput) ToSecretV1AclOutput() SecretV1AclOutput {
	return o
}

func (o SecretV1AclOutput) ToSecretV1AclOutputWithContext(ctx context.Context) SecretV1AclOutput {
	return o
}

func (o SecretV1AclOutput) ToSecretV1AclPtrOutput() SecretV1AclPtrOutput {
	return o.ToSecretV1AclPtrOutputWithContext(context.Background())
}

func (o SecretV1AclOutput) ToSecretV1AclPtrOutputWithContext(ctx context.Context) SecretV1AclPtrOutput {
	return o.ApplyT(func(v SecretV1Acl) *SecretV1Acl {
		return &v
	}).(SecretV1AclPtrOutput)
}
func (o SecretV1AclOutput) Read() SecretV1AclReadPtrOutput {
	return o.ApplyT(func(v SecretV1Acl) *SecretV1AclRead { return v.Read }).(SecretV1AclReadPtrOutput)
}

type SecretV1AclPtrOutput struct{ *pulumi.OutputState }

func (SecretV1AclPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretV1Acl)(nil)).Elem()
}

func (o SecretV1AclPtrOutput) ToSecretV1AclPtrOutput() SecretV1AclPtrOutput {
	return o
}

func (o SecretV1AclPtrOutput) ToSecretV1AclPtrOutputWithContext(ctx context.Context) SecretV1AclPtrOutput {
	return o
}

func (o SecretV1AclPtrOutput) Elem() SecretV1AclOutput {
	return o.ApplyT(func(v *SecretV1Acl) SecretV1Acl { return *v }).(SecretV1AclOutput)
}

func (o SecretV1AclPtrOutput) Read() SecretV1AclReadPtrOutput {
	return o.ApplyT(func(v SecretV1Acl) *SecretV1AclRead { return v.Read }).(SecretV1AclReadPtrOutput)
}

type SecretV1AclRead struct {
	// The date the secret ACL was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Whether the secret is accessible project wide.
	// Defaults to `true`.
	ProjectAccess *bool `pulumi:"projectAccess"`
	// The date the secret ACL was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the
	// secret, when `projectAccess` is set to `false`.
	Users []string `pulumi:"users"`
}

// SecretV1AclReadInput is an input type that accepts SecretV1AclReadArgs and SecretV1AclReadOutput values.
// You can construct a concrete instance of `SecretV1AclReadInput` via:
//
// 		 SecretV1AclReadArgs{...}
//
type SecretV1AclReadInput interface {
	pulumi.Input

	ToSecretV1AclReadOutput() SecretV1AclReadOutput
	ToSecretV1AclReadOutputWithContext(context.Context) SecretV1AclReadOutput
}

type SecretV1AclReadArgs struct {
	// The date the secret ACL was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// Whether the secret is accessible project wide.
	// Defaults to `true`.
	ProjectAccess pulumi.BoolPtrInput `pulumi:"projectAccess"`
	// The date the secret ACL was last updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the
	// secret, when `projectAccess` is set to `false`.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (SecretV1AclReadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretV1AclRead)(nil)).Elem()
}

func (i SecretV1AclReadArgs) ToSecretV1AclReadOutput() SecretV1AclReadOutput {
	return i.ToSecretV1AclReadOutputWithContext(context.Background())
}

func (i SecretV1AclReadArgs) ToSecretV1AclReadOutputWithContext(ctx context.Context) SecretV1AclReadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretV1AclReadOutput)
}

func (i SecretV1AclReadArgs) ToSecretV1AclReadPtrOutput() SecretV1AclReadPtrOutput {
	return i.ToSecretV1AclReadPtrOutputWithContext(context.Background())
}

func (i SecretV1AclReadArgs) ToSecretV1AclReadPtrOutputWithContext(ctx context.Context) SecretV1AclReadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretV1AclReadOutput).ToSecretV1AclReadPtrOutputWithContext(ctx)
}

// SecretV1AclReadPtrInput is an input type that accepts SecretV1AclReadArgs, SecretV1AclReadPtr and SecretV1AclReadPtrOutput values.
// You can construct a concrete instance of `SecretV1AclReadPtrInput` via:
//
// 		 SecretV1AclReadArgs{...}
//
//  or:
//
// 		 nil
//
type SecretV1AclReadPtrInput interface {
	pulumi.Input

	ToSecretV1AclReadPtrOutput() SecretV1AclReadPtrOutput
	ToSecretV1AclReadPtrOutputWithContext(context.Context) SecretV1AclReadPtrOutput
}

type secretV1AclReadPtrType SecretV1AclReadArgs

func SecretV1AclReadPtr(v *SecretV1AclReadArgs) SecretV1AclReadPtrInput {
	return (*secretV1AclReadPtrType)(v)
}

func (*secretV1AclReadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretV1AclRead)(nil)).Elem()
}

func (i *secretV1AclReadPtrType) ToSecretV1AclReadPtrOutput() SecretV1AclReadPtrOutput {
	return i.ToSecretV1AclReadPtrOutputWithContext(context.Background())
}

func (i *secretV1AclReadPtrType) ToSecretV1AclReadPtrOutputWithContext(ctx context.Context) SecretV1AclReadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretV1AclReadPtrOutput)
}

type SecretV1AclReadOutput struct{ *pulumi.OutputState }

func (SecretV1AclReadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretV1AclRead)(nil)).Elem()
}

func (o SecretV1AclReadOutput) ToSecretV1AclReadOutput() SecretV1AclReadOutput {
	return o
}

func (o SecretV1AclReadOutput) ToSecretV1AclReadOutputWithContext(ctx context.Context) SecretV1AclReadOutput {
	return o
}

func (o SecretV1AclReadOutput) ToSecretV1AclReadPtrOutput() SecretV1AclReadPtrOutput {
	return o.ToSecretV1AclReadPtrOutputWithContext(context.Background())
}

func (o SecretV1AclReadOutput) ToSecretV1AclReadPtrOutputWithContext(ctx context.Context) SecretV1AclReadPtrOutput {
	return o.ApplyT(func(v SecretV1AclRead) *SecretV1AclRead {
		return &v
	}).(SecretV1AclReadPtrOutput)
}

// The date the secret ACL was created.
func (o SecretV1AclReadOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretV1AclRead) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Whether the secret is accessible project wide.
// Defaults to `true`.
func (o SecretV1AclReadOutput) ProjectAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretV1AclRead) *bool { return v.ProjectAccess }).(pulumi.BoolPtrOutput)
}

// The date the secret ACL was last updated.
func (o SecretV1AclReadOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretV1AclRead) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// The list of user IDs, which are allowed to access the
// secret, when `projectAccess` is set to `false`.
func (o SecretV1AclReadOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretV1AclRead) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type SecretV1AclReadPtrOutput struct{ *pulumi.OutputState }

func (SecretV1AclReadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretV1AclRead)(nil)).Elem()
}

func (o SecretV1AclReadPtrOutput) ToSecretV1AclReadPtrOutput() SecretV1AclReadPtrOutput {
	return o
}

func (o SecretV1AclReadPtrOutput) ToSecretV1AclReadPtrOutputWithContext(ctx context.Context) SecretV1AclReadPtrOutput {
	return o
}

func (o SecretV1AclReadPtrOutput) Elem() SecretV1AclReadOutput {
	return o.ApplyT(func(v *SecretV1AclRead) SecretV1AclRead { return *v }).(SecretV1AclReadOutput)
}

// The date the secret ACL was created.
func (o SecretV1AclReadPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretV1AclRead) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Whether the secret is accessible project wide.
// Defaults to `true`.
func (o SecretV1AclReadPtrOutput) ProjectAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretV1AclRead) *bool { return v.ProjectAccess }).(pulumi.BoolPtrOutput)
}

// The date the secret ACL was last updated.
func (o SecretV1AclReadPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretV1AclRead) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// The list of user IDs, which are allowed to access the
// secret, when `projectAccess` is set to `false`.
func (o SecretV1AclReadPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretV1AclRead) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type GetContainerAcl struct {
	Read GetContainerAclRead `pulumi:"read"`
}

// GetContainerAclInput is an input type that accepts GetContainerAclArgs and GetContainerAclOutput values.
// You can construct a concrete instance of `GetContainerAclInput` via:
//
// 		 GetContainerAclArgs{...}
//
type GetContainerAclInput interface {
	pulumi.Input

	ToGetContainerAclOutput() GetContainerAclOutput
	ToGetContainerAclOutputWithContext(context.Context) GetContainerAclOutput
}

type GetContainerAclArgs struct {
	Read GetContainerAclReadInput `pulumi:"read"`
}

func (GetContainerAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerAcl)(nil)).Elem()
}

func (i GetContainerAclArgs) ToGetContainerAclOutput() GetContainerAclOutput {
	return i.ToGetContainerAclOutputWithContext(context.Background())
}

func (i GetContainerAclArgs) ToGetContainerAclOutputWithContext(ctx context.Context) GetContainerAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerAclOutput)
}

// GetContainerAclArrayInput is an input type that accepts GetContainerAclArray and GetContainerAclArrayOutput values.
// You can construct a concrete instance of `GetContainerAclArrayInput` via:
//
// 		 GetContainerAclArray{ GetContainerAclArgs{...} }
//
type GetContainerAclArrayInput interface {
	pulumi.Input

	ToGetContainerAclArrayOutput() GetContainerAclArrayOutput
	ToGetContainerAclArrayOutputWithContext(context.Context) GetContainerAclArrayOutput
}

type GetContainerAclArray []GetContainerAclInput

func (GetContainerAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerAcl)(nil)).Elem()
}

func (i GetContainerAclArray) ToGetContainerAclArrayOutput() GetContainerAclArrayOutput {
	return i.ToGetContainerAclArrayOutputWithContext(context.Background())
}

func (i GetContainerAclArray) ToGetContainerAclArrayOutputWithContext(ctx context.Context) GetContainerAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerAclArrayOutput)
}

type GetContainerAclOutput struct{ *pulumi.OutputState }

func (GetContainerAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerAcl)(nil)).Elem()
}

func (o GetContainerAclOutput) ToGetContainerAclOutput() GetContainerAclOutput {
	return o
}

func (o GetContainerAclOutput) ToGetContainerAclOutputWithContext(ctx context.Context) GetContainerAclOutput {
	return o
}

func (o GetContainerAclOutput) Read() GetContainerAclReadOutput {
	return o.ApplyT(func(v GetContainerAcl) GetContainerAclRead { return v.Read }).(GetContainerAclReadOutput)
}

type GetContainerAclArrayOutput struct{ *pulumi.OutputState }

func (GetContainerAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerAcl)(nil)).Elem()
}

func (o GetContainerAclArrayOutput) ToGetContainerAclArrayOutput() GetContainerAclArrayOutput {
	return o
}

func (o GetContainerAclArrayOutput) ToGetContainerAclArrayOutputWithContext(ctx context.Context) GetContainerAclArrayOutput {
	return o
}

func (o GetContainerAclArrayOutput) Index(i pulumi.IntInput) GetContainerAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerAcl {
		return vs[0].([]GetContainerAcl)[vs[1].(int)]
	}).(GetContainerAclOutput)
}

type GetContainerAclRead struct {
	// The date the container ACL was created.
	CreatedAt string `pulumi:"createdAt"`
	// Whether the container is accessible project wide.
	ProjectAccess *bool `pulumi:"projectAccess"`
	// The date the container ACL was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the container,
	// when `projectAccess` is set to `false`.
	Users []string `pulumi:"users"`
}

// GetContainerAclReadInput is an input type that accepts GetContainerAclReadArgs and GetContainerAclReadOutput values.
// You can construct a concrete instance of `GetContainerAclReadInput` via:
//
// 		 GetContainerAclReadArgs{...}
//
type GetContainerAclReadInput interface {
	pulumi.Input

	ToGetContainerAclReadOutput() GetContainerAclReadOutput
	ToGetContainerAclReadOutputWithContext(context.Context) GetContainerAclReadOutput
}

type GetContainerAclReadArgs struct {
	// The date the container ACL was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Whether the container is accessible project wide.
	ProjectAccess pulumi.BoolPtrInput `pulumi:"projectAccess"`
	// The date the container ACL was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the container,
	// when `projectAccess` is set to `false`.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (GetContainerAclReadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerAclRead)(nil)).Elem()
}

func (i GetContainerAclReadArgs) ToGetContainerAclReadOutput() GetContainerAclReadOutput {
	return i.ToGetContainerAclReadOutputWithContext(context.Background())
}

func (i GetContainerAclReadArgs) ToGetContainerAclReadOutputWithContext(ctx context.Context) GetContainerAclReadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerAclReadOutput)
}

type GetContainerAclReadOutput struct{ *pulumi.OutputState }

func (GetContainerAclReadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerAclRead)(nil)).Elem()
}

func (o GetContainerAclReadOutput) ToGetContainerAclReadOutput() GetContainerAclReadOutput {
	return o
}

func (o GetContainerAclReadOutput) ToGetContainerAclReadOutputWithContext(ctx context.Context) GetContainerAclReadOutput {
	return o
}

// The date the container ACL was created.
func (o GetContainerAclReadOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerAclRead) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether the container is accessible project wide.
func (o GetContainerAclReadOutput) ProjectAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetContainerAclRead) *bool { return v.ProjectAccess }).(pulumi.BoolPtrOutput)
}

// The date the container ACL was last updated.
func (o GetContainerAclReadOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerAclRead) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The list of user IDs, which are allowed to access the container,
// when `projectAccess` is set to `false`.
func (o GetContainerAclReadOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerAclRead) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type GetContainerConsumer struct {
	// The Container name.
	Name *string `pulumi:"name"`
	// The consumer URL.
	Url *string `pulumi:"url"`
}

// GetContainerConsumerInput is an input type that accepts GetContainerConsumerArgs and GetContainerConsumerOutput values.
// You can construct a concrete instance of `GetContainerConsumerInput` via:
//
// 		 GetContainerConsumerArgs{...}
//
type GetContainerConsumerInput interface {
	pulumi.Input

	ToGetContainerConsumerOutput() GetContainerConsumerOutput
	ToGetContainerConsumerOutputWithContext(context.Context) GetContainerConsumerOutput
}

type GetContainerConsumerArgs struct {
	// The Container name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The consumer URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GetContainerConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerConsumer)(nil)).Elem()
}

func (i GetContainerConsumerArgs) ToGetContainerConsumerOutput() GetContainerConsumerOutput {
	return i.ToGetContainerConsumerOutputWithContext(context.Background())
}

func (i GetContainerConsumerArgs) ToGetContainerConsumerOutputWithContext(ctx context.Context) GetContainerConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerConsumerOutput)
}

// GetContainerConsumerArrayInput is an input type that accepts GetContainerConsumerArray and GetContainerConsumerArrayOutput values.
// You can construct a concrete instance of `GetContainerConsumerArrayInput` via:
//
// 		 GetContainerConsumerArray{ GetContainerConsumerArgs{...} }
//
type GetContainerConsumerArrayInput interface {
	pulumi.Input

	ToGetContainerConsumerArrayOutput() GetContainerConsumerArrayOutput
	ToGetContainerConsumerArrayOutputWithContext(context.Context) GetContainerConsumerArrayOutput
}

type GetContainerConsumerArray []GetContainerConsumerInput

func (GetContainerConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerConsumer)(nil)).Elem()
}

func (i GetContainerConsumerArray) ToGetContainerConsumerArrayOutput() GetContainerConsumerArrayOutput {
	return i.ToGetContainerConsumerArrayOutputWithContext(context.Background())
}

func (i GetContainerConsumerArray) ToGetContainerConsumerArrayOutputWithContext(ctx context.Context) GetContainerConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerConsumerArrayOutput)
}

type GetContainerConsumerOutput struct{ *pulumi.OutputState }

func (GetContainerConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerConsumer)(nil)).Elem()
}

func (o GetContainerConsumerOutput) ToGetContainerConsumerOutput() GetContainerConsumerOutput {
	return o
}

func (o GetContainerConsumerOutput) ToGetContainerConsumerOutputWithContext(ctx context.Context) GetContainerConsumerOutput {
	return o
}

// The Container name.
func (o GetContainerConsumerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerConsumer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The consumer URL.
func (o GetContainerConsumerOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerConsumer) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GetContainerConsumerArrayOutput struct{ *pulumi.OutputState }

func (GetContainerConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerConsumer)(nil)).Elem()
}

func (o GetContainerConsumerArrayOutput) ToGetContainerConsumerArrayOutput() GetContainerConsumerArrayOutput {
	return o
}

func (o GetContainerConsumerArrayOutput) ToGetContainerConsumerArrayOutputWithContext(ctx context.Context) GetContainerConsumerArrayOutput {
	return o
}

func (o GetContainerConsumerArrayOutput) Index(i pulumi.IntInput) GetContainerConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerConsumer {
		return vs[0].([]GetContainerConsumer)[vs[1].(int)]
	}).(GetContainerConsumerOutput)
}

type GetContainerSecretRef struct {
	// The Container name.
	Name *string `pulumi:"name"`
	// The secret reference / where to find the secret, URL.
	SecretRef *string `pulumi:"secretRef"`
}

// GetContainerSecretRefInput is an input type that accepts GetContainerSecretRefArgs and GetContainerSecretRefOutput values.
// You can construct a concrete instance of `GetContainerSecretRefInput` via:
//
// 		 GetContainerSecretRefArgs{...}
//
type GetContainerSecretRefInput interface {
	pulumi.Input

	ToGetContainerSecretRefOutput() GetContainerSecretRefOutput
	ToGetContainerSecretRefOutputWithContext(context.Context) GetContainerSecretRefOutput
}

type GetContainerSecretRefArgs struct {
	// The Container name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The secret reference / where to find the secret, URL.
	SecretRef pulumi.StringPtrInput `pulumi:"secretRef"`
}

func (GetContainerSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerSecretRef)(nil)).Elem()
}

func (i GetContainerSecretRefArgs) ToGetContainerSecretRefOutput() GetContainerSecretRefOutput {
	return i.ToGetContainerSecretRefOutputWithContext(context.Background())
}

func (i GetContainerSecretRefArgs) ToGetContainerSecretRefOutputWithContext(ctx context.Context) GetContainerSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerSecretRefOutput)
}

// GetContainerSecretRefArrayInput is an input type that accepts GetContainerSecretRefArray and GetContainerSecretRefArrayOutput values.
// You can construct a concrete instance of `GetContainerSecretRefArrayInput` via:
//
// 		 GetContainerSecretRefArray{ GetContainerSecretRefArgs{...} }
//
type GetContainerSecretRefArrayInput interface {
	pulumi.Input

	ToGetContainerSecretRefArrayOutput() GetContainerSecretRefArrayOutput
	ToGetContainerSecretRefArrayOutputWithContext(context.Context) GetContainerSecretRefArrayOutput
}

type GetContainerSecretRefArray []GetContainerSecretRefInput

func (GetContainerSecretRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerSecretRef)(nil)).Elem()
}

func (i GetContainerSecretRefArray) ToGetContainerSecretRefArrayOutput() GetContainerSecretRefArrayOutput {
	return i.ToGetContainerSecretRefArrayOutputWithContext(context.Background())
}

func (i GetContainerSecretRefArray) ToGetContainerSecretRefArrayOutputWithContext(ctx context.Context) GetContainerSecretRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerSecretRefArrayOutput)
}

type GetContainerSecretRefOutput struct{ *pulumi.OutputState }

func (GetContainerSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerSecretRef)(nil)).Elem()
}

func (o GetContainerSecretRefOutput) ToGetContainerSecretRefOutput() GetContainerSecretRefOutput {
	return o
}

func (o GetContainerSecretRefOutput) ToGetContainerSecretRefOutputWithContext(ctx context.Context) GetContainerSecretRefOutput {
	return o
}

// The Container name.
func (o GetContainerSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The secret reference / where to find the secret, URL.
func (o GetContainerSecretRefOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerSecretRef) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

type GetContainerSecretRefArrayOutput struct{ *pulumi.OutputState }

func (GetContainerSecretRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerSecretRef)(nil)).Elem()
}

func (o GetContainerSecretRefArrayOutput) ToGetContainerSecretRefArrayOutput() GetContainerSecretRefArrayOutput {
	return o
}

func (o GetContainerSecretRefArrayOutput) ToGetContainerSecretRefArrayOutputWithContext(ctx context.Context) GetContainerSecretRefArrayOutput {
	return o
}

func (o GetContainerSecretRefArrayOutput) Index(i pulumi.IntInput) GetContainerSecretRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerSecretRef {
		return vs[0].([]GetContainerSecretRef)[vs[1].(int)]
	}).(GetContainerSecretRefOutput)
}

type GetSecretAcl struct {
	Read GetSecretAclRead `pulumi:"read"`
}

// GetSecretAclInput is an input type that accepts GetSecretAclArgs and GetSecretAclOutput values.
// You can construct a concrete instance of `GetSecretAclInput` via:
//
// 		 GetSecretAclArgs{...}
//
type GetSecretAclInput interface {
	pulumi.Input

	ToGetSecretAclOutput() GetSecretAclOutput
	ToGetSecretAclOutputWithContext(context.Context) GetSecretAclOutput
}

type GetSecretAclArgs struct {
	Read GetSecretAclReadInput `pulumi:"read"`
}

func (GetSecretAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretAcl)(nil)).Elem()
}

func (i GetSecretAclArgs) ToGetSecretAclOutput() GetSecretAclOutput {
	return i.ToGetSecretAclOutputWithContext(context.Background())
}

func (i GetSecretAclArgs) ToGetSecretAclOutputWithContext(ctx context.Context) GetSecretAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretAclOutput)
}

// GetSecretAclArrayInput is an input type that accepts GetSecretAclArray and GetSecretAclArrayOutput values.
// You can construct a concrete instance of `GetSecretAclArrayInput` via:
//
// 		 GetSecretAclArray{ GetSecretAclArgs{...} }
//
type GetSecretAclArrayInput interface {
	pulumi.Input

	ToGetSecretAclArrayOutput() GetSecretAclArrayOutput
	ToGetSecretAclArrayOutputWithContext(context.Context) GetSecretAclArrayOutput
}

type GetSecretAclArray []GetSecretAclInput

func (GetSecretAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretAcl)(nil)).Elem()
}

func (i GetSecretAclArray) ToGetSecretAclArrayOutput() GetSecretAclArrayOutput {
	return i.ToGetSecretAclArrayOutputWithContext(context.Background())
}

func (i GetSecretAclArray) ToGetSecretAclArrayOutputWithContext(ctx context.Context) GetSecretAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretAclArrayOutput)
}

type GetSecretAclOutput struct{ *pulumi.OutputState }

func (GetSecretAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretAcl)(nil)).Elem()
}

func (o GetSecretAclOutput) ToGetSecretAclOutput() GetSecretAclOutput {
	return o
}

func (o GetSecretAclOutput) ToGetSecretAclOutputWithContext(ctx context.Context) GetSecretAclOutput {
	return o
}

func (o GetSecretAclOutput) Read() GetSecretAclReadOutput {
	return o.ApplyT(func(v GetSecretAcl) GetSecretAclRead { return v.Read }).(GetSecretAclReadOutput)
}

type GetSecretAclArrayOutput struct{ *pulumi.OutputState }

func (GetSecretAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretAcl)(nil)).Elem()
}

func (o GetSecretAclArrayOutput) ToGetSecretAclArrayOutput() GetSecretAclArrayOutput {
	return o
}

func (o GetSecretAclArrayOutput) ToGetSecretAclArrayOutputWithContext(ctx context.Context) GetSecretAclArrayOutput {
	return o
}

func (o GetSecretAclArrayOutput) Index(i pulumi.IntInput) GetSecretAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretAcl {
		return vs[0].([]GetSecretAcl)[vs[1].(int)]
	}).(GetSecretAclOutput)
}

type GetSecretAclRead struct {
	// The date the secret ACL was created.
	CreatedAt string `pulumi:"createdAt"`
	// Whether the secret is accessible project wide.
	ProjectAccess *bool `pulumi:"projectAccess"`
	// The date the secret ACL was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the secret, when
	// `projectAccess` is set to `false`.
	Users []string `pulumi:"users"`
}

// GetSecretAclReadInput is an input type that accepts GetSecretAclReadArgs and GetSecretAclReadOutput values.
// You can construct a concrete instance of `GetSecretAclReadInput` via:
//
// 		 GetSecretAclReadArgs{...}
//
type GetSecretAclReadInput interface {
	pulumi.Input

	ToGetSecretAclReadOutput() GetSecretAclReadOutput
	ToGetSecretAclReadOutputWithContext(context.Context) GetSecretAclReadOutput
}

type GetSecretAclReadArgs struct {
	// The date the secret ACL was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Whether the secret is accessible project wide.
	ProjectAccess pulumi.BoolPtrInput `pulumi:"projectAccess"`
	// The date the secret ACL was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The list of user IDs, which are allowed to access the secret, when
	// `projectAccess` is set to `false`.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (GetSecretAclReadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretAclRead)(nil)).Elem()
}

func (i GetSecretAclReadArgs) ToGetSecretAclReadOutput() GetSecretAclReadOutput {
	return i.ToGetSecretAclReadOutputWithContext(context.Background())
}

func (i GetSecretAclReadArgs) ToGetSecretAclReadOutputWithContext(ctx context.Context) GetSecretAclReadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretAclReadOutput)
}

type GetSecretAclReadOutput struct{ *pulumi.OutputState }

func (GetSecretAclReadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretAclRead)(nil)).Elem()
}

func (o GetSecretAclReadOutput) ToGetSecretAclReadOutput() GetSecretAclReadOutput {
	return o
}

func (o GetSecretAclReadOutput) ToGetSecretAclReadOutputWithContext(ctx context.Context) GetSecretAclReadOutput {
	return o
}

// The date the secret ACL was created.
func (o GetSecretAclReadOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretAclRead) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether the secret is accessible project wide.
func (o GetSecretAclReadOutput) ProjectAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecretAclRead) *bool { return v.ProjectAccess }).(pulumi.BoolPtrOutput)
}

// The date the secret ACL was last updated.
func (o GetSecretAclReadOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretAclRead) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The list of user IDs, which are allowed to access the secret, when
// `projectAccess` is set to `false`.
func (o GetSecretAclReadOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecretAclRead) []string { return v.Users }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ContainerV1AclOutput{})
	pulumi.RegisterOutputType(ContainerV1AclPtrOutput{})
	pulumi.RegisterOutputType(ContainerV1AclReadOutput{})
	pulumi.RegisterOutputType(ContainerV1AclReadPtrOutput{})
	pulumi.RegisterOutputType(ContainerV1ConsumerOutput{})
	pulumi.RegisterOutputType(ContainerV1ConsumerArrayOutput{})
	pulumi.RegisterOutputType(ContainerV1SecretRefOutput{})
	pulumi.RegisterOutputType(ContainerV1SecretRefArrayOutput{})
	pulumi.RegisterOutputType(SecretV1AclOutput{})
	pulumi.RegisterOutputType(SecretV1AclPtrOutput{})
	pulumi.RegisterOutputType(SecretV1AclReadOutput{})
	pulumi.RegisterOutputType(SecretV1AclReadPtrOutput{})
	pulumi.RegisterOutputType(GetContainerAclOutput{})
	pulumi.RegisterOutputType(GetContainerAclArrayOutput{})
	pulumi.RegisterOutputType(GetContainerAclReadOutput{})
	pulumi.RegisterOutputType(GetContainerConsumerOutput{})
	pulumi.RegisterOutputType(GetContainerConsumerArrayOutput{})
	pulumi.RegisterOutputType(GetContainerSecretRefOutput{})
	pulumi.RegisterOutputType(GetContainerSecretRefArrayOutput{})
	pulumi.RegisterOutputType(GetSecretAclOutput{})
	pulumi.RegisterOutputType(GetSecretAclArrayOutput{})
	pulumi.RegisterOutputType(GetSecretAclReadOutput{})
}
