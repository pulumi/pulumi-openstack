// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keymanager

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a V1 Barbican order resource within OpenStack.
//
// ## Example Usage
// ### Symmetric key order
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/keymanager"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := keymanager.NewOrderV1(ctx, "order1", &keymanager.OrderV1Args{
// 			Meta: &keymanager.OrderV1MetaArgs{
// 				Algorithm: pulumi.String("aes"),
// 				BitLength: pulumi.Int(256),
// 				Mode:      pulumi.String("cbc"),
// 				Name:      pulumi.String("mysecret"),
// 			},
// 			Type: pulumi.String("key"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Asymmetric key pair order
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/keymanager"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := keymanager.NewOrderV1(ctx, "order1", &keymanager.OrderV1Args{
// 			Meta: &keymanager.OrderV1MetaArgs{
// 				Algorithm: pulumi.String("rsa"),
// 				BitLength: pulumi.Int(4096),
// 				Name:      pulumi.String("mysecret"),
// 			},
// 			Type: pulumi.String("asymmetric"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type OrderV1 struct {
	pulumi.CustomResourceState

	// The container reference / where to find the container.
	ContainerRef pulumi.StringOutput `pulumi:"containerRef"`
	// The date the order was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// The creator of the order.
	CreatorId pulumi.StringOutput `pulumi:"creatorId"`
	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	Meta OrderV1MetaOutput `pulumi:"meta"`
	// The order reference / where to find the order.
	OrderRef pulumi.StringOutput `pulumi:"orderRef"`
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 order.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret reference / where to find the secret.
	SecretRef pulumi.StringOutput `pulumi:"secretRef"`
	// The status of the order.
	Status pulumi.StringOutput `pulumi:"status"`
	// The sub status of the order.
	SubStatus pulumi.StringOutput `pulumi:"subStatus"`
	// The sub status message of the order.
	SubStatusMessage pulumi.StringOutput `pulumi:"subStatusMessage"`
	// The type of key to be generated. Must be one of `asymmetric`, `key`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The date the order was last updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewOrderV1 registers a new resource with the given unique name, arguments, and options.
func NewOrderV1(ctx *pulumi.Context,
	name string, args *OrderV1Args, opts ...pulumi.ResourceOption) (*OrderV1, error) {
	if args == nil || args.Meta == nil {
		return nil, errors.New("missing required argument 'Meta'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &OrderV1Args{}
	}
	var resource OrderV1
	err := ctx.RegisterResource("openstack:keymanager/orderV1:OrderV1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrderV1 gets an existing OrderV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrderV1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrderV1State, opts ...pulumi.ResourceOption) (*OrderV1, error) {
	var resource OrderV1
	err := ctx.ReadResource("openstack:keymanager/orderV1:OrderV1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrderV1 resources.
type orderV1State struct {
	// The container reference / where to find the container.
	ContainerRef *string `pulumi:"containerRef"`
	// The date the order was created.
	Created *string `pulumi:"created"`
	// The creator of the order.
	CreatorId *string `pulumi:"creatorId"`
	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	Meta *OrderV1Meta `pulumi:"meta"`
	// The order reference / where to find the order.
	OrderRef *string `pulumi:"orderRef"`
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 order.
	Region *string `pulumi:"region"`
	// The secret reference / where to find the secret.
	SecretRef *string `pulumi:"secretRef"`
	// The status of the order.
	Status *string `pulumi:"status"`
	// The sub status of the order.
	SubStatus *string `pulumi:"subStatus"`
	// The sub status message of the order.
	SubStatusMessage *string `pulumi:"subStatusMessage"`
	// The type of key to be generated. Must be one of `asymmetric`, `key`.
	Type *string `pulumi:"type"`
	// The date the order was last updated.
	Updated *string `pulumi:"updated"`
}

type OrderV1State struct {
	// The container reference / where to find the container.
	ContainerRef pulumi.StringPtrInput
	// The date the order was created.
	Created pulumi.StringPtrInput
	// The creator of the order.
	CreatorId pulumi.StringPtrInput
	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	Meta OrderV1MetaPtrInput
	// The order reference / where to find the order.
	OrderRef pulumi.StringPtrInput
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 order.
	Region pulumi.StringPtrInput
	// The secret reference / where to find the secret.
	SecretRef pulumi.StringPtrInput
	// The status of the order.
	Status pulumi.StringPtrInput
	// The sub status of the order.
	SubStatus pulumi.StringPtrInput
	// The sub status message of the order.
	SubStatusMessage pulumi.StringPtrInput
	// The type of key to be generated. Must be one of `asymmetric`, `key`.
	Type pulumi.StringPtrInput
	// The date the order was last updated.
	Updated pulumi.StringPtrInput
}

func (OrderV1State) ElementType() reflect.Type {
	return reflect.TypeOf((*orderV1State)(nil)).Elem()
}

type orderV1Args struct {
	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	Meta OrderV1Meta `pulumi:"meta"`
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 order.
	Region *string `pulumi:"region"`
	// The type of key to be generated. Must be one of `asymmetric`, `key`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a OrderV1 resource.
type OrderV1Args struct {
	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	Meta OrderV1MetaInput
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 order.
	Region pulumi.StringPtrInput
	// The type of key to be generated. Must be one of `asymmetric`, `key`.
	Type pulumi.StringInput
}

func (OrderV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*orderV1Args)(nil)).Elem()
}
