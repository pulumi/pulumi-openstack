// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 container object resource within OpenStack.
type ContainerObject struct {
	s *pulumi.ResourceState
}

// NewContainerObject registers a new resource with the given unique name, arguments, and options.
func NewContainerObject(ctx *pulumi.Context,
	name string, args *ContainerObjectArgs, opts ...pulumi.ResourceOpt) (*ContainerObject, error) {
	if args == nil || args.ContainerName == nil {
		return nil, errors.New("missing required argument 'ContainerName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["containerName"] = nil
		inputs["content"] = nil
		inputs["contentDisposition"] = nil
		inputs["contentEncoding"] = nil
		inputs["contentType"] = nil
		inputs["copyFrom"] = nil
		inputs["deleteAfter"] = nil
		inputs["deleteAt"] = nil
		inputs["detectContentType"] = nil
		inputs["etag"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["objectManifest"] = nil
		inputs["region"] = nil
		inputs["source"] = nil
	} else {
		inputs["containerName"] = args.ContainerName
		inputs["content"] = args.Content
		inputs["contentDisposition"] = args.ContentDisposition
		inputs["contentEncoding"] = args.ContentEncoding
		inputs["contentType"] = args.ContentType
		inputs["copyFrom"] = args.CopyFrom
		inputs["deleteAfter"] = args.DeleteAfter
		inputs["deleteAt"] = args.DeleteAt
		inputs["detectContentType"] = args.DetectContentType
		inputs["etag"] = args.Etag
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["objectManifest"] = args.ObjectManifest
		inputs["region"] = args.Region
		inputs["source"] = args.Source
	}
	inputs["contentLength"] = nil
	inputs["date"] = nil
	inputs["lastModified"] = nil
	inputs["transId"] = nil
	s, err := ctx.RegisterResource("openstack:objectstorage/containerObject:ContainerObject", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContainerObject{s: s}, nil
}

// GetContainerObject gets an existing ContainerObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerObject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ContainerObjectState, opts ...pulumi.ResourceOpt) (*ContainerObject, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["containerName"] = state.ContainerName
		inputs["content"] = state.Content
		inputs["contentDisposition"] = state.ContentDisposition
		inputs["contentEncoding"] = state.ContentEncoding
		inputs["contentLength"] = state.ContentLength
		inputs["contentType"] = state.ContentType
		inputs["copyFrom"] = state.CopyFrom
		inputs["date"] = state.Date
		inputs["deleteAfter"] = state.DeleteAfter
		inputs["deleteAt"] = state.DeleteAt
		inputs["detectContentType"] = state.DetectContentType
		inputs["etag"] = state.Etag
		inputs["lastModified"] = state.LastModified
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["objectManifest"] = state.ObjectManifest
		inputs["region"] = state.Region
		inputs["source"] = state.Source
		inputs["transId"] = state.TransId
	}
	s, err := ctx.ReadResource("openstack:objectstorage/containerObject:ContainerObject", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContainerObject{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ContainerObject) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ContainerObject) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A unique (within an account) name for the container. 
// The container name must be from 1 to 256 characters long and can start
// with any character and contain any pattern. Character set must be UTF-8.
// The container name cannot contain a slash (/) character because this
// character delimits the container and object name. For example, the path
// /v1/account/www/pages specifies the www container, not the www/pages container.
func (r *ContainerObject) ContainerName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["containerName"])
}

// A string representing the content of the object. Conflicts with
// `source` and `copy_from`.
func (r *ContainerObject) Content() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["content"])
}

// A string which specifies the override behavior for 
// the browser. For example, this header might specify that the browser use a download
// program to save this file rather than show the file, which is the default.
func (r *ContainerObject) ContentDisposition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contentDisposition"])
}

// A string representing the value of the Content-Encoding
// metadata.
func (r *ContainerObject) ContentEncoding() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contentEncoding"])
}

// If the operation succeeds, this value is zero (0) or the 
// length of informational or error text in the response body.
func (r *ContainerObject) ContentLength() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["contentLength"])
}

// A string which sets the MIME type for the object.
func (r *ContainerObject) ContentType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contentType"])
}

// A string representing the name of an object 
// used to create the new object by copying the `copy_from` object. The value is in form
// {container}/{object}. You must UTF-8-encode and then URL-encode the names of the
// container and object before you include them in the header. Conflicts with `source` and
// `content`.
func (r *ContainerObject) CopyFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["copyFrom"])
}

// The date and time the system responded to the request, using the preferred 
// format of RFC 7231 as shown in this example Thu, 16 Jun 2016 15:10:38 GMT. The
// time is always in UTC.
func (r *ContainerObject) Date() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["date"])
}

// An integer representing the number of seconds after which the
// system removes the object. Internally, the Object Storage system stores this value in
// the X-Delete-At metadata item.
func (r *ContainerObject) DeleteAfter() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["deleteAfter"])
}

// An string representing the date when the system removes the object. 
// For example, "2015-08-26" is equivalent to Mon, Wed, 26 Aug 2015 00:00:00 GMT.
func (r *ContainerObject) DeleteAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deleteAt"])
}

// If set to true, Object Storage guesses the content 
// type based on the file extension and ignores the value sent in the Content-Type
// header, if present.
func (r *ContainerObject) DetectContentType() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["detectContentType"])
}

// Used to trigger updates. The only meaningful value is ${md5(file("path/to/file"))}.
func (r *ContainerObject) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The date and time when the object was last modified. The date and time 
// stamp format is ISO 8601:
// CCYY-MM-DDThh:mm:ss±hh:mm
// For example, 2015-08-27T09:49:58-05:00.
// The ±hh:mm value, if included, is the time zone as an offset from UTC. In the previous
// example, the offset value is -05:00.
func (r *ContainerObject) LastModified() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastModified"])
}

func (r *ContainerObject) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

// A unique name for the object.
func (r *ContainerObject) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A string set to specify that this is a dynamic large 
// object manifest object. The value is the container and object name prefix of the
// segment objects in the form container/prefix. You must UTF-8-encode and then
// URL-encode the names of the container and prefix before you include them in this
// header.
func (r *ContainerObject) ObjectManifest() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["objectManifest"])
}

// The region in which to create the container. If
// omitted, the `region` argument of the provider is used. Changing this
// creates a new container.
func (r *ContainerObject) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// A string representing the local path of a file which will be used
// as the object's content. Conflicts with `source` and `copy_from`.
func (r *ContainerObject) Source() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["source"])
}

// A unique transaction ID for this request. Your service provider might 
// need this value if you report a problem.
func (r *ContainerObject) TransId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["transId"])
}

// Input properties used for looking up and filtering ContainerObject resources.
type ContainerObjectState struct {
	// A unique (within an account) name for the container. 
	// The container name must be from 1 to 256 characters long and can start
	// with any character and contain any pattern. Character set must be UTF-8.
	// The container name cannot contain a slash (/) character because this
	// character delimits the container and object name. For example, the path
	// /v1/account/www/pages specifies the www container, not the www/pages container.
	ContainerName interface{}
	// A string representing the content of the object. Conflicts with
	// `source` and `copy_from`.
	Content interface{}
	// A string which specifies the override behavior for 
	// the browser. For example, this header might specify that the browser use a download
	// program to save this file rather than show the file, which is the default.
	ContentDisposition interface{}
	// A string representing the value of the Content-Encoding
	// metadata.
	ContentEncoding interface{}
	// If the operation succeeds, this value is zero (0) or the 
	// length of informational or error text in the response body.
	ContentLength interface{}
	// A string which sets the MIME type for the object.
	ContentType interface{}
	// A string representing the name of an object 
	// used to create the new object by copying the `copy_from` object. The value is in form
	// {container}/{object}. You must UTF-8-encode and then URL-encode the names of the
	// container and object before you include them in the header. Conflicts with `source` and
	// `content`.
	CopyFrom interface{}
	// The date and time the system responded to the request, using the preferred 
	// format of RFC 7231 as shown in this example Thu, 16 Jun 2016 15:10:38 GMT. The
	// time is always in UTC.
	Date interface{}
	// An integer representing the number of seconds after which the
	// system removes the object. Internally, the Object Storage system stores this value in
	// the X-Delete-At metadata item.
	DeleteAfter interface{}
	// An string representing the date when the system removes the object. 
	// For example, "2015-08-26" is equivalent to Mon, Wed, 26 Aug 2015 00:00:00 GMT.
	DeleteAt interface{}
	// If set to true, Object Storage guesses the content 
	// type based on the file extension and ignores the value sent in the Content-Type
	// header, if present.
	DetectContentType interface{}
	// Used to trigger updates. The only meaningful value is ${md5(file("path/to/file"))}.
	Etag interface{}
	// The date and time when the object was last modified. The date and time 
	// stamp format is ISO 8601:
	// CCYY-MM-DDThh:mm:ss±hh:mm
	// For example, 2015-08-27T09:49:58-05:00.
	// The ±hh:mm value, if included, is the time zone as an offset from UTC. In the previous
	// example, the offset value is -05:00.
	LastModified interface{}
	Metadata interface{}
	// A unique name for the object.
	Name interface{}
	// A string set to specify that this is a dynamic large 
	// object manifest object. The value is the container and object name prefix of the
	// segment objects in the form container/prefix. You must UTF-8-encode and then
	// URL-encode the names of the container and prefix before you include them in this
	// header.
	ObjectManifest interface{}
	// The region in which to create the container. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new container.
	Region interface{}
	// A string representing the local path of a file which will be used
	// as the object's content. Conflicts with `source` and `copy_from`.
	Source interface{}
	// A unique transaction ID for this request. Your service provider might 
	// need this value if you report a problem.
	TransId interface{}
}

// The set of arguments for constructing a ContainerObject resource.
type ContainerObjectArgs struct {
	// A unique (within an account) name for the container. 
	// The container name must be from 1 to 256 characters long and can start
	// with any character and contain any pattern. Character set must be UTF-8.
	// The container name cannot contain a slash (/) character because this
	// character delimits the container and object name. For example, the path
	// /v1/account/www/pages specifies the www container, not the www/pages container.
	ContainerName interface{}
	// A string representing the content of the object. Conflicts with
	// `source` and `copy_from`.
	Content interface{}
	// A string which specifies the override behavior for 
	// the browser. For example, this header might specify that the browser use a download
	// program to save this file rather than show the file, which is the default.
	ContentDisposition interface{}
	// A string representing the value of the Content-Encoding
	// metadata.
	ContentEncoding interface{}
	// A string which sets the MIME type for the object.
	ContentType interface{}
	// A string representing the name of an object 
	// used to create the new object by copying the `copy_from` object. The value is in form
	// {container}/{object}. You must UTF-8-encode and then URL-encode the names of the
	// container and object before you include them in the header. Conflicts with `source` and
	// `content`.
	CopyFrom interface{}
	// An integer representing the number of seconds after which the
	// system removes the object. Internally, the Object Storage system stores this value in
	// the X-Delete-At metadata item.
	DeleteAfter interface{}
	// An string representing the date when the system removes the object. 
	// For example, "2015-08-26" is equivalent to Mon, Wed, 26 Aug 2015 00:00:00 GMT.
	DeleteAt interface{}
	// If set to true, Object Storage guesses the content 
	// type based on the file extension and ignores the value sent in the Content-Type
	// header, if present.
	DetectContentType interface{}
	// Used to trigger updates. The only meaningful value is ${md5(file("path/to/file"))}.
	Etag interface{}
	Metadata interface{}
	// A unique name for the object.
	Name interface{}
	// A string set to specify that this is a dynamic large 
	// object manifest object. The value is the container and object name prefix of the
	// segment objects in the form container/prefix. You must UTF-8-encode and then
	// URL-encode the names of the container and prefix before you include them in this
	// header.
	ObjectManifest interface{}
	// The region in which to create the container. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new container.
	Region interface{}
	// A string representing the local path of a file which will be used
	// as the object's content. Conflicts with `source` and `copy_from`.
	Source interface{}
}
