// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 container resource within OpenStack.
type Container struct {
	s *pulumi.ResourceState
}

// NewContainer registers a new resource with the given unique name, arguments, and options.
func NewContainer(ctx *pulumi.Context,
	name string, args *ContainerArgs, opts ...pulumi.ResourceOpt) (*Container, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["containerRead"] = nil
		inputs["containerSyncKey"] = nil
		inputs["containerSyncTo"] = nil
		inputs["containerWrite"] = nil
		inputs["contentType"] = nil
		inputs["forceDestroy"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
	} else {
		inputs["containerRead"] = args.ContainerRead
		inputs["containerSyncKey"] = args.ContainerSyncKey
		inputs["containerSyncTo"] = args.ContainerSyncTo
		inputs["containerWrite"] = args.ContainerWrite
		inputs["contentType"] = args.ContentType
		inputs["forceDestroy"] = args.ForceDestroy
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["region"] = args.Region
	}
	s, err := ctx.RegisterResource("openstack:objectstorage/container:Container", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Container{s: s}, nil
}

// GetContainer gets an existing Container resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ContainerState, opts ...pulumi.ResourceOpt) (*Container, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["containerRead"] = state.ContainerRead
		inputs["containerSyncKey"] = state.ContainerSyncKey
		inputs["containerSyncTo"] = state.ContainerSyncTo
		inputs["containerWrite"] = state.ContainerWrite
		inputs["contentType"] = state.ContentType
		inputs["forceDestroy"] = state.ForceDestroy
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["region"] = state.Region
	}
	s, err := ctx.ReadResource("openstack:objectstorage/container:Container", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Container{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Container) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Container) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Sets an access control list (ACL) that grants
// read access. This header can contain a comma-delimited list of users that
// can read the container (allows the GET method for all objects in the
// container). Changing this updates the access control list read access.
func (r *Container) ContainerRead() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["containerRead"])
}

// The secret key for container synchronization.
// Changing this updates container synchronization.
func (r *Container) ContainerSyncKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["containerSyncKey"])
}

// The destination for container synchronization.
// Changing this updates container synchronization.
func (r *Container) ContainerSyncTo() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["containerSyncTo"])
}

// Sets an ACL that grants write access.
// Changing this updates the access control list write access.
func (r *Container) ContainerWrite() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["containerWrite"])
}

// The MIME type for the container. Changing this
// updates the MIME type.
func (r *Container) ContentType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contentType"])
}

// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
func (r *Container) ForceDestroy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["forceDestroy"])
}

// Custom key/value pairs to associate with the container.
// Changing this updates the existing container metadata.
func (r *Container) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

// A unique name for the container. Changing this creates a
// new container.
func (r *Container) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The region in which to create the container. If
// omitted, the `region` argument of the provider is used. Changing this
// creates a new container.
func (r *Container) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Input properties used for looking up and filtering Container resources.
type ContainerState struct {
	// Sets an access control list (ACL) that grants
	// read access. This header can contain a comma-delimited list of users that
	// can read the container (allows the GET method for all objects in the
	// container). Changing this updates the access control list read access.
	ContainerRead interface{}
	// The secret key for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncKey interface{}
	// The destination for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncTo interface{}
	// Sets an ACL that grants write access.
	// Changing this updates the access control list write access.
	ContainerWrite interface{}
	// The MIME type for the container. Changing this
	// updates the MIME type.
	ContentType interface{}
	// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
	ForceDestroy interface{}
	// Custom key/value pairs to associate with the container.
	// Changing this updates the existing container metadata.
	Metadata interface{}
	// A unique name for the container. Changing this creates a
	// new container.
	Name interface{}
	// The region in which to create the container. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new container.
	Region interface{}
}

// The set of arguments for constructing a Container resource.
type ContainerArgs struct {
	// Sets an access control list (ACL) that grants
	// read access. This header can contain a comma-delimited list of users that
	// can read the container (allows the GET method for all objects in the
	// container). Changing this updates the access control list read access.
	ContainerRead interface{}
	// The secret key for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncKey interface{}
	// The destination for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncTo interface{}
	// Sets an ACL that grants write access.
	// Changing this updates the access control list write access.
	ContainerWrite interface{}
	// The MIME type for the container. Changing this
	// updates the MIME type.
	ContentType interface{}
	// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
	ForceDestroy interface{}
	// Custom key/value pairs to associate with the container.
	// Changing this updates the existing container metadata.
	Metadata interface{}
	// A unique name for the container. Changing this creates a
	// new container.
	Name interface{}
	// The region in which to create the container. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new container.
	Region interface{}
}
