// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to generate an OpenStack Object Storage temporary URL.
//
// The temporary URL will be valid for as long as TTL is set to (in seconds).
// Once the URL has expired, it will no longer be valid, but the resource
// will remain in place. If you wish to automatically regenerate a URL, set
// the `regenerate` argument to `true`. This will create a new resource with
// a new ID and URL.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/objectstorage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			container1, err := objectstorage.NewContainer(ctx, "container_1", &objectstorage.ContainerArgs{
//				Name: pulumi.String("test"),
//				Metadata: pulumi.Map{
//					"Temp-URL-Key": pulumi.Any("testkey"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			object1, err := objectstorage.NewContainerObject(ctx, "object_1", &objectstorage.ContainerObjectArgs{
//				ContainerName: container1.Name,
//				Name:          pulumi.String("test"),
//				Content:       pulumi.String("Hello, world!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.NewTempUrl(ctx, "obj_tempurl", &objectstorage.TempUrlArgs{
//				Container: container1.Name,
//				Object:    object1.Name,
//				Method:    pulumi.String("post"),
//				Ttl:       pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type TempUrl struct {
	pulumi.CustomResourceState

	// The container name the object belongs to.
	Container pulumi.StringOutput `pulumi:"container"`
	// The method allowed when accessing this URL.
	// Valid values are `GET`, and `POST`. Default is `GET`.
	Method pulumi.StringPtrOutput `pulumi:"method"`
	// The object name the tempurl is for.
	Object pulumi.StringOutput `pulumi:"object"`
	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	Regenerate pulumi.BoolPtrOutput `pulumi:"regenerate"`
	// The region the tempurl is located in.
	Region pulumi.StringOutput    `pulumi:"region"`
	Split  pulumi.StringPtrOutput `pulumi:"split"`
	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// The URL
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewTempUrl registers a new resource with the given unique name, arguments, and options.
func NewTempUrl(ctx *pulumi.Context,
	name string, args *TempUrlArgs, opts ...pulumi.ResourceOption) (*TempUrl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	if args.Object == nil {
		return nil, errors.New("invalid value for required argument 'Object'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"url",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TempUrl
	err := ctx.RegisterResource("openstack:objectstorage/tempUrl:TempUrl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTempUrl gets an existing TempUrl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTempUrl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TempUrlState, opts ...pulumi.ResourceOption) (*TempUrl, error) {
	var resource TempUrl
	err := ctx.ReadResource("openstack:objectstorage/tempUrl:TempUrl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TempUrl resources.
type tempUrlState struct {
	// The container name the object belongs to.
	Container *string `pulumi:"container"`
	// The method allowed when accessing this URL.
	// Valid values are `GET`, and `POST`. Default is `GET`.
	Method *string `pulumi:"method"`
	// The object name the tempurl is for.
	Object *string `pulumi:"object"`
	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	Regenerate *bool `pulumi:"regenerate"`
	// The region the tempurl is located in.
	Region *string `pulumi:"region"`
	Split  *string `pulumi:"split"`
	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	Ttl *int `pulumi:"ttl"`
	// The URL
	Url *string `pulumi:"url"`
}

type TempUrlState struct {
	// The container name the object belongs to.
	Container pulumi.StringPtrInput
	// The method allowed when accessing this URL.
	// Valid values are `GET`, and `POST`. Default is `GET`.
	Method pulumi.StringPtrInput
	// The object name the tempurl is for.
	Object pulumi.StringPtrInput
	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	Regenerate pulumi.BoolPtrInput
	// The region the tempurl is located in.
	Region pulumi.StringPtrInput
	Split  pulumi.StringPtrInput
	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	Ttl pulumi.IntPtrInput
	// The URL
	Url pulumi.StringPtrInput
}

func (TempUrlState) ElementType() reflect.Type {
	return reflect.TypeOf((*tempUrlState)(nil)).Elem()
}

type tempUrlArgs struct {
	// The container name the object belongs to.
	Container string `pulumi:"container"`
	// The method allowed when accessing this URL.
	// Valid values are `GET`, and `POST`. Default is `GET`.
	Method *string `pulumi:"method"`
	// The object name the tempurl is for.
	Object string `pulumi:"object"`
	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	Regenerate *bool `pulumi:"regenerate"`
	// The region the tempurl is located in.
	Region *string `pulumi:"region"`
	Split  *string `pulumi:"split"`
	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	Ttl int `pulumi:"ttl"`
}

// The set of arguments for constructing a TempUrl resource.
type TempUrlArgs struct {
	// The container name the object belongs to.
	Container pulumi.StringInput
	// The method allowed when accessing this URL.
	// Valid values are `GET`, and `POST`. Default is `GET`.
	Method pulumi.StringPtrInput
	// The object name the tempurl is for.
	Object pulumi.StringInput
	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	Regenerate pulumi.BoolPtrInput
	// The region the tempurl is located in.
	Region pulumi.StringPtrInput
	Split  pulumi.StringPtrInput
	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	Ttl pulumi.IntInput
}

func (TempUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tempUrlArgs)(nil)).Elem()
}

type TempUrlInput interface {
	pulumi.Input

	ToTempUrlOutput() TempUrlOutput
	ToTempUrlOutputWithContext(ctx context.Context) TempUrlOutput
}

func (*TempUrl) ElementType() reflect.Type {
	return reflect.TypeOf((**TempUrl)(nil)).Elem()
}

func (i *TempUrl) ToTempUrlOutput() TempUrlOutput {
	return i.ToTempUrlOutputWithContext(context.Background())
}

func (i *TempUrl) ToTempUrlOutputWithContext(ctx context.Context) TempUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TempUrlOutput)
}

// TempUrlArrayInput is an input type that accepts TempUrlArray and TempUrlArrayOutput values.
// You can construct a concrete instance of `TempUrlArrayInput` via:
//
//	TempUrlArray{ TempUrlArgs{...} }
type TempUrlArrayInput interface {
	pulumi.Input

	ToTempUrlArrayOutput() TempUrlArrayOutput
	ToTempUrlArrayOutputWithContext(context.Context) TempUrlArrayOutput
}

type TempUrlArray []TempUrlInput

func (TempUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TempUrl)(nil)).Elem()
}

func (i TempUrlArray) ToTempUrlArrayOutput() TempUrlArrayOutput {
	return i.ToTempUrlArrayOutputWithContext(context.Background())
}

func (i TempUrlArray) ToTempUrlArrayOutputWithContext(ctx context.Context) TempUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TempUrlArrayOutput)
}

// TempUrlMapInput is an input type that accepts TempUrlMap and TempUrlMapOutput values.
// You can construct a concrete instance of `TempUrlMapInput` via:
//
//	TempUrlMap{ "key": TempUrlArgs{...} }
type TempUrlMapInput interface {
	pulumi.Input

	ToTempUrlMapOutput() TempUrlMapOutput
	ToTempUrlMapOutputWithContext(context.Context) TempUrlMapOutput
}

type TempUrlMap map[string]TempUrlInput

func (TempUrlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TempUrl)(nil)).Elem()
}

func (i TempUrlMap) ToTempUrlMapOutput() TempUrlMapOutput {
	return i.ToTempUrlMapOutputWithContext(context.Background())
}

func (i TempUrlMap) ToTempUrlMapOutputWithContext(ctx context.Context) TempUrlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TempUrlMapOutput)
}

type TempUrlOutput struct{ *pulumi.OutputState }

func (TempUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TempUrl)(nil)).Elem()
}

func (o TempUrlOutput) ToTempUrlOutput() TempUrlOutput {
	return o
}

func (o TempUrlOutput) ToTempUrlOutputWithContext(ctx context.Context) TempUrlOutput {
	return o
}

// The container name the object belongs to.
func (o TempUrlOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.StringOutput { return v.Container }).(pulumi.StringOutput)
}

// The method allowed when accessing this URL.
// Valid values are `GET`, and `POST`. Default is `GET`.
func (o TempUrlOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.StringPtrOutput { return v.Method }).(pulumi.StringPtrOutput)
}

// The object name the tempurl is for.
func (o TempUrlOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

// Whether to automatically regenerate the URL when
// it has expired. If set to true, this will create a new resource with a new
// ID and new URL. Defaults to false.
func (o TempUrlOutput) Regenerate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.BoolPtrOutput { return v.Regenerate }).(pulumi.BoolPtrOutput)
}

// The region the tempurl is located in.
func (o TempUrlOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o TempUrlOutput) Split() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.StringPtrOutput { return v.Split }).(pulumi.StringPtrOutput)
}

// The TTL, in seconds, for the URL. For how long it should
// be valid.
func (o TempUrlOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// The URL
func (o TempUrlOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *TempUrl) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type TempUrlArrayOutput struct{ *pulumi.OutputState }

func (TempUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TempUrl)(nil)).Elem()
}

func (o TempUrlArrayOutput) ToTempUrlArrayOutput() TempUrlArrayOutput {
	return o
}

func (o TempUrlArrayOutput) ToTempUrlArrayOutputWithContext(ctx context.Context) TempUrlArrayOutput {
	return o
}

func (o TempUrlArrayOutput) Index(i pulumi.IntInput) TempUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TempUrl {
		return vs[0].([]*TempUrl)[vs[1].(int)]
	}).(TempUrlOutput)
}

type TempUrlMapOutput struct{ *pulumi.OutputState }

func (TempUrlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TempUrl)(nil)).Elem()
}

func (o TempUrlMapOutput) ToTempUrlMapOutput() TempUrlMapOutput {
	return o
}

func (o TempUrlMapOutput) ToTempUrlMapOutputWithContext(ctx context.Context) TempUrlMapOutput {
	return o
}

func (o TempUrlMapOutput) MapIndex(k pulumi.StringInput) TempUrlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TempUrl {
		return vs[0].(map[string]*TempUrl)[vs[1].(string)]
	}).(TempUrlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TempUrlInput)(nil)).Elem(), &TempUrl{})
	pulumi.RegisterInputType(reflect.TypeOf((*TempUrlArrayInput)(nil)).Elem(), TempUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TempUrlMapInput)(nil)).Elem(), TempUrlMap{})
	pulumi.RegisterOutputType(TempUrlOutput{})
	pulumi.RegisterOutputType(TempUrlArrayOutput{})
	pulumi.RegisterOutputType(TempUrlMapOutput{})
}
