// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V2 BGP VPN service resource within OpenStack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/bgpvpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bgpvpn.NewV2(ctx, "bgpvpn_1", &bgpvpn.V2Args{
//				Name: pulumi.String("bgpvpn1"),
//				RouteDistinguishers: pulumi.StringArray{
//					pulumi.String("64512:1"),
//				},
//				RouteTargets: pulumi.StringArray{
//					pulumi.String("64512:1"),
//				},
//				ImportTargets: pulumi.StringArray{
//					pulumi.String("64512:2"),
//				},
//				ExportTargets: pulumi.StringArray{
//					pulumi.String("64512:3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BGP VPNs can be imported using the `id`, e.g.
//
// hcl
//
// ```sh
// $ pulumi import openstack:index/bgpvpnV2:BgpvpnV2 bgpvpn_1 1eec2c66-6be2-4305-af3f-354c9b81f18c
// ```
//
// Deprecated: openstack.index/bgpvpnv2.BgpvpnV2 has been deprecated in favor of openstack.bgpvpn/v2.V2
type BgpvpnV2 struct {
	pulumi.CustomResourceState

	// A list of additional Route Targets that will be
	// used for export.
	ExportTargets pulumi.StringArrayOutput `pulumi:"exportTargets"`
	// A list of additional Route Targets that will be
	// imported.
	ImportTargets pulumi.StringArrayOutput `pulumi:"importTargets"`
	// The default BGP LOCAL\_PREF of routes that will be
	// advertised to the BGP VPN, unless overridden per-route.
	LocalPref pulumi.IntPtrOutput `pulumi:"localPref"`
	// The name of the BGP VPN. Changing this updates the name of
	// the existing BGP VPN.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of network IDs that are associated with the BGP VPN.
	Networks pulumi.StringArrayOutput `pulumi:"networks"`
	// A list of port IDs that are associated with the BGP VPN.
	Ports pulumi.StringArrayOutput `pulumi:"ports"`
	// The ID of the project that owns the BGPVPN. Only
	// administrative and users with `advsvc` role can specify a project ID other
	// than their own. Changing this creates a new BGP VPN.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN service. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// BGP VPN.
	Region pulumi.StringOutput `pulumi:"region"`
	// A list of route distinguisher strings. If
	// specified, one of these RDs will be used to advertise VPN routes.
	RouteDistinguishers pulumi.StringArrayOutput `pulumi:"routeDistinguishers"`
	// A list of Route Targets that will be both
	// imported and used for export.
	RouteTargets pulumi.StringArrayOutput `pulumi:"routeTargets"`
	// A list of router IDs that are associated with the BGP VPN.
	Routers pulumi.StringArrayOutput `pulumi:"routers"`
	// Indicates whether the BGP VPN is shared across projects.
	Shared pulumi.BoolOutput `pulumi:"shared"`
	// The type of the BGP VPN (either `l2` or `l3`). Changing this
	// creates a new BGP VPN. Defaults to `l3`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The globally-assigned VXLAN VNI for the BGP VPN. Changing
	// this creates a new BGP VPN.
	Vni pulumi.IntPtrOutput `pulumi:"vni"`
}

// NewBgpvpnV2 registers a new resource with the given unique name, arguments, and options.
func NewBgpvpnV2(ctx *pulumi.Context,
	name string, args *BgpvpnV2Args, opts ...pulumi.ResourceOption) (*BgpvpnV2, error) {
	if args == nil {
		args = &BgpvpnV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BgpvpnV2
	err := ctx.RegisterResource("openstack:index/bgpvpnV2:BgpvpnV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgpvpnV2 gets an existing BgpvpnV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpvpnV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpvpnV2State, opts ...pulumi.ResourceOption) (*BgpvpnV2, error) {
	var resource BgpvpnV2
	err := ctx.ReadResource("openstack:index/bgpvpnV2:BgpvpnV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BgpvpnV2 resources.
type bgpvpnV2State struct {
	// A list of additional Route Targets that will be
	// used for export.
	ExportTargets []string `pulumi:"exportTargets"`
	// A list of additional Route Targets that will be
	// imported.
	ImportTargets []string `pulumi:"importTargets"`
	// The default BGP LOCAL\_PREF of routes that will be
	// advertised to the BGP VPN, unless overridden per-route.
	LocalPref *int `pulumi:"localPref"`
	// The name of the BGP VPN. Changing this updates the name of
	// the existing BGP VPN.
	Name *string `pulumi:"name"`
	// A list of network IDs that are associated with the BGP VPN.
	Networks []string `pulumi:"networks"`
	// A list of port IDs that are associated with the BGP VPN.
	Ports []string `pulumi:"ports"`
	// The ID of the project that owns the BGPVPN. Only
	// administrative and users with `advsvc` role can specify a project ID other
	// than their own. Changing this creates a new BGP VPN.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN service. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// BGP VPN.
	Region *string `pulumi:"region"`
	// A list of route distinguisher strings. If
	// specified, one of these RDs will be used to advertise VPN routes.
	RouteDistinguishers []string `pulumi:"routeDistinguishers"`
	// A list of Route Targets that will be both
	// imported and used for export.
	RouteTargets []string `pulumi:"routeTargets"`
	// A list of router IDs that are associated with the BGP VPN.
	Routers []string `pulumi:"routers"`
	// Indicates whether the BGP VPN is shared across projects.
	Shared *bool `pulumi:"shared"`
	// The type of the BGP VPN (either `l2` or `l3`). Changing this
	// creates a new BGP VPN. Defaults to `l3`.
	Type *string `pulumi:"type"`
	// The globally-assigned VXLAN VNI for the BGP VPN. Changing
	// this creates a new BGP VPN.
	Vni *int `pulumi:"vni"`
}

type BgpvpnV2State struct {
	// A list of additional Route Targets that will be
	// used for export.
	ExportTargets pulumi.StringArrayInput
	// A list of additional Route Targets that will be
	// imported.
	ImportTargets pulumi.StringArrayInput
	// The default BGP LOCAL\_PREF of routes that will be
	// advertised to the BGP VPN, unless overridden per-route.
	LocalPref pulumi.IntPtrInput
	// The name of the BGP VPN. Changing this updates the name of
	// the existing BGP VPN.
	Name pulumi.StringPtrInput
	// A list of network IDs that are associated with the BGP VPN.
	Networks pulumi.StringArrayInput
	// A list of port IDs that are associated with the BGP VPN.
	Ports pulumi.StringArrayInput
	// The ID of the project that owns the BGPVPN. Only
	// administrative and users with `advsvc` role can specify a project ID other
	// than their own. Changing this creates a new BGP VPN.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN service. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// BGP VPN.
	Region pulumi.StringPtrInput
	// A list of route distinguisher strings. If
	// specified, one of these RDs will be used to advertise VPN routes.
	RouteDistinguishers pulumi.StringArrayInput
	// A list of Route Targets that will be both
	// imported and used for export.
	RouteTargets pulumi.StringArrayInput
	// A list of router IDs that are associated with the BGP VPN.
	Routers pulumi.StringArrayInput
	// Indicates whether the BGP VPN is shared across projects.
	Shared pulumi.BoolPtrInput
	// The type of the BGP VPN (either `l2` or `l3`). Changing this
	// creates a new BGP VPN. Defaults to `l3`.
	Type pulumi.StringPtrInput
	// The globally-assigned VXLAN VNI for the BGP VPN. Changing
	// this creates a new BGP VPN.
	Vni pulumi.IntPtrInput
}

func (BgpvpnV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpvpnV2State)(nil)).Elem()
}

type bgpvpnV2Args struct {
	// A list of additional Route Targets that will be
	// used for export.
	ExportTargets []string `pulumi:"exportTargets"`
	// A list of additional Route Targets that will be
	// imported.
	ImportTargets []string `pulumi:"importTargets"`
	// The default BGP LOCAL\_PREF of routes that will be
	// advertised to the BGP VPN, unless overridden per-route.
	LocalPref *int `pulumi:"localPref"`
	// The name of the BGP VPN. Changing this updates the name of
	// the existing BGP VPN.
	Name *string `pulumi:"name"`
	// The ID of the project that owns the BGPVPN. Only
	// administrative and users with `advsvc` role can specify a project ID other
	// than their own. Changing this creates a new BGP VPN.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN service. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// BGP VPN.
	Region *string `pulumi:"region"`
	// A list of route distinguisher strings. If
	// specified, one of these RDs will be used to advertise VPN routes.
	RouteDistinguishers []string `pulumi:"routeDistinguishers"`
	// A list of Route Targets that will be both
	// imported and used for export.
	RouteTargets []string `pulumi:"routeTargets"`
	// The type of the BGP VPN (either `l2` or `l3`). Changing this
	// creates a new BGP VPN. Defaults to `l3`.
	Type *string `pulumi:"type"`
	// The globally-assigned VXLAN VNI for the BGP VPN. Changing
	// this creates a new BGP VPN.
	Vni *int `pulumi:"vni"`
}

// The set of arguments for constructing a BgpvpnV2 resource.
type BgpvpnV2Args struct {
	// A list of additional Route Targets that will be
	// used for export.
	ExportTargets pulumi.StringArrayInput
	// A list of additional Route Targets that will be
	// imported.
	ImportTargets pulumi.StringArrayInput
	// The default BGP LOCAL\_PREF of routes that will be
	// advertised to the BGP VPN, unless overridden per-route.
	LocalPref pulumi.IntPtrInput
	// The name of the BGP VPN. Changing this updates the name of
	// the existing BGP VPN.
	Name pulumi.StringPtrInput
	// The ID of the project that owns the BGPVPN. Only
	// administrative and users with `advsvc` role can specify a project ID other
	// than their own. Changing this creates a new BGP VPN.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a BGP VPN service. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// BGP VPN.
	Region pulumi.StringPtrInput
	// A list of route distinguisher strings. If
	// specified, one of these RDs will be used to advertise VPN routes.
	RouteDistinguishers pulumi.StringArrayInput
	// A list of Route Targets that will be both
	// imported and used for export.
	RouteTargets pulumi.StringArrayInput
	// The type of the BGP VPN (either `l2` or `l3`). Changing this
	// creates a new BGP VPN. Defaults to `l3`.
	Type pulumi.StringPtrInput
	// The globally-assigned VXLAN VNI for the BGP VPN. Changing
	// this creates a new BGP VPN.
	Vni pulumi.IntPtrInput
}

func (BgpvpnV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpvpnV2Args)(nil)).Elem()
}

type BgpvpnV2Input interface {
	pulumi.Input

	ToBgpvpnV2Output() BgpvpnV2Output
	ToBgpvpnV2OutputWithContext(ctx context.Context) BgpvpnV2Output
}

func (*BgpvpnV2) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpvpnV2)(nil)).Elem()
}

func (i *BgpvpnV2) ToBgpvpnV2Output() BgpvpnV2Output {
	return i.ToBgpvpnV2OutputWithContext(context.Background())
}

func (i *BgpvpnV2) ToBgpvpnV2OutputWithContext(ctx context.Context) BgpvpnV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(BgpvpnV2Output)
}

// BgpvpnV2ArrayInput is an input type that accepts BgpvpnV2Array and BgpvpnV2ArrayOutput values.
// You can construct a concrete instance of `BgpvpnV2ArrayInput` via:
//
//	BgpvpnV2Array{ BgpvpnV2Args{...} }
type BgpvpnV2ArrayInput interface {
	pulumi.Input

	ToBgpvpnV2ArrayOutput() BgpvpnV2ArrayOutput
	ToBgpvpnV2ArrayOutputWithContext(context.Context) BgpvpnV2ArrayOutput
}

type BgpvpnV2Array []BgpvpnV2Input

func (BgpvpnV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpvpnV2)(nil)).Elem()
}

func (i BgpvpnV2Array) ToBgpvpnV2ArrayOutput() BgpvpnV2ArrayOutput {
	return i.ToBgpvpnV2ArrayOutputWithContext(context.Background())
}

func (i BgpvpnV2Array) ToBgpvpnV2ArrayOutputWithContext(ctx context.Context) BgpvpnV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpvpnV2ArrayOutput)
}

// BgpvpnV2MapInput is an input type that accepts BgpvpnV2Map and BgpvpnV2MapOutput values.
// You can construct a concrete instance of `BgpvpnV2MapInput` via:
//
//	BgpvpnV2Map{ "key": BgpvpnV2Args{...} }
type BgpvpnV2MapInput interface {
	pulumi.Input

	ToBgpvpnV2MapOutput() BgpvpnV2MapOutput
	ToBgpvpnV2MapOutputWithContext(context.Context) BgpvpnV2MapOutput
}

type BgpvpnV2Map map[string]BgpvpnV2Input

func (BgpvpnV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpvpnV2)(nil)).Elem()
}

func (i BgpvpnV2Map) ToBgpvpnV2MapOutput() BgpvpnV2MapOutput {
	return i.ToBgpvpnV2MapOutputWithContext(context.Background())
}

func (i BgpvpnV2Map) ToBgpvpnV2MapOutputWithContext(ctx context.Context) BgpvpnV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpvpnV2MapOutput)
}

type BgpvpnV2Output struct{ *pulumi.OutputState }

func (BgpvpnV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpvpnV2)(nil)).Elem()
}

func (o BgpvpnV2Output) ToBgpvpnV2Output() BgpvpnV2Output {
	return o
}

func (o BgpvpnV2Output) ToBgpvpnV2OutputWithContext(ctx context.Context) BgpvpnV2Output {
	return o
}

// A list of additional Route Targets that will be
// used for export.
func (o BgpvpnV2Output) ExportTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringArrayOutput { return v.ExportTargets }).(pulumi.StringArrayOutput)
}

// A list of additional Route Targets that will be
// imported.
func (o BgpvpnV2Output) ImportTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringArrayOutput { return v.ImportTargets }).(pulumi.StringArrayOutput)
}

// The default BGP LOCAL\_PREF of routes that will be
// advertised to the BGP VPN, unless overridden per-route.
func (o BgpvpnV2Output) LocalPref() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.IntPtrOutput { return v.LocalPref }).(pulumi.IntPtrOutput)
}

// The name of the BGP VPN. Changing this updates the name of
// the existing BGP VPN.
func (o BgpvpnV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of network IDs that are associated with the BGP VPN.
func (o BgpvpnV2Output) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringArrayOutput { return v.Networks }).(pulumi.StringArrayOutput)
}

// A list of port IDs that are associated with the BGP VPN.
func (o BgpvpnV2Output) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringArrayOutput { return v.Ports }).(pulumi.StringArrayOutput)
}

// The ID of the project that owns the BGPVPN. Only
// administrative and users with `advsvc` role can specify a project ID other
// than their own. Changing this creates a new BGP VPN.
func (o BgpvpnV2Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a BGP VPN service. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// BGP VPN.
func (o BgpvpnV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// A list of route distinguisher strings. If
// specified, one of these RDs will be used to advertise VPN routes.
func (o BgpvpnV2Output) RouteDistinguishers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringArrayOutput { return v.RouteDistinguishers }).(pulumi.StringArrayOutput)
}

// A list of Route Targets that will be both
// imported and used for export.
func (o BgpvpnV2Output) RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringArrayOutput { return v.RouteTargets }).(pulumi.StringArrayOutput)
}

// A list of router IDs that are associated with the BGP VPN.
func (o BgpvpnV2Output) Routers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringArrayOutput { return v.Routers }).(pulumi.StringArrayOutput)
}

// Indicates whether the BGP VPN is shared across projects.
func (o BgpvpnV2Output) Shared() pulumi.BoolOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.BoolOutput { return v.Shared }).(pulumi.BoolOutput)
}

// The type of the BGP VPN (either `l2` or `l3`). Changing this
// creates a new BGP VPN. Defaults to `l3`.
func (o BgpvpnV2Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The globally-assigned VXLAN VNI for the BGP VPN. Changing
// this creates a new BGP VPN.
func (o BgpvpnV2Output) Vni() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpvpnV2) pulumi.IntPtrOutput { return v.Vni }).(pulumi.IntPtrOutput)
}

type BgpvpnV2ArrayOutput struct{ *pulumi.OutputState }

func (BgpvpnV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpvpnV2)(nil)).Elem()
}

func (o BgpvpnV2ArrayOutput) ToBgpvpnV2ArrayOutput() BgpvpnV2ArrayOutput {
	return o
}

func (o BgpvpnV2ArrayOutput) ToBgpvpnV2ArrayOutputWithContext(ctx context.Context) BgpvpnV2ArrayOutput {
	return o
}

func (o BgpvpnV2ArrayOutput) Index(i pulumi.IntInput) BgpvpnV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BgpvpnV2 {
		return vs[0].([]*BgpvpnV2)[vs[1].(int)]
	}).(BgpvpnV2Output)
}

type BgpvpnV2MapOutput struct{ *pulumi.OutputState }

func (BgpvpnV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpvpnV2)(nil)).Elem()
}

func (o BgpvpnV2MapOutput) ToBgpvpnV2MapOutput() BgpvpnV2MapOutput {
	return o
}

func (o BgpvpnV2MapOutput) ToBgpvpnV2MapOutputWithContext(ctx context.Context) BgpvpnV2MapOutput {
	return o
}

func (o BgpvpnV2MapOutput) MapIndex(k pulumi.StringInput) BgpvpnV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BgpvpnV2 {
		return vs[0].(map[string]*BgpvpnV2)[vs[1].(string)]
	}).(BgpvpnV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BgpvpnV2Input)(nil)).Elem(), &BgpvpnV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpvpnV2ArrayInput)(nil)).Elem(), BgpvpnV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpvpnV2MapInput)(nil)).Elem(), BgpvpnV2Map{})
	pulumi.RegisterOutputType(BgpvpnV2Output{})
	pulumi.RegisterOutputType(BgpvpnV2ArrayOutput{})
	pulumi.RegisterOutputType(BgpvpnV2MapOutput{})
}
