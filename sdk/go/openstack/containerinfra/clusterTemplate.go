// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerinfra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V1 Magnum cluster template resource within OpenStack.
//
// ## Example Usage
// ### Create a Cluster template
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/containerinfra"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := containerinfra.NewClusterTemplate(ctx, "clustertemplate1", &containerinfra.ClusterTemplateArgs{
// 			Coe:                 pulumi.String("kubernetes"),
// 			DnsNameserver:       pulumi.String("1.1.1.1"),
// 			DockerStorageDriver: pulumi.String("devicemapper"),
// 			DockerVolumeSize:    pulumi.Int(10),
// 			Flavor:              pulumi.String("m1.small"),
// 			FloatingIpEnabled:   pulumi.Bool(false),
// 			Image:               pulumi.String("Fedora-Atomic-27"),
// 			Labels: pulumi.AnyMap{
// 				"influx_grafana_dashboard_enabled": pulumi.Any("true"),
// 				"kube_dashboard_enabled":           pulumi.Any("true"),
// 				"kube_tag":                         pulumi.Any("1.11.1"),
// 				"prometheus_monitoring":            pulumi.Any("true"),
// 			},
// 			MasterFlavor:    pulumi.String("m1.medium"),
// 			MasterLbEnabled: pulumi.Bool(true),
// 			NetworkDriver:   pulumi.String("flannel"),
// 			ServerType:      pulumi.String("vm"),
// 			VolumeDriver:    pulumi.String("cinder"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes reference
//
// The following attributes are exported:
//
// * `region` - See Argument Reference above.
// * `name` - See Argument Reference above.
// * `projectId` - See Argument Reference above.
// * `createdAt` - The time at which cluster template was created.
// * `updatedAt` - The time at which cluster template was created.
// * `apiserverPort` - See Argument Reference above.
// * `coe` - See Argument Reference above.
// * `clusterDistro` - See Argument Reference above.
// * `dnsNameserver` - See Argument Reference above.
// * `dockerStorageDriver` - See Argument Reference above.
// * `dockerVolumeSize` - See Argument Reference above.
// * `externalNetworkId` - See Argument Reference above.
// * `fixedNetwork` - See Argument Reference above.
// * `fixedSubnet` - See Argument Reference above.
// * `flavor` - See Argument Reference above.
// * `masterFlavor` - See Argument Reference above.
// * `floatingIpEnabled` - See Argument Reference above.
// * `httpProxy` - See Argument Reference above.
// * `httpsProxy` - See Argument Reference above.
// * `image` - See Argument Reference above.
// * `insecureRegistry` - See Argument Reference above.
// * `keypairId` - See Argument Reference above.
// * `labels` - See Argument Reference above.
// * `links` - A list containing associated cluster template links.
// * `masterLbEnabled` - See Argument Reference above.
// * `networkDriver` - See Argument Reference above.
// * `noProxy` - See Argument Reference above.
// * `public` - See Argument Reference above.
// * `registryEnabled` - See Argument Reference above.
// * `serverType` - See Argument Reference above.
// * `tlsDisabled` - See Argument Reference above.
// * `volumeDriver` - See Argument Reference above.
//
// ## Import
//
// Cluster templates can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import openstack:containerinfra/clusterTemplate:ClusterTemplate clustertemplate_1 b9a45c5c-cd03-4958-82aa-b80bf93cb922
// ```
type ClusterTemplate struct {
	pulumi.CustomResourceState

	// The API server port for the Container
	// Orchestration Engine for this cluster template. Changing this updates the
	// API server port of the existing cluster template.
	ApiserverPort pulumi.IntPtrOutput `pulumi:"apiserverPort"`
	// The distro for the cluster (fedora-atomic,
	// coreos, etc.). Changing this updates the cluster distro of the existing
	// cluster template.
	ClusterDistro pulumi.StringOutput `pulumi:"clusterDistro"`
	// The Container Orchestration Engine for this cluster
	// template. Changing this updates the engine of the existing cluster
	// template.
	Coe       pulumi.StringOutput `pulumi:"coe"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Address of the DNS nameserver that is used in
	// nodes of the cluster. Changing this updates the DNS nameserver of the
	// existing cluster template.
	DnsNameserver pulumi.StringPtrOutput `pulumi:"dnsNameserver"`
	// Docker storage driver. Changing this
	// updates the Docker storage driver of the existing cluster template.
	DockerStorageDriver pulumi.StringPtrOutput `pulumi:"dockerStorageDriver"`
	// The size (in GB) of the Docker volume.
	// Changing this updates the Docker volume size of the existing cluster
	// template.
	DockerVolumeSize pulumi.IntPtrOutput `pulumi:"dockerVolumeSize"`
	// The ID of the external network that will
	// be used for the cluster. Changing this updates the external network ID of
	// the existing cluster template.
	ExternalNetworkId pulumi.StringPtrOutput `pulumi:"externalNetworkId"`
	// The fixed network that will be attached to the
	// cluster. Changing this updates the fixed network of the existing cluster
	// template.
	FixedNetwork pulumi.StringPtrOutput `pulumi:"fixedNetwork"`
	// The fixed subnet that will be attached to the
	// cluster. Changing this updates the fixed subnet of the existing cluster
	// template.
	FixedSubnet pulumi.StringPtrOutput `pulumi:"fixedSubnet"`
	// The flavor for the nodes of the cluster. Can be set via
	// the `OS_MAGNUM_FLAVOR` environment variable. Changing this updates the
	// flavor of the existing cluster template.
	Flavor pulumi.StringPtrOutput `pulumi:"flavor"`
	// Indicates whether created cluster should
	// create floating IP for every node or not. Changing this updates the
	// floating IP enabled attribute of the existing cluster template.
	FloatingIpEnabled pulumi.BoolPtrOutput `pulumi:"floatingIpEnabled"`
	// The address of a proxy for receiving all HTTP
	// requests and relay them. Changing this updates the HTTP proxy address of
	// the existing cluster template.
	HttpProxy pulumi.StringPtrOutput `pulumi:"httpProxy"`
	// The address of a proxy for receiving all HTTPS
	// requests and relay them. Changing this updates the HTTPS proxy address of
	// the existing cluster template.
	HttpsProxy pulumi.StringPtrOutput `pulumi:"httpsProxy"`
	// The reference to an image that is used for nodes of the
	// cluster. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
	// Changing this updates the image attribute of the existing cluster template.
	Image pulumi.StringOutput `pulumi:"image"`
	// The insecure registry URL for the cluster
	// template. Changing this updates the insecure registry attribute of the
	// existing cluster template.
	InsecureRegistry pulumi.StringPtrOutput `pulumi:"insecureRegistry"`
	// The name of the Compute service SSH keypair.
	// Changing this updates the keypair of the existing cluster template.
	KeypairId pulumi.StringPtrOutput `pulumi:"keypairId"`
	// The list of key value pairs representing additional
	// properties of the cluster template. Changing this updates the labels of the
	// existing cluster template.
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The flavor for the master nodes. Can be set via
	// the `OS_MAGNUM_MASTER_FLAVOR` environment variable. Changing this updates
	// the master flavor of the existing cluster template.
	MasterFlavor pulumi.StringPtrOutput `pulumi:"masterFlavor"`
	// Indicates whether created cluster should
	// has a loadbalancer for master nodes or not. Changing this updates the
	// attribute of the existing cluster template.
	MasterLbEnabled pulumi.BoolPtrOutput `pulumi:"masterLbEnabled"`
	// The name of the cluster template. Changing this updates
	// the name of the existing cluster template.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the driver for the container
	// network. Changing this updates the network driver of the existing cluster
	// template.
	NetworkDriver pulumi.StringOutput `pulumi:"networkDriver"`
	// A comma-separated list of IP addresses that shouldn't
	// be used in the cluster. Changing this updates the no proxy list of the
	// existing cluster template.
	NoProxy pulumi.StringPtrOutput `pulumi:"noProxy"`
	// The project of the cluster template. Required if
	// admin wants to create a cluster template in another project. Changing this
	// creates a new cluster template.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Indicates whether cluster template should be public.
	// Changing this updates the public attribute of the existing cluster
	// template.
	Public pulumi.BoolPtrOutput `pulumi:"public"`
	// The region in which to obtain the V1 Container Infra
	// client. A Container Infra client is needed to create a cluster template. If
	// omitted,the `region` argument of the provider is used. Changing this
	// creates a new cluster template.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates whether Docker registry is enabled
	// in the cluster. Changing this updates the registry enabled attribute of the
	// existing cluster template.
	RegistryEnabled pulumi.BoolPtrOutput `pulumi:"registryEnabled"`
	// The server type for the cluster template. Changing
	// this updates the server type of the existing cluster template.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Indicates whether the TLS should be disabled in
	// the cluster. Changing this updates the attribute of the existing cluster.
	TlsDisabled pulumi.BoolPtrOutput `pulumi:"tlsDisabled"`
	UpdatedAt   pulumi.StringOutput  `pulumi:"updatedAt"`
	// The user of the cluster template. Required if admin
	// wants to create a cluster template for another user. Changing this creates
	// a new cluster template.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The name of the driver that is used for the
	// volumes of the cluster nodes. Changing this updates the volume driver of
	// the existing cluster template.
	VolumeDriver pulumi.StringPtrOutput `pulumi:"volumeDriver"`
}

// NewClusterTemplate registers a new resource with the given unique name, arguments, and options.
func NewClusterTemplate(ctx *pulumi.Context,
	name string, args *ClusterTemplateArgs, opts ...pulumi.ResourceOption) (*ClusterTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Coe == nil {
		return nil, errors.New("invalid value for required argument 'Coe'")
	}
	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	var resource ClusterTemplate
	err := ctx.RegisterResource("openstack:containerinfra/clusterTemplate:ClusterTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterTemplate gets an existing ClusterTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterTemplateState, opts ...pulumi.ResourceOption) (*ClusterTemplate, error) {
	var resource ClusterTemplate
	err := ctx.ReadResource("openstack:containerinfra/clusterTemplate:ClusterTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterTemplate resources.
type clusterTemplateState struct {
	// The API server port for the Container
	// Orchestration Engine for this cluster template. Changing this updates the
	// API server port of the existing cluster template.
	ApiserverPort *int `pulumi:"apiserverPort"`
	// The distro for the cluster (fedora-atomic,
	// coreos, etc.). Changing this updates the cluster distro of the existing
	// cluster template.
	ClusterDistro *string `pulumi:"clusterDistro"`
	// The Container Orchestration Engine for this cluster
	// template. Changing this updates the engine of the existing cluster
	// template.
	Coe       *string `pulumi:"coe"`
	CreatedAt *string `pulumi:"createdAt"`
	// Address of the DNS nameserver that is used in
	// nodes of the cluster. Changing this updates the DNS nameserver of the
	// existing cluster template.
	DnsNameserver *string `pulumi:"dnsNameserver"`
	// Docker storage driver. Changing this
	// updates the Docker storage driver of the existing cluster template.
	DockerStorageDriver *string `pulumi:"dockerStorageDriver"`
	// The size (in GB) of the Docker volume.
	// Changing this updates the Docker volume size of the existing cluster
	// template.
	DockerVolumeSize *int `pulumi:"dockerVolumeSize"`
	// The ID of the external network that will
	// be used for the cluster. Changing this updates the external network ID of
	// the existing cluster template.
	ExternalNetworkId *string `pulumi:"externalNetworkId"`
	// The fixed network that will be attached to the
	// cluster. Changing this updates the fixed network of the existing cluster
	// template.
	FixedNetwork *string `pulumi:"fixedNetwork"`
	// The fixed subnet that will be attached to the
	// cluster. Changing this updates the fixed subnet of the existing cluster
	// template.
	FixedSubnet *string `pulumi:"fixedSubnet"`
	// The flavor for the nodes of the cluster. Can be set via
	// the `OS_MAGNUM_FLAVOR` environment variable. Changing this updates the
	// flavor of the existing cluster template.
	Flavor *string `pulumi:"flavor"`
	// Indicates whether created cluster should
	// create floating IP for every node or not. Changing this updates the
	// floating IP enabled attribute of the existing cluster template.
	FloatingIpEnabled *bool `pulumi:"floatingIpEnabled"`
	// The address of a proxy for receiving all HTTP
	// requests and relay them. Changing this updates the HTTP proxy address of
	// the existing cluster template.
	HttpProxy *string `pulumi:"httpProxy"`
	// The address of a proxy for receiving all HTTPS
	// requests and relay them. Changing this updates the HTTPS proxy address of
	// the existing cluster template.
	HttpsProxy *string `pulumi:"httpsProxy"`
	// The reference to an image that is used for nodes of the
	// cluster. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
	// Changing this updates the image attribute of the existing cluster template.
	Image *string `pulumi:"image"`
	// The insecure registry URL for the cluster
	// template. Changing this updates the insecure registry attribute of the
	// existing cluster template.
	InsecureRegistry *string `pulumi:"insecureRegistry"`
	// The name of the Compute service SSH keypair.
	// Changing this updates the keypair of the existing cluster template.
	KeypairId *string `pulumi:"keypairId"`
	// The list of key value pairs representing additional
	// properties of the cluster template. Changing this updates the labels of the
	// existing cluster template.
	Labels map[string]interface{} `pulumi:"labels"`
	// The flavor for the master nodes. Can be set via
	// the `OS_MAGNUM_MASTER_FLAVOR` environment variable. Changing this updates
	// the master flavor of the existing cluster template.
	MasterFlavor *string `pulumi:"masterFlavor"`
	// Indicates whether created cluster should
	// has a loadbalancer for master nodes or not. Changing this updates the
	// attribute of the existing cluster template.
	MasterLbEnabled *bool `pulumi:"masterLbEnabled"`
	// The name of the cluster template. Changing this updates
	// the name of the existing cluster template.
	Name *string `pulumi:"name"`
	// The name of the driver for the container
	// network. Changing this updates the network driver of the existing cluster
	// template.
	NetworkDriver *string `pulumi:"networkDriver"`
	// A comma-separated list of IP addresses that shouldn't
	// be used in the cluster. Changing this updates the no proxy list of the
	// existing cluster template.
	NoProxy *string `pulumi:"noProxy"`
	// The project of the cluster template. Required if
	// admin wants to create a cluster template in another project. Changing this
	// creates a new cluster template.
	ProjectId *string `pulumi:"projectId"`
	// Indicates whether cluster template should be public.
	// Changing this updates the public attribute of the existing cluster
	// template.
	Public *bool `pulumi:"public"`
	// The region in which to obtain the V1 Container Infra
	// client. A Container Infra client is needed to create a cluster template. If
	// omitted,the `region` argument of the provider is used. Changing this
	// creates a new cluster template.
	Region *string `pulumi:"region"`
	// Indicates whether Docker registry is enabled
	// in the cluster. Changing this updates the registry enabled attribute of the
	// existing cluster template.
	RegistryEnabled *bool `pulumi:"registryEnabled"`
	// The server type for the cluster template. Changing
	// this updates the server type of the existing cluster template.
	ServerType *string `pulumi:"serverType"`
	// Indicates whether the TLS should be disabled in
	// the cluster. Changing this updates the attribute of the existing cluster.
	TlsDisabled *bool   `pulumi:"tlsDisabled"`
	UpdatedAt   *string `pulumi:"updatedAt"`
	// The user of the cluster template. Required if admin
	// wants to create a cluster template for another user. Changing this creates
	// a new cluster template.
	UserId *string `pulumi:"userId"`
	// The name of the driver that is used for the
	// volumes of the cluster nodes. Changing this updates the volume driver of
	// the existing cluster template.
	VolumeDriver *string `pulumi:"volumeDriver"`
}

type ClusterTemplateState struct {
	// The API server port for the Container
	// Orchestration Engine for this cluster template. Changing this updates the
	// API server port of the existing cluster template.
	ApiserverPort pulumi.IntPtrInput
	// The distro for the cluster (fedora-atomic,
	// coreos, etc.). Changing this updates the cluster distro of the existing
	// cluster template.
	ClusterDistro pulumi.StringPtrInput
	// The Container Orchestration Engine for this cluster
	// template. Changing this updates the engine of the existing cluster
	// template.
	Coe       pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	// Address of the DNS nameserver that is used in
	// nodes of the cluster. Changing this updates the DNS nameserver of the
	// existing cluster template.
	DnsNameserver pulumi.StringPtrInput
	// Docker storage driver. Changing this
	// updates the Docker storage driver of the existing cluster template.
	DockerStorageDriver pulumi.StringPtrInput
	// The size (in GB) of the Docker volume.
	// Changing this updates the Docker volume size of the existing cluster
	// template.
	DockerVolumeSize pulumi.IntPtrInput
	// The ID of the external network that will
	// be used for the cluster. Changing this updates the external network ID of
	// the existing cluster template.
	ExternalNetworkId pulumi.StringPtrInput
	// The fixed network that will be attached to the
	// cluster. Changing this updates the fixed network of the existing cluster
	// template.
	FixedNetwork pulumi.StringPtrInput
	// The fixed subnet that will be attached to the
	// cluster. Changing this updates the fixed subnet of the existing cluster
	// template.
	FixedSubnet pulumi.StringPtrInput
	// The flavor for the nodes of the cluster. Can be set via
	// the `OS_MAGNUM_FLAVOR` environment variable. Changing this updates the
	// flavor of the existing cluster template.
	Flavor pulumi.StringPtrInput
	// Indicates whether created cluster should
	// create floating IP for every node or not. Changing this updates the
	// floating IP enabled attribute of the existing cluster template.
	FloatingIpEnabled pulumi.BoolPtrInput
	// The address of a proxy for receiving all HTTP
	// requests and relay them. Changing this updates the HTTP proxy address of
	// the existing cluster template.
	HttpProxy pulumi.StringPtrInput
	// The address of a proxy for receiving all HTTPS
	// requests and relay them. Changing this updates the HTTPS proxy address of
	// the existing cluster template.
	HttpsProxy pulumi.StringPtrInput
	// The reference to an image that is used for nodes of the
	// cluster. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
	// Changing this updates the image attribute of the existing cluster template.
	Image pulumi.StringPtrInput
	// The insecure registry URL for the cluster
	// template. Changing this updates the insecure registry attribute of the
	// existing cluster template.
	InsecureRegistry pulumi.StringPtrInput
	// The name of the Compute service SSH keypair.
	// Changing this updates the keypair of the existing cluster template.
	KeypairId pulumi.StringPtrInput
	// The list of key value pairs representing additional
	// properties of the cluster template. Changing this updates the labels of the
	// existing cluster template.
	Labels pulumi.MapInput
	// The flavor for the master nodes. Can be set via
	// the `OS_MAGNUM_MASTER_FLAVOR` environment variable. Changing this updates
	// the master flavor of the existing cluster template.
	MasterFlavor pulumi.StringPtrInput
	// Indicates whether created cluster should
	// has a loadbalancer for master nodes or not. Changing this updates the
	// attribute of the existing cluster template.
	MasterLbEnabled pulumi.BoolPtrInput
	// The name of the cluster template. Changing this updates
	// the name of the existing cluster template.
	Name pulumi.StringPtrInput
	// The name of the driver for the container
	// network. Changing this updates the network driver of the existing cluster
	// template.
	NetworkDriver pulumi.StringPtrInput
	// A comma-separated list of IP addresses that shouldn't
	// be used in the cluster. Changing this updates the no proxy list of the
	// existing cluster template.
	NoProxy pulumi.StringPtrInput
	// The project of the cluster template. Required if
	// admin wants to create a cluster template in another project. Changing this
	// creates a new cluster template.
	ProjectId pulumi.StringPtrInput
	// Indicates whether cluster template should be public.
	// Changing this updates the public attribute of the existing cluster
	// template.
	Public pulumi.BoolPtrInput
	// The region in which to obtain the V1 Container Infra
	// client. A Container Infra client is needed to create a cluster template. If
	// omitted,the `region` argument of the provider is used. Changing this
	// creates a new cluster template.
	Region pulumi.StringPtrInput
	// Indicates whether Docker registry is enabled
	// in the cluster. Changing this updates the registry enabled attribute of the
	// existing cluster template.
	RegistryEnabled pulumi.BoolPtrInput
	// The server type for the cluster template. Changing
	// this updates the server type of the existing cluster template.
	ServerType pulumi.StringPtrInput
	// Indicates whether the TLS should be disabled in
	// the cluster. Changing this updates the attribute of the existing cluster.
	TlsDisabled pulumi.BoolPtrInput
	UpdatedAt   pulumi.StringPtrInput
	// The user of the cluster template. Required if admin
	// wants to create a cluster template for another user. Changing this creates
	// a new cluster template.
	UserId pulumi.StringPtrInput
	// The name of the driver that is used for the
	// volumes of the cluster nodes. Changing this updates the volume driver of
	// the existing cluster template.
	VolumeDriver pulumi.StringPtrInput
}

func (ClusterTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTemplateState)(nil)).Elem()
}

type clusterTemplateArgs struct {
	// The API server port for the Container
	// Orchestration Engine for this cluster template. Changing this updates the
	// API server port of the existing cluster template.
	ApiserverPort *int `pulumi:"apiserverPort"`
	// The distro for the cluster (fedora-atomic,
	// coreos, etc.). Changing this updates the cluster distro of the existing
	// cluster template.
	ClusterDistro *string `pulumi:"clusterDistro"`
	// The Container Orchestration Engine for this cluster
	// template. Changing this updates the engine of the existing cluster
	// template.
	Coe string `pulumi:"coe"`
	// Address of the DNS nameserver that is used in
	// nodes of the cluster. Changing this updates the DNS nameserver of the
	// existing cluster template.
	DnsNameserver *string `pulumi:"dnsNameserver"`
	// Docker storage driver. Changing this
	// updates the Docker storage driver of the existing cluster template.
	DockerStorageDriver *string `pulumi:"dockerStorageDriver"`
	// The size (in GB) of the Docker volume.
	// Changing this updates the Docker volume size of the existing cluster
	// template.
	DockerVolumeSize *int `pulumi:"dockerVolumeSize"`
	// The ID of the external network that will
	// be used for the cluster. Changing this updates the external network ID of
	// the existing cluster template.
	ExternalNetworkId *string `pulumi:"externalNetworkId"`
	// The fixed network that will be attached to the
	// cluster. Changing this updates the fixed network of the existing cluster
	// template.
	FixedNetwork *string `pulumi:"fixedNetwork"`
	// The fixed subnet that will be attached to the
	// cluster. Changing this updates the fixed subnet of the existing cluster
	// template.
	FixedSubnet *string `pulumi:"fixedSubnet"`
	// The flavor for the nodes of the cluster. Can be set via
	// the `OS_MAGNUM_FLAVOR` environment variable. Changing this updates the
	// flavor of the existing cluster template.
	Flavor *string `pulumi:"flavor"`
	// Indicates whether created cluster should
	// create floating IP for every node or not. Changing this updates the
	// floating IP enabled attribute of the existing cluster template.
	FloatingIpEnabled *bool `pulumi:"floatingIpEnabled"`
	// The address of a proxy for receiving all HTTP
	// requests and relay them. Changing this updates the HTTP proxy address of
	// the existing cluster template.
	HttpProxy *string `pulumi:"httpProxy"`
	// The address of a proxy for receiving all HTTPS
	// requests and relay them. Changing this updates the HTTPS proxy address of
	// the existing cluster template.
	HttpsProxy *string `pulumi:"httpsProxy"`
	// The reference to an image that is used for nodes of the
	// cluster. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
	// Changing this updates the image attribute of the existing cluster template.
	Image string `pulumi:"image"`
	// The insecure registry URL for the cluster
	// template. Changing this updates the insecure registry attribute of the
	// existing cluster template.
	InsecureRegistry *string `pulumi:"insecureRegistry"`
	// The name of the Compute service SSH keypair.
	// Changing this updates the keypair of the existing cluster template.
	KeypairId *string `pulumi:"keypairId"`
	// The list of key value pairs representing additional
	// properties of the cluster template. Changing this updates the labels of the
	// existing cluster template.
	Labels map[string]interface{} `pulumi:"labels"`
	// The flavor for the master nodes. Can be set via
	// the `OS_MAGNUM_MASTER_FLAVOR` environment variable. Changing this updates
	// the master flavor of the existing cluster template.
	MasterFlavor *string `pulumi:"masterFlavor"`
	// Indicates whether created cluster should
	// has a loadbalancer for master nodes or not. Changing this updates the
	// attribute of the existing cluster template.
	MasterLbEnabled *bool `pulumi:"masterLbEnabled"`
	// The name of the cluster template. Changing this updates
	// the name of the existing cluster template.
	Name *string `pulumi:"name"`
	// The name of the driver for the container
	// network. Changing this updates the network driver of the existing cluster
	// template.
	NetworkDriver *string `pulumi:"networkDriver"`
	// A comma-separated list of IP addresses that shouldn't
	// be used in the cluster. Changing this updates the no proxy list of the
	// existing cluster template.
	NoProxy *string `pulumi:"noProxy"`
	// Indicates whether cluster template should be public.
	// Changing this updates the public attribute of the existing cluster
	// template.
	Public *bool `pulumi:"public"`
	// The region in which to obtain the V1 Container Infra
	// client. A Container Infra client is needed to create a cluster template. If
	// omitted,the `region` argument of the provider is used. Changing this
	// creates a new cluster template.
	Region *string `pulumi:"region"`
	// Indicates whether Docker registry is enabled
	// in the cluster. Changing this updates the registry enabled attribute of the
	// existing cluster template.
	RegistryEnabled *bool `pulumi:"registryEnabled"`
	// The server type for the cluster template. Changing
	// this updates the server type of the existing cluster template.
	ServerType *string `pulumi:"serverType"`
	// Indicates whether the TLS should be disabled in
	// the cluster. Changing this updates the attribute of the existing cluster.
	TlsDisabled *bool `pulumi:"tlsDisabled"`
	// The name of the driver that is used for the
	// volumes of the cluster nodes. Changing this updates the volume driver of
	// the existing cluster template.
	VolumeDriver *string `pulumi:"volumeDriver"`
}

// The set of arguments for constructing a ClusterTemplate resource.
type ClusterTemplateArgs struct {
	// The API server port for the Container
	// Orchestration Engine for this cluster template. Changing this updates the
	// API server port of the existing cluster template.
	ApiserverPort pulumi.IntPtrInput
	// The distro for the cluster (fedora-atomic,
	// coreos, etc.). Changing this updates the cluster distro of the existing
	// cluster template.
	ClusterDistro pulumi.StringPtrInput
	// The Container Orchestration Engine for this cluster
	// template. Changing this updates the engine of the existing cluster
	// template.
	Coe pulumi.StringInput
	// Address of the DNS nameserver that is used in
	// nodes of the cluster. Changing this updates the DNS nameserver of the
	// existing cluster template.
	DnsNameserver pulumi.StringPtrInput
	// Docker storage driver. Changing this
	// updates the Docker storage driver of the existing cluster template.
	DockerStorageDriver pulumi.StringPtrInput
	// The size (in GB) of the Docker volume.
	// Changing this updates the Docker volume size of the existing cluster
	// template.
	DockerVolumeSize pulumi.IntPtrInput
	// The ID of the external network that will
	// be used for the cluster. Changing this updates the external network ID of
	// the existing cluster template.
	ExternalNetworkId pulumi.StringPtrInput
	// The fixed network that will be attached to the
	// cluster. Changing this updates the fixed network of the existing cluster
	// template.
	FixedNetwork pulumi.StringPtrInput
	// The fixed subnet that will be attached to the
	// cluster. Changing this updates the fixed subnet of the existing cluster
	// template.
	FixedSubnet pulumi.StringPtrInput
	// The flavor for the nodes of the cluster. Can be set via
	// the `OS_MAGNUM_FLAVOR` environment variable. Changing this updates the
	// flavor of the existing cluster template.
	Flavor pulumi.StringPtrInput
	// Indicates whether created cluster should
	// create floating IP for every node or not. Changing this updates the
	// floating IP enabled attribute of the existing cluster template.
	FloatingIpEnabled pulumi.BoolPtrInput
	// The address of a proxy for receiving all HTTP
	// requests and relay them. Changing this updates the HTTP proxy address of
	// the existing cluster template.
	HttpProxy pulumi.StringPtrInput
	// The address of a proxy for receiving all HTTPS
	// requests and relay them. Changing this updates the HTTPS proxy address of
	// the existing cluster template.
	HttpsProxy pulumi.StringPtrInput
	// The reference to an image that is used for nodes of the
	// cluster. Can be set via the `OS_MAGNUM_IMAGE` environment variable.
	// Changing this updates the image attribute of the existing cluster template.
	Image pulumi.StringInput
	// The insecure registry URL for the cluster
	// template. Changing this updates the insecure registry attribute of the
	// existing cluster template.
	InsecureRegistry pulumi.StringPtrInput
	// The name of the Compute service SSH keypair.
	// Changing this updates the keypair of the existing cluster template.
	KeypairId pulumi.StringPtrInput
	// The list of key value pairs representing additional
	// properties of the cluster template. Changing this updates the labels of the
	// existing cluster template.
	Labels pulumi.MapInput
	// The flavor for the master nodes. Can be set via
	// the `OS_MAGNUM_MASTER_FLAVOR` environment variable. Changing this updates
	// the master flavor of the existing cluster template.
	MasterFlavor pulumi.StringPtrInput
	// Indicates whether created cluster should
	// has a loadbalancer for master nodes or not. Changing this updates the
	// attribute of the existing cluster template.
	MasterLbEnabled pulumi.BoolPtrInput
	// The name of the cluster template. Changing this updates
	// the name of the existing cluster template.
	Name pulumi.StringPtrInput
	// The name of the driver for the container
	// network. Changing this updates the network driver of the existing cluster
	// template.
	NetworkDriver pulumi.StringPtrInput
	// A comma-separated list of IP addresses that shouldn't
	// be used in the cluster. Changing this updates the no proxy list of the
	// existing cluster template.
	NoProxy pulumi.StringPtrInput
	// Indicates whether cluster template should be public.
	// Changing this updates the public attribute of the existing cluster
	// template.
	Public pulumi.BoolPtrInput
	// The region in which to obtain the V1 Container Infra
	// client. A Container Infra client is needed to create a cluster template. If
	// omitted,the `region` argument of the provider is used. Changing this
	// creates a new cluster template.
	Region pulumi.StringPtrInput
	// Indicates whether Docker registry is enabled
	// in the cluster. Changing this updates the registry enabled attribute of the
	// existing cluster template.
	RegistryEnabled pulumi.BoolPtrInput
	// The server type for the cluster template. Changing
	// this updates the server type of the existing cluster template.
	ServerType pulumi.StringPtrInput
	// Indicates whether the TLS should be disabled in
	// the cluster. Changing this updates the attribute of the existing cluster.
	TlsDisabled pulumi.BoolPtrInput
	// The name of the driver that is used for the
	// volumes of the cluster nodes. Changing this updates the volume driver of
	// the existing cluster template.
	VolumeDriver pulumi.StringPtrInput
}

func (ClusterTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTemplateArgs)(nil)).Elem()
}

type ClusterTemplateInput interface {
	pulumi.Input

	ToClusterTemplateOutput() ClusterTemplateOutput
	ToClusterTemplateOutputWithContext(ctx context.Context) ClusterTemplateOutput
}

func (*ClusterTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTemplate)(nil)).Elem()
}

func (i *ClusterTemplate) ToClusterTemplateOutput() ClusterTemplateOutput {
	return i.ToClusterTemplateOutputWithContext(context.Background())
}

func (i *ClusterTemplate) ToClusterTemplateOutputWithContext(ctx context.Context) ClusterTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTemplateOutput)
}

// ClusterTemplateArrayInput is an input type that accepts ClusterTemplateArray and ClusterTemplateArrayOutput values.
// You can construct a concrete instance of `ClusterTemplateArrayInput` via:
//
//          ClusterTemplateArray{ ClusterTemplateArgs{...} }
type ClusterTemplateArrayInput interface {
	pulumi.Input

	ToClusterTemplateArrayOutput() ClusterTemplateArrayOutput
	ToClusterTemplateArrayOutputWithContext(context.Context) ClusterTemplateArrayOutput
}

type ClusterTemplateArray []ClusterTemplateInput

func (ClusterTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterTemplate)(nil)).Elem()
}

func (i ClusterTemplateArray) ToClusterTemplateArrayOutput() ClusterTemplateArrayOutput {
	return i.ToClusterTemplateArrayOutputWithContext(context.Background())
}

func (i ClusterTemplateArray) ToClusterTemplateArrayOutputWithContext(ctx context.Context) ClusterTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTemplateArrayOutput)
}

// ClusterTemplateMapInput is an input type that accepts ClusterTemplateMap and ClusterTemplateMapOutput values.
// You can construct a concrete instance of `ClusterTemplateMapInput` via:
//
//          ClusterTemplateMap{ "key": ClusterTemplateArgs{...} }
type ClusterTemplateMapInput interface {
	pulumi.Input

	ToClusterTemplateMapOutput() ClusterTemplateMapOutput
	ToClusterTemplateMapOutputWithContext(context.Context) ClusterTemplateMapOutput
}

type ClusterTemplateMap map[string]ClusterTemplateInput

func (ClusterTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterTemplate)(nil)).Elem()
}

func (i ClusterTemplateMap) ToClusterTemplateMapOutput() ClusterTemplateMapOutput {
	return i.ToClusterTemplateMapOutputWithContext(context.Background())
}

func (i ClusterTemplateMap) ToClusterTemplateMapOutputWithContext(ctx context.Context) ClusterTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTemplateMapOutput)
}

type ClusterTemplateOutput struct{ *pulumi.OutputState }

func (ClusterTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTemplate)(nil)).Elem()
}

func (o ClusterTemplateOutput) ToClusterTemplateOutput() ClusterTemplateOutput {
	return o
}

func (o ClusterTemplateOutput) ToClusterTemplateOutputWithContext(ctx context.Context) ClusterTemplateOutput {
	return o
}

type ClusterTemplateArrayOutput struct{ *pulumi.OutputState }

func (ClusterTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterTemplate)(nil)).Elem()
}

func (o ClusterTemplateArrayOutput) ToClusterTemplateArrayOutput() ClusterTemplateArrayOutput {
	return o
}

func (o ClusterTemplateArrayOutput) ToClusterTemplateArrayOutputWithContext(ctx context.Context) ClusterTemplateArrayOutput {
	return o
}

func (o ClusterTemplateArrayOutput) Index(i pulumi.IntInput) ClusterTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterTemplate {
		return vs[0].([]*ClusterTemplate)[vs[1].(int)]
	}).(ClusterTemplateOutput)
}

type ClusterTemplateMapOutput struct{ *pulumi.OutputState }

func (ClusterTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterTemplate)(nil)).Elem()
}

func (o ClusterTemplateMapOutput) ToClusterTemplateMapOutput() ClusterTemplateMapOutput {
	return o
}

func (o ClusterTemplateMapOutput) ToClusterTemplateMapOutputWithContext(ctx context.Context) ClusterTemplateMapOutput {
	return o
}

func (o ClusterTemplateMapOutput) MapIndex(k pulumi.StringInput) ClusterTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterTemplate {
		return vs[0].(map[string]*ClusterTemplate)[vs[1].(string)]
	}).(ClusterTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTemplateInput)(nil)).Elem(), &ClusterTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTemplateArrayInput)(nil)).Elem(), ClusterTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTemplateMapInput)(nil)).Elem(), ClusterTemplateMap{})
	pulumi.RegisterOutputType(ClusterTemplateOutput{})
	pulumi.RegisterOutputType(ClusterTemplateArrayOutput{})
	pulumi.RegisterOutputType(ClusterTemplateMapOutput{})
}
