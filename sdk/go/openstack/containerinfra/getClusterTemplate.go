// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerinfra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v4/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the ID of an available OpenStack Magnum cluster
// template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v4/go/openstack/containerinfra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containerinfra.LookupClusterTemplate(ctx, &containerinfra.LookupClusterTemplateArgs{
//				Name: "clustertemplate_1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupClusterTemplate(ctx *pulumi.Context, args *LookupClusterTemplateArgs, opts ...pulumi.InvokeOption) (*LookupClusterTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterTemplateResult
	err := ctx.Invoke("openstack:containerinfra/getClusterTemplate:getClusterTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterTemplate.
type LookupClusterTemplateArgs struct {
	// The name of the cluster template.
	Name string `pulumi:"name"`
	// The region in which to obtain the V1 Container Infra
	// client.
	// If omitted, the `region` argument of the provider is used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getClusterTemplate.
type LookupClusterTemplateResult struct {
	// The API server port for the Container Orchestration
	// Engine for this cluster template.
	ApiserverPort int `pulumi:"apiserverPort"`
	// The distro for the cluster (fedora-atomic, coreos, etc.).
	ClusterDistro string `pulumi:"clusterDistro"`
	// The Container Orchestration Engine for this cluster template.
	Coe string `pulumi:"coe"`
	// The time at which cluster template was created.
	CreatedAt string `pulumi:"createdAt"`
	// Address of the DNS nameserver that is used in nodes of the
	// cluster.
	DnsNameserver string `pulumi:"dnsNameserver"`
	// Docker storage driver. Changing this updates the
	// Docker storage driver of the existing cluster template.
	DockerStorageDriver string `pulumi:"dockerStorageDriver"`
	// The size (in GB) of the Docker volume.
	DockerVolumeSize int `pulumi:"dockerVolumeSize"`
	// The ID of the external network that will be used for
	// the cluster.
	ExternalNetworkId string `pulumi:"externalNetworkId"`
	// The fixed network that will be attached to the cluster.
	FixedNetwork string `pulumi:"fixedNetwork"`
	// =The fixed subnet that will be attached to the cluster.
	FixedSubnet string `pulumi:"fixedSubnet"`
	// The flavor for the nodes of the cluster.
	Flavor string `pulumi:"flavor"`
	// Indicates whether created cluster should create IP
	// floating IP for every node or not.
	FloatingIpEnabled bool `pulumi:"floatingIpEnabled"`
	// Indicates whether the ClusterTemplate is hidden or not.
	Hidden bool `pulumi:"hidden"`
	// The address of a proxy for receiving all HTTP requests and
	// relay them.
	HttpProxy string `pulumi:"httpProxy"`
	// The address of a proxy for receiving all HTTPS requests and
	// relay them.
	HttpsProxy string `pulumi:"httpsProxy"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The reference to an image that is used for nodes of the cluster.
	Image string `pulumi:"image"`
	// The insecure registry URL for the cluster template.
	InsecureRegistry string `pulumi:"insecureRegistry"`
	// The name of the Compute service SSH keypair.
	KeypairId string `pulumi:"keypairId"`
	// The list of key value pairs representing additional properties
	// of the cluster template.
	Labels map[string]string `pulumi:"labels"`
	// The flavor for the master nodes.
	MasterFlavor string `pulumi:"masterFlavor"`
	// Indicates whether created cluster should has a
	// loadbalancer for master nodes or not.
	MasterLbEnabled bool `pulumi:"masterLbEnabled"`
	// See Argument Reference above.
	Name string `pulumi:"name"`
	// The name of the driver for the container network.
	NetworkDriver string `pulumi:"networkDriver"`
	// A comma-separated list of IP addresses that shouldn't be used in
	// the cluster.
	NoProxy string `pulumi:"noProxy"`
	// The project of the cluster template.
	ProjectId string `pulumi:"projectId"`
	// Indicates whether cluster template should be public.
	Public bool `pulumi:"public"`
	// See Argument Reference above.
	Region string `pulumi:"region"`
	// Indicates whether Docker registry is enabled in the
	// cluster.
	RegistryEnabled bool `pulumi:"registryEnabled"`
	// The server type for the cluster template.
	ServerType string `pulumi:"serverType"`
	// Indicates whether the TLS should be disabled in the cluster.
	TlsDisabled bool `pulumi:"tlsDisabled"`
	// The time at which cluster template was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The user of the cluster template.
	UserId string `pulumi:"userId"`
	// The name of the driver that is used for the volumes of the
	// cluster nodes.
	VolumeDriver string `pulumi:"volumeDriver"`
}

func LookupClusterTemplateOutput(ctx *pulumi.Context, args LookupClusterTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupClusterTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterTemplateResult, error) {
			args := v.(LookupClusterTemplateArgs)
			r, err := LookupClusterTemplate(ctx, &args, opts...)
			var s LookupClusterTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterTemplateResultOutput)
}

// A collection of arguments for invoking getClusterTemplate.
type LookupClusterTemplateOutputArgs struct {
	// The name of the cluster template.
	Name pulumi.StringInput `pulumi:"name"`
	// The region in which to obtain the V1 Container Infra
	// client.
	// If omitted, the `region` argument of the provider is used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupClusterTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getClusterTemplate.
type LookupClusterTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupClusterTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterTemplateResult)(nil)).Elem()
}

func (o LookupClusterTemplateResultOutput) ToLookupClusterTemplateResultOutput() LookupClusterTemplateResultOutput {
	return o
}

func (o LookupClusterTemplateResultOutput) ToLookupClusterTemplateResultOutputWithContext(ctx context.Context) LookupClusterTemplateResultOutput {
	return o
}

// The API server port for the Container Orchestration
// Engine for this cluster template.
func (o LookupClusterTemplateResultOutput) ApiserverPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) int { return v.ApiserverPort }).(pulumi.IntOutput)
}

// The distro for the cluster (fedora-atomic, coreos, etc.).
func (o LookupClusterTemplateResultOutput) ClusterDistro() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.ClusterDistro }).(pulumi.StringOutput)
}

// The Container Orchestration Engine for this cluster template.
func (o LookupClusterTemplateResultOutput) Coe() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.Coe }).(pulumi.StringOutput)
}

// The time at which cluster template was created.
func (o LookupClusterTemplateResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Address of the DNS nameserver that is used in nodes of the
// cluster.
func (o LookupClusterTemplateResultOutput) DnsNameserver() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.DnsNameserver }).(pulumi.StringOutput)
}

// Docker storage driver. Changing this updates the
// Docker storage driver of the existing cluster template.
func (o LookupClusterTemplateResultOutput) DockerStorageDriver() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.DockerStorageDriver }).(pulumi.StringOutput)
}

// The size (in GB) of the Docker volume.
func (o LookupClusterTemplateResultOutput) DockerVolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) int { return v.DockerVolumeSize }).(pulumi.IntOutput)
}

// The ID of the external network that will be used for
// the cluster.
func (o LookupClusterTemplateResultOutput) ExternalNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.ExternalNetworkId }).(pulumi.StringOutput)
}

// The fixed network that will be attached to the cluster.
func (o LookupClusterTemplateResultOutput) FixedNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.FixedNetwork }).(pulumi.StringOutput)
}

// =The fixed subnet that will be attached to the cluster.
func (o LookupClusterTemplateResultOutput) FixedSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.FixedSubnet }).(pulumi.StringOutput)
}

// The flavor for the nodes of the cluster.
func (o LookupClusterTemplateResultOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.Flavor }).(pulumi.StringOutput)
}

// Indicates whether created cluster should create IP
// floating IP for every node or not.
func (o LookupClusterTemplateResultOutput) FloatingIpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) bool { return v.FloatingIpEnabled }).(pulumi.BoolOutput)
}

// Indicates whether the ClusterTemplate is hidden or not.
func (o LookupClusterTemplateResultOutput) Hidden() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) bool { return v.Hidden }).(pulumi.BoolOutput)
}

// The address of a proxy for receiving all HTTP requests and
// relay them.
func (o LookupClusterTemplateResultOutput) HttpProxy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.HttpProxy }).(pulumi.StringOutput)
}

// The address of a proxy for receiving all HTTPS requests and
// relay them.
func (o LookupClusterTemplateResultOutput) HttpsProxy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.HttpsProxy }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClusterTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The reference to an image that is used for nodes of the cluster.
func (o LookupClusterTemplateResultOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.Image }).(pulumi.StringOutput)
}

// The insecure registry URL for the cluster template.
func (o LookupClusterTemplateResultOutput) InsecureRegistry() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.InsecureRegistry }).(pulumi.StringOutput)
}

// The name of the Compute service SSH keypair.
func (o LookupClusterTemplateResultOutput) KeypairId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.KeypairId }).(pulumi.StringOutput)
}

// The list of key value pairs representing additional properties
// of the cluster template.
func (o LookupClusterTemplateResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The flavor for the master nodes.
func (o LookupClusterTemplateResultOutput) MasterFlavor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.MasterFlavor }).(pulumi.StringOutput)
}

// Indicates whether created cluster should has a
// loadbalancer for master nodes or not.
func (o LookupClusterTemplateResultOutput) MasterLbEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) bool { return v.MasterLbEnabled }).(pulumi.BoolOutput)
}

// See Argument Reference above.
func (o LookupClusterTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the driver for the container network.
func (o LookupClusterTemplateResultOutput) NetworkDriver() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.NetworkDriver }).(pulumi.StringOutput)
}

// A comma-separated list of IP addresses that shouldn't be used in
// the cluster.
func (o LookupClusterTemplateResultOutput) NoProxy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.NoProxy }).(pulumi.StringOutput)
}

// The project of the cluster template.
func (o LookupClusterTemplateResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Indicates whether cluster template should be public.
func (o LookupClusterTemplateResultOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) bool { return v.Public }).(pulumi.BoolOutput)
}

// See Argument Reference above.
func (o LookupClusterTemplateResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates whether Docker registry is enabled in the
// cluster.
func (o LookupClusterTemplateResultOutput) RegistryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) bool { return v.RegistryEnabled }).(pulumi.BoolOutput)
}

// The server type for the cluster template.
func (o LookupClusterTemplateResultOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.ServerType }).(pulumi.StringOutput)
}

// Indicates whether the TLS should be disabled in the cluster.
func (o LookupClusterTemplateResultOutput) TlsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) bool { return v.TlsDisabled }).(pulumi.BoolOutput)
}

// The time at which cluster template was updated.
func (o LookupClusterTemplateResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The user of the cluster template.
func (o LookupClusterTemplateResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.UserId }).(pulumi.StringOutput)
}

// The name of the driver that is used for the volumes of the
// cluster nodes.
func (o LookupClusterTemplateResultOutput) VolumeDriver() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterTemplateResult) string { return v.VolumeDriver }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterTemplateResultOutput{})
}
