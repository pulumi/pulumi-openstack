// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a list of OpenStack Project IDs matching the
// specified criteria.
//
// > **Note:** You _must_ have domain admin or cloud admin privileges in your OpenStack cloud to use
// this datasource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.GetProjectIdsV3(ctx, &identity.GetProjectIdsV3Args{
//				NameRegex: pulumi.StringRef("^prod.*"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProjectIdsV3(ctx *pulumi.Context, args *GetProjectIdsV3Args, opts ...pulumi.InvokeOption) (*GetProjectIdsV3Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectIdsV3Result
	err := ctx.Invoke("openstack:identity/getProjectIdsV3:getProjectIdsV3", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectIdsV3.
type GetProjectIdsV3Args struct {
	// The domain projects belongs to.
	DomainId *string `pulumi:"domainId"`
	// Whether the project is enabled or disabled. Valid
	// values are `true` and `false`. Default is `true`.
	Enabled  *bool `pulumi:"enabled"`
	IsDomain *bool `pulumi:"isDomain"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// The regular expression of the name of the project.
	// Cannot be used simultaneously with `name`. Unlike filtering by `name` the
	// `nameRegex` filtering does by client on the result of OpenStack search
	// query.
	NameRegex *string `pulumi:"nameRegex"`
	// The parent of the project.
	ParentId *string `pulumi:"parentId"`
	Region   *string `pulumi:"region"`
	// Tags for the project.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getProjectIdsV3.
type GetProjectIdsV3Result struct {
	Description string `pulumi:"description"`
	DomainId    string `pulumi:"domainId"`
	Enabled     *bool  `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id        string   `pulumi:"id"`
	Ids       []string `pulumi:"ids"`
	IsDomain  *bool    `pulumi:"isDomain"`
	Name      *string  `pulumi:"name"`
	NameRegex *string  `pulumi:"nameRegex"`
	ParentId  *string  `pulumi:"parentId"`
	Region    string   `pulumi:"region"`
	Tags      []string `pulumi:"tags"`
}

func GetProjectIdsV3Output(ctx *pulumi.Context, args GetProjectIdsV3OutputArgs, opts ...pulumi.InvokeOption) GetProjectIdsV3ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProjectIdsV3ResultOutput, error) {
			args := v.(GetProjectIdsV3Args)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetProjectIdsV3Result
			secret, err := ctx.InvokePackageRaw("openstack:identity/getProjectIdsV3:getProjectIdsV3", args, &rv, "", opts...)
			if err != nil {
				return GetProjectIdsV3ResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetProjectIdsV3ResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetProjectIdsV3ResultOutput), nil
			}
			return output, nil
		}).(GetProjectIdsV3ResultOutput)
}

// A collection of arguments for invoking getProjectIdsV3.
type GetProjectIdsV3OutputArgs struct {
	// The domain projects belongs to.
	DomainId pulumi.StringPtrInput `pulumi:"domainId"`
	// Whether the project is enabled or disabled. Valid
	// values are `true` and `false`. Default is `true`.
	Enabled  pulumi.BoolPtrInput `pulumi:"enabled"`
	IsDomain pulumi.BoolPtrInput `pulumi:"isDomain"`
	// The name of the project.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The regular expression of the name of the project.
	// Cannot be used simultaneously with `name`. Unlike filtering by `name` the
	// `nameRegex` filtering does by client on the result of OpenStack search
	// query.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The parent of the project.
	ParentId pulumi.StringPtrInput `pulumi:"parentId"`
	Region   pulumi.StringPtrInput `pulumi:"region"`
	// Tags for the project.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetProjectIdsV3OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIdsV3Args)(nil)).Elem()
}

// A collection of values returned by getProjectIdsV3.
type GetProjectIdsV3ResultOutput struct{ *pulumi.OutputState }

func (GetProjectIdsV3ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIdsV3Result)(nil)).Elem()
}

func (o GetProjectIdsV3ResultOutput) ToGetProjectIdsV3ResultOutput() GetProjectIdsV3ResultOutput {
	return o
}

func (o GetProjectIdsV3ResultOutput) ToGetProjectIdsV3ResultOutputWithContext(ctx context.Context) GetProjectIdsV3ResultOutput {
	return o
}

func (o GetProjectIdsV3ResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProjectIdsV3ResultOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) string { return v.DomainId }).(pulumi.StringOutput)
}

func (o GetProjectIdsV3ResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProjectIdsV3ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProjectIdsV3ResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetProjectIdsV3ResultOutput) IsDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) *bool { return v.IsDomain }).(pulumi.BoolPtrOutput)
}

func (o GetProjectIdsV3ResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetProjectIdsV3ResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetProjectIdsV3ResultOutput) ParentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) *string { return v.ParentId }).(pulumi.StringPtrOutput)
}

func (o GetProjectIdsV3ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetProjectIdsV3ResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIdsV3Result) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectIdsV3ResultOutput{})
}
