// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V3 Registered Limit resource within OpenStack Keystone.
//
// > **Note:** You _must_ have admin privileges in your OpenStack cloud to use
// this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			glance, err := identity.GetService(ctx, &identity.GetServiceArgs{
//				Name: pulumi.StringRef("glance"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = identity.NewRegisteredLimitV3(ctx, "limit_1", &identity.RegisteredLimitV3Args{
//				ServiceId:    pulumi.String(glance.Id),
//				ResourceName: pulumi.String("image_count_total"),
//				DefaultLimit: pulumi.Int(10),
//				Description:  pulumi.String("foo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Registered Limits can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import openstack:identity/registeredLimitV3:RegisteredLimitV3 limit_1 89c60255-9bd6-460c-822a-e2b959ede9d2
// ```
type RegisteredLimitV3 struct {
	pulumi.CustomResourceState

	// Integer for the actual limit.
	DefaultLimit pulumi.IntOutput `pulumi:"defaultLimit"`
	// Description of the limit
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new registered limit.
	Region pulumi.StringOutput `pulumi:"region"`
	// The resource that the limit applies to. On
	// updates, either service_id, resourceName or regionId must be different than
	// existing value otherwise it will raise 409.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// The service the limit applies to. On updates,
	// either service_id, resourceName or regionId must be different than existing
	// value otherwise it will raise 409.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewRegisteredLimitV3 registers a new resource with the given unique name, arguments, and options.
func NewRegisteredLimitV3(ctx *pulumi.Context,
	name string, args *RegisteredLimitV3Args, opts ...pulumi.ResourceOption) (*RegisteredLimitV3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultLimit == nil {
		return nil, errors.New("invalid value for required argument 'DefaultLimit'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegisteredLimitV3
	err := ctx.RegisterResource("openstack:identity/registeredLimitV3:RegisteredLimitV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegisteredLimitV3 gets an existing RegisteredLimitV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegisteredLimitV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegisteredLimitV3State, opts ...pulumi.ResourceOption) (*RegisteredLimitV3, error) {
	var resource RegisteredLimitV3
	err := ctx.ReadResource("openstack:identity/registeredLimitV3:RegisteredLimitV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegisteredLimitV3 resources.
type registeredLimitV3State struct {
	// Integer for the actual limit.
	DefaultLimit *int `pulumi:"defaultLimit"`
	// Description of the limit
	Description *string `pulumi:"description"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new registered limit.
	Region *string `pulumi:"region"`
	// The resource that the limit applies to. On
	// updates, either service_id, resourceName or regionId must be different than
	// existing value otherwise it will raise 409.
	ResourceName *string `pulumi:"resourceName"`
	// The service the limit applies to. On updates,
	// either service_id, resourceName or regionId must be different than existing
	// value otherwise it will raise 409.
	ServiceId *string `pulumi:"serviceId"`
}

type RegisteredLimitV3State struct {
	// Integer for the actual limit.
	DefaultLimit pulumi.IntPtrInput
	// Description of the limit
	Description pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new registered limit.
	Region pulumi.StringPtrInput
	// The resource that the limit applies to. On
	// updates, either service_id, resourceName or regionId must be different than
	// existing value otherwise it will raise 409.
	ResourceName pulumi.StringPtrInput
	// The service the limit applies to. On updates,
	// either service_id, resourceName or regionId must be different than existing
	// value otherwise it will raise 409.
	ServiceId pulumi.StringPtrInput
}

func (RegisteredLimitV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredLimitV3State)(nil)).Elem()
}

type registeredLimitV3Args struct {
	// Integer for the actual limit.
	DefaultLimit int `pulumi:"defaultLimit"`
	// Description of the limit
	Description *string `pulumi:"description"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new registered limit.
	Region *string `pulumi:"region"`
	// The resource that the limit applies to. On
	// updates, either service_id, resourceName or regionId must be different than
	// existing value otherwise it will raise 409.
	ResourceName string `pulumi:"resourceName"`
	// The service the limit applies to. On updates,
	// either service_id, resourceName or regionId must be different than existing
	// value otherwise it will raise 409.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a RegisteredLimitV3 resource.
type RegisteredLimitV3Args struct {
	// Integer for the actual limit.
	DefaultLimit pulumi.IntInput
	// Description of the limit
	Description pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new registered limit.
	Region pulumi.StringPtrInput
	// The resource that the limit applies to. On
	// updates, either service_id, resourceName or regionId must be different than
	// existing value otherwise it will raise 409.
	ResourceName pulumi.StringInput
	// The service the limit applies to. On updates,
	// either service_id, resourceName or regionId must be different than existing
	// value otherwise it will raise 409.
	ServiceId pulumi.StringInput
}

func (RegisteredLimitV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredLimitV3Args)(nil)).Elem()
}

type RegisteredLimitV3Input interface {
	pulumi.Input

	ToRegisteredLimitV3Output() RegisteredLimitV3Output
	ToRegisteredLimitV3OutputWithContext(ctx context.Context) RegisteredLimitV3Output
}

func (*RegisteredLimitV3) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredLimitV3)(nil)).Elem()
}

func (i *RegisteredLimitV3) ToRegisteredLimitV3Output() RegisteredLimitV3Output {
	return i.ToRegisteredLimitV3OutputWithContext(context.Background())
}

func (i *RegisteredLimitV3) ToRegisteredLimitV3OutputWithContext(ctx context.Context) RegisteredLimitV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredLimitV3Output)
}

// RegisteredLimitV3ArrayInput is an input type that accepts RegisteredLimitV3Array and RegisteredLimitV3ArrayOutput values.
// You can construct a concrete instance of `RegisteredLimitV3ArrayInput` via:
//
//	RegisteredLimitV3Array{ RegisteredLimitV3Args{...} }
type RegisteredLimitV3ArrayInput interface {
	pulumi.Input

	ToRegisteredLimitV3ArrayOutput() RegisteredLimitV3ArrayOutput
	ToRegisteredLimitV3ArrayOutputWithContext(context.Context) RegisteredLimitV3ArrayOutput
}

type RegisteredLimitV3Array []RegisteredLimitV3Input

func (RegisteredLimitV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredLimitV3)(nil)).Elem()
}

func (i RegisteredLimitV3Array) ToRegisteredLimitV3ArrayOutput() RegisteredLimitV3ArrayOutput {
	return i.ToRegisteredLimitV3ArrayOutputWithContext(context.Background())
}

func (i RegisteredLimitV3Array) ToRegisteredLimitV3ArrayOutputWithContext(ctx context.Context) RegisteredLimitV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredLimitV3ArrayOutput)
}

// RegisteredLimitV3MapInput is an input type that accepts RegisteredLimitV3Map and RegisteredLimitV3MapOutput values.
// You can construct a concrete instance of `RegisteredLimitV3MapInput` via:
//
//	RegisteredLimitV3Map{ "key": RegisteredLimitV3Args{...} }
type RegisteredLimitV3MapInput interface {
	pulumi.Input

	ToRegisteredLimitV3MapOutput() RegisteredLimitV3MapOutput
	ToRegisteredLimitV3MapOutputWithContext(context.Context) RegisteredLimitV3MapOutput
}

type RegisteredLimitV3Map map[string]RegisteredLimitV3Input

func (RegisteredLimitV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredLimitV3)(nil)).Elem()
}

func (i RegisteredLimitV3Map) ToRegisteredLimitV3MapOutput() RegisteredLimitV3MapOutput {
	return i.ToRegisteredLimitV3MapOutputWithContext(context.Background())
}

func (i RegisteredLimitV3Map) ToRegisteredLimitV3MapOutputWithContext(ctx context.Context) RegisteredLimitV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredLimitV3MapOutput)
}

type RegisteredLimitV3Output struct{ *pulumi.OutputState }

func (RegisteredLimitV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredLimitV3)(nil)).Elem()
}

func (o RegisteredLimitV3Output) ToRegisteredLimitV3Output() RegisteredLimitV3Output {
	return o
}

func (o RegisteredLimitV3Output) ToRegisteredLimitV3OutputWithContext(ctx context.Context) RegisteredLimitV3Output {
	return o
}

// Integer for the actual limit.
func (o RegisteredLimitV3Output) DefaultLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *RegisteredLimitV3) pulumi.IntOutput { return v.DefaultLimit }).(pulumi.IntOutput)
}

// Description of the limit
func (o RegisteredLimitV3Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegisteredLimitV3) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The region in which to obtain the V3 Keystone client.
// If omitted, the `region` argument of the provider is used. Changing this
// creates a new registered limit.
func (o RegisteredLimitV3Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredLimitV3) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The resource that the limit applies to. On
// updates, either service_id, resourceName or regionId must be different than
// existing value otherwise it will raise 409.
func (o RegisteredLimitV3Output) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredLimitV3) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// The service the limit applies to. On updates,
// either service_id, resourceName or regionId must be different than existing
// value otherwise it will raise 409.
func (o RegisteredLimitV3Output) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredLimitV3) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type RegisteredLimitV3ArrayOutput struct{ *pulumi.OutputState }

func (RegisteredLimitV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredLimitV3)(nil)).Elem()
}

func (o RegisteredLimitV3ArrayOutput) ToRegisteredLimitV3ArrayOutput() RegisteredLimitV3ArrayOutput {
	return o
}

func (o RegisteredLimitV3ArrayOutput) ToRegisteredLimitV3ArrayOutputWithContext(ctx context.Context) RegisteredLimitV3ArrayOutput {
	return o
}

func (o RegisteredLimitV3ArrayOutput) Index(i pulumi.IntInput) RegisteredLimitV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegisteredLimitV3 {
		return vs[0].([]*RegisteredLimitV3)[vs[1].(int)]
	}).(RegisteredLimitV3Output)
}

type RegisteredLimitV3MapOutput struct{ *pulumi.OutputState }

func (RegisteredLimitV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredLimitV3)(nil)).Elem()
}

func (o RegisteredLimitV3MapOutput) ToRegisteredLimitV3MapOutput() RegisteredLimitV3MapOutput {
	return o
}

func (o RegisteredLimitV3MapOutput) ToRegisteredLimitV3MapOutputWithContext(ctx context.Context) RegisteredLimitV3MapOutput {
	return o
}

func (o RegisteredLimitV3MapOutput) MapIndex(k pulumi.StringInput) RegisteredLimitV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegisteredLimitV3 {
		return vs[0].(map[string]*RegisteredLimitV3)[vs[1].(string)]
	}).(RegisteredLimitV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredLimitV3Input)(nil)).Elem(), &RegisteredLimitV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredLimitV3ArrayInput)(nil)).Elem(), RegisteredLimitV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredLimitV3MapInput)(nil)).Elem(), RegisteredLimitV3Map{})
	pulumi.RegisterOutputType(RegisteredLimitV3Output{})
	pulumi.RegisterOutputType(RegisteredLimitV3ArrayOutput{})
	pulumi.RegisterOutputType(RegisteredLimitV3MapOutput{})
}
