// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a V3 EC2 Credential resource within OpenStack Keystone.
// EC2 credentials in OpenStack are used to access S3 compatible Swift/RadosGW
// endpoints or to authenticate against Keystone.
//
// > **Note:** All arguments including the EC2 credential access key and secret
// will be stored in the raw state as plain-text. Read more about sensitive data
// in state.
//
// ## Example Usage
// ### EC2 credential in current project scope
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.NewEc2CredentialV3(ctx, "ec2Key1", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### EC2 credential in pre-defined project scope
//
// This allows administrative users to create EC2 credentials for a scope different
// from the current auth scope.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v3/go/openstack/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.NewEc2CredentialV3(ctx, "ec2Key1", &identity.Ec2CredentialV3Args{
//				ProjectId: pulumi.String("f7ac731cc11f40efbc03a9f9e1d1d21f"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EC2 Credentials can be imported using the `access`, e.g.
//
// ```sh
//
//	$ pulumi import openstack:identity/ec2CredentialV3:Ec2CredentialV3 ec2_cred_1 2d0ac4a2f81b4b0f9513ee49e780647d
//
// ```
type Ec2CredentialV3 struct {
	pulumi.CustomResourceState

	// contains an EC2 credential access UUID
	Access pulumi.StringOutput `pulumi:"access"`
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to. Only administrative users can specify a project ID different
	// from the current auth scope.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region pulumi.StringOutput `pulumi:"region"`
	// contains an EC2 credential secret UUID
	Secret pulumi.StringOutput `pulumi:"secret"`
	// contains an EC2 credential trust ID scope
	TrustId pulumi.StringOutput `pulumi:"trustId"`
	// The ID of the user the EC2 credential is created for.
	// Only administrative users can specify a user ID different from the current
	// auth scope.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewEc2CredentialV3 registers a new resource with the given unique name, arguments, and options.
func NewEc2CredentialV3(ctx *pulumi.Context,
	name string, args *Ec2CredentialV3Args, opts ...pulumi.ResourceOption) (*Ec2CredentialV3, error) {
	if args == nil {
		args = &Ec2CredentialV3Args{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ec2CredentialV3
	err := ctx.RegisterResource("openstack:identity/ec2CredentialV3:Ec2CredentialV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEc2CredentialV3 gets an existing Ec2CredentialV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEc2CredentialV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ec2CredentialV3State, opts ...pulumi.ResourceOption) (*Ec2CredentialV3, error) {
	var resource Ec2CredentialV3
	err := ctx.ReadResource("openstack:identity/ec2CredentialV3:Ec2CredentialV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ec2CredentialV3 resources.
type ec2CredentialV3State struct {
	// contains an EC2 credential access UUID
	Access *string `pulumi:"access"`
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to. Only administrative users can specify a project ID different
	// from the current auth scope.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region *string `pulumi:"region"`
	// contains an EC2 credential secret UUID
	Secret *string `pulumi:"secret"`
	// contains an EC2 credential trust ID scope
	TrustId *string `pulumi:"trustId"`
	// The ID of the user the EC2 credential is created for.
	// Only administrative users can specify a user ID different from the current
	// auth scope.
	UserId *string `pulumi:"userId"`
}

type Ec2CredentialV3State struct {
	// contains an EC2 credential access UUID
	Access pulumi.StringPtrInput
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to. Only administrative users can specify a project ID different
	// from the current auth scope.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region pulumi.StringPtrInput
	// contains an EC2 credential secret UUID
	Secret pulumi.StringPtrInput
	// contains an EC2 credential trust ID scope
	TrustId pulumi.StringPtrInput
	// The ID of the user the EC2 credential is created for.
	// Only administrative users can specify a user ID different from the current
	// auth scope.
	UserId pulumi.StringPtrInput
}

func (Ec2CredentialV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2CredentialV3State)(nil)).Elem()
}

type ec2CredentialV3Args struct {
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to. Only administrative users can specify a project ID different
	// from the current auth scope.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region *string `pulumi:"region"`
	// The ID of the user the EC2 credential is created for.
	// Only administrative users can specify a user ID different from the current
	// auth scope.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a Ec2CredentialV3 resource.
type Ec2CredentialV3Args struct {
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to. Only administrative users can specify a project ID different
	// from the current auth scope.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region pulumi.StringPtrInput
	// The ID of the user the EC2 credential is created for.
	// Only administrative users can specify a user ID different from the current
	// auth scope.
	UserId pulumi.StringPtrInput
}

func (Ec2CredentialV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2CredentialV3Args)(nil)).Elem()
}

type Ec2CredentialV3Input interface {
	pulumi.Input

	ToEc2CredentialV3Output() Ec2CredentialV3Output
	ToEc2CredentialV3OutputWithContext(ctx context.Context) Ec2CredentialV3Output
}

func (*Ec2CredentialV3) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2CredentialV3)(nil)).Elem()
}

func (i *Ec2CredentialV3) ToEc2CredentialV3Output() Ec2CredentialV3Output {
	return i.ToEc2CredentialV3OutputWithContext(context.Background())
}

func (i *Ec2CredentialV3) ToEc2CredentialV3OutputWithContext(ctx context.Context) Ec2CredentialV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ec2CredentialV3Output)
}

func (i *Ec2CredentialV3) ToOutput(ctx context.Context) pulumix.Output[*Ec2CredentialV3] {
	return pulumix.Output[*Ec2CredentialV3]{
		OutputState: i.ToEc2CredentialV3OutputWithContext(ctx).OutputState,
	}
}

// Ec2CredentialV3ArrayInput is an input type that accepts Ec2CredentialV3Array and Ec2CredentialV3ArrayOutput values.
// You can construct a concrete instance of `Ec2CredentialV3ArrayInput` via:
//
//	Ec2CredentialV3Array{ Ec2CredentialV3Args{...} }
type Ec2CredentialV3ArrayInput interface {
	pulumi.Input

	ToEc2CredentialV3ArrayOutput() Ec2CredentialV3ArrayOutput
	ToEc2CredentialV3ArrayOutputWithContext(context.Context) Ec2CredentialV3ArrayOutput
}

type Ec2CredentialV3Array []Ec2CredentialV3Input

func (Ec2CredentialV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ec2CredentialV3)(nil)).Elem()
}

func (i Ec2CredentialV3Array) ToEc2CredentialV3ArrayOutput() Ec2CredentialV3ArrayOutput {
	return i.ToEc2CredentialV3ArrayOutputWithContext(context.Background())
}

func (i Ec2CredentialV3Array) ToEc2CredentialV3ArrayOutputWithContext(ctx context.Context) Ec2CredentialV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ec2CredentialV3ArrayOutput)
}

func (i Ec2CredentialV3Array) ToOutput(ctx context.Context) pulumix.Output[[]*Ec2CredentialV3] {
	return pulumix.Output[[]*Ec2CredentialV3]{
		OutputState: i.ToEc2CredentialV3ArrayOutputWithContext(ctx).OutputState,
	}
}

// Ec2CredentialV3MapInput is an input type that accepts Ec2CredentialV3Map and Ec2CredentialV3MapOutput values.
// You can construct a concrete instance of `Ec2CredentialV3MapInput` via:
//
//	Ec2CredentialV3Map{ "key": Ec2CredentialV3Args{...} }
type Ec2CredentialV3MapInput interface {
	pulumi.Input

	ToEc2CredentialV3MapOutput() Ec2CredentialV3MapOutput
	ToEc2CredentialV3MapOutputWithContext(context.Context) Ec2CredentialV3MapOutput
}

type Ec2CredentialV3Map map[string]Ec2CredentialV3Input

func (Ec2CredentialV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ec2CredentialV3)(nil)).Elem()
}

func (i Ec2CredentialV3Map) ToEc2CredentialV3MapOutput() Ec2CredentialV3MapOutput {
	return i.ToEc2CredentialV3MapOutputWithContext(context.Background())
}

func (i Ec2CredentialV3Map) ToEc2CredentialV3MapOutputWithContext(ctx context.Context) Ec2CredentialV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ec2CredentialV3MapOutput)
}

func (i Ec2CredentialV3Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ec2CredentialV3] {
	return pulumix.Output[map[string]*Ec2CredentialV3]{
		OutputState: i.ToEc2CredentialV3MapOutputWithContext(ctx).OutputState,
	}
}

type Ec2CredentialV3Output struct{ *pulumi.OutputState }

func (Ec2CredentialV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2CredentialV3)(nil)).Elem()
}

func (o Ec2CredentialV3Output) ToEc2CredentialV3Output() Ec2CredentialV3Output {
	return o
}

func (o Ec2CredentialV3Output) ToEc2CredentialV3OutputWithContext(ctx context.Context) Ec2CredentialV3Output {
	return o
}

func (o Ec2CredentialV3Output) ToOutput(ctx context.Context) pulumix.Output[*Ec2CredentialV3] {
	return pulumix.Output[*Ec2CredentialV3]{
		OutputState: o.OutputState,
	}
}

// contains an EC2 credential access UUID
func (o Ec2CredentialV3Output) Access() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2CredentialV3) pulumi.StringOutput { return v.Access }).(pulumi.StringOutput)
}

// The ID of the project the EC2 credential is created
// for and that authentication requests using this EC2 credential will
// be scoped to. Only administrative users can specify a project ID different
// from the current auth scope.
func (o Ec2CredentialV3Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2CredentialV3) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the V3 Keystone client.
// If omitted, the `region` argument of the provider is used. Changing this
// creates a new EC2 credential.
func (o Ec2CredentialV3Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2CredentialV3) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// contains an EC2 credential secret UUID
func (o Ec2CredentialV3Output) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2CredentialV3) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// contains an EC2 credential trust ID scope
func (o Ec2CredentialV3Output) TrustId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2CredentialV3) pulumi.StringOutput { return v.TrustId }).(pulumi.StringOutput)
}

// The ID of the user the EC2 credential is created for.
// Only administrative users can specify a user ID different from the current
// auth scope.
func (o Ec2CredentialV3Output) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2CredentialV3) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type Ec2CredentialV3ArrayOutput struct{ *pulumi.OutputState }

func (Ec2CredentialV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ec2CredentialV3)(nil)).Elem()
}

func (o Ec2CredentialV3ArrayOutput) ToEc2CredentialV3ArrayOutput() Ec2CredentialV3ArrayOutput {
	return o
}

func (o Ec2CredentialV3ArrayOutput) ToEc2CredentialV3ArrayOutputWithContext(ctx context.Context) Ec2CredentialV3ArrayOutput {
	return o
}

func (o Ec2CredentialV3ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ec2CredentialV3] {
	return pulumix.Output[[]*Ec2CredentialV3]{
		OutputState: o.OutputState,
	}
}

func (o Ec2CredentialV3ArrayOutput) Index(i pulumi.IntInput) Ec2CredentialV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ec2CredentialV3 {
		return vs[0].([]*Ec2CredentialV3)[vs[1].(int)]
	}).(Ec2CredentialV3Output)
}

type Ec2CredentialV3MapOutput struct{ *pulumi.OutputState }

func (Ec2CredentialV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ec2CredentialV3)(nil)).Elem()
}

func (o Ec2CredentialV3MapOutput) ToEc2CredentialV3MapOutput() Ec2CredentialV3MapOutput {
	return o
}

func (o Ec2CredentialV3MapOutput) ToEc2CredentialV3MapOutputWithContext(ctx context.Context) Ec2CredentialV3MapOutput {
	return o
}

func (o Ec2CredentialV3MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ec2CredentialV3] {
	return pulumix.Output[map[string]*Ec2CredentialV3]{
		OutputState: o.OutputState,
	}
}

func (o Ec2CredentialV3MapOutput) MapIndex(k pulumi.StringInput) Ec2CredentialV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ec2CredentialV3 {
		return vs[0].(map[string]*Ec2CredentialV3)[vs[1].(string)]
	}).(Ec2CredentialV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ec2CredentialV3Input)(nil)).Elem(), &Ec2CredentialV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ec2CredentialV3ArrayInput)(nil)).Elem(), Ec2CredentialV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ec2CredentialV3MapInput)(nil)).Elem(), Ec2CredentialV3Map{})
	pulumi.RegisterOutputType(Ec2CredentialV3Output{})
	pulumi.RegisterOutputType(Ec2CredentialV3ArrayOutput{})
	pulumi.RegisterOutputType(Ec2CredentialV3MapOutput{})
}
