// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a V3 Limit resource within OpenStack Keystone.
//
// > **Note:** You _must_ have admin privileges in your OpenStack cloud to use
// this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-openstack/sdk/v5/go/openstack/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			glance, err := identity.GetService(ctx, &identity.GetServiceArgs{
//				Name: pulumi.StringRef("glance"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			project1, err := identity.NewProject(ctx, "project_1", &identity.ProjectArgs{
//				Name: pulumi.String("project_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = identity.NewLimitV3(ctx, "limit_1", &identity.LimitV3Args{
//				ProjectId:     project1.ID(),
//				ServiceId:     pulumi.String(glance.Id),
//				ResourceName:  pulumi.String("image_count_total"),
//				ResourceLimit: pulumi.Int(10),
//				Description:   pulumi.String("foo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Limits can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import openstack:identity/limitV3:LimitV3 limit_1 89c60255-9bd6-460c-822a-e2b959ede9d2
// ```
type LimitV3 struct {
	pulumi.CustomResourceState

	// Description of the limit.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain the limit applies to. Changing this
	// creates a new Limit.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The project the limit applies to. Changing this
	// creates a new Limit.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new Limit.
	Region pulumi.StringOutput `pulumi:"region"`
	// Integer for the actual limit.
	ResourceLimit pulumi.IntOutput `pulumi:"resourceLimit"`
	// The resource that the limit applies to. Changing
	// this creates a new Limit.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// The service the limit applies to. Changing this
	// creates a new Limit.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewLimitV3 registers a new resource with the given unique name, arguments, and options.
func NewLimitV3(ctx *pulumi.Context,
	name string, args *LimitV3Args, opts ...pulumi.ResourceOption) (*LimitV3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceLimit == nil {
		return nil, errors.New("invalid value for required argument 'ResourceLimit'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LimitV3
	err := ctx.RegisterResource("openstack:identity/limitV3:LimitV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLimitV3 gets an existing LimitV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLimitV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LimitV3State, opts ...pulumi.ResourceOption) (*LimitV3, error) {
	var resource LimitV3
	err := ctx.ReadResource("openstack:identity/limitV3:LimitV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LimitV3 resources.
type limitV3State struct {
	// Description of the limit.
	Description *string `pulumi:"description"`
	// The domain the limit applies to. Changing this
	// creates a new Limit.
	DomainId *string `pulumi:"domainId"`
	// The project the limit applies to. Changing this
	// creates a new Limit.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new Limit.
	Region *string `pulumi:"region"`
	// Integer for the actual limit.
	ResourceLimit *int `pulumi:"resourceLimit"`
	// The resource that the limit applies to. Changing
	// this creates a new Limit.
	ResourceName *string `pulumi:"resourceName"`
	// The service the limit applies to. Changing this
	// creates a new Limit.
	ServiceId *string `pulumi:"serviceId"`
}

type LimitV3State struct {
	// Description of the limit.
	Description pulumi.StringPtrInput
	// The domain the limit applies to. Changing this
	// creates a new Limit.
	DomainId pulumi.StringPtrInput
	// The project the limit applies to. Changing this
	// creates a new Limit.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new Limit.
	Region pulumi.StringPtrInput
	// Integer for the actual limit.
	ResourceLimit pulumi.IntPtrInput
	// The resource that the limit applies to. Changing
	// this creates a new Limit.
	ResourceName pulumi.StringPtrInput
	// The service the limit applies to. Changing this
	// creates a new Limit.
	ServiceId pulumi.StringPtrInput
}

func (LimitV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*limitV3State)(nil)).Elem()
}

type limitV3Args struct {
	// Description of the limit.
	Description *string `pulumi:"description"`
	// The domain the limit applies to. Changing this
	// creates a new Limit.
	DomainId *string `pulumi:"domainId"`
	// The project the limit applies to. Changing this
	// creates a new Limit.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new Limit.
	Region *string `pulumi:"region"`
	// Integer for the actual limit.
	ResourceLimit int `pulumi:"resourceLimit"`
	// The resource that the limit applies to. Changing
	// this creates a new Limit.
	ResourceName string `pulumi:"resourceName"`
	// The service the limit applies to. Changing this
	// creates a new Limit.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a LimitV3 resource.
type LimitV3Args struct {
	// Description of the limit.
	Description pulumi.StringPtrInput
	// The domain the limit applies to. Changing this
	// creates a new Limit.
	DomainId pulumi.StringPtrInput
	// The project the limit applies to. Changing this
	// creates a new Limit.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new Limit.
	Region pulumi.StringPtrInput
	// Integer for the actual limit.
	ResourceLimit pulumi.IntInput
	// The resource that the limit applies to. Changing
	// this creates a new Limit.
	ResourceName pulumi.StringInput
	// The service the limit applies to. Changing this
	// creates a new Limit.
	ServiceId pulumi.StringInput
}

func (LimitV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*limitV3Args)(nil)).Elem()
}

type LimitV3Input interface {
	pulumi.Input

	ToLimitV3Output() LimitV3Output
	ToLimitV3OutputWithContext(ctx context.Context) LimitV3Output
}

func (*LimitV3) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitV3)(nil)).Elem()
}

func (i *LimitV3) ToLimitV3Output() LimitV3Output {
	return i.ToLimitV3OutputWithContext(context.Background())
}

func (i *LimitV3) ToLimitV3OutputWithContext(ctx context.Context) LimitV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(LimitV3Output)
}

// LimitV3ArrayInput is an input type that accepts LimitV3Array and LimitV3ArrayOutput values.
// You can construct a concrete instance of `LimitV3ArrayInput` via:
//
//	LimitV3Array{ LimitV3Args{...} }
type LimitV3ArrayInput interface {
	pulumi.Input

	ToLimitV3ArrayOutput() LimitV3ArrayOutput
	ToLimitV3ArrayOutputWithContext(context.Context) LimitV3ArrayOutput
}

type LimitV3Array []LimitV3Input

func (LimitV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LimitV3)(nil)).Elem()
}

func (i LimitV3Array) ToLimitV3ArrayOutput() LimitV3ArrayOutput {
	return i.ToLimitV3ArrayOutputWithContext(context.Background())
}

func (i LimitV3Array) ToLimitV3ArrayOutputWithContext(ctx context.Context) LimitV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitV3ArrayOutput)
}

// LimitV3MapInput is an input type that accepts LimitV3Map and LimitV3MapOutput values.
// You can construct a concrete instance of `LimitV3MapInput` via:
//
//	LimitV3Map{ "key": LimitV3Args{...} }
type LimitV3MapInput interface {
	pulumi.Input

	ToLimitV3MapOutput() LimitV3MapOutput
	ToLimitV3MapOutputWithContext(context.Context) LimitV3MapOutput
}

type LimitV3Map map[string]LimitV3Input

func (LimitV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LimitV3)(nil)).Elem()
}

func (i LimitV3Map) ToLimitV3MapOutput() LimitV3MapOutput {
	return i.ToLimitV3MapOutputWithContext(context.Background())
}

func (i LimitV3Map) ToLimitV3MapOutputWithContext(ctx context.Context) LimitV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitV3MapOutput)
}

type LimitV3Output struct{ *pulumi.OutputState }

func (LimitV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitV3)(nil)).Elem()
}

func (o LimitV3Output) ToLimitV3Output() LimitV3Output {
	return o
}

func (o LimitV3Output) ToLimitV3OutputWithContext(ctx context.Context) LimitV3Output {
	return o
}

// Description of the limit.
func (o LimitV3Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LimitV3) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The domain the limit applies to. Changing this
// creates a new Limit.
func (o LimitV3Output) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *LimitV3) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The project the limit applies to. Changing this
// creates a new Limit.
func (o LimitV3Output) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LimitV3) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region in which to obtain the V3 Keystone client.
// If omitted, the `region` argument of the provider is used. Changing this
// creates a new Limit.
func (o LimitV3Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LimitV3) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Integer for the actual limit.
func (o LimitV3Output) ResourceLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *LimitV3) pulumi.IntOutput { return v.ResourceLimit }).(pulumi.IntOutput)
}

// The resource that the limit applies to. Changing
// this creates a new Limit.
func (o LimitV3Output) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *LimitV3) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// The service the limit applies to. Changing this
// creates a new Limit.
func (o LimitV3Output) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LimitV3) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type LimitV3ArrayOutput struct{ *pulumi.OutputState }

func (LimitV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LimitV3)(nil)).Elem()
}

func (o LimitV3ArrayOutput) ToLimitV3ArrayOutput() LimitV3ArrayOutput {
	return o
}

func (o LimitV3ArrayOutput) ToLimitV3ArrayOutputWithContext(ctx context.Context) LimitV3ArrayOutput {
	return o
}

func (o LimitV3ArrayOutput) Index(i pulumi.IntInput) LimitV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LimitV3 {
		return vs[0].([]*LimitV3)[vs[1].(int)]
	}).(LimitV3Output)
}

type LimitV3MapOutput struct{ *pulumi.OutputState }

func (LimitV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LimitV3)(nil)).Elem()
}

func (o LimitV3MapOutput) ToLimitV3MapOutput() LimitV3MapOutput {
	return o
}

func (o LimitV3MapOutput) ToLimitV3MapOutputWithContext(ctx context.Context) LimitV3MapOutput {
	return o
}

func (o LimitV3MapOutput) MapIndex(k pulumi.StringInput) LimitV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LimitV3 {
		return vs[0].(map[string]*LimitV3)[vs[1].(string)]
	}).(LimitV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LimitV3Input)(nil)).Elem(), &LimitV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitV3ArrayInput)(nil)).Elem(), LimitV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitV3MapInput)(nil)).Elem(), LimitV3Map{})
	pulumi.RegisterOutputType(LimitV3Output{})
	pulumi.RegisterOutputType(LimitV3ArrayOutput{})
	pulumi.RegisterOutputType(LimitV3MapOutput{})
}
