// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V1 account resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const account1 = new openstack.objectstorage.AccountV1("account_1", {
 *     region: "RegionOne",
 *     metadata: {
 *         "Temp-Url-Key": "testkey",
 *         test: "true",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the project ID of the account:
 *
 * ```sh
 * $ pulumi import openstack:objectstorage/accountV1:AccountV1 account_1 1202b3d0aaa44cfc8b79475c007b0711
 * ```
 */
export class AccountV1 extends pulumi.CustomResource {
    /**
     * Get an existing AccountV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountV1State, opts?: pulumi.CustomResourceOptions): AccountV1 {
        return new AccountV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:objectstorage/accountV1:AccountV1';

    /**
     * Returns true if the given object is an instance of AccountV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountV1.__pulumiType;
    }

    /**
     * The number of bytes used by the account.
     */
    public /*out*/ readonly bytesUsed!: pulumi.Output<number>;
    /**
     * The number of containers in the account.
     */
    public /*out*/ readonly containerCount!: pulumi.Output<number>;
    /**
     * A map of headers returned for the account.
     */
    public /*out*/ readonly headers!: pulumi.Output<{[key: string]: string}>;
    /**
     * A map of custom key/value pairs to associate with the
     * account metadata. Changing the `Quota-Bytes` key value is allowed to be
     * updated only by the cloud administrator.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The number of objects in the account.
     */
    public /*out*/ readonly objectCount!: pulumi.Output<number>;
    /**
     * The project ID of the corresponding account. If
     * omitted, the token's project ID is used. Changing this creates a new account.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The number of bytes allowed for the account.
     */
    public /*out*/ readonly quotaBytes!: pulumi.Output<number>;
    /**
     * The region in which to create the account. If omitted,
     * the `region` argument of the provider is used. Changing this creates a new
     * account.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a AccountV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccountV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountV1Args | AccountV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountV1State | undefined;
            resourceInputs["bytesUsed"] = state ? state.bytesUsed : undefined;
            resourceInputs["containerCount"] = state ? state.containerCount : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["objectCount"] = state ? state.objectCount : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["quotaBytes"] = state ? state.quotaBytes : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as AccountV1Args | undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["bytesUsed"] = undefined /*out*/;
            resourceInputs["containerCount"] = undefined /*out*/;
            resourceInputs["headers"] = undefined /*out*/;
            resourceInputs["objectCount"] = undefined /*out*/;
            resourceInputs["quotaBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountV1.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountV1 resources.
 */
export interface AccountV1State {
    /**
     * The number of bytes used by the account.
     */
    bytesUsed?: pulumi.Input<number>;
    /**
     * The number of containers in the account.
     */
    containerCount?: pulumi.Input<number>;
    /**
     * A map of headers returned for the account.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of custom key/value pairs to associate with the
     * account metadata. Changing the `Quota-Bytes` key value is allowed to be
     * updated only by the cloud administrator.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of objects in the account.
     */
    objectCount?: pulumi.Input<number>;
    /**
     * The project ID of the corresponding account. If
     * omitted, the token's project ID is used. Changing this creates a new account.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The number of bytes allowed for the account.
     */
    quotaBytes?: pulumi.Input<number>;
    /**
     * The region in which to create the account. If omitted,
     * the `region` argument of the provider is used. Changing this creates a new
     * account.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountV1 resource.
 */
export interface AccountV1Args {
    /**
     * A map of custom key/value pairs to associate with the
     * account metadata. Changing the `Quota-Bytes` key value is allowed to be
     * updated only by the cloud administrator.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The project ID of the corresponding account. If
     * omitted, the token's project ID is used. Changing this creates a new account.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to create the account. If omitted,
     * the `region` argument of the provider is used. Changing this creates a new
     * account.
     */
    region?: pulumi.Input<string>;
}
