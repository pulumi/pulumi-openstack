// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AggregateV2Args, AggregateV2State } from "./aggregateV2";
export type AggregateV2 = import("./aggregateV2").AggregateV2;
export const AggregateV2: typeof import("./aggregateV2").AggregateV2 = null as any;
utilities.lazyLoad(exports, ["AggregateV2"], () => require("./aggregateV2"));

export { FlavorArgs, FlavorState } from "./flavor";
export type Flavor = import("./flavor").Flavor;
export const Flavor: typeof import("./flavor").Flavor = null as any;
utilities.lazyLoad(exports, ["Flavor"], () => require("./flavor"));

export { FlavorAccessArgs, FlavorAccessState } from "./flavorAccess";
export type FlavorAccess = import("./flavorAccess").FlavorAccess;
export const FlavorAccess: typeof import("./flavorAccess").FlavorAccess = null as any;
utilities.lazyLoad(exports, ["FlavorAccess"], () => require("./flavorAccess"));

export { GetAggregateV2Args, GetAggregateV2Result, GetAggregateV2OutputArgs } from "./getAggregateV2";
export const getAggregateV2: typeof import("./getAggregateV2").getAggregateV2 = null as any;
export const getAggregateV2Output: typeof import("./getAggregateV2").getAggregateV2Output = null as any;
utilities.lazyLoad(exports, ["getAggregateV2","getAggregateV2Output"], () => require("./getAggregateV2"));

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetFlavorArgs, GetFlavorResult, GetFlavorOutputArgs } from "./getFlavor";
export const getFlavor: typeof import("./getFlavor").getFlavor = null as any;
export const getFlavorOutput: typeof import("./getFlavor").getFlavorOutput = null as any;
utilities.lazyLoad(exports, ["getFlavor","getFlavorOutput"], () => require("./getFlavor"));

export { GetHypervisorV2Args, GetHypervisorV2Result, GetHypervisorV2OutputArgs } from "./getHypervisorV2";
export const getHypervisorV2: typeof import("./getHypervisorV2").getHypervisorV2 = null as any;
export const getHypervisorV2Output: typeof import("./getHypervisorV2").getHypervisorV2Output = null as any;
utilities.lazyLoad(exports, ["getHypervisorV2","getHypervisorV2Output"], () => require("./getHypervisorV2"));

export { GetInstanceV2Args, GetInstanceV2Result, GetInstanceV2OutputArgs } from "./getInstanceV2";
export const getInstanceV2: typeof import("./getInstanceV2").getInstanceV2 = null as any;
export const getInstanceV2Output: typeof import("./getInstanceV2").getInstanceV2Output = null as any;
utilities.lazyLoad(exports, ["getInstanceV2","getInstanceV2Output"], () => require("./getInstanceV2"));

export { GetKeypairArgs, GetKeypairResult, GetKeypairOutputArgs } from "./getKeypair";
export const getKeypair: typeof import("./getKeypair").getKeypair = null as any;
export const getKeypairOutput: typeof import("./getKeypair").getKeypairOutput = null as any;
utilities.lazyLoad(exports, ["getKeypair","getKeypairOutput"], () => require("./getKeypair"));

export { GetLimitsV2Args, GetLimitsV2Result, GetLimitsV2OutputArgs } from "./getLimitsV2";
export const getLimitsV2: typeof import("./getLimitsV2").getLimitsV2 = null as any;
export const getLimitsV2Output: typeof import("./getLimitsV2").getLimitsV2Output = null as any;
utilities.lazyLoad(exports, ["getLimitsV2","getLimitsV2Output"], () => require("./getLimitsV2"));

export { GetQuotaSetV2Args, GetQuotaSetV2Result, GetQuotaSetV2OutputArgs } from "./getQuotaSetV2";
export const getQuotaSetV2: typeof import("./getQuotaSetV2").getQuotaSetV2 = null as any;
export const getQuotaSetV2Output: typeof import("./getQuotaSetV2").getQuotaSetV2Output = null as any;
utilities.lazyLoad(exports, ["getQuotaSetV2","getQuotaSetV2Output"], () => require("./getQuotaSetV2"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InterfaceAttachArgs, InterfaceAttachState } from "./interfaceAttach";
export type InterfaceAttach = import("./interfaceAttach").InterfaceAttach;
export const InterfaceAttach: typeof import("./interfaceAttach").InterfaceAttach = null as any;
utilities.lazyLoad(exports, ["InterfaceAttach"], () => require("./interfaceAttach"));

export { KeypairArgs, KeypairState } from "./keypair";
export type Keypair = import("./keypair").Keypair;
export const Keypair: typeof import("./keypair").Keypair = null as any;
utilities.lazyLoad(exports, ["Keypair"], () => require("./keypair"));

export { QuotaSetV2Args, QuotaSetV2State } from "./quotaSetV2";
export type QuotaSetV2 = import("./quotaSetV2").QuotaSetV2;
export const QuotaSetV2: typeof import("./quotaSetV2").QuotaSetV2 = null as any;
utilities.lazyLoad(exports, ["QuotaSetV2"], () => require("./quotaSetV2"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { VolumeAttachArgs, VolumeAttachState } from "./volumeAttach";
export type VolumeAttach = import("./volumeAttach").VolumeAttach;
export const VolumeAttach: typeof import("./volumeAttach").VolumeAttach = null as any;
utilities.lazyLoad(exports, ["VolumeAttach"], () => require("./volumeAttach"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:compute/aggregateV2:AggregateV2":
                return new AggregateV2(name, <any>undefined, { urn })
            case "openstack:compute/flavor:Flavor":
                return new Flavor(name, <any>undefined, { urn })
            case "openstack:compute/flavorAccess:FlavorAccess":
                return new FlavorAccess(name, <any>undefined, { urn })
            case "openstack:compute/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "openstack:compute/interfaceAttach:InterfaceAttach":
                return new InterfaceAttach(name, <any>undefined, { urn })
            case "openstack:compute/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            case "openstack:compute/quotaSetV2:QuotaSetV2":
                return new QuotaSetV2(name, <any>undefined, { urn })
            case "openstack:compute/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "openstack:compute/volumeAttach:VolumeAttach":
                return new VolumeAttach(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "compute/aggregateV2", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/flavor", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/flavorAccess", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/instance", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/interfaceAttach", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/keypair", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/quotaSetV2", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/serverGroup", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/volumeAttach", _module)
