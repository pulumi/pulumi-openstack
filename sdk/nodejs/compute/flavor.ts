// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V2 flavor resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const test_flavor = new openstack.compute.Flavor("test-flavor", {
 *     name: "my-flavor",
 *     ram: 8096,
 *     vcpus: 2,
 *     disk: 20,
 *     extraSpecs: {
 *         "hw:cpu_policy": "CPU-POLICY",
 *         "hw:cpu_thread_policy": "CPU-THREAD-POLICY",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Flavors can be imported using the `ID`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:compute/flavor:Flavor my-flavor 4142e64b-1b35-44a0-9b1e-5affc7af1106
 * ```
 */
export class Flavor extends pulumi.CustomResource {
    /**
     * Get an existing Flavor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlavorState, opts?: pulumi.CustomResourceOptions): Flavor {
        return new Flavor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:compute/flavor:Flavor';

    /**
     * Returns true if the given object is an instance of Flavor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Flavor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flavor.__pulumiType;
    }

    /**
     * The description of the flavor. Changing this
     * updates the description of the flavor. Requires microversion >= 2.55.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The amount of disk space in GiB to use for the root
     * (/) partition. Changing this creates a new flavor.
     */
    declare public readonly disk: pulumi.Output<number>;
    /**
     * The amount of ephemeral in GiB. If unspecified,
     * the default is 0. Changing this creates a new flavor.
     */
    declare public readonly ephemeral: pulumi.Output<number | undefined>;
    /**
     * Key/Value pairs of metadata for the flavor.
     */
    declare public readonly extraSpecs: pulumi.Output<{[key: string]: string}>;
    /**
     * Unique ID (integer or UUID) of flavor to create. Changing
     * this creates a new flavor.
     */
    declare public readonly flavorId: pulumi.Output<string>;
    /**
     * Whether the flavor is public. Changing this creates
     * a new flavor.
     */
    declare public readonly isPublic: pulumi.Output<boolean | undefined>;
    /**
     * A unique name for the flavor. Changing this creates a new
     * flavor.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The amount of RAM to use, in megabytes. Changing this
     * creates a new flavor.
     */
    declare public readonly ram: pulumi.Output<number>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Flavors are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new flavor.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * RX/TX bandwith factor. The default is 1. Changing
     * this creates a new flavor.
     */
    declare public readonly rxTxFactor: pulumi.Output<number | undefined>;
    /**
     * The amount of disk space in megabytes to use. If
     * unspecified, the default is 0. Changing this creates a new flavor.
     */
    declare public readonly swap: pulumi.Output<number | undefined>;
    /**
     * The number of virtual CPUs to use. Changing this creates
     * a new flavor.
     */
    declare public readonly vcpus: pulumi.Output<number>;

    /**
     * Create a Flavor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlavorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlavorArgs | FlavorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlavorState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["disk"] = state?.disk;
            resourceInputs["ephemeral"] = state?.ephemeral;
            resourceInputs["extraSpecs"] = state?.extraSpecs;
            resourceInputs["flavorId"] = state?.flavorId;
            resourceInputs["isPublic"] = state?.isPublic;
            resourceInputs["name"] = state?.name;
            resourceInputs["ram"] = state?.ram;
            resourceInputs["region"] = state?.region;
            resourceInputs["rxTxFactor"] = state?.rxTxFactor;
            resourceInputs["swap"] = state?.swap;
            resourceInputs["vcpus"] = state?.vcpus;
        } else {
            const args = argsOrState as FlavorArgs | undefined;
            if (args?.disk === undefined && !opts.urn) {
                throw new Error("Missing required property 'disk'");
            }
            if (args?.ram === undefined && !opts.urn) {
                throw new Error("Missing required property 'ram'");
            }
            if (args?.vcpus === undefined && !opts.urn) {
                throw new Error("Missing required property 'vcpus'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["disk"] = args?.disk;
            resourceInputs["ephemeral"] = args?.ephemeral;
            resourceInputs["extraSpecs"] = args?.extraSpecs;
            resourceInputs["flavorId"] = args?.flavorId;
            resourceInputs["isPublic"] = args?.isPublic;
            resourceInputs["name"] = args?.name;
            resourceInputs["ram"] = args?.ram;
            resourceInputs["region"] = args?.region;
            resourceInputs["rxTxFactor"] = args?.rxTxFactor;
            resourceInputs["swap"] = args?.swap;
            resourceInputs["vcpus"] = args?.vcpus;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Flavor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Flavor resources.
 */
export interface FlavorState {
    /**
     * The description of the flavor. Changing this
     * updates the description of the flavor. Requires microversion >= 2.55.
     */
    description?: pulumi.Input<string>;
    /**
     * The amount of disk space in GiB to use for the root
     * (/) partition. Changing this creates a new flavor.
     */
    disk?: pulumi.Input<number>;
    /**
     * The amount of ephemeral in GiB. If unspecified,
     * the default is 0. Changing this creates a new flavor.
     */
    ephemeral?: pulumi.Input<number>;
    /**
     * Key/Value pairs of metadata for the flavor.
     */
    extraSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique ID (integer or UUID) of flavor to create. Changing
     * this creates a new flavor.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Whether the flavor is public. Changing this creates
     * a new flavor.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * A unique name for the flavor. Changing this creates a new
     * flavor.
     */
    name?: pulumi.Input<string>;
    /**
     * The amount of RAM to use, in megabytes. Changing this
     * creates a new flavor.
     */
    ram?: pulumi.Input<number>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Flavors are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new flavor.
     */
    region?: pulumi.Input<string>;
    /**
     * RX/TX bandwith factor. The default is 1. Changing
     * this creates a new flavor.
     */
    rxTxFactor?: pulumi.Input<number>;
    /**
     * The amount of disk space in megabytes to use. If
     * unspecified, the default is 0. Changing this creates a new flavor.
     */
    swap?: pulumi.Input<number>;
    /**
     * The number of virtual CPUs to use. Changing this creates
     * a new flavor.
     */
    vcpus?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Flavor resource.
 */
export interface FlavorArgs {
    /**
     * The description of the flavor. Changing this
     * updates the description of the flavor. Requires microversion >= 2.55.
     */
    description?: pulumi.Input<string>;
    /**
     * The amount of disk space in GiB to use for the root
     * (/) partition. Changing this creates a new flavor.
     */
    disk: pulumi.Input<number>;
    /**
     * The amount of ephemeral in GiB. If unspecified,
     * the default is 0. Changing this creates a new flavor.
     */
    ephemeral?: pulumi.Input<number>;
    /**
     * Key/Value pairs of metadata for the flavor.
     */
    extraSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique ID (integer or UUID) of flavor to create. Changing
     * this creates a new flavor.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Whether the flavor is public. Changing this creates
     * a new flavor.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * A unique name for the flavor. Changing this creates a new
     * flavor.
     */
    name?: pulumi.Input<string>;
    /**
     * The amount of RAM to use, in megabytes. Changing this
     * creates a new flavor.
     */
    ram: pulumi.Input<number>;
    /**
     * The region in which to obtain the V2 Compute client.
     * Flavors are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new flavor.
     */
    region?: pulumi.Input<string>;
    /**
     * RX/TX bandwith factor. The default is 1. Changing
     * this creates a new flavor.
     */
    rxTxFactor?: pulumi.Input<number>;
    /**
     * The amount of disk space in megabytes to use. If
     * unspecified, the default is 0. Changing this creates a new flavor.
     */
    swap?: pulumi.Input<number>;
    /**
     * The number of virtual CPUs to use. Changing this creates
     * a new flavor.
     */
    vcpus: pulumi.Input<number>;
}
