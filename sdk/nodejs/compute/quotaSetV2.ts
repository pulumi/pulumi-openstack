// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V2 compute quotaset resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * > **Note:** This resource has a no-op deletion so no actual actions will be done against the OpenStack API
 *     in case of delete call.
 *
 * ## Import
 *
 * Quotasets can be imported using the `project_id/region_name`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:compute/quotaSetV2:QuotaSetV2 quotaset_1 2a0f2240-c5e6-41de-896d-e80d97428d6b/region_1
 * ```
 */
export class QuotaSetV2 extends pulumi.CustomResource {
    /**
     * Get an existing QuotaSetV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuotaSetV2State, opts?: pulumi.CustomResourceOptions): QuotaSetV2 {
        return new QuotaSetV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:compute/quotaSetV2:QuotaSetV2';

    /**
     * Returns true if the given object is an instance of QuotaSetV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuotaSetV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuotaSetV2.__pulumiType;
    }

    /**
     * Quota value for cores.
     * Changing this updates the existing quotaset.
     */
    declare public readonly cores: pulumi.Output<number>;
    /**
     * Quota value for fixed IPs.
     * Changing this updates the existing quotaset.
     */
    declare public readonly fixedIps: pulumi.Output<number>;
    /**
     * Quota value for floating IPs.
     * Changing this updates the existing quotaset.
     */
    declare public readonly floatingIps: pulumi.Output<number>;
    /**
     * Quota value for content bytes
     * of injected files. Changing this updates the existing quotaset.
     */
    declare public readonly injectedFileContentBytes: pulumi.Output<number>;
    /**
     * Quota value for path bytes of
     * injected files. Changing this updates the existing quotaset.
     */
    declare public readonly injectedFilePathBytes: pulumi.Output<number>;
    /**
     * Quota value for injected files.
     * Changing this updates the existing quotaset.
     */
    declare public readonly injectedFiles: pulumi.Output<number>;
    /**
     * Quota value for instances.
     * Changing this updates the existing quotaset.
     */
    declare public readonly instances: pulumi.Output<number>;
    /**
     * Quota value for key pairs.
     * Changing this updates the existing quotaset.
     */
    declare public readonly keyPairs: pulumi.Output<number>;
    /**
     * Quota value for metadata items.
     * Changing this updates the existing quotaset.
     */
    declare public readonly metadataItems: pulumi.Output<number>;
    /**
     * ID of the project to manage quotas.
     * Changing this creates a new quotaset.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Quota value for RAM.
     * Changing this updates the existing quotaset.
     */
    declare public readonly ram: pulumi.Output<number>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Quota value for security group rules.
     * Changing this updates the existing quotaset.
     */
    declare public readonly securityGroupRules: pulumi.Output<number>;
    /**
     * Quota value for security groups.
     * Changing this updates the existing quotaset.
     */
    declare public readonly securityGroups: pulumi.Output<number>;
    /**
     * Quota value for server groups members.
     * Changing this updates the existing quotaset.
     */
    declare public readonly serverGroupMembers: pulumi.Output<number>;
    /**
     * Quota value for server groups.
     * Changing this updates the existing quotaset.
     */
    declare public readonly serverGroups: pulumi.Output<number>;

    /**
     * Create a QuotaSetV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuotaSetV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuotaSetV2Args | QuotaSetV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuotaSetV2State | undefined;
            resourceInputs["cores"] = state?.cores;
            resourceInputs["fixedIps"] = state?.fixedIps;
            resourceInputs["floatingIps"] = state?.floatingIps;
            resourceInputs["injectedFileContentBytes"] = state?.injectedFileContentBytes;
            resourceInputs["injectedFilePathBytes"] = state?.injectedFilePathBytes;
            resourceInputs["injectedFiles"] = state?.injectedFiles;
            resourceInputs["instances"] = state?.instances;
            resourceInputs["keyPairs"] = state?.keyPairs;
            resourceInputs["metadataItems"] = state?.metadataItems;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["ram"] = state?.ram;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupRules"] = state?.securityGroupRules;
            resourceInputs["securityGroups"] = state?.securityGroups;
            resourceInputs["serverGroupMembers"] = state?.serverGroupMembers;
            resourceInputs["serverGroups"] = state?.serverGroups;
        } else {
            const args = argsOrState as QuotaSetV2Args | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["cores"] = args?.cores;
            resourceInputs["fixedIps"] = args?.fixedIps;
            resourceInputs["floatingIps"] = args?.floatingIps;
            resourceInputs["injectedFileContentBytes"] = args?.injectedFileContentBytes;
            resourceInputs["injectedFilePathBytes"] = args?.injectedFilePathBytes;
            resourceInputs["injectedFiles"] = args?.injectedFiles;
            resourceInputs["instances"] = args?.instances;
            resourceInputs["keyPairs"] = args?.keyPairs;
            resourceInputs["metadataItems"] = args?.metadataItems;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["ram"] = args?.ram;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupRules"] = args?.securityGroupRules;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["serverGroupMembers"] = args?.serverGroupMembers;
            resourceInputs["serverGroups"] = args?.serverGroups;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuotaSetV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QuotaSetV2 resources.
 */
export interface QuotaSetV2State {
    /**
     * Quota value for cores.
     * Changing this updates the existing quotaset.
     */
    cores?: pulumi.Input<number>;
    /**
     * Quota value for fixed IPs.
     * Changing this updates the existing quotaset.
     */
    fixedIps?: pulumi.Input<number>;
    /**
     * Quota value for floating IPs.
     * Changing this updates the existing quotaset.
     */
    floatingIps?: pulumi.Input<number>;
    /**
     * Quota value for content bytes
     * of injected files. Changing this updates the existing quotaset.
     */
    injectedFileContentBytes?: pulumi.Input<number>;
    /**
     * Quota value for path bytes of
     * injected files. Changing this updates the existing quotaset.
     */
    injectedFilePathBytes?: pulumi.Input<number>;
    /**
     * Quota value for injected files.
     * Changing this updates the existing quotaset.
     */
    injectedFiles?: pulumi.Input<number>;
    /**
     * Quota value for instances.
     * Changing this updates the existing quotaset.
     */
    instances?: pulumi.Input<number>;
    /**
     * Quota value for key pairs.
     * Changing this updates the existing quotaset.
     */
    keyPairs?: pulumi.Input<number>;
    /**
     * Quota value for metadata items.
     * Changing this updates the existing quotaset.
     */
    metadataItems?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas.
     * Changing this creates a new quotaset.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Quota value for RAM.
     * Changing this updates the existing quotaset.
     */
    ram?: pulumi.Input<number>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for security group rules.
     * Changing this updates the existing quotaset.
     */
    securityGroupRules?: pulumi.Input<number>;
    /**
     * Quota value for security groups.
     * Changing this updates the existing quotaset.
     */
    securityGroups?: pulumi.Input<number>;
    /**
     * Quota value for server groups members.
     * Changing this updates the existing quotaset.
     */
    serverGroupMembers?: pulumi.Input<number>;
    /**
     * Quota value for server groups.
     * Changing this updates the existing quotaset.
     */
    serverGroups?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a QuotaSetV2 resource.
 */
export interface QuotaSetV2Args {
    /**
     * Quota value for cores.
     * Changing this updates the existing quotaset.
     */
    cores?: pulumi.Input<number>;
    /**
     * Quota value for fixed IPs.
     * Changing this updates the existing quotaset.
     */
    fixedIps?: pulumi.Input<number>;
    /**
     * Quota value for floating IPs.
     * Changing this updates the existing quotaset.
     */
    floatingIps?: pulumi.Input<number>;
    /**
     * Quota value for content bytes
     * of injected files. Changing this updates the existing quotaset.
     */
    injectedFileContentBytes?: pulumi.Input<number>;
    /**
     * Quota value for path bytes of
     * injected files. Changing this updates the existing quotaset.
     */
    injectedFilePathBytes?: pulumi.Input<number>;
    /**
     * Quota value for injected files.
     * Changing this updates the existing quotaset.
     */
    injectedFiles?: pulumi.Input<number>;
    /**
     * Quota value for instances.
     * Changing this updates the existing quotaset.
     */
    instances?: pulumi.Input<number>;
    /**
     * Quota value for key pairs.
     * Changing this updates the existing quotaset.
     */
    keyPairs?: pulumi.Input<number>;
    /**
     * Quota value for metadata items.
     * Changing this updates the existing quotaset.
     */
    metadataItems?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas.
     * Changing this creates a new quotaset.
     */
    projectId: pulumi.Input<string>;
    /**
     * Quota value for RAM.
     * Changing this updates the existing quotaset.
     */
    ram?: pulumi.Input<number>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for security group rules.
     * Changing this updates the existing quotaset.
     */
    securityGroupRules?: pulumi.Input<number>;
    /**
     * Quota value for security groups.
     * Changing this updates the existing quotaset.
     */
    securityGroups?: pulumi.Input<number>;
    /**
     * Quota value for server groups members.
     * Changing this updates the existing quotaset.
     */
    serverGroupMembers?: pulumi.Input<number>;
    /**
     * Quota value for server groups.
     * Changing this updates the existing quotaset.
     */
    serverGroups?: pulumi.Input<number>;
}
