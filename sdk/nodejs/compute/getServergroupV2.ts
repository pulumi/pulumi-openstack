// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get information about server groups
 * by name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const test = openstack.compute.getServergroupV2({
 *     name: "test",
 * });
 * ```
 */
export function getServergroupV2(args: GetServergroupV2Args, opts?: pulumi.InvokeOptions): Promise<GetServergroupV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("openstack:compute/getServergroupV2:getServergroupV2", {
        "name": args.name,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getServergroupV2.
 */
export interface GetServergroupV2Args {
    /**
     * The name of the server group.
     */
    name: string;
    /**
     * The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     */
    region?: string;
}

/**
 * A collection of values returned by getServergroupV2.
 */
export interface GetServergroupV2Result {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The instances that are part of this server group.
     */
    readonly members: string[];
    /**
     * Metadata of the server group.
     */
    readonly metadata: {[key: string]: string};
    /**
     * See Argument Reference above.
     */
    readonly name: string;
    /**
     * Policy name associated with the server group.
     */
    readonly policies: string[];
    /**
     * Project ID of the server group.
     */
    readonly projectId: string;
    readonly region: string;
    /**
     * Rules which are applied to specified policy.
     */
    readonly rules: outputs.compute.GetServergroupV2Rule[];
    /**
     * User ID of the server group.
     */
    readonly userId: string;
}
/**
 * Use this data source to get information about server groups
 * by name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const test = openstack.compute.getServergroupV2({
 *     name: "test",
 * });
 * ```
 */
export function getServergroupV2Output(args: GetServergroupV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServergroupV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("openstack:compute/getServergroupV2:getServergroupV2", {
        "name": args.name,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getServergroupV2.
 */
export interface GetServergroupV2OutputArgs {
    /**
     * The name of the server group.
     */
    name: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     */
    region?: pulumi.Input<string>;
}
