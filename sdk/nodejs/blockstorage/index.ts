// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetAvailabilityZonesV3Args, GetAvailabilityZonesV3Result, GetAvailabilityZonesV3OutputArgs } from "./getAvailabilityZonesV3";
export const getAvailabilityZonesV3: typeof import("./getAvailabilityZonesV3").getAvailabilityZonesV3 = null as any;
export const getAvailabilityZonesV3Output: typeof import("./getAvailabilityZonesV3").getAvailabilityZonesV3Output = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZonesV3","getAvailabilityZonesV3Output"], () => require("./getAvailabilityZonesV3"));

export { GetQuotasetV3Args, GetQuotasetV3Result, GetQuotasetV3OutputArgs } from "./getQuotasetV3";
export const getQuotasetV3: typeof import("./getQuotasetV3").getQuotasetV3 = null as any;
export const getQuotasetV3Output: typeof import("./getQuotasetV3").getQuotasetV3Output = null as any;
utilities.lazyLoad(exports, ["getQuotasetV3","getQuotasetV3Output"], () => require("./getQuotasetV3"));

export { GetSnapshotV3Args, GetSnapshotV3Result, GetSnapshotV3OutputArgs } from "./getSnapshotV3";
export const getSnapshotV3: typeof import("./getSnapshotV3").getSnapshotV3 = null as any;
export const getSnapshotV3Output: typeof import("./getSnapshotV3").getSnapshotV3Output = null as any;
utilities.lazyLoad(exports, ["getSnapshotV3","getSnapshotV3Output"], () => require("./getSnapshotV3"));

export { GetVolumeV3Args, GetVolumeV3Result, GetVolumeV3OutputArgs } from "./getVolumeV3";
export const getVolumeV3: typeof import("./getVolumeV3").getVolumeV3 = null as any;
export const getVolumeV3Output: typeof import("./getVolumeV3").getVolumeV3Output = null as any;
utilities.lazyLoad(exports, ["getVolumeV3","getVolumeV3Output"], () => require("./getVolumeV3"));

export { QosAssociationV3Args, QosAssociationV3State } from "./qosAssociationV3";
export type QosAssociationV3 = import("./qosAssociationV3").QosAssociationV3;
export const QosAssociationV3: typeof import("./qosAssociationV3").QosAssociationV3 = null as any;
utilities.lazyLoad(exports, ["QosAssociationV3"], () => require("./qosAssociationV3"));

export { QosV3Args, QosV3State } from "./qosV3";
export type QosV3 = import("./qosV3").QosV3;
export const QosV3: typeof import("./qosV3").QosV3 = null as any;
utilities.lazyLoad(exports, ["QosV3"], () => require("./qosV3"));

export { QuoteSetV3Args, QuoteSetV3State } from "./quoteSetV3";
export type QuoteSetV3 = import("./quoteSetV3").QuoteSetV3;
export const QuoteSetV3: typeof import("./quoteSetV3").QuoteSetV3 = null as any;
utilities.lazyLoad(exports, ["QuoteSetV3"], () => require("./quoteSetV3"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeAttachArgs, VolumeAttachState } from "./volumeAttach";
export type VolumeAttach = import("./volumeAttach").VolumeAttach;
export const VolumeAttach: typeof import("./volumeAttach").VolumeAttach = null as any;
utilities.lazyLoad(exports, ["VolumeAttach"], () => require("./volumeAttach"));

export { VolumeTypeAccessV3Args, VolumeTypeAccessV3State } from "./volumeTypeAccessV3";
export type VolumeTypeAccessV3 = import("./volumeTypeAccessV3").VolumeTypeAccessV3;
export const VolumeTypeAccessV3: typeof import("./volumeTypeAccessV3").VolumeTypeAccessV3 = null as any;
utilities.lazyLoad(exports, ["VolumeTypeAccessV3"], () => require("./volumeTypeAccessV3"));

export { VolumeTypeV3Args, VolumeTypeV3State } from "./volumeTypeV3";
export type VolumeTypeV3 = import("./volumeTypeV3").VolumeTypeV3;
export const VolumeTypeV3: typeof import("./volumeTypeV3").VolumeTypeV3 = null as any;
utilities.lazyLoad(exports, ["VolumeTypeV3"], () => require("./volumeTypeV3"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:blockstorage/qosAssociationV3:QosAssociationV3":
                return new QosAssociationV3(name, <any>undefined, { urn })
            case "openstack:blockstorage/qosV3:QosV3":
                return new QosV3(name, <any>undefined, { urn })
            case "openstack:blockstorage/quoteSetV3:QuoteSetV3":
                return new QuoteSetV3(name, <any>undefined, { urn })
            case "openstack:blockstorage/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "openstack:blockstorage/volumeAttach:VolumeAttach":
                return new VolumeAttach(name, <any>undefined, { urn })
            case "openstack:blockstorage/volumeTypeAccessV3:VolumeTypeAccessV3":
                return new VolumeTypeAccessV3(name, <any>undefined, { urn })
            case "openstack:blockstorage/volumeTypeV3:VolumeTypeV3":
                return new VolumeTypeV3(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "blockstorage/qosAssociationV3", _module)
pulumi.runtime.registerResourceModule("openstack", "blockstorage/qosV3", _module)
pulumi.runtime.registerResourceModule("openstack", "blockstorage/quoteSetV3", _module)
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volume", _module)
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeAttach", _module)
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeTypeAccessV3", _module)
pulumi.runtime.registerResourceModule("openstack", "blockstorage/volumeTypeV3", _module)
