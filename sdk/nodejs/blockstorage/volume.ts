// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a V3 volume resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const volume1 = new openstack.blockstorage.Volume("volume_1", {
 *     region: "RegionOne",
 *     name: "volume_1",
 *     description: "first test volume",
 *     size: 3,
 * });
 * ```
 *
 * ## Import
 *
 * Volumes can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:blockstorage/volume:Volume volume_1 ea257959-eeb1-4c10-8d33-26f0409a755d
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:blockstorage/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * If a volume is attached to an instance, this attribute will
     * display the Attachment ID, Instance ID, and the Device as the Instance
     * sees it.
     */
    declare public /*out*/ readonly attachments: pulumi.Output<outputs.blockstorage.VolumeAttachment[]>;
    /**
     * The availability zone for the volume.
     * Changing this creates a new volume.
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * The backup ID from which to create the volume.
     * Conflicts with `snapshotId`, `sourceVolId`, `imageId`. Changing this
     * creates a new volume. Requires microversion >= 3.47.
     */
    declare public readonly backupId: pulumi.Output<string | undefined>;
    /**
     * The consistency group to place the volume
     * in.
     */
    declare public readonly consistencyGroupId: pulumi.Output<string | undefined>;
    /**
     * A description of the volume. Changing this updates
     * the volume's description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * When this option is set it allows extending
     * attached volumes. Note: updating size of an attached volume requires Cinder
     * support for version 3.42 and a compatible storage driver.
     */
    declare public readonly enableOnlineResize: pulumi.Output<boolean | undefined>;
    /**
     * The image ID from which to create the volume.
     * Conflicts with `snapshotId`, `sourceVolId`, `backupId`. Changing this
     * creates a new volume.
     */
    declare public readonly imageId: pulumi.Output<string | undefined>;
    /**
     * Metadata key/value pairs to associate with the volume.
     * Changing this updates the existing volume metadata.
     */
    declare public readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * A unique name for the volume. Changing this updates the
     * volume's name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new volume.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Provide the Cinder scheduler with hints on where
     * to instantiate a volume in the OpenStack cloud. The available hints are described below.
     */
    declare public readonly schedulerHints: pulumi.Output<outputs.blockstorage.VolumeSchedulerHint[] | undefined>;
    /**
     * The size of the volume to create (in gigabytes).
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * The snapshot ID from which to create the volume.
     * Conflicts with `sourceVolId`, `imageId`, `backupId`. Changing this
     * creates a new volume.
     */
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * The volume ID to replicate with.
     */
    declare public readonly sourceReplica: pulumi.Output<string | undefined>;
    /**
     * The volume ID from which to create the volume.
     * Conflicts with `snapshotId`, `imageId`, `backupId`. Changing this
     * creates a new volume.
     */
    declare public readonly sourceVolId: pulumi.Output<string | undefined>;
    /**
     * Migration policy when changing `volumeType`.
     * `"never"` *(default)* prevents migration to another storage backend, while `"on-demand"`
     * allows migration if needed. Applicable only when updating `volumeType`.
     */
    declare public readonly volumeRetypePolicy: pulumi.Output<string | undefined>;
    /**
     * The type of volume to create or update.
     * Changing this will attempt an in-place retype operation; migration depends on `volumeRetypePolicy`.
     */
    declare public readonly volumeType: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["attachments"] = state?.attachments;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["backupId"] = state?.backupId;
            resourceInputs["consistencyGroupId"] = state?.consistencyGroupId;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableOnlineResize"] = state?.enableOnlineResize;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["schedulerHints"] = state?.schedulerHints;
            resourceInputs["size"] = state?.size;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["sourceReplica"] = state?.sourceReplica;
            resourceInputs["sourceVolId"] = state?.sourceVolId;
            resourceInputs["volumeRetypePolicy"] = state?.volumeRetypePolicy;
            resourceInputs["volumeType"] = state?.volumeType;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["backupId"] = args?.backupId;
            resourceInputs["consistencyGroupId"] = args?.consistencyGroupId;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableOnlineResize"] = args?.enableOnlineResize;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["schedulerHints"] = args?.schedulerHints;
            resourceInputs["size"] = args?.size;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["sourceReplica"] = args?.sourceReplica;
            resourceInputs["sourceVolId"] = args?.sourceVolId;
            resourceInputs["volumeRetypePolicy"] = args?.volumeRetypePolicy;
            resourceInputs["volumeType"] = args?.volumeType;
            resourceInputs["attachments"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * If a volume is attached to an instance, this attribute will
     * display the Attachment ID, Instance ID, and the Device as the Instance
     * sees it.
     */
    attachments?: pulumi.Input<pulumi.Input<inputs.blockstorage.VolumeAttachment>[]>;
    /**
     * The availability zone for the volume.
     * Changing this creates a new volume.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The backup ID from which to create the volume.
     * Conflicts with `snapshotId`, `sourceVolId`, `imageId`. Changing this
     * creates a new volume. Requires microversion >= 3.47.
     */
    backupId?: pulumi.Input<string>;
    /**
     * The consistency group to place the volume
     * in.
     */
    consistencyGroupId?: pulumi.Input<string>;
    /**
     * A description of the volume. Changing this updates
     * the volume's description.
     */
    description?: pulumi.Input<string>;
    /**
     * When this option is set it allows extending
     * attached volumes. Note: updating size of an attached volume requires Cinder
     * support for version 3.42 and a compatible storage driver.
     */
    enableOnlineResize?: pulumi.Input<boolean>;
    /**
     * The image ID from which to create the volume.
     * Conflicts with `snapshotId`, `sourceVolId`, `backupId`. Changing this
     * creates a new volume.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Metadata key/value pairs to associate with the volume.
     * Changing this updates the existing volume metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A unique name for the volume. Changing this updates the
     * volume's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new volume.
     */
    region?: pulumi.Input<string>;
    /**
     * Provide the Cinder scheduler with hints on where
     * to instantiate a volume in the OpenStack cloud. The available hints are described below.
     */
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.blockstorage.VolumeSchedulerHint>[]>;
    /**
     * The size of the volume to create (in gigabytes).
     */
    size?: pulumi.Input<number>;
    /**
     * The snapshot ID from which to create the volume.
     * Conflicts with `sourceVolId`, `imageId`, `backupId`. Changing this
     * creates a new volume.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The volume ID to replicate with.
     */
    sourceReplica?: pulumi.Input<string>;
    /**
     * The volume ID from which to create the volume.
     * Conflicts with `snapshotId`, `imageId`, `backupId`. Changing this
     * creates a new volume.
     */
    sourceVolId?: pulumi.Input<string>;
    /**
     * Migration policy when changing `volumeType`.
     * `"never"` *(default)* prevents migration to another storage backend, while `"on-demand"`
     * allows migration if needed. Applicable only when updating `volumeType`.
     */
    volumeRetypePolicy?: pulumi.Input<string>;
    /**
     * The type of volume to create or update.
     * Changing this will attempt an in-place retype operation; migration depends on `volumeRetypePolicy`.
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The availability zone for the volume.
     * Changing this creates a new volume.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The backup ID from which to create the volume.
     * Conflicts with `snapshotId`, `sourceVolId`, `imageId`. Changing this
     * creates a new volume. Requires microversion >= 3.47.
     */
    backupId?: pulumi.Input<string>;
    /**
     * The consistency group to place the volume
     * in.
     */
    consistencyGroupId?: pulumi.Input<string>;
    /**
     * A description of the volume. Changing this updates
     * the volume's description.
     */
    description?: pulumi.Input<string>;
    /**
     * When this option is set it allows extending
     * attached volumes. Note: updating size of an attached volume requires Cinder
     * support for version 3.42 and a compatible storage driver.
     */
    enableOnlineResize?: pulumi.Input<boolean>;
    /**
     * The image ID from which to create the volume.
     * Conflicts with `snapshotId`, `sourceVolId`, `backupId`. Changing this
     * creates a new volume.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Metadata key/value pairs to associate with the volume.
     * Changing this updates the existing volume metadata.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A unique name for the volume. Changing this updates the
     * volume's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new volume.
     */
    region?: pulumi.Input<string>;
    /**
     * Provide the Cinder scheduler with hints on where
     * to instantiate a volume in the OpenStack cloud. The available hints are described below.
     */
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.blockstorage.VolumeSchedulerHint>[]>;
    /**
     * The size of the volume to create (in gigabytes).
     */
    size: pulumi.Input<number>;
    /**
     * The snapshot ID from which to create the volume.
     * Conflicts with `sourceVolId`, `imageId`, `backupId`. Changing this
     * creates a new volume.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The volume ID to replicate with.
     */
    sourceReplica?: pulumi.Input<string>;
    /**
     * The volume ID from which to create the volume.
     * Conflicts with `snapshotId`, `imageId`, `backupId`. Changing this
     * creates a new volume.
     */
    sourceVolId?: pulumi.Input<string>;
    /**
     * Migration policy when changing `volumeType`.
     * `"never"` *(default)* prevents migration to another storage backend, while `"on-demand"`
     * allows migration if needed. Applicable only when updating `volumeType`.
     */
    volumeRetypePolicy?: pulumi.Input<string>;
    /**
     * The type of volume to create or update.
     * Changing this will attempt an in-place retype operation; migration depends on `volumeRetypePolicy`.
     */
    volumeType?: pulumi.Input<string>;
}
