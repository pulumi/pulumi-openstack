// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V3 block storage quotaset resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * > **Note:** This resource has a no-op deletion so no actual actions will be done against the OpenStack API
 *     in case of delete call.
 *
 * ## Import
 *
 * Quotasets can be imported using the `project_id/region`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:blockstorage/quoteSetV3:QuoteSetV3 quotaset_1 2a0f2240-c5e6-41de-896d-e80d97428d6b/region_1
 * ```
 */
export class QuoteSetV3 extends pulumi.CustomResource {
    /**
     * Get an existing QuoteSetV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuoteSetV3State, opts?: pulumi.CustomResourceOptions): QuoteSetV3 {
        return new QuoteSetV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:blockstorage/quoteSetV3:QuoteSetV3';

    /**
     * Returns true if the given object is an instance of QuoteSetV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuoteSetV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuoteSetV3.__pulumiType;
    }

    /**
     * Quota value for backup gigabytes. Changing
     * this updates the existing quotaset.
     */
    declare public readonly backupGigabytes: pulumi.Output<number>;
    /**
     * Quota value for backups. Changing this updates the
     * existing quotaset.
     */
    declare public readonly backups: pulumi.Output<number>;
    /**
     * Quota value for gigabytes. Changing this updates the
     * existing quotaset.
     */
    declare public readonly gigabytes: pulumi.Output<number>;
    /**
     * Quota value for groups. Changing this updates the
     * existing quotaset.
     */
    declare public readonly groups: pulumi.Output<number>;
    /**
     * Quota value for gigabytes per volume .
     * Changing this updates the existing quotaset.
     */
    declare public readonly perVolumeGigabytes: pulumi.Output<number>;
    /**
     * ID of the project to manage quotas. Changing this
     * creates a new quotaset.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Quota value for snapshots. Changing this updates the
     * existing quotaset.
     */
    declare public readonly snapshots: pulumi.Output<number>;
    /**
     * Key/Value pairs for setting quota for
     * volumes types. Possible keys are `snapshots_<volume_type_name>`,
     * `volumes_<volume_type_name>` and `gigabytes_<volume_type_name>`.
     */
    declare public readonly volumeTypeQuota: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Quota value for volumes. Changing this updates the
     * existing quotaset.
     */
    declare public readonly volumes: pulumi.Output<number>;

    /**
     * Create a QuoteSetV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuoteSetV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuoteSetV3Args | QuoteSetV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuoteSetV3State | undefined;
            resourceInputs["backupGigabytes"] = state?.backupGigabytes;
            resourceInputs["backups"] = state?.backups;
            resourceInputs["gigabytes"] = state?.gigabytes;
            resourceInputs["groups"] = state?.groups;
            resourceInputs["perVolumeGigabytes"] = state?.perVolumeGigabytes;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["snapshots"] = state?.snapshots;
            resourceInputs["volumeTypeQuota"] = state?.volumeTypeQuota;
            resourceInputs["volumes"] = state?.volumes;
        } else {
            const args = argsOrState as QuoteSetV3Args | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["backupGigabytes"] = args?.backupGigabytes;
            resourceInputs["backups"] = args?.backups;
            resourceInputs["gigabytes"] = args?.gigabytes;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["perVolumeGigabytes"] = args?.perVolumeGigabytes;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["snapshots"] = args?.snapshots;
            resourceInputs["volumeTypeQuota"] = args?.volumeTypeQuota;
            resourceInputs["volumes"] = args?.volumes;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuoteSetV3.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QuoteSetV3 resources.
 */
export interface QuoteSetV3State {
    /**
     * Quota value for backup gigabytes. Changing
     * this updates the existing quotaset.
     */
    backupGigabytes?: pulumi.Input<number>;
    /**
     * Quota value for backups. Changing this updates the
     * existing quotaset.
     */
    backups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes. Changing this updates the
     * existing quotaset.
     */
    gigabytes?: pulumi.Input<number>;
    /**
     * Quota value for groups. Changing this updates the
     * existing quotaset.
     */
    groups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes per volume .
     * Changing this updates the existing quotaset.
     */
    perVolumeGigabytes?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas. Changing this
     * creates a new quotaset.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for snapshots. Changing this updates the
     * existing quotaset.
     */
    snapshots?: pulumi.Input<number>;
    /**
     * Key/Value pairs for setting quota for
     * volumes types. Possible keys are `snapshots_<volume_type_name>`,
     * `volumes_<volume_type_name>` and `gigabytes_<volume_type_name>`.
     */
    volumeTypeQuota?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Quota value for volumes. Changing this updates the
     * existing quotaset.
     */
    volumes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a QuoteSetV3 resource.
 */
export interface QuoteSetV3Args {
    /**
     * Quota value for backup gigabytes. Changing
     * this updates the existing quotaset.
     */
    backupGigabytes?: pulumi.Input<number>;
    /**
     * Quota value for backups. Changing this updates the
     * existing quotaset.
     */
    backups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes. Changing this updates the
     * existing quotaset.
     */
    gigabytes?: pulumi.Input<number>;
    /**
     * Quota value for groups. Changing this updates the
     * existing quotaset.
     */
    groups?: pulumi.Input<number>;
    /**
     * Quota value for gigabytes per volume .
     * Changing this updates the existing quotaset.
     */
    perVolumeGigabytes?: pulumi.Input<number>;
    /**
     * ID of the project to manage quotas. Changing this
     * creates a new quotaset.
     */
    projectId: pulumi.Input<string>;
    /**
     * The region in which to create the volume. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new quotaset.
     */
    region?: pulumi.Input<string>;
    /**
     * Quota value for snapshots. Changing this updates the
     * existing quotaset.
     */
    snapshots?: pulumi.Input<number>;
    /**
     * Key/Value pairs for setting quota for
     * volumes types. Possible keys are `snapshots_<volume_type_name>`,
     * `volumes_<volume_type_name>` and `gigabytes_<volume_type_name>`.
     */
    volumeTypeQuota?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Quota value for volumes. Changing this updates the
     * existing quotaset.
     */
    volumes?: pulumi.Input<number>;
}
