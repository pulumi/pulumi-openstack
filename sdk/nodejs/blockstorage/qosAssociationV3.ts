// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V3 block storage Qos Association resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const qos = new openstack.blockstorage.QosV3("qos", {
 *     consumer: "front-end",
 *     specs: {
 *         read_iops_sec: "20000",
 *     },
 * });
 * const volumeType = new openstack.blockstorage.VolumeTypeV3("volumeType", {});
 * const qosAssociation = new openstack.blockstorage.QosAssociationV3("qosAssociation", {
 *     qosId: qos.id,
 *     volumeTypeId: volumeType.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Qos association can be imported using the `qos_id/volume_type_id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:blockstorage/qosAssociationV3:QosAssociationV3 qos_association 941793f0-0a34-4bc4-b72e-a6326ae58283/ea257959-eeb1-4c10-8d33-26f0409a755d
 * ```
 */
export class QosAssociationV3 extends pulumi.CustomResource {
    /**
     * Get an existing QosAssociationV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QosAssociationV3State, opts?: pulumi.CustomResourceOptions): QosAssociationV3 {
        return new QosAssociationV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:blockstorage/qosAssociationV3:QosAssociationV3';

    /**
     * Returns true if the given object is an instance of QosAssociationV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QosAssociationV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QosAssociationV3.__pulumiType;
    }

    /**
     * ID of the qos to associate. Changing this creates
     * a new qos association.
     */
    public readonly qosId!: pulumi.Output<string>;
    /**
     * The region in which to create the qos association.
     * If omitted, the `region` argument of the provider is used. Changing
     * this creates a new qos association.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * ID of the volumeType to associate.
     * Changing this creates a new qos association.
     */
    public readonly volumeTypeId!: pulumi.Output<string>;

    /**
     * Create a QosAssociationV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QosAssociationV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QosAssociationV3Args | QosAssociationV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QosAssociationV3State | undefined;
            resourceInputs["qosId"] = state ? state.qosId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["volumeTypeId"] = state ? state.volumeTypeId : undefined;
        } else {
            const args = argsOrState as QosAssociationV3Args | undefined;
            if ((!args || args.qosId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qosId'");
            }
            if ((!args || args.volumeTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeTypeId'");
            }
            resourceInputs["qosId"] = args ? args.qosId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["volumeTypeId"] = args ? args.volumeTypeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QosAssociationV3.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QosAssociationV3 resources.
 */
export interface QosAssociationV3State {
    /**
     * ID of the qos to associate. Changing this creates
     * a new qos association.
     */
    qosId?: pulumi.Input<string>;
    /**
     * The region in which to create the qos association.
     * If omitted, the `region` argument of the provider is used. Changing
     * this creates a new qos association.
     */
    region?: pulumi.Input<string>;
    /**
     * ID of the volumeType to associate.
     * Changing this creates a new qos association.
     */
    volumeTypeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QosAssociationV3 resource.
 */
export interface QosAssociationV3Args {
    /**
     * ID of the qos to associate. Changing this creates
     * a new qos association.
     */
    qosId: pulumi.Input<string>;
    /**
     * The region in which to create the qos association.
     * If omitted, the `region` argument of the provider is used. Changing
     * this creates a new qos association.
     */
    region?: pulumi.Input<string>;
    /**
     * ID of the volumeType to associate.
     * Changing this creates a new qos association.
     */
    volumeTypeId: pulumi.Input<string>;
}
