// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterTemplateArgs, ClusterTemplateState } from "./clusterTemplate";
export type ClusterTemplate = import("./clusterTemplate").ClusterTemplate;
export const ClusterTemplate: typeof import("./clusterTemplate").ClusterTemplate = null as any;
utilities.lazyLoad(exports, ["ClusterTemplate"], () => require("./clusterTemplate"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterTemplateArgs, GetClusterTemplateResult, GetClusterTemplateOutputArgs } from "./getClusterTemplate";
export const getClusterTemplate: typeof import("./getClusterTemplate").getClusterTemplate = null as any;
export const getClusterTemplateOutput: typeof import("./getClusterTemplate").getClusterTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getClusterTemplate","getClusterTemplateOutput"], () => require("./getClusterTemplate"));

export { GetNodeGroupArgs, GetNodeGroupResult, GetNodeGroupOutputArgs } from "./getNodeGroup";
export const getNodeGroup: typeof import("./getNodeGroup").getNodeGroup = null as any;
export const getNodeGroupOutput: typeof import("./getNodeGroup").getNodeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNodeGroup","getNodeGroupOutput"], () => require("./getNodeGroup"));

export { NodeGroupArgs, NodeGroupState } from "./nodeGroup";
export type NodeGroup = import("./nodeGroup").NodeGroup;
export const NodeGroup: typeof import("./nodeGroup").NodeGroup = null as any;
utilities.lazyLoad(exports, ["NodeGroup"], () => require("./nodeGroup"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:containerinfra/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "openstack:containerinfra/clusterTemplate:ClusterTemplate":
                return new ClusterTemplate(name, <any>undefined, { urn })
            case "openstack:containerinfra/nodeGroup:NodeGroup":
                return new NodeGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "containerinfra/cluster", _module)
pulumi.runtime.registerResourceModule("openstack", "containerinfra/clusterTemplate", _module)
pulumi.runtime.registerResourceModule("openstack", "containerinfra/nodeGroup", _module)
