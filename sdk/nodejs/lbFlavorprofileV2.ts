// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a V2 load balancer flavorprofile resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * ## Example Usage
 *
 * ### Using jsonencode
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const flavorprofile1 = new openstack.LbFlavorprofileV2("flavorprofile_1", {
 *     name: "amphora-single-profile",
 *     providerName: "amphora",
 *     flavorData: JSON.stringify({
 *         loadbalancer_topology: "SINGLE",
 *     }),
 * });
 * ```
 *
 * ### Using plain string
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const flavorprofile1 = new openstack.LbFlavorprofileV2("flavorprofile_1", {
 *     name: "amphora-single-profile",
 *     providerName: "amphora",
 *     flavorData: "{\"loadbalancer_topology\": \"SINGLE\"}",
 * });
 * ```
 *
 * ## Import
 *
 * flavorprofiles can be imported using their `id`. Example:
 *
 * ```sh
 * $ pulumi import openstack:index/lbFlavorprofileV2:LbFlavorprofileV2 flavorprofile_1 2a0f2240-c5e6-41de-896d-e80d97428d6b
 * ```
 */
export class LbFlavorprofileV2 extends pulumi.CustomResource {
    /**
     * Get an existing LbFlavorprofileV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbFlavorprofileV2State, opts?: pulumi.CustomResourceOptions): LbFlavorprofileV2 {
        return new LbFlavorprofileV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:index/lbFlavorprofileV2:LbFlavorprofileV2';

    /**
     * Returns true if the given object is an instance of LbFlavorprofileV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbFlavorprofileV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbFlavorprofileV2.__pulumiType;
    }

    /**
     * String that passes the flavorData for the flavorprofile.
     * The data that are allowed depend on the `providerName` that is passed. jsonencode
     * can be used for readability as shown in the example above.
     * Changing this updates the existing flavorprofile.
     */
    public readonly flavorData!: pulumi.Output<string>;
    /**
     * Name of the flavorprofile. Changing this updates the existing
     * flavorprofile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The providerName that the flavorProfile will use.
     * Changing this updates the existing flavorprofile.
     */
    public readonly providerName!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a LbFlavorprofileV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbFlavorprofileV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbFlavorprofileV2Args | LbFlavorprofileV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbFlavorprofileV2State | undefined;
            resourceInputs["flavorData"] = state ? state.flavorData : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as LbFlavorprofileV2Args | undefined;
            if ((!args || args.flavorData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorData'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["flavorData"] = args ? args.flavorData : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbFlavorprofileV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LbFlavorprofileV2 resources.
 */
export interface LbFlavorprofileV2State {
    /**
     * String that passes the flavorData for the flavorprofile.
     * The data that are allowed depend on the `providerName` that is passed. jsonencode
     * can be used for readability as shown in the example above.
     * Changing this updates the existing flavorprofile.
     */
    flavorData?: pulumi.Input<string>;
    /**
     * Name of the flavorprofile. Changing this updates the existing
     * flavorprofile.
     */
    name?: pulumi.Input<string>;
    /**
     * The providerName that the flavorProfile will use.
     * Changing this updates the existing flavorprofile.
     */
    providerName?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbFlavorprofileV2 resource.
 */
export interface LbFlavorprofileV2Args {
    /**
     * String that passes the flavorData for the flavorprofile.
     * The data that are allowed depend on the `providerName` that is passed. jsonencode
     * can be used for readability as shown in the example above.
     * Changing this updates the existing flavorprofile.
     */
    flavorData: pulumi.Input<string>;
    /**
     * Name of the flavorprofile. Changing this updates the existing
     * flavorprofile.
     */
    name?: pulumi.Input<string>;
    /**
     * The providerName that the flavorProfile will use.
     * Changing this updates the existing flavorprofile.
     */
    providerName: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
