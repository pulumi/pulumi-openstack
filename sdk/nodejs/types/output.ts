// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";

export namespace blockstorage {
    export interface VolumeAttachment {
        device: string;
        id: string;
        instanceId: string;
    }

    export interface VolumeV1Attachment {
        device: string;
        id: string;
        instanceId: string;
    }

    export interface VolumeV2Attachment {
        device: string;
        id: string;
        instanceId: string;
    }
}

export namespace compute {
    export interface InstanceBlockDevice {
        bootIndex?: number;
        deleteOnTermination?: boolean;
        destinationType?: string;
        deviceType?: string;
        diskBus?: string;
        guestFormat?: string;
        sourceType: string;
        uuid?: string;
        volumeSize?: number;
    }

    export interface InstanceNetwork {
        accessNetwork?: boolean;
        fixedIpV4: string;
        fixedIpV6: string;
        mac: string;
        /**
         * A unique name for the resource.
         */
        name: string;
        port: string;
        uuid: string;
    }

    export interface InstancePersonality {
        content: string;
        file: string;
    }

    export interface InstanceSchedulerHint {
        additionalProperties?: {[key: string]: any};
        buildNearHostIp?: string;
        differentHosts?: string[];
        group?: string;
        queries?: string[];
        sameHosts?: string[];
        targetCell?: string;
    }

    export interface InstanceVendorOptions {
        ignoreResizeConfirmation?: boolean;
    }

    export interface SecGroupRule {
        cidr?: string;
        fromGroupId?: string;
        fromPort: number;
        id: string;
        ipProtocol: string;
        self?: boolean;
        toPort: number;
    }
}

export namespace database {
    export interface ConfigurationConfiguration {
        /**
         * A unique name for the resource.
         */
        name: string;
        value: string;
    }

    export interface ConfigurationDatastore {
        type: string;
        version: string;
    }

    export interface InstanceDatabase {
        charset?: string;
        collate?: string;
        /**
         * A unique name for the resource.
         */
        name: string;
    }

    export interface InstanceDatastore {
        type: string;
        version: string;
    }

    export interface InstanceNetwork {
        fixedIpV4?: string;
        fixedIpV6?: string;
        port?: string;
        uuid?: string;
    }

    export interface InstanceUser {
        databases?: string[];
        host?: string;
        /**
         * A unique name for the resource.
         */
        name: string;
        password?: string;
    }
}

export namespace identity {
    export interface GetAuthScopeRole {
        /**
         * The ID of the role.
         */
        roleId: string;
        /**
         * The name of the role.
         */
        roleName: string;
    }

    export interface UserMultiFactorAuthRule {
        rules: string[];
    }
}

export namespace keymanager {
    export interface ContainerV1Consumer {
        /**
         * Human-readable name for the Container. Does not have
         * to be unique.
         */
        name?: string;
        /**
         * The consumer URL.
         */
        url?: string;
    }

    export interface ContainerV1SecretRef {
        /**
         * Human-readable name for the Container. Does not have
         * to be unique.
         */
        name?: string;
        secretRef: string;
    }

    export interface GetContainerConsumer {
        /**
         * The Container name.
         */
        name?: string;
        /**
         * The consumer URL.
         */
        url?: string;
    }

    export interface GetContainerSecretRef {
        /**
         * The Container name.
         */
        name?: string;
        /**
         * The secret reference / where to find the secret, URL.
         */
        secretRef?: string;
    }
}

export namespace loadbalancer {
    export interface PoolPersistence {
        /**
         * The name of the cookie if persistence mode is set
         * appropriately. Required if `type = APP_COOKIE`.
         */
        cookieName?: string;
        /**
         * The type of persistence mode. The current specification
         * supports SOURCE_IP, HTTP_COOKIE, and APP_COOKIE.
         */
        type: string;
    }
}

export namespace networking {
    export interface GetPortAllowedAddressPair {
        /**
         * The additional IP address.
         */
        ipAddress: string;
        /**
         * The MAC address of the port.
         */
        macAddress: string;
    }

    export interface GetPortBinding {
        /**
         * The ID of the host, which has the allocatee port.
         */
        hostId: string;
        /**
         * A JSON string containing the binding profile information.
         */
        profile: string;
        /**
         * A map of JSON strings containing additional details for this
         * specific binding.
         */
        vifDetails: {[key: string]: any};
        /**
         * The VNIC type of the port binding.
         */
        vifType: string;
        /**
         * VNIC type for the port.
         */
        vnicType: string;
    }

    export interface GetPortExtraDhcpOption {
        /**
         * IP protocol version
         */
        ipVersion: number;
        /**
         * The name of the port.
         */
        name: string;
        /**
         * Value of the DHCP option.
         */
        value: string;
    }

    export interface GetRouterExternalFixedIp {
        /**
         * The IP address to set on the router.
         */
        ipAddress?: string;
        subnetId?: string;
    }

    export interface GetSubnetAllocationPool {
        end: string;
        start: string;
    }

    export interface GetSubnetHostRoute {
        destinationCidr: string;
        nextHop: string;
    }

    export interface GetTrunkSubPort {
        /**
         * The ID of the trunk parent port.
         */
        portId: string;
        /**
         * The numeric id of the subport segment.
         */
        segmentationId: number;
        /**
         * The segmenation tecnology used, e.g., "vlan".
         */
        segmentationType: string;
    }

    export interface NetworkSegment {
        networkType?: string;
        physicalNetwork?: string;
        segmentationId?: number;
    }

    export interface PortAllowedAddressPair {
        ipAddress: string;
        /**
         * Specify a specific MAC address for the port. Changing
         * this creates a new port.
         */
        macAddress?: string;
    }

    export interface PortBinding {
        hostId?: string;
        profile?: string;
        vifDetails: {[key: string]: any};
        vifType: string;
        vnicType?: string;
    }

    export interface PortExtraDhcpOption {
        ipVersion?: number;
        /**
         * A unique name for the port. Changing this
         * updates the `name` of an existing port.
         */
        name: string;
        value: string;
    }

    export interface PortFixedIp {
        ipAddress?: string;
        subnetId: string;
    }

    export interface RouterExternalFixedIp {
        ipAddress?: string;
        subnetId?: string;
    }

    export interface RouterVendorOptions {
        setRouterGatewayAfterCreate?: boolean;
    }

    export interface SubnetAllocationPool {
        end: string;
        start: string;
    }

    export interface SubnetAllocationPoolsCollection {
        end: string;
        start: string;
    }

    export interface SubnetHostRoute {
        destinationCidr: string;
        nextHop: string;
    }

    export interface TrunkSubPort {
        /**
         * The ID of the port to be used as the parent port of the
         * trunk. This is the port that should be used as the compute instance network
         * port. Changing this creates a new trunk.
         */
        portId: string;
        segmentationId: number;
        segmentationType: string;
    }
}

export namespace objectstorage {
    export interface ContainerVersioning {
        location: string;
        type: string;
    }
}

export namespace sharedfilesystem {
    export interface GetShareExportLocation {
        path: string;
        preferred: string;
    }

    export interface ShareExportLocation {
        path: string;
        preferred: string;
    }
}

export namespace vpnaas {
    export interface IkePolicyLifetime {
        units: string;
        value: number;
    }

    export interface IpSecPolicyLifetime {
        units: string;
        value: number;
    }

    export interface SiteConnectionDpd {
        action: string;
        interval: number;
        timeout: number;
    }
}
