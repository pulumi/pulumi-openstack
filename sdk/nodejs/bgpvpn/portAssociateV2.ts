// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a V2 BGP VPN port association resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const association1 = new openstack.bgpvpn.PortAssociateV2("association_1", {
 *     bgpvpnId: "19382ec5-8098-47d9-a9c6-6270c91103f4",
 *     portId: "b83a95b8-c2c8-4eac-9a9e-ddc85bd1266f",
 *     routes: [
 *         {
 *             type: "prefix",
 *             prefix: "192.168.170.1/32",
 *         },
 *         {
 *             type: "bgpvpn",
 *             bgpvpnId: "35af1cc6-3d0f-4c5d-86f8-8cdb508d3f0c",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * BGP VPN port associations can be imported using the BGP VPN ID and BGP VPN port
 *
 * association ID separated by a slash, e.g.:
 *
 * hcl
 *
 * ```sh
 * $ pulumi import openstack:bgpvpn/portAssociateV2:PortAssociateV2 association_1 5bb44ecf-f8fe-4d75-8fc5-313f96ee2696/8f8fc660-3f28-414e-896a-0c7c51162fcf
 * ```
 */
export class PortAssociateV2 extends pulumi.CustomResource {
    /**
     * Get an existing PortAssociateV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortAssociateV2State, opts?: pulumi.CustomResourceOptions): PortAssociateV2 {
        return new PortAssociateV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:bgpvpn/portAssociateV2:PortAssociateV2';

    /**
     * Returns true if the given object is an instance of PortAssociateV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PortAssociateV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortAssociateV2.__pulumiType;
    }

    /**
     * A boolean flag indicating whether fixed
     * IPs should be advertised. Defaults to true.
     */
    public readonly advertiseFixedIps!: pulumi.Output<boolean>;
    /**
     * The ID of the BGP VPN to which the port will be
     * associated. Changing this creates a new BGP VPN port association.
     */
    public readonly bgpvpnId!: pulumi.Output<string>;
    /**
     * The ID of the port to be associated with the BGP VPN.
     * Changing this creates a new BGP VPN port association.
     */
    public readonly portId!: pulumi.Output<string>;
    /**
     * The ID of the project that owns the port
     * association. Only administrative and users with `advsvc` role can specify a
     * project ID other than their own. Changing this creates a new BGP VPN port
     * association.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a BGP VPN port association. If
     * omitted, the `region` argument of the provider is used. Changing this creates
     * a new BGP VPN port association.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * A list of dictionaries containing the following keys:
     */
    public readonly routes!: pulumi.Output<outputs.bgpvpn.PortAssociateV2Route[] | undefined>;

    /**
     * Create a PortAssociateV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortAssociateV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortAssociateV2Args | PortAssociateV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortAssociateV2State | undefined;
            resourceInputs["advertiseFixedIps"] = state ? state.advertiseFixedIps : undefined;
            resourceInputs["bgpvpnId"] = state ? state.bgpvpnId : undefined;
            resourceInputs["portId"] = state ? state.portId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
        } else {
            const args = argsOrState as PortAssociateV2Args | undefined;
            if ((!args || args.bgpvpnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bgpvpnId'");
            }
            if ((!args || args.portId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portId'");
            }
            resourceInputs["advertiseFixedIps"] = args ? args.advertiseFixedIps : undefined;
            resourceInputs["bgpvpnId"] = args ? args.bgpvpnId : undefined;
            resourceInputs["portId"] = args ? args.portId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "openstack:index/bgpvpnPortAssociateV2:BgpvpnPortAssociateV2" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PortAssociateV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PortAssociateV2 resources.
 */
export interface PortAssociateV2State {
    /**
     * A boolean flag indicating whether fixed
     * IPs should be advertised. Defaults to true.
     */
    advertiseFixedIps?: pulumi.Input<boolean>;
    /**
     * The ID of the BGP VPN to which the port will be
     * associated. Changing this creates a new BGP VPN port association.
     */
    bgpvpnId?: pulumi.Input<string>;
    /**
     * The ID of the port to be associated with the BGP VPN.
     * Changing this creates a new BGP VPN port association.
     */
    portId?: pulumi.Input<string>;
    /**
     * The ID of the project that owns the port
     * association. Only administrative and users with `advsvc` role can specify a
     * project ID other than their own. Changing this creates a new BGP VPN port
     * association.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a BGP VPN port association. If
     * omitted, the `region` argument of the provider is used. Changing this creates
     * a new BGP VPN port association.
     */
    region?: pulumi.Input<string>;
    /**
     * A list of dictionaries containing the following keys:
     */
    routes?: pulumi.Input<pulumi.Input<inputs.bgpvpn.PortAssociateV2Route>[]>;
}

/**
 * The set of arguments for constructing a PortAssociateV2 resource.
 */
export interface PortAssociateV2Args {
    /**
     * A boolean flag indicating whether fixed
     * IPs should be advertised. Defaults to true.
     */
    advertiseFixedIps?: pulumi.Input<boolean>;
    /**
     * The ID of the BGP VPN to which the port will be
     * associated. Changing this creates a new BGP VPN port association.
     */
    bgpvpnId: pulumi.Input<string>;
    /**
     * The ID of the port to be associated with the BGP VPN.
     * Changing this creates a new BGP VPN port association.
     */
    portId: pulumi.Input<string>;
    /**
     * The ID of the project that owns the port
     * association. Only administrative and users with `advsvc` role can specify a
     * project ID other than their own. Changing this creates a new BGP VPN port
     * association.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a BGP VPN port association. If
     * omitted, the `region` argument of the provider is used. Changing this creates
     * a new BGP VPN port association.
     */
    region?: pulumi.Input<string>;
    /**
     * A list of dictionaries containing the following keys:
     */
    routes?: pulumi.Input<pulumi.Input<inputs.bgpvpn.PortAssociateV2Route>[]>;
}
