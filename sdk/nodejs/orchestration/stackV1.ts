// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a V1 stack resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const stack1 = new openstack.orchestration.StackV1("stack_1", {
 *     name: "stack_1",
 *     parameters: {
 *         length: "4",
 *     },
 *     templateOpts: {
 *         Bin: `heat_template_version: 2013-05-23
 * parameters:
 *   length:
 *     type: number
 * resources:
 *   test_res:
 *     type: OS::Heat::TestResource
 *   random:
 *     type: OS::Heat::RandomString
 *     properties:
 *       length: {get_param: length}
 * `,
 *     },
 *     environmentOpts: {
 *         Bin: "\n",
 *     },
 *     disableRollback: true,
 *     timeout: 30,
 * });
 * ```
 *
 * ## Import
 *
 * stacks can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:orchestration/stackV1:StackV1 stack_1 ea257959-eeb1-4c10-8d33-26f0409a755d
 * ```
 */
export class StackV1 extends pulumi.CustomResource {
    /**
     * Get an existing StackV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackV1State, opts?: pulumi.CustomResourceOptions): StackV1 {
        return new StackV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:orchestration/stackV1:StackV1';

    /**
     * Returns true if the given object is an instance of StackV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackV1.__pulumiType;
    }

    /**
     * A list of stack outputs.
     */
    declare public readonly StackOutputs: pulumi.Output<outputs.orchestration.StackV1StackOutput[]>;
    /**
     * List of stack capabilities for stack.
     */
    declare public readonly capabilities: pulumi.Output<string[]>;
    /**
     * The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    declare public readonly creationTime: pulumi.Output<string>;
    /**
     * The description of the stack resource.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     */
    declare public readonly disableRollback: pulumi.Output<boolean>;
    /**
     * Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     */
    declare public readonly environmentOpts: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack's name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of notification topics for stack.
     */
    declare public readonly notificationTopics: pulumi.Output<string[]>;
    /**
     * User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     */
    declare public readonly parameters: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The status of the stack.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The reason for the current status of the stack.
     */
    declare public readonly statusReason: pulumi.Output<string>;
    /**
     * A list of tags to assosciate with the Stack
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * The description of the stack template.
     */
    declare public readonly templateDescription: pulumi.Output<string>;
    /**
     * Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     */
    declare public readonly templateOpts: pulumi.Output<{[key: string]: string}>;
    /**
     * The timeout for stack action in minutes.
     */
    declare public readonly timeout: pulumi.Output<number>;
    /**
     * The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    declare public readonly updatedTime: pulumi.Output<string>;

    /**
     * Create a StackV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackV1Args | StackV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackV1State | undefined;
            resourceInputs["StackOutputs"] = state?.StackOutputs;
            resourceInputs["capabilities"] = state?.capabilities;
            resourceInputs["creationTime"] = state?.creationTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableRollback"] = state?.disableRollback;
            resourceInputs["environmentOpts"] = state?.environmentOpts;
            resourceInputs["name"] = state?.name;
            resourceInputs["notificationTopics"] = state?.notificationTopics;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["statusReason"] = state?.statusReason;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["templateDescription"] = state?.templateDescription;
            resourceInputs["templateOpts"] = state?.templateOpts;
            resourceInputs["timeout"] = state?.timeout;
            resourceInputs["updatedTime"] = state?.updatedTime;
        } else {
            const args = argsOrState as StackV1Args | undefined;
            if (args?.templateOpts === undefined && !opts.urn) {
                throw new Error("Missing required property 'templateOpts'");
            }
            resourceInputs["StackOutputs"] = args?.StackOutputs;
            resourceInputs["capabilities"] = args?.capabilities;
            resourceInputs["creationTime"] = args?.creationTime;
            resourceInputs["description"] = args?.description;
            resourceInputs["disableRollback"] = args?.disableRollback;
            resourceInputs["environmentOpts"] = args?.environmentOpts;
            resourceInputs["name"] = args?.name;
            resourceInputs["notificationTopics"] = args?.notificationTopics;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["region"] = args?.region;
            resourceInputs["status"] = args?.status;
            resourceInputs["statusReason"] = args?.statusReason;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateDescription"] = args?.templateDescription;
            resourceInputs["templateOpts"] = args?.templateOpts;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["updatedTime"] = args?.updatedTime;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackV1.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StackV1 resources.
 */
export interface StackV1State {
    /**
     * A list of stack outputs.
     */
    StackOutputs?: pulumi.Input<pulumi.Input<inputs.orchestration.StackV1StackOutput>[]>;
    /**
     * List of stack capabilities for stack.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of the stack resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     */
    disableRollback?: pulumi.Input<boolean>;
    /**
     * Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     */
    environmentOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack's name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of notification topics for stack.
     */
    notificationTopics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the stack.
     */
    status?: pulumi.Input<string>;
    /**
     * The reason for the current status of the stack.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * A list of tags to assosciate with the Stack
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the stack template.
     */
    templateDescription?: pulumi.Input<string>;
    /**
     * Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     */
    templateOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timeout for stack action in minutes.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StackV1 resource.
 */
export interface StackV1Args {
    /**
     * A list of stack outputs.
     */
    StackOutputs?: pulumi.Input<pulumi.Input<inputs.orchestration.StackV1StackOutput>[]>;
    /**
     * List of stack capabilities for stack.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of the stack resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     */
    disableRollback?: pulumi.Input<boolean>;
    /**
     * Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     */
    environmentOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack's name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of notification topics for stack.
     */
    notificationTopics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the stack.
     */
    status?: pulumi.Input<string>;
    /**
     * The reason for the current status of the stack.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * A list of tags to assosciate with the Stack
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the stack template.
     */
    templateDescription?: pulumi.Input<string>;
    /**
     * Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     */
    templateOpts: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timeout for stack action in minutes.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     */
    updatedTime?: pulumi.Input<string>;
}
