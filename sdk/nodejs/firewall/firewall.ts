// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a v1 firewall resource within OpenStack.
 *
 * ## Import
 *
 * Firewalls can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:firewall/firewall:Firewall firewall_1 c9e39fb2-ce20-46c8-a964-25f3898c7a97
 * ```
 */
export class Firewall extends pulumi.CustomResource {
    /**
     * Get an existing Firewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallState, opts?: pulumi.CustomResourceOptions): Firewall {
        return new Firewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:firewall/firewall:Firewall';

    /**
     * Returns true if the given object is an instance of Firewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Firewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Firewall.__pulumiType;
    }

    /**
     * Administrative up/down status for the firewall
     * (must be "true" or "false" if provided - defaults to "true").
     * Changing this updates the `adminStateUp` of an existing firewall.
     */
    public readonly adminStateUp!: pulumi.Output<boolean | undefined>;
    /**
     * Router(s) to associate this firewall instance
     * with. Must be a list of strings. Changing this updates the associated routers
     * of an existing firewall. Conflicts with `noRouters`.
     */
    public readonly associatedRouters!: pulumi.Output<string[]>;
    /**
     * A description for the firewall. Changing this
     * updates the `description` of an existing firewall.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A name for the firewall. Changing this
     * updates the `name` of an existing firewall.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Should this firewall not be associated with any routers
     * (must be "true" or "false" if provide - defaults to "false").
     * Conflicts with `associatedRouters`.
     */
    public readonly noRouters!: pulumi.Output<boolean | undefined>;
    /**
     * The policy resource id for the firewall. Changing
     * this updates the `policyId` of an existing firewall.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The owner of the floating IP. Required if admin wants
     * to create a firewall for another tenant. Changing this creates a new
     * firewall.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Map of additional options.
     */
    public readonly valueSpecs!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Firewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallArgs | FirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallState | undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["associatedRouters"] = state ? state.associatedRouters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noRouters"] = state ? state.noRouters : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        } else {
            const args = argsOrState as FirewallArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["associatedRouters"] = args ? args.associatedRouters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noRouters"] = args ? args.noRouters : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Firewall.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Firewall resources.
 */
export interface FirewallState {
    /**
     * Administrative up/down status for the firewall
     * (must be "true" or "false" if provided - defaults to "true").
     * Changing this updates the `adminStateUp` of an existing firewall.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * Router(s) to associate this firewall instance
     * with. Must be a list of strings. Changing this updates the associated routers
     * of an existing firewall. Conflicts with `noRouters`.
     */
    associatedRouters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for the firewall. Changing this
     * updates the `description` of an existing firewall.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the firewall. Changing this
     * updates the `name` of an existing firewall.
     */
    name?: pulumi.Input<string>;
    /**
     * Should this firewall not be associated with any routers
     * (must be "true" or "false" if provide - defaults to "false").
     * Conflicts with `associatedRouters`.
     */
    noRouters?: pulumi.Input<boolean>;
    /**
     * The policy resource id for the firewall. Changing
     * this updates the `policyId` of an existing firewall.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall.
     */
    region?: pulumi.Input<string>;
    /**
     * The owner of the floating IP. Required if admin wants
     * to create a firewall for another tenant. Changing this creates a new
     * firewall.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Firewall resource.
 */
export interface FirewallArgs {
    /**
     * Administrative up/down status for the firewall
     * (must be "true" or "false" if provided - defaults to "true").
     * Changing this updates the `adminStateUp` of an existing firewall.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * Router(s) to associate this firewall instance
     * with. Must be a list of strings. Changing this updates the associated routers
     * of an existing firewall. Conflicts with `noRouters`.
     */
    associatedRouters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A description for the firewall. Changing this
     * updates the `description` of an existing firewall.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the firewall. Changing this
     * updates the `name` of an existing firewall.
     */
    name?: pulumi.Input<string>;
    /**
     * Should this firewall not be associated with any routers
     * (must be "true" or "false" if provide - defaults to "false").
     * Conflicts with `associatedRouters`.
     */
    noRouters?: pulumi.Input<boolean>;
    /**
     * The policy resource id for the firewall. Changing
     * this updates the `policyId` of an existing firewall.
     */
    policyId: pulumi.Input<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall.
     */
    region?: pulumi.Input<string>;
    /**
     * The owner of the floating IP. Required if admin wants
     * to create a firewall for another tenant. Changing this creates a new
     * firewall.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: any}>;
}
