// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a v1 firewall policy resource within OpenStack.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const rule1 = new openstack.firewall.Rule("rule_1", {
 *     name: "my-rule-1",
 *     description: "drop TELNET traffic",
 *     action: "deny",
 *     protocol: "tcp",
 *     destinationPort: "23",
 *     enabled: true,
 * });
 * const rule2 = new openstack.firewall.Rule("rule_2", {
 *     name: "my-rule-2",
 *     description: "drop NTP traffic",
 *     action: "deny",
 *     protocol: "udp",
 *     destinationPort: "123",
 *     enabled: false,
 * });
 * const policy1 = new openstack.firewall.Policy("policy_1", {
 *     name: "my-policy",
 *     rules: [
 *         rule1.id,
 *         rule2.id,
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Firewall Policies can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:firewall/policy:Policy policy_1 07f422e6-c596-474b-8b94-fe2c12506ce0
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:firewall/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Audit status of the firewall policy
     * (must be "true" or "false" if provided - defaults to "false").
     * This status is set to "false" whenever the firewall policy or any of its
     * rules are changed. Changing this updates the `audited` status of an existing
     * firewall policy.
     */
    public readonly audited!: pulumi.Output<boolean | undefined>;
    /**
     * A description for the firewall policy. Changing
     * this updates the `description` of an existing firewall policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A name for the firewall policy. Changing this
     * updates the `name` of an existing firewall policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall policy. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall policy.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * An array of one or more firewall rules that comprise
     * the policy. Changing this results in adding/removing rules from the
     * existing firewall policy.
     */
    public readonly rules!: pulumi.Output<string[] | undefined>;
    /**
     * Sharing status of the firewall policy (must be "true"
     * or "false" if provided). If this is "true" the policy is visible to, and
     * can be used in, firewalls in other tenants. Changing this updates the
     * `shared` status of an existing firewall policy. Only administrative users
     * can specify if the policy should be shared.
     */
    public readonly shared!: pulumi.Output<boolean | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Map of additional options.
     */
    public readonly valueSpecs!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["audited"] = state ? state.audited : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            resourceInputs["audited"] = args ? args.audited : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Audit status of the firewall policy
     * (must be "true" or "false" if provided - defaults to "false").
     * This status is set to "false" whenever the firewall policy or any of its
     * rules are changed. Changing this updates the `audited` status of an existing
     * firewall policy.
     */
    audited?: pulumi.Input<boolean>;
    /**
     * A description for the firewall policy. Changing
     * this updates the `description` of an existing firewall policy.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the firewall policy. Changing this
     * updates the `name` of an existing firewall policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall policy. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall policy.
     */
    region?: pulumi.Input<string>;
    /**
     * An array of one or more firewall rules that comprise
     * the policy. Changing this results in adding/removing rules from the
     * existing firewall policy.
     */
    rules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sharing status of the firewall policy (must be "true"
     * or "false" if provided). If this is "true" the policy is visible to, and
     * can be used in, firewalls in other tenants. Changing this updates the
     * `shared` status of an existing firewall policy. Only administrative users
     * can specify if the policy should be shared.
     */
    shared?: pulumi.Input<boolean>;
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Audit status of the firewall policy
     * (must be "true" or "false" if provided - defaults to "false").
     * This status is set to "false" whenever the firewall policy or any of its
     * rules are changed. Changing this updates the `audited` status of an existing
     * firewall policy.
     */
    audited?: pulumi.Input<boolean>;
    /**
     * A description for the firewall policy. Changing
     * this updates the `description` of an existing firewall policy.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the firewall policy. Changing this
     * updates the `name` of an existing firewall policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the v1 networking client.
     * A networking client is needed to create a firewall policy. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * firewall policy.
     */
    region?: pulumi.Input<string>;
    /**
     * An array of one or more firewall rules that comprise
     * the policy. Changing this results in adding/removing rules from the
     * existing firewall policy.
     */
    rules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sharing status of the firewall policy (must be "true"
     * or "false" if provided). If this is "true" the policy is visible to, and
     * can be used in, firewalls in other tenants. Changing this updates the
     * `shared` status of an existing firewall policy. Only administrative users
     * can specify if the policy should be shared.
     */
    shared?: pulumi.Input<boolean>;
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: any}>;
}
