// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetFwGroupV2Args, GetFwGroupV2Result, GetFwGroupV2OutputArgs } from "./getFwGroupV2";
export const getFwGroupV2: typeof import("./getFwGroupV2").getFwGroupV2 = null as any;
export const getFwGroupV2Output: typeof import("./getFwGroupV2").getFwGroupV2Output = null as any;
utilities.lazyLoad(exports, ["getFwGroupV2","getFwGroupV2Output"], () => require("./getFwGroupV2"));

export { GetFwPolicyV2Args, GetFwPolicyV2Result, GetFwPolicyV2OutputArgs } from "./getFwPolicyV2";
export const getFwPolicyV2: typeof import("./getFwPolicyV2").getFwPolicyV2 = null as any;
export const getFwPolicyV2Output: typeof import("./getFwPolicyV2").getFwPolicyV2Output = null as any;
utilities.lazyLoad(exports, ["getFwPolicyV2","getFwPolicyV2Output"], () => require("./getFwPolicyV2"));

export { GetFwRuleV2Args, GetFwRuleV2Result, GetFwRuleV2OutputArgs } from "./getFwRuleV2";
export const getFwRuleV2: typeof import("./getFwRuleV2").getFwRuleV2 = null as any;
export const getFwRuleV2Output: typeof import("./getFwRuleV2").getFwRuleV2Output = null as any;
utilities.lazyLoad(exports, ["getFwRuleV2","getFwRuleV2Output"], () => require("./getFwRuleV2"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as blockstorage from "./blockstorage";
import * as compute from "./compute";
import * as config from "./config";
import * as containerinfra from "./containerinfra";
import * as database from "./database";
import * as dns from "./dns";
import * as firewall from "./firewall";
import * as identity from "./identity";
import * as images from "./images";
import * as keymanager from "./keymanager";
import * as loadbalancer from "./loadbalancer";
import * as networking from "./networking";
import * as objectstorage from "./objectstorage";
import * as orchestration from "./orchestration";
import * as sharedfilesystem from "./sharedfilesystem";
import * as types from "./types";
import * as vpnaas from "./vpnaas";

export {
    blockstorage,
    compute,
    config,
    containerinfra,
    database,
    dns,
    firewall,
    identity,
    images,
    keymanager,
    loadbalancer,
    networking,
    objectstorage,
    orchestration,
    sharedfilesystem,
    types,
    vpnaas,
};
pulumi.runtime.registerResourcePackage("openstack", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:openstack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
