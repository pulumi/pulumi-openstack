// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V3 Registered Limit resource within OpenStack Keystone.
 *
 * > **Note:** You _must_ have admin privileges in your OpenStack cloud to use
 * this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const glance = openstack.identity.getService({
 *     name: "glance",
 * });
 * const limit1 = new openstack.identity.RegisteredLimitV3("limit_1", {
 *     serviceId: glance.then(glance => glance.id),
 *     resourceName: "image_count_total",
 *     defaultLimit: 10,
 *     description: "foo",
 * });
 * ```
 *
 * ## Import
 *
 * Registered Limits can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:identity/registeredLimitV3:RegisteredLimitV3 limit_1 89c60255-9bd6-460c-822a-e2b959ede9d2
 * ```
 */
export class RegisteredLimitV3 extends pulumi.CustomResource {
    /**
     * Get an existing RegisteredLimitV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegisteredLimitV3State, opts?: pulumi.CustomResourceOptions): RegisteredLimitV3 {
        return new RegisteredLimitV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:identity/registeredLimitV3:RegisteredLimitV3';

    /**
     * Returns true if the given object is an instance of RegisteredLimitV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegisteredLimitV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegisteredLimitV3.__pulumiType;
    }

    /**
     * Integer for the actual limit.
     */
    declare public readonly defaultLimit: pulumi.Output<number>;
    /**
     * Description of the limit
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new registered limit.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The resource that the limit applies to. On
     * updates, either service_id, resourceName or regionId must be different than
     * existing value otherwise it will raise 409.
     */
    declare public readonly resourceName: pulumi.Output<string>;
    /**
     * The service the limit applies to. On updates,
     * either service_id, resourceName or regionId must be different than existing
     * value otherwise it will raise 409.
     */
    declare public readonly serviceId: pulumi.Output<string>;

    /**
     * Create a RegisteredLimitV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegisteredLimitV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegisteredLimitV3Args | RegisteredLimitV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegisteredLimitV3State | undefined;
            resourceInputs["defaultLimit"] = state?.defaultLimit;
            resourceInputs["description"] = state?.description;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceName"] = state?.resourceName;
            resourceInputs["serviceId"] = state?.serviceId;
        } else {
            const args = argsOrState as RegisteredLimitV3Args | undefined;
            if (args?.defaultLimit === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultLimit'");
            }
            if (args?.resourceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if (args?.serviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["defaultLimit"] = args?.defaultLimit;
            resourceInputs["description"] = args?.description;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceName"] = args?.resourceName;
            resourceInputs["serviceId"] = args?.serviceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegisteredLimitV3.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegisteredLimitV3 resources.
 */
export interface RegisteredLimitV3State {
    /**
     * Integer for the actual limit.
     */
    defaultLimit?: pulumi.Input<number>;
    /**
     * Description of the limit
     */
    description?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new registered limit.
     */
    region?: pulumi.Input<string>;
    /**
     * The resource that the limit applies to. On
     * updates, either service_id, resourceName or regionId must be different than
     * existing value otherwise it will raise 409.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The service the limit applies to. On updates,
     * either service_id, resourceName or regionId must be different than existing
     * value otherwise it will raise 409.
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegisteredLimitV3 resource.
 */
export interface RegisteredLimitV3Args {
    /**
     * Integer for the actual limit.
     */
    defaultLimit: pulumi.Input<number>;
    /**
     * Description of the limit
     */
    description?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new registered limit.
     */
    region?: pulumi.Input<string>;
    /**
     * The resource that the limit applies to. On
     * updates, either service_id, resourceName or regionId must be different than
     * existing value otherwise it will raise 409.
     */
    resourceName: pulumi.Input<string>;
    /**
     * The service the limit applies to. On updates,
     * either service_id, resourceName or regionId must be different than existing
     * value otherwise it will raise 409.
     */
    serviceId: pulumi.Input<string>;
}
