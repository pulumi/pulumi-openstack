// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V3 EC2 Credential resource within OpenStack Keystone.
 * EC2 credentials in OpenStack are used to access S3 compatible Swift/RadosGW
 * endpoints or to authenticate against Keystone.
 *
 * > **Note:** All arguments including the EC2 credential access key and secret
 * will be stored in the raw state as plain-text. Read more about sensitive data
 * in state.
 *
 * ## Example Usage
 * ### EC2 credential in current project scope
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const ec2Key1 = new openstack.identity.Ec2CredentialV3("ec2Key1", {});
 * ```
 * ### EC2 credential in pre-defined project scope
 *
 * This allows administrative users to create EC2 credentials for a scope different
 * from the current auth scope.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const ec2Key1 = new openstack.identity.Ec2CredentialV3("ec2Key1", {projectId: "f7ac731cc11f40efbc03a9f9e1d1d21f"});
 * ```
 *
 * ## Import
 *
 * EC2 Credentials can be imported using the `access`, e.g.
 *
 * ```sh
 *  $ pulumi import openstack:identity/ec2CredentialV3:Ec2CredentialV3 ec2_cred_1 2d0ac4a2f81b4b0f9513ee49e780647d
 * ```
 */
export class Ec2CredentialV3 extends pulumi.CustomResource {
    /**
     * Get an existing Ec2CredentialV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2CredentialV3State, opts?: pulumi.CustomResourceOptions): Ec2CredentialV3 {
        return new Ec2CredentialV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:identity/ec2CredentialV3:Ec2CredentialV3';

    /**
     * Returns true if the given object is an instance of Ec2CredentialV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2CredentialV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2CredentialV3.__pulumiType;
    }

    /**
     * contains an EC2 credential access UUID
     */
    public /*out*/ readonly access!: pulumi.Output<string>;
    /**
     * The ID of the project the EC2 credential is created
     * for and that authentication requests using this EC2 credential will
     * be scoped to. Only administrative users can specify a project ID different
     * from the current auth scope.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new EC2 credential.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * contains an EC2 credential secret UUID
     */
    public /*out*/ readonly secret!: pulumi.Output<string>;
    /**
     * contains an EC2 credential trust ID scope
     */
    public /*out*/ readonly trustId!: pulumi.Output<string>;
    /**
     * The ID of the user the EC2 credential is created for.
     * Only administrative users can specify a user ID different from the current
     * auth scope.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a Ec2CredentialV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ec2CredentialV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2CredentialV3Args | Ec2CredentialV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2CredentialV3State | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["trustId"] = state ? state.trustId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as Ec2CredentialV3Args | undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["access"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
            resourceInputs["trustId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Ec2CredentialV3.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ec2CredentialV3 resources.
 */
export interface Ec2CredentialV3State {
    /**
     * contains an EC2 credential access UUID
     */
    access?: pulumi.Input<string>;
    /**
     * The ID of the project the EC2 credential is created
     * for and that authentication requests using this EC2 credential will
     * be scoped to. Only administrative users can specify a project ID different
     * from the current auth scope.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new EC2 credential.
     */
    region?: pulumi.Input<string>;
    /**
     * contains an EC2 credential secret UUID
     */
    secret?: pulumi.Input<string>;
    /**
     * contains an EC2 credential trust ID scope
     */
    trustId?: pulumi.Input<string>;
    /**
     * The ID of the user the EC2 credential is created for.
     * Only administrative users can specify a user ID different from the current
     * auth scope.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2CredentialV3 resource.
 */
export interface Ec2CredentialV3Args {
    /**
     * The ID of the project the EC2 credential is created
     * for and that authentication requests using this EC2 credential will
     * be scoped to. Only administrative users can specify a project ID different
     * from the current auth scope.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new EC2 credential.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the user the EC2 credential is created for.
     * Only administrative users can specify a user ID different from the current
     * auth scope.
     */
    userId?: pulumi.Input<string>;
}
