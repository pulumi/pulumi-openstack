// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V3 Limit resource within OpenStack Keystone.
 *
 * > **Note:** You _must_ have admin privileges in your OpenStack cloud to use
 * this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const glance = openstack.identity.getService({
 *     name: "glance",
 * });
 * const project1 = new openstack.identity.Project("project_1", {name: "project_1"});
 * const limit1 = new openstack.identity.LimitV3("limit_1", {
 *     projectId: project1.id,
 *     serviceId: glance.then(glance => glance.id),
 *     resourceName: "image_count_total",
 *     resourceLimit: 10,
 *     description: "foo",
 * });
 * ```
 *
 * ## Import
 *
 * Limits can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:identity/limitV3:LimitV3 limit_1 89c60255-9bd6-460c-822a-e2b959ede9d2
 * ```
 */
export class LimitV3 extends pulumi.CustomResource {
    /**
     * Get an existing LimitV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LimitV3State, opts?: pulumi.CustomResourceOptions): LimitV3 {
        return new LimitV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:identity/limitV3:LimitV3';

    /**
     * Returns true if the given object is an instance of LimitV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LimitV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LimitV3.__pulumiType;
    }

    /**
     * Description of the limit.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The domain the limit applies to. Changing this
     * creates a new Limit.
     */
    public readonly domainId!: pulumi.Output<string>;
    /**
     * The project the limit applies to. Changing this
     * creates a new Limit.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new Limit.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Integer for the actual limit.
     */
    public readonly resourceLimit!: pulumi.Output<number>;
    /**
     * The resource that the limit applies to. Changing
     * this creates a new Limit.
     */
    public readonly resourceName!: pulumi.Output<string>;
    /**
     * The service the limit applies to. Changing this
     * creates a new Limit.
     */
    public readonly serviceId!: pulumi.Output<string>;

    /**
     * Create a LimitV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LimitV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LimitV3Args | LimitV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LimitV3State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceLimit"] = state ? state.resourceLimit : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as LimitV3Args | undefined;
            if ((!args || args.resourceLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceLimit'");
            }
            if ((!args || args.resourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceLimit"] = args ? args.resourceLimit : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LimitV3.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LimitV3 resources.
 */
export interface LimitV3State {
    /**
     * Description of the limit.
     */
    description?: pulumi.Input<string>;
    /**
     * The domain the limit applies to. Changing this
     * creates a new Limit.
     */
    domainId?: pulumi.Input<string>;
    /**
     * The project the limit applies to. Changing this
     * creates a new Limit.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new Limit.
     */
    region?: pulumi.Input<string>;
    /**
     * Integer for the actual limit.
     */
    resourceLimit?: pulumi.Input<number>;
    /**
     * The resource that the limit applies to. Changing
     * this creates a new Limit.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The service the limit applies to. Changing this
     * creates a new Limit.
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LimitV3 resource.
 */
export interface LimitV3Args {
    /**
     * Description of the limit.
     */
    description?: pulumi.Input<string>;
    /**
     * The domain the limit applies to. Changing this
     * creates a new Limit.
     */
    domainId?: pulumi.Input<string>;
    /**
     * The project the limit applies to. Changing this
     * creates a new Limit.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new Limit.
     */
    region?: pulumi.Input<string>;
    /**
     * Integer for the actual limit.
     */
    resourceLimit: pulumi.Input<number>;
    /**
     * The resource that the limit applies to. Changing
     * this creates a new Limit.
     */
    resourceName: pulumi.Input<string>;
    /**
     * The service the limit applies to. Changing this
     * creates a new Limit.
     */
    serviceId: pulumi.Input<string>;
}
