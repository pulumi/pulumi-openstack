// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a user membership to group V3 resource within OpenStack.
 *
 * > **Note:** You _must_ have admin privileges in your OpenStack cloud to use
 * this resource.
 *
 * ***
 *
 * ## Import
 *
 * This resource can be imported by specifying all two arguments, separated by a forward slash:
 *
 * ```sh
 *  $ pulumi import openstack:identity/userMembershipV3:UserMembershipV3 user_membership_1 user_id/group_id
 * ```
 */
export class UserMembershipV3 extends pulumi.CustomResource {
    /**
     * Get an existing UserMembershipV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserMembershipV3State, opts?: pulumi.CustomResourceOptions): UserMembershipV3 {
        return new UserMembershipV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:identity/userMembershipV3:UserMembershipV3';

    /**
     * Returns true if the given object is an instance of UserMembershipV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserMembershipV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserMembershipV3.__pulumiType;
    }

    /**
     * The UUID of group to which the user will be added.
     * Changing this creates a new user membership.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The region in which to obtain the V3 Identity client.
     * If omitted, the `region` argument of the provider is used.
     * Changing this creates a new user membership.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The UUID of user to use. Changing this creates a new user membership.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserMembershipV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserMembershipV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserMembershipV3Args | UserMembershipV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserMembershipV3State | undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserMembershipV3Args | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserMembershipV3.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserMembershipV3 resources.
 */
export interface UserMembershipV3State {
    /**
     * The UUID of group to which the user will be added.
     * Changing this creates a new user membership.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Identity client.
     * If omitted, the `region` argument of the provider is used.
     * Changing this creates a new user membership.
     */
    region?: pulumi.Input<string>;
    /**
     * The UUID of user to use. Changing this creates a new user membership.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserMembershipV3 resource.
 */
export interface UserMembershipV3Args {
    /**
     * The UUID of group to which the user will be added.
     * Changing this creates a new user membership.
     */
    groupId: pulumi.Input<string>;
    /**
     * The region in which to obtain the V3 Identity client.
     * If omitted, the `region` argument of the provider is used.
     * Changing this creates a new user membership.
     */
    region?: pulumi.Input<string>;
    /**
     * The UUID of user to use. Changing this creates a new user membership.
     */
    userId: pulumi.Input<string>;
}
