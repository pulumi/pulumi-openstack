// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V1 load balancer vip resource within OpenStack.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const vip1 = new openstack.loadbalancer.Vip("vip_1", {
 *     name: "tf_test_lb_vip",
 *     subnetId: "12345",
 *     protocol: "HTTP",
 *     port: 80,
 *     poolId: "67890",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Load Balancer VIPs can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:loadbalancer/vip:Vip vip_1 50e16b26-89c1-475e-a492-76167182511e
 * ```
 */
export class Vip extends pulumi.CustomResource {
    /**
     * Get an existing Vip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VipState, opts?: pulumi.CustomResourceOptions): Vip {
        return new Vip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:loadbalancer/vip:Vip';

    /**
     * Returns true if the given object is an instance of Vip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vip.__pulumiType;
    }

    /**
     * The IP address of the vip. Changing this creates a new
     * vip.
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * The administrative state of the vip.
     * Acceptable values are "true" and "false". Changing this value updates the
     * state of the existing vip.
     */
    public readonly adminStateUp!: pulumi.Output<boolean>;
    /**
     * The maximum number of connections allowed for the
     * vip. Default is -1, meaning no limit. Changing this updates the connLimit
     * of the existing vip.
     */
    public readonly connLimit!: pulumi.Output<number>;
    /**
     * Human-readable description for the vip. Changing
     * this updates the description of the existing vip.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A *Networking* Floating IP that will be associated
     * with the vip. The Floating IP must be provisioned already.
     */
    public readonly floatingIp!: pulumi.Output<string | undefined>;
    /**
     * The name of the vip. Changing this updates the name of
     * the existing vip.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Omit this field to prevent session persistence.
     * The persistence object structure is documented below. Changing this updates
     * the persistence of the existing vip.
     */
    public readonly persistence!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The ID of the pool with which the vip is associated.
     * Changing this updates the poolId of the existing vip.
     */
    public readonly poolId!: pulumi.Output<string>;
    /**
     * The port on which to listen for client traffic. Changing
     * this creates a new vip.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Port UUID for this VIP at associated floating IP (if any).
     */
    public /*out*/ readonly portId!: pulumi.Output<string>;
    /**
     * The protocol - can be either 'TCP, 'HTTP', or
     * HTTPS'. Changing this creates a new vip.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a VIP. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * VIP.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The network on which to allocate the vip's address. A
     * tenant can only create vips on networks authorized by policy (e.g. networks
     * that belong to them or networks that are shared). Changing this creates a
     * new vip.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The owner of the vip. Required if admin wants to
     * create a vip member for another tenant. Changing this creates a new vip.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a Vip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VipArgs | VipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VipState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portId"] = state ? state.portId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as VipArgs | undefined;
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["portId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vip resources.
 */
export interface VipState {
    /**
     * The IP address of the vip. Changing this creates a new
     * vip.
     */
    address?: pulumi.Input<string>;
    /**
     * The administrative state of the vip.
     * Acceptable values are "true" and "false". Changing this value updates the
     * state of the existing vip.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * The maximum number of connections allowed for the
     * vip. Default is -1, meaning no limit. Changing this updates the connLimit
     * of the existing vip.
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Human-readable description for the vip. Changing
     * this updates the description of the existing vip.
     */
    description?: pulumi.Input<string>;
    /**
     * A *Networking* Floating IP that will be associated
     * with the vip. The Floating IP must be provisioned already.
     */
    floatingIp?: pulumi.Input<string>;
    /**
     * The name of the vip. Changing this updates the name of
     * the existing vip.
     */
    name?: pulumi.Input<string>;
    /**
     * Omit this field to prevent session persistence.
     * The persistence object structure is documented below. Changing this updates
     * the persistence of the existing vip.
     */
    persistence?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the pool with which the vip is associated.
     * Changing this updates the poolId of the existing vip.
     */
    poolId?: pulumi.Input<string>;
    /**
     * The port on which to listen for client traffic. Changing
     * this creates a new vip.
     */
    port?: pulumi.Input<number>;
    /**
     * Port UUID for this VIP at associated floating IP (if any).
     */
    portId?: pulumi.Input<string>;
    /**
     * The protocol - can be either 'TCP, 'HTTP', or
     * HTTPS'. Changing this creates a new vip.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a VIP. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * VIP.
     */
    region?: pulumi.Input<string>;
    /**
     * The network on which to allocate the vip's address. A
     * tenant can only create vips on networks authorized by policy (e.g. networks
     * that belong to them or networks that are shared). Changing this creates a
     * new vip.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The owner of the vip. Required if admin wants to
     * create a vip member for another tenant. Changing this creates a new vip.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vip resource.
 */
export interface VipArgs {
    /**
     * The IP address of the vip. Changing this creates a new
     * vip.
     */
    address?: pulumi.Input<string>;
    /**
     * The administrative state of the vip.
     * Acceptable values are "true" and "false". Changing this value updates the
     * state of the existing vip.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * The maximum number of connections allowed for the
     * vip. Default is -1, meaning no limit. Changing this updates the connLimit
     * of the existing vip.
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Human-readable description for the vip. Changing
     * this updates the description of the existing vip.
     */
    description?: pulumi.Input<string>;
    /**
     * A *Networking* Floating IP that will be associated
     * with the vip. The Floating IP must be provisioned already.
     */
    floatingIp?: pulumi.Input<string>;
    /**
     * The name of the vip. Changing this updates the name of
     * the existing vip.
     */
    name?: pulumi.Input<string>;
    /**
     * Omit this field to prevent session persistence.
     * The persistence object structure is documented below. Changing this updates
     * the persistence of the existing vip.
     */
    persistence?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the pool with which the vip is associated.
     * Changing this updates the poolId of the existing vip.
     */
    poolId: pulumi.Input<string>;
    /**
     * The port on which to listen for client traffic. Changing
     * this creates a new vip.
     */
    port: pulumi.Input<number>;
    /**
     * The protocol - can be either 'TCP, 'HTTP', or
     * HTTPS'. Changing this creates a new vip.
     */
    protocol: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a VIP. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * VIP.
     */
    region?: pulumi.Input<string>;
    /**
     * The network on which to allocate the vip's address. A
     * tenant can only create vips on networks authorized by policy (e.g. networks
     * that belong to them or networks that are shared). Changing this creates a
     * new vip.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The owner of the vip. Required if admin wants to
     * create a vip member for another tenant. Changing this creates a new vip.
     */
    tenantId?: pulumi.Input<string>;
}
