// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V2 load balancer flavor resource within OpenStack.
 *
 * > **Note:** This usually requires admin privileges.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const fp1 = new openstack.loadbalancer.FlavorprofileV2("fp_1", {
 *     name: "test",
 *     providerName: "amphora",
 *     flavorData: JSON.stringify({
 *         loadbalancer_topology: "ACTIVE_STANDBY",
 *     }),
 * });
 * const flavor1 = new openstack.loadbalancer.FlavorV2("flavor_1", {
 *     name: "test",
 *     description: "This is a test flavor",
 *     flavorProfileId: fp1.id,
 * });
 * ```
 *
 * ## Import
 *
 * flavors can be imported using their `id`. Example:
 *
 * ```sh
 * $ pulumi import openstack:loadbalancer/flavorV2:FlavorV2 flavor_1 2a0f2240-c5e6-41de-896d-e80d97428d6b
 * ```
 */
export class FlavorV2 extends pulumi.CustomResource {
    /**
     * Get an existing FlavorV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlavorV2State, opts?: pulumi.CustomResourceOptions): FlavorV2 {
        return new FlavorV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:loadbalancer/flavorV2:FlavorV2';

    /**
     * Returns true if the given object is an instance of FlavorV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlavorV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlavorV2.__pulumiType;
    }

    /**
     * The description of the flavor. Changing this
     * updates the existing flavor.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether the flavor is enabled or not. Defaults to `true`.
     * Changing this updates the existing flavor.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The flavorProfileId that the flavor
     * will use. Changing this creates a new flavor.
     */
    declare public readonly flavorProfileId: pulumi.Output<string>;
    /**
     * Name of the flavor. Changing this updates the existing
     * flavor.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB flavor.
     */
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a FlavorV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlavorV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlavorV2Args | FlavorV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlavorV2State | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["flavorProfileId"] = state?.flavorProfileId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as FlavorV2Args | undefined;
            if (args?.flavorProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'flavorProfileId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["flavorProfileId"] = args?.flavorProfileId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlavorV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlavorV2 resources.
 */
export interface FlavorV2State {
    /**
     * The description of the flavor. Changing this
     * updates the existing flavor.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the flavor is enabled or not. Defaults to `true`.
     * Changing this updates the existing flavor.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The flavorProfileId that the flavor
     * will use. Changing this creates a new flavor.
     */
    flavorProfileId?: pulumi.Input<string>;
    /**
     * Name of the flavor. Changing this updates the existing
     * flavor.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB flavor.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlavorV2 resource.
 */
export interface FlavorV2Args {
    /**
     * The description of the flavor. Changing this
     * updates the existing flavor.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the flavor is enabled or not. Defaults to `true`.
     * Changing this updates the existing flavor.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The flavorProfileId that the flavor
     * will use. Changing this creates a new flavor.
     */
    flavorProfileId: pulumi.Input<string>;
    /**
     * Name of the flavor. Changing this updates the existing
     * flavor.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB flavor.
     */
    region?: pulumi.Input<string>;
}
