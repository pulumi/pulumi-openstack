// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the openstack package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'openstack';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }


    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            inputs["allowReauth"] = pulumi.output((args ? args.allowReauth : undefined) ?? <any>utilities.getEnvBoolean("OS_ALLOW_REAUTH")).apply(JSON.stringify);
            inputs["applicationCredentialId"] = args ? args.applicationCredentialId : undefined;
            inputs["applicationCredentialName"] = args ? args.applicationCredentialName : undefined;
            inputs["applicationCredentialSecret"] = args ? args.applicationCredentialSecret : undefined;
            inputs["authUrl"] = args ? args.authUrl : undefined;
            inputs["cacertFile"] = args ? args.cacertFile : undefined;
            inputs["cert"] = args ? args.cert : undefined;
            inputs["cloud"] = (args ? args.cloud : undefined) ?? utilities.getEnv("OS_CLOUD");
            inputs["defaultDomain"] = args ? args.defaultDomain : undefined;
            inputs["delayedAuth"] = pulumi.output((args ? args.delayedAuth : undefined) ?? <any>utilities.getEnvBoolean("OS_DELAYED_AUTH")).apply(JSON.stringify);
            inputs["disableNoCacheHeader"] = pulumi.output(args ? args.disableNoCacheHeader : undefined).apply(JSON.stringify);
            inputs["domainId"] = args ? args.domainId : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["endpointOverrides"] = pulumi.output(args ? args.endpointOverrides : undefined).apply(JSON.stringify);
            inputs["endpointType"] = (args ? args.endpointType : undefined) ?? utilities.getEnv("OS_ENDPOINT_TYPE");
            inputs["insecure"] = pulumi.output((args ? args.insecure : undefined) ?? <any>utilities.getEnvBoolean("OS_INSECURE")).apply(JSON.stringify);
            inputs["key"] = args ? args.key : undefined;
            inputs["maxRetries"] = pulumi.output(args ? args.maxRetries : undefined).apply(JSON.stringify);
            inputs["password"] = args ? args.password : undefined;
            inputs["projectDomainId"] = args ? args.projectDomainId : undefined;
            inputs["projectDomainName"] = args ? args.projectDomainName : undefined;
            inputs["region"] = (args ? args.region : undefined) ?? utilities.getEnv("OS_REGION_NAME");
            inputs["swauth"] = pulumi.output((args ? args.swauth : undefined) ?? <any>utilities.getEnvBoolean("OS_SWAUTH")).apply(JSON.stringify);
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["tenantName"] = args ? args.tenantName : undefined;
            inputs["token"] = args ? args.token : undefined;
            inputs["useOctavia"] = pulumi.output((args ? args.useOctavia : undefined) ?? <any>utilities.getEnvBoolean("OS_USE_OCTAVIA")).apply(JSON.stringify);
            inputs["userDomainId"] = args ? args.userDomainId : undefined;
            inputs["userDomainName"] = args ? args.userDomainName : undefined;
            inputs["userId"] = args ? args.userId : undefined;
            inputs["userName"] = args ? args.userName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Provider.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * If set to `false`, OpenStack authorization won't be perfomed automatically, if the initial auth token get expired.
     * Defaults to `true`
     */
    readonly allowReauth?: pulumi.Input<boolean>;
    /**
     * Application Credential ID to login with.
     */
    readonly applicationCredentialId?: pulumi.Input<string>;
    /**
     * Application Credential name to login with.
     */
    readonly applicationCredentialName?: pulumi.Input<string>;
    /**
     * Application Credential secret to login with.
     */
    readonly applicationCredentialSecret?: pulumi.Input<string>;
    /**
     * The Identity authentication URL.
     */
    readonly authUrl?: pulumi.Input<string>;
    /**
     * A Custom CA certificate.
     */
    readonly cacertFile?: pulumi.Input<string>;
    /**
     * A client certificate to authenticate with.
     */
    readonly cert?: pulumi.Input<string>;
    /**
     * An entry in a `clouds.yaml` file to use.
     */
    readonly cloud?: pulumi.Input<string>;
    /**
     * The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
     */
    readonly defaultDomain?: pulumi.Input<string>;
    /**
     * If set to `false`, OpenStack authorization will be perfomed, every time the service provider client is called. Defaults
     * to `true`.
     */
    readonly delayedAuth?: pulumi.Input<boolean>;
    /**
     * If set to `true`, the HTTP `Cache-Control: no-cache` header will not be added by default to all API requests.
     */
    readonly disableNoCacheHeader?: pulumi.Input<boolean>;
    /**
     * The ID of the Domain to scope to (Identity v3).
     */
    readonly domainId?: pulumi.Input<string>;
    /**
     * The name of the Domain to scope to (Identity v3).
     */
    readonly domainName?: pulumi.Input<string>;
    /**
     * A map of services with an endpoint to override what was from the Keystone catalog
     */
    readonly endpointOverrides?: pulumi.Input<{[key: string]: any}>;
    readonly endpointType?: pulumi.Input<string>;
    /**
     * Trust self-signed certificates.
     */
    readonly insecure?: pulumi.Input<boolean>;
    /**
     * A client private key to authenticate with.
     */
    readonly key?: pulumi.Input<string>;
    /**
     * How many times HTTP connection should be retried until giving up.
     */
    readonly maxRetries?: pulumi.Input<number>;
    /**
     * Password to login with.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * The ID of the domain where the proejct resides (Identity v3).
     */
    readonly projectDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the project resides (Identity v3).
     */
    readonly projectDomainName?: pulumi.Input<string>;
    /**
     * The OpenStack region to connect to.
     */
    readonly region?: pulumi.Input<string>;
    /**
     * Use Swift's authentication system instead of Keystone. Only used for interaction with Swift.
     */
    readonly swauth?: pulumi.Input<boolean>;
    /**
     * The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    readonly tenantId?: pulumi.Input<string>;
    /**
     * The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    readonly tenantName?: pulumi.Input<string>;
    /**
     * Authentication token to use as an alternative to username/password.
     */
    readonly token?: pulumi.Input<string>;
    /**
     * If set to `true`, API requests will go the Load Balancer service (Octavia) instead of the Networking service (Neutron).
     */
    readonly useOctavia?: pulumi.Input<boolean>;
    /**
     * The ID of the domain where the user resides (Identity v3).
     */
    readonly userDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the user resides (Identity v3).
     */
    readonly userDomainName?: pulumi.Input<string>;
    /**
     * Username to login with.
     */
    readonly userId?: pulumi.Input<string>;
    /**
     * Username to login with.
     */
    readonly userName?: pulumi.Input<string>;
}
