// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the openstack package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'openstack';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Application Credential ID to login with.
     */
    declare public readonly applicationCredentialId: pulumi.Output<string | undefined>;
    /**
     * Application Credential name to login with.
     */
    declare public readonly applicationCredentialName: pulumi.Output<string | undefined>;
    /**
     * Application Credential secret to login with.
     */
    declare public readonly applicationCredentialSecret: pulumi.Output<string | undefined>;
    /**
     * The Identity authentication URL.
     */
    declare public readonly authUrl: pulumi.Output<string | undefined>;
    /**
     * A Custom CA certificate.
     */
    declare public readonly cacertFile: pulumi.Output<string | undefined>;
    /**
     * A client certificate to authenticate with.
     */
    declare public readonly cert: pulumi.Output<string | undefined>;
    /**
     * An entry in a `clouds.yaml` file to use.
     */
    declare public readonly cloud: pulumi.Output<string | undefined>;
    /**
     * The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
     */
    declare public readonly defaultDomain: pulumi.Output<string | undefined>;
    /**
     * The ID of the Domain to scope to (Identity v3).
     */
    declare public readonly domainId: pulumi.Output<string | undefined>;
    /**
     * The name of the Domain to scope to (Identity v3).
     */
    declare public readonly domainName: pulumi.Output<string | undefined>;
    declare public readonly endpointType: pulumi.Output<string | undefined>;
    /**
     * A client private key to authenticate with.
     */
    declare public readonly key: pulumi.Output<string | undefined>;
    /**
     * Password to login with.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The ID of the domain where the proejct resides (Identity v3).
     */
    declare public readonly projectDomainId: pulumi.Output<string | undefined>;
    /**
     * The name of the domain where the project resides (Identity v3).
     */
    declare public readonly projectDomainName: pulumi.Output<string | undefined>;
    /**
     * The OpenStack region to connect to.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The ID of the Tenant (Identity v2) or Project (Identity v3)
     * to login with.
     */
    declare public readonly tenantId: pulumi.Output<string | undefined>;
    /**
     * The name of the Tenant (Identity v2) or Project (Identity v3)
     * to login with.
     */
    declare public readonly tenantName: pulumi.Output<string | undefined>;
    /**
     * Authentication token to use as an alternative to username/password.
     */
    declare public readonly token: pulumi.Output<string | undefined>;
    /**
     * The ID of the domain where the user resides (Identity v3).
     */
    declare public readonly userDomainId: pulumi.Output<string | undefined>;
    /**
     * The name of the domain where the user resides (Identity v3).
     */
    declare public readonly userDomainName: pulumi.Output<string | undefined>;
    /**
     * User ID to login with.
     */
    declare public readonly userId: pulumi.Output<string | undefined>;
    /**
     * Username to login with.
     */
    declare public readonly userName: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["allowReauth"] = pulumi.output((args?.allowReauth) ?? utilities.getEnvBoolean("OS_ALLOW_REAUTH")).apply(JSON.stringify);
            resourceInputs["applicationCredentialId"] = args?.applicationCredentialId;
            resourceInputs["applicationCredentialName"] = args?.applicationCredentialName;
            resourceInputs["applicationCredentialSecret"] = args?.applicationCredentialSecret;
            resourceInputs["authUrl"] = args?.authUrl;
            resourceInputs["cacertFile"] = args?.cacertFile;
            resourceInputs["cert"] = args?.cert;
            resourceInputs["cloud"] = (args?.cloud) ?? utilities.getEnv("OS_CLOUD");
            resourceInputs["defaultDomain"] = args?.defaultDomain;
            resourceInputs["delayedAuth"] = pulumi.output((args?.delayedAuth) ?? utilities.getEnvBoolean("OS_DELAYED_AUTH")).apply(JSON.stringify);
            resourceInputs["disableNoCacheHeader"] = pulumi.output(args?.disableNoCacheHeader).apply(JSON.stringify);
            resourceInputs["domainId"] = args?.domainId;
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["enableLogging"] = pulumi.output(args?.enableLogging).apply(JSON.stringify);
            resourceInputs["endpointOverrides"] = pulumi.output(args?.endpointOverrides).apply(JSON.stringify);
            resourceInputs["endpointType"] = (args?.endpointType) ?? utilities.getEnv("OS_ENDPOINT_TYPE");
            resourceInputs["insecure"] = pulumi.output((args?.insecure) ?? utilities.getEnvBoolean("OS_INSECURE")).apply(JSON.stringify);
            resourceInputs["key"] = args?.key;
            resourceInputs["maxRetries"] = pulumi.output(args?.maxRetries).apply(JSON.stringify);
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectDomainId"] = args?.projectDomainId;
            resourceInputs["projectDomainName"] = args?.projectDomainName;
            resourceInputs["region"] = (args?.region) ?? utilities.getEnv("OS_REGION_NAME");
            resourceInputs["swauth"] = pulumi.output((args?.swauth) ?? utilities.getEnvBoolean("OS_SWAUTH")).apply(JSON.stringify);
            resourceInputs["systemScope"] = pulumi.output(args?.systemScope).apply(JSON.stringify);
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["tenantName"] = args?.tenantName;
            resourceInputs["token"] = args?.token;
            resourceInputs["userDomainId"] = args?.userDomainId;
            resourceInputs["userDomainName"] = args?.userDomainName;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["userName"] = args?.userName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:openstack/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * If set to `false`, OpenStack authorization won't be perfomed
     * automatically, if the initial auth token get expired. Defaults to `true`
     */
    allowReauth?: pulumi.Input<boolean>;
    /**
     * Application Credential ID to login with.
     */
    applicationCredentialId?: pulumi.Input<string>;
    /**
     * Application Credential name to login with.
     */
    applicationCredentialName?: pulumi.Input<string>;
    /**
     * Application Credential secret to login with.
     */
    applicationCredentialSecret?: pulumi.Input<string>;
    /**
     * The Identity authentication URL.
     */
    authUrl?: pulumi.Input<string>;
    /**
     * A Custom CA certificate.
     */
    cacertFile?: pulumi.Input<string>;
    /**
     * A client certificate to authenticate with.
     */
    cert?: pulumi.Input<string>;
    /**
     * An entry in a `clouds.yaml` file to use.
     */
    cloud?: pulumi.Input<string>;
    /**
     * The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
     */
    defaultDomain?: pulumi.Input<string>;
    /**
     * If set to `false`, OpenStack authorization will be perfomed,
     * every time the service provider client is called. Defaults to `true`.
     */
    delayedAuth?: pulumi.Input<boolean>;
    /**
     * If set to `true`, the HTTP `Cache-Control: no-cache` header will not be added by default to all API requests.
     */
    disableNoCacheHeader?: pulumi.Input<boolean>;
    /**
     * The ID of the Domain to scope to (Identity v3).
     */
    domainId?: pulumi.Input<string>;
    /**
     * The name of the Domain to scope to (Identity v3).
     */
    domainName?: pulumi.Input<string>;
    /**
     * Outputs very verbose logs with all calls made to and responses from OpenStack
     */
    enableLogging?: pulumi.Input<boolean>;
    /**
     * A map of services with an endpoint to override what was
     * from the Keystone catalog
     */
    endpointOverrides?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpointType?: pulumi.Input<string>;
    /**
     * Trust self-signed certificates.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A client private key to authenticate with.
     */
    key?: pulumi.Input<string>;
    /**
     * How many times HTTP connection should be retried until giving up.
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Password to login with.
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the domain where the proejct resides (Identity v3).
     */
    projectDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the project resides (Identity v3).
     */
    projectDomainName?: pulumi.Input<string>;
    /**
     * The OpenStack region to connect to.
     */
    region?: pulumi.Input<string>;
    /**
     * Use Swift's authentication system instead of Keystone. Only used for
     * interaction with Swift.
     */
    swauth?: pulumi.Input<boolean>;
    /**
     * If set to `true`, system scoped authorization will be enabled. Defaults to `false` (Identity v3).
     */
    systemScope?: pulumi.Input<boolean>;
    /**
     * The ID of the Tenant (Identity v2) or Project (Identity v3)
     * to login with.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The name of the Tenant (Identity v2) or Project (Identity v3)
     * to login with.
     */
    tenantName?: pulumi.Input<string>;
    /**
     * Authentication token to use as an alternative to username/password.
     */
    token?: pulumi.Input<string>;
    /**
     * The ID of the domain where the user resides (Identity v3).
     */
    userDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the user resides (Identity v3).
     */
    userDomainName?: pulumi.Input<string>;
    /**
     * User ID to login with.
     */
    userId?: pulumi.Input<string>;
    /**
     * Username to login with.
     */
    userName?: pulumi.Input<string>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
