// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V2 Image resource within OpenStack Glance.
 *
 * > **Note:** All arguments including the source image URL password will be
 * stored in the raw state as plain-text. Read more about sensitive data in
 * state.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const rancheros = new openstack.images.Image("rancheros", {
 *     name: "RancherOS",
 *     imageSourceUrl: "https://releases.rancher.com/os/latest/rancheros-openstack.img",
 *     containerFormat: "bare",
 *     diskFormat: "qcow2",
 *     properties: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Notes
 *
 * ### Properties
 *
 * This resource supports the ability to add properties to a resource during
 * creation as well as add, update, and delete properties during an update of this
 * resource.
 *
 * Newer versions of OpenStack are adding some read-only properties to each image.
 * These properties start with the prefix `os_`. If these properties are detected,
 * this resource will automatically reconcile these with the user-provided
 * properties.
 *
 * In addition, the `directUrl` and `stores` properties are also automatically reconciled if the
 * Image Service set it.
 *
 * ## Import
 *
 * Images can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:images/image:Image rancheros 89c60255-9bd6-460c-822a-e2b959ede9d2
 * ```
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:images/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * The checksum of the data associated with the image.
     */
    declare public /*out*/ readonly checksum: pulumi.Output<string>;
    /**
     * The container format. Must be one of "bare",
     * "ovf", "aki", "ari", "ami", "ova", "docker", "compressed".
     */
    declare public readonly containerFormat: pulumi.Output<string>;
    /**
     * The date the image was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * If true, this provider will decompress downloaded
     * image before uploading it to OpenStack. Decompression algorithm is chosen by
     * checking "Content-Type" or `Content-Disposition` header to detect the
     * filename extension. Supported algorithms are: gzip, bzip2, xz and zst.
     * Defaults to false. Changing this creates a new Image.
     */
    declare public readonly decompress: pulumi.Output<boolean | undefined>;
    /**
     * The disk format. Must be one of "raw", "vhd",
     * "vhdx", "vmdk", "vdi", "iso", "ploop", "qcow2", "aki", "ari", "ami"
     */
    declare public readonly diskFormat: pulumi.Output<string>;
    /**
     * the trailing path after the glance
     * endpoint that represent the location of the image
     * or the path to retrieve it.
     */
    declare public /*out*/ readonly file: pulumi.Output<string>;
    /**
     * If true, image will be hidden from public list.
     * Defaults to false.
     */
    declare public readonly hidden: pulumi.Output<boolean | undefined>;
    declare public readonly imageCachePath: pulumi.Output<string | undefined>;
    /**
     * Unique ID (valid UUID) of image to create. Changing
     * this creates a new image.
     */
    declare public readonly imageId: pulumi.Output<string>;
    /**
     * The password of basic auth to download
     * `imageSourceUrl`.
     */
    declare public readonly imageSourcePassword: pulumi.Output<string | undefined>;
    /**
     * This is the url of the raw image. If
     * `webDownload` is not used, then the image will be downloaded in the
     * `imageCachePath` before being uploaded to Glance. Conflicts with
     * `localFilePath`.
     */
    declare public readonly imageSourceUrl: pulumi.Output<string | undefined>;
    /**
     * The username of basic auth to download
     * `imageSourceUrl`.
     */
    declare public readonly imageSourceUsername: pulumi.Output<string | undefined>;
    /**
     * This is the filepath of the raw image file
     * that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
     * `webDownload`.
     */
    declare public readonly localFilePath: pulumi.Output<string | undefined>;
    /**
     * The metadata associated with the image.
     * Image metadata allow for meaningfully define the image properties
     * and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
     */
    declare public /*out*/ readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * Amount of disk space (in GB) required to boot
     * image. Defaults to 0.
     */
    declare public readonly minDiskGb: pulumi.Output<number | undefined>;
    /**
     * Amount of ram (in MB) required to boot image.
     * Defauts to 0.
     */
    declare public readonly minRamMb: pulumi.Output<number | undefined>;
    /**
     * The name of the image.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The id of the openstack user who owns the image.
     */
    declare public /*out*/ readonly owner: pulumi.Output<string>;
    /**
     * A map of key/value pairs to set freeform
     * information about an image. See the "Notes" section for further information
     * about properties.
     */
    declare public readonly properties: pulumi.Output<{[key: string]: string}>;
    /**
     * If true, image will not be deletable. Defaults to
     * false.
     */
    declare public readonly protected: pulumi.Output<boolean | undefined>;
    /**
     * The region in which to obtain the V2 Glance client. A
     * Glance client is needed to create an Image that can be used with a compute
     * instance. If omitted, the `region` argument of the provider is used. Changing
     * this creates a new Image.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The path to the JSON-schema that represent
     * the image or image
     */
    declare public /*out*/ readonly schema: pulumi.Output<string>;
    /**
     * The size in bytes of the data associated with the image.
     */
    declare public /*out*/ readonly sizeBytes: pulumi.Output<number>;
    /**
     * The status of the image. It can be "queued", "active"
     * or "saving".
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The tags of the image. It must be a list of strings. At
     * this time, it is not possible to delete all tags of an image.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The date the image was last updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * If false, the checksum will not be verified
     * once the image is finished uploading. Conflicts with `webDownload`. Defaults
     * to true when not using `webDownload`.
     */
    declare public readonly verifyChecksum: pulumi.Output<boolean | undefined>;
    /**
     * The visibility of the image. Must be one of
     * "public", "private", "community", or "shared". The ability to set the
     * visibility depends upon the configuration of the OpenStack cloud.
     */
    declare public readonly visibility: pulumi.Output<string | undefined>;
    /**
     * If true, the "web-download" import method will be
     * used to let Openstack download the image directly from the remote source.
     * Conflicts with `localFilePath`. Defaults to false.
     */
    declare public readonly webDownload: pulumi.Output<boolean | undefined>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["checksum"] = state?.checksum;
            resourceInputs["containerFormat"] = state?.containerFormat;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["decompress"] = state?.decompress;
            resourceInputs["diskFormat"] = state?.diskFormat;
            resourceInputs["file"] = state?.file;
            resourceInputs["hidden"] = state?.hidden;
            resourceInputs["imageCachePath"] = state?.imageCachePath;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["imageSourcePassword"] = state?.imageSourcePassword;
            resourceInputs["imageSourceUrl"] = state?.imageSourceUrl;
            resourceInputs["imageSourceUsername"] = state?.imageSourceUsername;
            resourceInputs["localFilePath"] = state?.localFilePath;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["minDiskGb"] = state?.minDiskGb;
            resourceInputs["minRamMb"] = state?.minRamMb;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["protected"] = state?.protected;
            resourceInputs["region"] = state?.region;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["sizeBytes"] = state?.sizeBytes;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["verifyChecksum"] = state?.verifyChecksum;
            resourceInputs["visibility"] = state?.visibility;
            resourceInputs["webDownload"] = state?.webDownload;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if (args?.containerFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerFormat'");
            }
            if (args?.diskFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'diskFormat'");
            }
            resourceInputs["containerFormat"] = args?.containerFormat;
            resourceInputs["decompress"] = args?.decompress;
            resourceInputs["diskFormat"] = args?.diskFormat;
            resourceInputs["hidden"] = args?.hidden;
            resourceInputs["imageCachePath"] = args?.imageCachePath;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["imageSourcePassword"] = args?.imageSourcePassword ? pulumi.secret(args.imageSourcePassword) : undefined;
            resourceInputs["imageSourceUrl"] = args?.imageSourceUrl;
            resourceInputs["imageSourceUsername"] = args?.imageSourceUsername;
            resourceInputs["localFilePath"] = args?.localFilePath;
            resourceInputs["minDiskGb"] = args?.minDiskGb;
            resourceInputs["minRamMb"] = args?.minRamMb;
            resourceInputs["name"] = args?.name;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["protected"] = args?.protected;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["verifyChecksum"] = args?.verifyChecksum;
            resourceInputs["visibility"] = args?.visibility;
            resourceInputs["webDownload"] = args?.webDownload;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["file"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["imageSourcePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * The checksum of the data associated with the image.
     */
    checksum?: pulumi.Input<string>;
    /**
     * The container format. Must be one of "bare",
     * "ovf", "aki", "ari", "ami", "ova", "docker", "compressed".
     */
    containerFormat?: pulumi.Input<string>;
    /**
     * The date the image was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * If true, this provider will decompress downloaded
     * image before uploading it to OpenStack. Decompression algorithm is chosen by
     * checking "Content-Type" or `Content-Disposition` header to detect the
     * filename extension. Supported algorithms are: gzip, bzip2, xz and zst.
     * Defaults to false. Changing this creates a new Image.
     */
    decompress?: pulumi.Input<boolean>;
    /**
     * The disk format. Must be one of "raw", "vhd",
     * "vhdx", "vmdk", "vdi", "iso", "ploop", "qcow2", "aki", "ari", "ami"
     */
    diskFormat?: pulumi.Input<string>;
    /**
     * the trailing path after the glance
     * endpoint that represent the location of the image
     * or the path to retrieve it.
     */
    file?: pulumi.Input<string>;
    /**
     * If true, image will be hidden from public list.
     * Defaults to false.
     */
    hidden?: pulumi.Input<boolean>;
    imageCachePath?: pulumi.Input<string>;
    /**
     * Unique ID (valid UUID) of image to create. Changing
     * this creates a new image.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The password of basic auth to download
     * `imageSourceUrl`.
     */
    imageSourcePassword?: pulumi.Input<string>;
    /**
     * This is the url of the raw image. If
     * `webDownload` is not used, then the image will be downloaded in the
     * `imageCachePath` before being uploaded to Glance. Conflicts with
     * `localFilePath`.
     */
    imageSourceUrl?: pulumi.Input<string>;
    /**
     * The username of basic auth to download
     * `imageSourceUrl`.
     */
    imageSourceUsername?: pulumi.Input<string>;
    /**
     * This is the filepath of the raw image file
     * that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
     * `webDownload`.
     */
    localFilePath?: pulumi.Input<string>;
    /**
     * The metadata associated with the image.
     * Image metadata allow for meaningfully define the image properties
     * and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Amount of disk space (in GB) required to boot
     * image. Defaults to 0.
     */
    minDiskGb?: pulumi.Input<number>;
    /**
     * Amount of ram (in MB) required to boot image.
     * Defauts to 0.
     */
    minRamMb?: pulumi.Input<number>;
    /**
     * The name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the openstack user who owns the image.
     */
    owner?: pulumi.Input<string>;
    /**
     * A map of key/value pairs to set freeform
     * information about an image. See the "Notes" section for further information
     * about properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, image will not be deletable. Defaults to
     * false.
     */
    protected?: pulumi.Input<boolean>;
    /**
     * The region in which to obtain the V2 Glance client. A
     * Glance client is needed to create an Image that can be used with a compute
     * instance. If omitted, the `region` argument of the provider is used. Changing
     * this creates a new Image.
     */
    region?: pulumi.Input<string>;
    /**
     * The path to the JSON-schema that represent
     * the image or image
     */
    schema?: pulumi.Input<string>;
    /**
     * The size in bytes of the data associated with the image.
     */
    sizeBytes?: pulumi.Input<number>;
    /**
     * The status of the image. It can be "queued", "active"
     * or "saving".
     */
    status?: pulumi.Input<string>;
    /**
     * The tags of the image. It must be a list of strings. At
     * this time, it is not possible to delete all tags of an image.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date the image was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * If false, the checksum will not be verified
     * once the image is finished uploading. Conflicts with `webDownload`. Defaults
     * to true when not using `webDownload`.
     */
    verifyChecksum?: pulumi.Input<boolean>;
    /**
     * The visibility of the image. Must be one of
     * "public", "private", "community", or "shared". The ability to set the
     * visibility depends upon the configuration of the OpenStack cloud.
     */
    visibility?: pulumi.Input<string>;
    /**
     * If true, the "web-download" import method will be
     * used to let Openstack download the image directly from the remote source.
     * Conflicts with `localFilePath`. Defaults to false.
     */
    webDownload?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * The container format. Must be one of "bare",
     * "ovf", "aki", "ari", "ami", "ova", "docker", "compressed".
     */
    containerFormat: pulumi.Input<string>;
    /**
     * If true, this provider will decompress downloaded
     * image before uploading it to OpenStack. Decompression algorithm is chosen by
     * checking "Content-Type" or `Content-Disposition` header to detect the
     * filename extension. Supported algorithms are: gzip, bzip2, xz and zst.
     * Defaults to false. Changing this creates a new Image.
     */
    decompress?: pulumi.Input<boolean>;
    /**
     * The disk format. Must be one of "raw", "vhd",
     * "vhdx", "vmdk", "vdi", "iso", "ploop", "qcow2", "aki", "ari", "ami"
     */
    diskFormat: pulumi.Input<string>;
    /**
     * If true, image will be hidden from public list.
     * Defaults to false.
     */
    hidden?: pulumi.Input<boolean>;
    imageCachePath?: pulumi.Input<string>;
    /**
     * Unique ID (valid UUID) of image to create. Changing
     * this creates a new image.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The password of basic auth to download
     * `imageSourceUrl`.
     */
    imageSourcePassword?: pulumi.Input<string>;
    /**
     * This is the url of the raw image. If
     * `webDownload` is not used, then the image will be downloaded in the
     * `imageCachePath` before being uploaded to Glance. Conflicts with
     * `localFilePath`.
     */
    imageSourceUrl?: pulumi.Input<string>;
    /**
     * The username of basic auth to download
     * `imageSourceUrl`.
     */
    imageSourceUsername?: pulumi.Input<string>;
    /**
     * This is the filepath of the raw image file
     * that will be uploaded to Glance. Conflicts with `imageSourceUrl` and
     * `webDownload`.
     */
    localFilePath?: pulumi.Input<string>;
    /**
     * Amount of disk space (in GB) required to boot
     * image. Defaults to 0.
     */
    minDiskGb?: pulumi.Input<number>;
    /**
     * Amount of ram (in MB) required to boot image.
     * Defauts to 0.
     */
    minRamMb?: pulumi.Input<number>;
    /**
     * The name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of key/value pairs to set freeform
     * information about an image. See the "Notes" section for further information
     * about properties.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, image will not be deletable. Defaults to
     * false.
     */
    protected?: pulumi.Input<boolean>;
    /**
     * The region in which to obtain the V2 Glance client. A
     * Glance client is needed to create an Image that can be used with a compute
     * instance. If omitted, the `region` argument of the provider is used. Changing
     * this creates a new Image.
     */
    region?: pulumi.Input<string>;
    /**
     * The tags of the image. It must be a list of strings. At
     * this time, it is not possible to delete all tags of an image.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If false, the checksum will not be verified
     * once the image is finished uploading. Conflicts with `webDownload`. Defaults
     * to true when not using `webDownload`.
     */
    verifyChecksum?: pulumi.Input<boolean>;
    /**
     * The visibility of the image. Must be one of
     * "public", "private", "community", or "shared". The ability to set the
     * visibility depends upon the configuration of the OpenStack cloud.
     */
    visibility?: pulumi.Input<string>;
    /**
     * If true, the "web-download" import method will be
     * used to let Openstack download the image directly from the remote source.
     * Conflicts with `localFilePath`. Defaults to false.
     */
    webDownload?: pulumi.Input<boolean>;
}
