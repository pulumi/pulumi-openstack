// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetImageIdsArgs, GetImageIdsResult, GetImageIdsOutputArgs } from "./getImageIds";
export const getImageIds: typeof import("./getImageIds").getImageIds = null as any;
export const getImageIdsOutput: typeof import("./getImageIds").getImageIdsOutput = null as any;
utilities.lazyLoad(exports, ["getImageIds","getImageIdsOutput"], () => require("./getImageIds"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { ImageAccessArgs, ImageAccessState } from "./imageAccess";
export type ImageAccess = import("./imageAccess").ImageAccess;
export const ImageAccess: typeof import("./imageAccess").ImageAccess = null as any;
utilities.lazyLoad(exports, ["ImageAccess"], () => require("./imageAccess"));

export { ImageAccessAcceptArgs, ImageAccessAcceptState } from "./imageAccessAccept";
export type ImageAccessAccept = import("./imageAccessAccept").ImageAccessAccept;
export const ImageAccessAccept: typeof import("./imageAccessAccept").ImageAccessAccept = null as any;
utilities.lazyLoad(exports, ["ImageAccessAccept"], () => require("./imageAccessAccept"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:images/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "openstack:images/imageAccess:ImageAccess":
                return new ImageAccess(name, <any>undefined, { urn })
            case "openstack:images/imageAccessAccept:ImageAccessAccept":
                return new ImageAccessAccept(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "images/image", _module)
pulumi.runtime.registerResourceModule("openstack", "images/imageAccess", _module)
pulumi.runtime.registerResourceModule("openstack", "images/imageAccessAccept", _module)
