// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a DNS record set in the OpenStack DNS Service.
 *
 * ## Example Usage
 *
 * ### Automatically detect the correct network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const exampleZone = new openstack.dns.Zone("example_zone", {
 *     name: "example.com.",
 *     email: "email2@example.com",
 *     description: "a zone",
 *     ttl: 6000,
 *     type: "PRIMARY",
 * });
 * const rsExampleCom = new openstack.dns.RecordSet("rs_example_com", {
 *     zoneId: exampleZone.id,
 *     name: "rs.example.com.",
 *     description: "An example record set",
 *     ttl: 3000,
 *     type: "A",
 *     records: ["10.0.0.1"],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the zone ID and recordset ID with an optional project ID as a prefix:
 *
 * ```sh
 * $ pulumi import openstack:dns/recordSet:RecordSet recordset_1 project_id/zone_id/recordset_id
 * ```
 *
 * ```sh
 * $ pulumi import openstack:dns/recordSet:RecordSet recordset_1 zone_id/recordset_id
 * ```
 */
export class RecordSet extends pulumi.CustomResource {
    /**
     * Get an existing RecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordSetState, opts?: pulumi.CustomResourceOptions): RecordSet {
        return new RecordSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:dns/recordSet:RecordSet';

    /**
     * Returns true if the given object is an instance of RecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecordSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecordSet.__pulumiType;
    }

    /**
     * A description of the  record set.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Disable wait for recordset to reach ACTIVE
     * status. This argumen is disabled by default. If it is set to true, the recordset
     * will be considered as created/updated/deleted if OpenStack request returned success.
     */
    declare public readonly disableStatusCheck: pulumi.Output<boolean | undefined>;
    /**
     * The name of the record set. Note the `.` at the end of the name.
     * Changing this creates a new DNS  record set.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the project DNS zone is created
     * for, sets `X-Auth-Sudo-Tenant-ID` header (requires an assigned
     * user role in target project)
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * An array of DNS records.
     */
    declare public readonly records: pulumi.Output<string[]>;
    /**
     * The region in which to obtain the V2 DNS client.
     * If omitted, the `region` argument of the provider is used.
     * Changing this creates a new DNS  record set.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The time to live (TTL) of the record set.
     */
    declare public readonly ttl: pulumi.Output<number>;
    /**
     * The type of record set. Examples: "A", "MX".
     * Changing this creates a new DNS  record set.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Map of additional options. Changing this creates a
     * new record set.
     */
    declare public readonly valueSpecs: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the zone in which to create the record set.
     * Changing this creates a new DNS  record set.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a RecordSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordSetArgs | RecordSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordSetState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableStatusCheck"] = state?.disableStatusCheck;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["records"] = state?.records;
            resourceInputs["region"] = state?.region;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
            resourceInputs["valueSpecs"] = state?.valueSpecs;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as RecordSetArgs | undefined;
            if (args?.records === undefined && !opts.urn) {
                throw new Error("Missing required property 'records'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["disableStatusCheck"] = args?.disableStatusCheck;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["records"] = args?.records;
            resourceInputs["region"] = args?.region;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
            resourceInputs["valueSpecs"] = args?.valueSpecs;
            resourceInputs["zoneId"] = args?.zoneId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecordSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RecordSet resources.
 */
export interface RecordSetState {
    /**
     * A description of the  record set.
     */
    description?: pulumi.Input<string>;
    /**
     * Disable wait for recordset to reach ACTIVE
     * status. This argumen is disabled by default. If it is set to true, the recordset
     * will be considered as created/updated/deleted if OpenStack request returned success.
     */
    disableStatusCheck?: pulumi.Input<boolean>;
    /**
     * The name of the record set. Note the `.` at the end of the name.
     * Changing this creates a new DNS  record set.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project DNS zone is created
     * for, sets `X-Auth-Sudo-Tenant-ID` header (requires an assigned
     * user role in target project)
     */
    projectId?: pulumi.Input<string>;
    /**
     * An array of DNS records.
     */
    records?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region in which to obtain the V2 DNS client.
     * If omitted, the `region` argument of the provider is used.
     * Changing this creates a new DNS  record set.
     */
    region?: pulumi.Input<string>;
    /**
     * The time to live (TTL) of the record set.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of record set. Examples: "A", "MX".
     * Changing this creates a new DNS  record set.
     */
    type?: pulumi.Input<string>;
    /**
     * Map of additional options. Changing this creates a
     * new record set.
     */
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the zone in which to create the record set.
     * Changing this creates a new DNS  record set.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecordSet resource.
 */
export interface RecordSetArgs {
    /**
     * A description of the  record set.
     */
    description?: pulumi.Input<string>;
    /**
     * Disable wait for recordset to reach ACTIVE
     * status. This argumen is disabled by default. If it is set to true, the recordset
     * will be considered as created/updated/deleted if OpenStack request returned success.
     */
    disableStatusCheck?: pulumi.Input<boolean>;
    /**
     * The name of the record set. Note the `.` at the end of the name.
     * Changing this creates a new DNS  record set.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project DNS zone is created
     * for, sets `X-Auth-Sudo-Tenant-ID` header (requires an assigned
     * user role in target project)
     */
    projectId?: pulumi.Input<string>;
    /**
     * An array of DNS records.
     */
    records: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region in which to obtain the V2 DNS client.
     * If omitted, the `region` argument of the provider is used.
     * Changing this creates a new DNS  record set.
     */
    region?: pulumi.Input<string>;
    /**
     * The time to live (TTL) of the record set.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of record set. Examples: "A", "MX".
     * Changing this creates a new DNS  record set.
     */
    type?: pulumi.Input<string>;
    /**
     * Map of additional options. Changing this creates a
     * new record set.
     */
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the zone in which to create the record set.
     * Changing this creates a new DNS  record set.
     */
    zoneId: pulumi.Input<string>;
}
