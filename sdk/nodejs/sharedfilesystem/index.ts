// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetAvailbilityZonesArgs, GetAvailbilityZonesResult, GetAvailbilityZonesOutputArgs } from "./getAvailbilityZones";
export const getAvailbilityZones: typeof import("./getAvailbilityZones").getAvailbilityZones = null as any;
export const getAvailbilityZonesOutput: typeof import("./getAvailbilityZones").getAvailbilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailbilityZones","getAvailbilityZonesOutput"], () => require("./getAvailbilityZones"));

export { GetShareArgs, GetShareResult, GetShareOutputArgs } from "./getShare";
export const getShare: typeof import("./getShare").getShare = null as any;
export const getShareOutput: typeof import("./getShare").getShareOutput = null as any;
utilities.lazyLoad(exports, ["getShare","getShareOutput"], () => require("./getShare"));

export { GetShareNetworkArgs, GetShareNetworkResult, GetShareNetworkOutputArgs } from "./getShareNetwork";
export const getShareNetwork: typeof import("./getShareNetwork").getShareNetwork = null as any;
export const getShareNetworkOutput: typeof import("./getShareNetwork").getShareNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getShareNetwork","getShareNetworkOutput"], () => require("./getShareNetwork"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { SecurityServiceArgs, SecurityServiceState } from "./securityService";
export type SecurityService = import("./securityService").SecurityService;
export const SecurityService: typeof import("./securityService").SecurityService = null as any;
utilities.lazyLoad(exports, ["SecurityService"], () => require("./securityService"));

export { ShareArgs, ShareState } from "./share";
export type Share = import("./share").Share;
export const Share: typeof import("./share").Share = null as any;
utilities.lazyLoad(exports, ["Share"], () => require("./share"));

export { ShareAccessArgs, ShareAccessState } from "./shareAccess";
export type ShareAccess = import("./shareAccess").ShareAccess;
export const ShareAccess: typeof import("./shareAccess").ShareAccess = null as any;
utilities.lazyLoad(exports, ["ShareAccess"], () => require("./shareAccess"));

export { ShareNetworkArgs, ShareNetworkState } from "./shareNetwork";
export type ShareNetwork = import("./shareNetwork").ShareNetwork;
export const ShareNetwork: typeof import("./shareNetwork").ShareNetwork = null as any;
utilities.lazyLoad(exports, ["ShareNetwork"], () => require("./shareNetwork"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:sharedfilesystem/securityService:SecurityService":
                return new SecurityService(name, <any>undefined, { urn })
            case "openstack:sharedfilesystem/share:Share":
                return new Share(name, <any>undefined, { urn })
            case "openstack:sharedfilesystem/shareAccess:ShareAccess":
                return new ShareAccess(name, <any>undefined, { urn })
            case "openstack:sharedfilesystem/shareNetwork:ShareNetwork":
                return new ShareNetwork(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "sharedfilesystem/securityService", _module)
pulumi.runtime.registerResourceModule("openstack", "sharedfilesystem/share", _module)
pulumi.runtime.registerResourceModule("openstack", "sharedfilesystem/shareAccess", _module)
pulumi.runtime.registerResourceModule("openstack", "sharedfilesystem/shareNetwork", _module)
