// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EndpointGroupArgs, EndpointGroupState } from "./endpointGroup";
export type EndpointGroup = import("./endpointGroup").EndpointGroup;
export const EndpointGroup: typeof import("./endpointGroup").EndpointGroup = null as any;
utilities.lazyLoad(exports, ["EndpointGroup"], () => require("./endpointGroup"));

export { IkePolicyArgs, IkePolicyState } from "./ikePolicy";
export type IkePolicy = import("./ikePolicy").IkePolicy;
export const IkePolicy: typeof import("./ikePolicy").IkePolicy = null as any;
utilities.lazyLoad(exports, ["IkePolicy"], () => require("./ikePolicy"));

export { IpSecPolicyArgs, IpSecPolicyState } from "./ipSecPolicy";
export type IpSecPolicy = import("./ipSecPolicy").IpSecPolicy;
export const IpSecPolicy: typeof import("./ipSecPolicy").IpSecPolicy = null as any;
utilities.lazyLoad(exports, ["IpSecPolicy"], () => require("./ipSecPolicy"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { SiteConnectionArgs, SiteConnectionState } from "./siteConnection";
export type SiteConnection = import("./siteConnection").SiteConnection;
export const SiteConnection: typeof import("./siteConnection").SiteConnection = null as any;
utilities.lazyLoad(exports, ["SiteConnection"], () => require("./siteConnection"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:vpnaas/endpointGroup:EndpointGroup":
                return new EndpointGroup(name, <any>undefined, { urn })
            case "openstack:vpnaas/ikePolicy:IkePolicy":
                return new IkePolicy(name, <any>undefined, { urn })
            case "openstack:vpnaas/ipSecPolicy:IpSecPolicy":
                return new IpSecPolicy(name, <any>undefined, { urn })
            case "openstack:vpnaas/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "openstack:vpnaas/siteConnection:SiteConnection":
                return new SiteConnection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "vpnaas/endpointGroup", _module)
pulumi.runtime.registerResourceModule("openstack", "vpnaas/ikePolicy", _module)
pulumi.runtime.registerResourceModule("openstack", "vpnaas/ipSecPolicy", _module)
pulumi.runtime.registerResourceModule("openstack", "vpnaas/service", _module)
pulumi.runtime.registerResourceModule("openstack", "vpnaas/siteConnection", _module)
