// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V2 Neutron VPN service resource within OpenStack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const service1 = new openstack.vpnaas.Service("service_1", {
 *     name: "my_service",
 *     routerId: "14a75700-fc03-4602-9294-26ee44f366b3",
 *     adminStateUp: true,
 * });
 * ```
 *
 * ## Import
 *
 * Services can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:vpnaas/service:Service service_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
 * ```
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:vpnaas/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * The administrative state of the resource. Can either be up(true) or down(false).
     * Changing this updates the administrative state of the existing service.
     */
    declare public readonly adminStateUp: pulumi.Output<boolean | undefined>;
    /**
     * The human-readable description for the service.
     * Changing this updates the description of the existing service.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The read-only external (public) IPv4 address that is used for the VPN service.
     */
    declare public /*out*/ readonly externalV4Ip: pulumi.Output<string>;
    /**
     * The read-only external (public) IPv6 address that is used for the VPN service.
     */
    declare public /*out*/ readonly externalV6Ip: pulumi.Output<string>;
    /**
     * The name of the service. Changing this updates the name of
     * the existing service.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a VPN service. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * service.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The ID of the router. Changing this creates a new service.
     */
    declare public readonly routerId: pulumi.Output<string>;
    /**
     * Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * SubnetID is the ID of the subnet. Default is null.
     */
    declare public readonly subnetId: pulumi.Output<string | undefined>;
    /**
     * The owner of the service. Required if admin wants to
     * create a service for another project. Changing this creates a new service.
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * Map of additional options.
     */
    declare public readonly valueSpecs: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["adminStateUp"] = state?.adminStateUp;
            resourceInputs["description"] = state?.description;
            resourceInputs["externalV4Ip"] = state?.externalV4Ip;
            resourceInputs["externalV6Ip"] = state?.externalV6Ip;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["routerId"] = state?.routerId;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["valueSpecs"] = state?.valueSpecs;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if (args?.routerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            resourceInputs["adminStateUp"] = args?.adminStateUp;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["routerId"] = args?.routerId;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["valueSpecs"] = args?.valueSpecs;
            resourceInputs["externalV4Ip"] = undefined /*out*/;
            resourceInputs["externalV6Ip"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * The administrative state of the resource. Can either be up(true) or down(false).
     * Changing this updates the administrative state of the existing service.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * The human-readable description for the service.
     * Changing this updates the description of the existing service.
     */
    description?: pulumi.Input<string>;
    /**
     * The read-only external (public) IPv4 address that is used for the VPN service.
     */
    externalV4Ip?: pulumi.Input<string>;
    /**
     * The read-only external (public) IPv6 address that is used for the VPN service.
     */
    externalV6Ip?: pulumi.Input<string>;
    /**
     * The name of the service. Changing this updates the name of
     * the existing service.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a VPN service. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * service.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the router. Changing this creates a new service.
     */
    routerId?: pulumi.Input<string>;
    /**
     * Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.
     */
    status?: pulumi.Input<string>;
    /**
     * SubnetID is the ID of the subnet. Default is null.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The owner of the service. Required if admin wants to
     * create a service for another project. Changing this creates a new service.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * The administrative state of the resource. Can either be up(true) or down(false).
     * Changing this updates the administrative state of the existing service.
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * The human-readable description for the service.
     * Changing this updates the description of the existing service.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the service. Changing this updates the name of
     * the existing service.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a VPN service. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * service.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the router. Changing this creates a new service.
     */
    routerId: pulumi.Input<string>;
    /**
     * SubnetID is the ID of the subnet. Default is null.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The owner of the service. Required if admin wants to
     * create a service for another project. Changing this creates a new service.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
