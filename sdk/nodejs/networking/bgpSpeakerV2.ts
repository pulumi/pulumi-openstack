// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a V2 Neutron BGP Speaker resource within OpenStack.
 *
 * This resource allows you to configure a BGP speaker that can be associated with
 * a BGP peer to exchange routing information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const network1 = new openstack.networking.Network("network1", {name: "network1"});
 * const peer1 = new openstack.networking.BgpPeerV2("peer_1", {
 *     name: "bgp_peer_1",
 *     peerIp: "192.0.2.10",
 *     remoteAs: 65001,
 *     authType: "md5",
 *     password: "supersecret",
 * });
 * const speaker1 = new openstack.networking.BgpSpeakerV2("speaker_1", {
 *     name: "bgp_speaker_1",
 *     ipVersion: 4,
 *     localAs: 65000,
 *     networks: [network1.id],
 *     peers: [peer1OpestackNetworkingBgpPeerV2.id],
 * });
 * ```
 *
 * ## Import
 *
 * BGP speakers can be imported using their ID:
 *
 * ```sh
 * $ pulumi import openstack:networking/bgpSpeakerV2:BgpSpeakerV2 speaker_1 8a2ad402-b805-46bf-a60b-008573ca2844
 * ```
 */
export class BgpSpeakerV2 extends pulumi.CustomResource {
    /**
     * Get an existing BgpSpeakerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BgpSpeakerV2State, opts?: pulumi.CustomResourceOptions): BgpSpeakerV2 {
        return new BgpSpeakerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:networking/bgpSpeakerV2:BgpSpeakerV2';

    /**
     * Returns true if the given object is an instance of BgpSpeakerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BgpSpeakerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BgpSpeakerV2.__pulumiType;
    }

    /**
     * A boolean value indicating
     * whether to advertise floating IP host routes. Defaults to `true`.
     */
    declare public readonly advertiseFloatingIpHostRoutes: pulumi.Output<boolean>;
    /**
     * A boolean value indicating whether to
     * advertise tenant networks. Defaults to `true`.
     */
    declare public readonly advertiseTenantNetworks: pulumi.Output<boolean>;
    /**
     * A list of dictionaries containing the `destination` and
     * `nextHop` for each route advertised by the BGP speaker. This attribute is
     * only populated after the BGP speaker has been created and has established BGP
     * sessions with its peers.
     */
    declare public /*out*/ readonly advertisedRoutes: pulumi.Output<outputs.networking.BgpSpeakerV2AdvertisedRoute[]>;
    /**
     * The IP version of the BGP speaker. Valid values are
     * `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
     */
    declare public readonly ipVersion: pulumi.Output<number | undefined>;
    /**
     * The local autonomous system number (ASN) for the BGP
     * speaker. This is a mandatory field and must be specified. Changing this
     * creates a new BGP speaker.
     */
    declare public readonly localAs: pulumi.Output<number>;
    /**
     * A name for the BGP speaker.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of network IDs to associate with the BGP speaker.
     */
    declare public readonly networks: pulumi.Output<string[] | undefined>;
    /**
     * A list of BGP peer IDs to associate with the BGP speaker.
     */
    declare public readonly peers: pulumi.Output<string[] | undefined>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * speaker.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP speaker.
     */
    declare public readonly tenantId: pulumi.Output<string>;

    /**
     * Create a BgpSpeakerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BgpSpeakerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BgpSpeakerV2Args | BgpSpeakerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BgpSpeakerV2State | undefined;
            resourceInputs["advertiseFloatingIpHostRoutes"] = state?.advertiseFloatingIpHostRoutes;
            resourceInputs["advertiseTenantNetworks"] = state?.advertiseTenantNetworks;
            resourceInputs["advertisedRoutes"] = state?.advertisedRoutes;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["localAs"] = state?.localAs;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["peers"] = state?.peers;
            resourceInputs["region"] = state?.region;
            resourceInputs["tenantId"] = state?.tenantId;
        } else {
            const args = argsOrState as BgpSpeakerV2Args | undefined;
            if (args?.localAs === undefined && !opts.urn) {
                throw new Error("Missing required property 'localAs'");
            }
            resourceInputs["advertiseFloatingIpHostRoutes"] = args?.advertiseFloatingIpHostRoutes;
            resourceInputs["advertiseTenantNetworks"] = args?.advertiseTenantNetworks;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["localAs"] = args?.localAs;
            resourceInputs["name"] = args?.name;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["peers"] = args?.peers;
            resourceInputs["region"] = args?.region;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["advertisedRoutes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BgpSpeakerV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BgpSpeakerV2 resources.
 */
export interface BgpSpeakerV2State {
    /**
     * A boolean value indicating
     * whether to advertise floating IP host routes. Defaults to `true`.
     */
    advertiseFloatingIpHostRoutes?: pulumi.Input<boolean>;
    /**
     * A boolean value indicating whether to
     * advertise tenant networks. Defaults to `true`.
     */
    advertiseTenantNetworks?: pulumi.Input<boolean>;
    /**
     * A list of dictionaries containing the `destination` and
     * `nextHop` for each route advertised by the BGP speaker. This attribute is
     * only populated after the BGP speaker has been created and has established BGP
     * sessions with its peers.
     */
    advertisedRoutes?: pulumi.Input<pulumi.Input<inputs.networking.BgpSpeakerV2AdvertisedRoute>[]>;
    /**
     * The IP version of the BGP speaker. Valid values are
     * `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The local autonomous system number (ASN) for the BGP
     * speaker. This is a mandatory field and must be specified. Changing this
     * creates a new BGP speaker.
     */
    localAs?: pulumi.Input<number>;
    /**
     * A name for the BGP speaker.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of network IDs to associate with the BGP speaker.
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of BGP peer IDs to associate with the BGP speaker.
     */
    peers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * speaker.
     */
    region?: pulumi.Input<string>;
    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP speaker.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BgpSpeakerV2 resource.
 */
export interface BgpSpeakerV2Args {
    /**
     * A boolean value indicating
     * whether to advertise floating IP host routes. Defaults to `true`.
     */
    advertiseFloatingIpHostRoutes?: pulumi.Input<boolean>;
    /**
     * A boolean value indicating whether to
     * advertise tenant networks. Defaults to `true`.
     */
    advertiseTenantNetworks?: pulumi.Input<boolean>;
    /**
     * The IP version of the BGP speaker. Valid values are
     * `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The local autonomous system number (ASN) for the BGP
     * speaker. This is a mandatory field and must be specified. Changing this
     * creates a new BGP speaker.
     */
    localAs: pulumi.Input<number>;
    /**
     * A name for the BGP speaker.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of network IDs to associate with the BGP speaker.
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of BGP peer IDs to associate with the BGP speaker.
     */
    peers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * speaker.
     */
    region?: pulumi.Input<string>;
    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP speaker.
     */
    tenantId?: pulumi.Input<string>;
}
