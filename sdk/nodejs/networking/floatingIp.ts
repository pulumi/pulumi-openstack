// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Floating IPs can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:networking/floatingIp:FloatingIp floatip_1 2c7f39f3-702b-48d1-940c-b50384177ee1
 * ```
 */
export class FloatingIp extends pulumi.CustomResource {
    /**
     * Get an existing FloatingIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloatingIpState, opts?: pulumi.CustomResourceOptions): FloatingIp {
        return new FloatingIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:networking/floatingIp:FloatingIp';

    /**
     * Returns true if the given object is an instance of FloatingIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FloatingIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FloatingIp.__pulumiType;
    }

    /**
     * The actual/specific floating IP to obtain. By default,
     * non-admin users are not able to specify a floating IP, so you must either be
     * an admin user or have had a custom policy or role applied to your OpenStack
     * user or project.
     */
    declare public readonly address: pulumi.Output<string>;
    /**
     * The collection of tags assigned on the floating IP, which have
     * been explicitly and implicitly added.
     */
    declare public /*out*/ readonly allTags: pulumi.Output<string[]>;
    /**
     * Human-readable description for the floating IP.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The floating IP DNS domain. Available, when Neutron
     * DNS extension is enabled. The data in this attribute will be published in an
     * external DNS service when Neutron is configured to integrate with such a
     * service. Changing this creates a new floating IP.
     */
    declare public readonly dnsDomain: pulumi.Output<string>;
    /**
     * The floating IP DNS name. Available, when Neutron DNS
     * extension is enabled. The data in this attribute will be published in an
     * external DNS service when Neutron is configured to integrate with such a
     * service. Changing this creates a new floating IP.
     */
    declare public readonly dnsName: pulumi.Output<string>;
    /**
     * Fixed IP of the port to associate with this floating IP. Required if
     * the port has multiple fixed IPs.
     */
    declare public readonly fixedIp: pulumi.Output<string>;
    /**
     * The name of the pool from which to obtain the floating
     * IP. Changing this creates a new floating IP.
     */
    declare public readonly pool: pulumi.Output<string>;
    /**
     * ID of an existing port with at least one IP address to
     * associate with this floating IP.
     */
    declare public readonly portId: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a floating IP that can be used with
     * another networking resource, such as a load balancer. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * floating IP (which may or may not have a different address).
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The subnet ID of the floating IP pool. Specify this if
     * the floating IP network has multiple subnets.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * A list of external subnet IDs to try over each to
     * allocate a floating IP address. If a subnet ID in a list has exhausted
     * floating IP pool, the next subnet ID will be tried. This argument is used only
     * during the resource creation. Conflicts with a `subnetId` argument.
     */
    declare public readonly subnetIds: pulumi.Output<string[] | undefined>;
    /**
     * A set of string tags for the floating IP.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The target tenant ID in which to allocate the floating
     * IP, if you specify this together with a port_id, make sure the target port
     * belongs to the same tenant. Changing this creates a new floating IP (which
     * may or may not have a different address)
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * Map of additional options.
     */
    declare public readonly valueSpecs: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a FloatingIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FloatingIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FloatingIpArgs | FloatingIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FloatingIpState | undefined;
            resourceInputs["address"] = state?.address;
            resourceInputs["allTags"] = state?.allTags;
            resourceInputs["description"] = state?.description;
            resourceInputs["dnsDomain"] = state?.dnsDomain;
            resourceInputs["dnsName"] = state?.dnsName;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["pool"] = state?.pool;
            resourceInputs["portId"] = state?.portId;
            resourceInputs["region"] = state?.region;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["valueSpecs"] = state?.valueSpecs;
        } else {
            const args = argsOrState as FloatingIpArgs | undefined;
            resourceInputs["address"] = args?.address;
            resourceInputs["description"] = args?.description;
            resourceInputs["dnsDomain"] = args?.dnsDomain;
            resourceInputs["dnsName"] = args?.dnsName;
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["pool"] = args?.pool;
            resourceInputs["portId"] = args?.portId;
            resourceInputs["region"] = args?.region;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["valueSpecs"] = args?.valueSpecs;
            resourceInputs["allTags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FloatingIp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FloatingIp resources.
 */
export interface FloatingIpState {
    /**
     * The actual/specific floating IP to obtain. By default,
     * non-admin users are not able to specify a floating IP, so you must either be
     * an admin user or have had a custom policy or role applied to your OpenStack
     * user or project.
     */
    address?: pulumi.Input<string>;
    /**
     * The collection of tags assigned on the floating IP, which have
     * been explicitly and implicitly added.
     */
    allTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-readable description for the floating IP.
     */
    description?: pulumi.Input<string>;
    /**
     * The floating IP DNS domain. Available, when Neutron
     * DNS extension is enabled. The data in this attribute will be published in an
     * external DNS service when Neutron is configured to integrate with such a
     * service. Changing this creates a new floating IP.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * The floating IP DNS name. Available, when Neutron DNS
     * extension is enabled. The data in this attribute will be published in an
     * external DNS service when Neutron is configured to integrate with such a
     * service. Changing this creates a new floating IP.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Fixed IP of the port to associate with this floating IP. Required if
     * the port has multiple fixed IPs.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * The name of the pool from which to obtain the floating
     * IP. Changing this creates a new floating IP.
     */
    pool?: pulumi.Input<string>;
    /**
     * ID of an existing port with at least one IP address to
     * associate with this floating IP.
     */
    portId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a floating IP that can be used with
     * another networking resource, such as a load balancer. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * floating IP (which may or may not have a different address).
     */
    region?: pulumi.Input<string>;
    /**
     * The subnet ID of the floating IP pool. Specify this if
     * the floating IP network has multiple subnets.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A list of external subnet IDs to try over each to
     * allocate a floating IP address. If a subnet ID in a list has exhausted
     * floating IP pool, the next subnet ID will be tried. This argument is used only
     * during the resource creation. Conflicts with a `subnetId` argument.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of string tags for the floating IP.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The target tenant ID in which to allocate the floating
     * IP, if you specify this together with a port_id, make sure the target port
     * belongs to the same tenant. Changing this creates a new floating IP (which
     * may or may not have a different address)
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a FloatingIp resource.
 */
export interface FloatingIpArgs {
    /**
     * The actual/specific floating IP to obtain. By default,
     * non-admin users are not able to specify a floating IP, so you must either be
     * an admin user or have had a custom policy or role applied to your OpenStack
     * user or project.
     */
    address?: pulumi.Input<string>;
    /**
     * Human-readable description for the floating IP.
     */
    description?: pulumi.Input<string>;
    /**
     * The floating IP DNS domain. Available, when Neutron
     * DNS extension is enabled. The data in this attribute will be published in an
     * external DNS service when Neutron is configured to integrate with such a
     * service. Changing this creates a new floating IP.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * The floating IP DNS name. Available, when Neutron DNS
     * extension is enabled. The data in this attribute will be published in an
     * external DNS service when Neutron is configured to integrate with such a
     * service. Changing this creates a new floating IP.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Fixed IP of the port to associate with this floating IP. Required if
     * the port has multiple fixed IPs.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * The name of the pool from which to obtain the floating
     * IP. Changing this creates a new floating IP.
     */
    pool?: pulumi.Input<string>;
    /**
     * ID of an existing port with at least one IP address to
     * associate with this floating IP.
     */
    portId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a floating IP that can be used with
     * another networking resource, such as a load balancer. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * floating IP (which may or may not have a different address).
     */
    region?: pulumi.Input<string>;
    /**
     * The subnet ID of the floating IP pool. Specify this if
     * the floating IP network has multiple subnets.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * A list of external subnet IDs to try over each to
     * allocate a floating IP address. If a subnet ID in a list has exhausted
     * floating IP pool, the next subnet ID will be tried. This argument is used only
     * during the resource creation. Conflicts with a `subnetId` argument.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of string tags for the floating IP.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The target tenant ID in which to allocate the floating
     * IP, if you specify this together with a port_id, make sure the target port
     * belongs to the same tenant. Changing this creates a new floating IP (which
     * may or may not have a different address)
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
