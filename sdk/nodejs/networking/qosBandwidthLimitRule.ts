// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V2 Neutron QoS bandwidth limit rule resource within OpenStack.
 *
 * ## Example Usage
 *
 * ### Create a QoS Policy with some bandwidth limit rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const qosPolicy1 = new openstack.networking.QosPolicy("qosPolicy1", {
 *     description: "bwLimit",
 * });
 * const bwLimitRule1 = new openstack.networking.QosBandwidthLimitRule("bwLimitRule1", {
 *     direction: "egress",
 *     maxBurstKbps: 300,
 *     maxKbps: 3000,
 *     qosPolicyId: qosPolicy1.id,
 * });
 * ```
 */
export class QosBandwidthLimitRule extends pulumi.CustomResource {
    /**
     * Get an existing QosBandwidthLimitRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QosBandwidthLimitRuleState, opts?: pulumi.CustomResourceOptions): QosBandwidthLimitRule {
        return new QosBandwidthLimitRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:networking/qosBandwidthLimitRule:QosBandwidthLimitRule';

    /**
     * Returns true if the given object is an instance of QosBandwidthLimitRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QosBandwidthLimitRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QosBandwidthLimitRule.__pulumiType;
    }

    /**
     * The direction of traffic. Defaults to "egress". Changing this updates the direction of the
     * existing QoS bandwidth limit rule.
     */
    public readonly direction!: pulumi.Output<string | undefined>;
    /**
     * The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
     * maximum burst size in kilobits of the existing QoS bandwidth limit rule.
     */
    public readonly maxBurstKbps!: pulumi.Output<number | undefined>;
    /**
     * The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
     * maximum kilobits per second of the existing QoS bandwidth limit rule.
     */
    public readonly maxKbps!: pulumi.Output<number>;
    /**
     * The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
     */
    public readonly qosPolicyId!: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a QosBandwidthLimitRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QosBandwidthLimitRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QosBandwidthLimitRuleArgs | QosBandwidthLimitRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as QosBandwidthLimitRuleState | undefined;
            inputs["direction"] = state ? state.direction : undefined;
            inputs["maxBurstKbps"] = state ? state.maxBurstKbps : undefined;
            inputs["maxKbps"] = state ? state.maxKbps : undefined;
            inputs["qosPolicyId"] = state ? state.qosPolicyId : undefined;
            inputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as QosBandwidthLimitRuleArgs | undefined;
            if (!args || args.maxKbps === undefined) {
                throw new Error("Missing required property 'maxKbps'");
            }
            if (!args || args.qosPolicyId === undefined) {
                throw new Error("Missing required property 'qosPolicyId'");
            }
            inputs["direction"] = args ? args.direction : undefined;
            inputs["maxBurstKbps"] = args ? args.maxBurstKbps : undefined;
            inputs["maxKbps"] = args ? args.maxKbps : undefined;
            inputs["qosPolicyId"] = args ? args.qosPolicyId : undefined;
            inputs["region"] = args ? args.region : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(QosBandwidthLimitRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QosBandwidthLimitRule resources.
 */
export interface QosBandwidthLimitRuleState {
    /**
     * The direction of traffic. Defaults to "egress". Changing this updates the direction of the
     * existing QoS bandwidth limit rule.
     */
    readonly direction?: pulumi.Input<string>;
    /**
     * The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
     * maximum burst size in kilobits of the existing QoS bandwidth limit rule.
     */
    readonly maxBurstKbps?: pulumi.Input<number>;
    /**
     * The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
     * maximum kilobits per second of the existing QoS bandwidth limit rule.
     */
    readonly maxKbps?: pulumi.Input<number>;
    /**
     * The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
     */
    readonly qosPolicyId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
     */
    readonly region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QosBandwidthLimitRule resource.
 */
export interface QosBandwidthLimitRuleArgs {
    /**
     * The direction of traffic. Defaults to "egress". Changing this updates the direction of the
     * existing QoS bandwidth limit rule.
     */
    readonly direction?: pulumi.Input<string>;
    /**
     * The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
     * maximum burst size in kilobits of the existing QoS bandwidth limit rule.
     */
    readonly maxBurstKbps?: pulumi.Input<number>;
    /**
     * The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
     * maximum kilobits per second of the existing QoS bandwidth limit rule.
     */
    readonly maxKbps: pulumi.Input<number>;
    /**
     * The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
     */
    readonly qosPolicyId: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
     */
    readonly region?: pulumi.Input<string>;
}
