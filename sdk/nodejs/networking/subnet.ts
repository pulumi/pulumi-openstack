// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a V2 Neutron subnet resource within OpenStack.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const network1 = new openstack.networking.Network("network_1", {
 *     name: "tf_test_network",
 *     adminStateUp: true,
 * });
 * const subnet1 = new openstack.networking.Subnet("subnet_1", {
 *     networkId: network1.id,
 *     cidr: "192.168.199.0/24",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Subnets can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import openstack:networking/subnet:Subnet subnet_1 da4faf16-5546-41e4-8330-4d0002b74048
 * ```
 */
export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:networking/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * The collection of ags assigned on the subnet, which have been
     * explicitly and implicitly added.
     */
    public /*out*/ readonly allTags!: pulumi.Output<string[]>;
    /**
     * A block declaring the start and end range of
     * the IP addresses available for use with DHCP in this subnet. Multiple
     * `allocationPool` blocks can be declared, providing the subnet with more
     * than one range of IP addresses to use with DHCP. However, each IP range
     * must be from the same CIDR that the subnet is part of.
     * The `allocationPool` block is documented below.
     */
    public readonly allocationPools!: pulumi.Output<outputs.networking.SubnetAllocationPool[]>;
    /**
     * A block declaring the start and end range of the IP addresses available for
     * use with DHCP in this subnet.
     * The `allocationPools` block is documented below.
     *
     * @deprecated use allocationPool instead
     */
    public readonly allocationPoolsCollection!: pulumi.Output<outputs.networking.SubnetAllocationPoolsCollection[]>;
    /**
     * CIDR representing IP range for this subnet, based on IP
     * version. You can omit this option if you are creating a subnet from a
     * subnet pool.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Human-readable description of the subnet. Changing this
     * updates the name of the existing subnet.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An array of DNS name server names used by hosts
     * in this subnet. Changing this updates the DNS name servers for the existing
     * subnet.
     */
    public readonly dnsNameservers!: pulumi.Output<string[] | undefined>;
    /**
     * The administrative state of the network.
     * Acceptable values are "true" and "false". Changing this value enables or
     * disables the DHCP capabilities of the existing subnet. Defaults to true.
     */
    public readonly enableDhcp!: pulumi.Output<boolean | undefined>;
    /**
     * Default gateway used by devices in this subnet.
     * Leaving this blank and not setting `noGateway` will cause a default
     * gateway of `.1` to be used. Changing this updates the gateway IP of the
     * existing subnet.
     */
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * (**Deprecated** - use `openstack.networking.SubnetRoute`
     * instead) An array of routes that should be used by devices
     * with IPs from this subnet (not including local subnet route). The hostRoute
     * object structure is documented below. Changing this updates the host routes
     * for the existing subnet.
     *
     * @deprecated Use openstack.networking.SubnetRoute instead
     */
    public readonly hostRoutes!: pulumi.Output<outputs.networking.SubnetHostRoute[] | undefined>;
    /**
     * IP version, either 4 (default) or 6. Changing this creates a
     * new subnet.
     */
    public readonly ipVersion!: pulumi.Output<number | undefined>;
    /**
     * The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    public readonly ipv6AddressMode!: pulumi.Output<string>;
    /**
     * The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    public readonly ipv6RaMode!: pulumi.Output<string>;
    /**
     * The name of the subnet. Changing this updates the name of
     * the existing subnet.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The UUID of the parent network. Changing this
     * creates a new subnet.
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Do not set a gateway IP on this subnet. Changing
     * this removes or adds a default gateway IP of the existing subnet.
     */
    public readonly noGateway!: pulumi.Output<boolean | undefined>;
    /**
     * The prefix length to use when creating a subnet
     * from a subnet pool. The default subnet pool prefix length that was defined
     * when creating the subnet pool will be used if not provided. Changing this
     * creates a new subnet.
     */
    public readonly prefixLength!: pulumi.Output<number | undefined>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron subnet. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * subnet.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * An array of service types used by the subnet.
     * Changing this updates the service types for the existing subnet.
     */
    public readonly serviceTypes!: pulumi.Output<string[]>;
    /**
     * The ID of the subnetpool associated with the subnet.
     */
    public readonly subnetpoolId!: pulumi.Output<string | undefined>;
    /**
     * A set of string tags for the subnet.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The owner of the subnet. Required if admin wants to
     * create a subnet for another tenant. Changing this creates a new subnet.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Map of additional options.
     */
    public readonly valueSpecs!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["allTags"] = state ? state.allTags : undefined;
            resourceInputs["allocationPools"] = state ? state.allocationPools : undefined;
            resourceInputs["allocationPoolsCollection"] = state ? state.allocationPoolsCollection : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsNameservers"] = state ? state.dnsNameservers : undefined;
            resourceInputs["enableDhcp"] = state ? state.enableDhcp : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["ipv6AddressMode"] = state ? state.ipv6AddressMode : undefined;
            resourceInputs["ipv6RaMode"] = state ? state.ipv6RaMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["noGateway"] = state ? state.noGateway : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceTypes"] = state ? state.serviceTypes : undefined;
            resourceInputs["subnetpoolId"] = state ? state.subnetpoolId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["allocationPools"] = args ? args.allocationPools : undefined;
            resourceInputs["allocationPoolsCollection"] = args ? args.allocationPoolsCollection : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsNameservers"] = args ? args.dnsNameservers : undefined;
            resourceInputs["enableDhcp"] = args ? args.enableDhcp : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["ipv6AddressMode"] = args ? args.ipv6AddressMode : undefined;
            resourceInputs["ipv6RaMode"] = args ? args.ipv6RaMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["noGateway"] = args ? args.noGateway : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceTypes"] = args ? args.serviceTypes : undefined;
            resourceInputs["subnetpoolId"] = args ? args.subnetpoolId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
            resourceInputs["allTags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * The collection of ags assigned on the subnet, which have been
     * explicitly and implicitly added.
     */
    allTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A block declaring the start and end range of
     * the IP addresses available for use with DHCP in this subnet. Multiple
     * `allocationPool` blocks can be declared, providing the subnet with more
     * than one range of IP addresses to use with DHCP. However, each IP range
     * must be from the same CIDR that the subnet is part of.
     * The `allocationPool` block is documented below.
     */
    allocationPools?: pulumi.Input<pulumi.Input<inputs.networking.SubnetAllocationPool>[]>;
    /**
     * A block declaring the start and end range of the IP addresses available for
     * use with DHCP in this subnet.
     * The `allocationPools` block is documented below.
     *
     * @deprecated use allocationPool instead
     */
    allocationPoolsCollection?: pulumi.Input<pulumi.Input<inputs.networking.SubnetAllocationPoolsCollection>[]>;
    /**
     * CIDR representing IP range for this subnet, based on IP
     * version. You can omit this option if you are creating a subnet from a
     * subnet pool.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Human-readable description of the subnet. Changing this
     * updates the name of the existing subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * An array of DNS name server names used by hosts
     * in this subnet. Changing this updates the DNS name servers for the existing
     * subnet.
     */
    dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The administrative state of the network.
     * Acceptable values are "true" and "false". Changing this value enables or
     * disables the DHCP capabilities of the existing subnet. Defaults to true.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Default gateway used by devices in this subnet.
     * Leaving this blank and not setting `noGateway` will cause a default
     * gateway of `.1` to be used. Changing this updates the gateway IP of the
     * existing subnet.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * (**Deprecated** - use `openstack.networking.SubnetRoute`
     * instead) An array of routes that should be used by devices
     * with IPs from this subnet (not including local subnet route). The hostRoute
     * object structure is documented below. Changing this updates the host routes
     * for the existing subnet.
     *
     * @deprecated Use openstack.networking.SubnetRoute instead
     */
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.networking.SubnetHostRoute>[]>;
    /**
     * IP version, either 4 (default) or 6. Changing this creates a
     * new subnet.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    ipv6AddressMode?: pulumi.Input<string>;
    /**
     * The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    ipv6RaMode?: pulumi.Input<string>;
    /**
     * The name of the subnet. Changing this updates the name of
     * the existing subnet.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUID of the parent network. Changing this
     * creates a new subnet.
     */
    networkId?: pulumi.Input<string>;
    /**
     * Do not set a gateway IP on this subnet. Changing
     * this removes or adds a default gateway IP of the existing subnet.
     */
    noGateway?: pulumi.Input<boolean>;
    /**
     * The prefix length to use when creating a subnet
     * from a subnet pool. The default subnet pool prefix length that was defined
     * when creating the subnet pool will be used if not provided. Changing this
     * creates a new subnet.
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron subnet. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * subnet.
     */
    region?: pulumi.Input<string>;
    /**
     * An array of service types used by the subnet.
     * Changing this updates the service types for the existing subnet.
     */
    serviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subnetpool associated with the subnet.
     */
    subnetpoolId?: pulumi.Input<string>;
    /**
     * A set of string tags for the subnet.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The owner of the subnet. Required if admin wants to
     * create a subnet for another tenant. Changing this creates a new subnet.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * A block declaring the start and end range of
     * the IP addresses available for use with DHCP in this subnet. Multiple
     * `allocationPool` blocks can be declared, providing the subnet with more
     * than one range of IP addresses to use with DHCP. However, each IP range
     * must be from the same CIDR that the subnet is part of.
     * The `allocationPool` block is documented below.
     */
    allocationPools?: pulumi.Input<pulumi.Input<inputs.networking.SubnetAllocationPool>[]>;
    /**
     * A block declaring the start and end range of the IP addresses available for
     * use with DHCP in this subnet.
     * The `allocationPools` block is documented below.
     *
     * @deprecated use allocationPool instead
     */
    allocationPoolsCollection?: pulumi.Input<pulumi.Input<inputs.networking.SubnetAllocationPoolsCollection>[]>;
    /**
     * CIDR representing IP range for this subnet, based on IP
     * version. You can omit this option if you are creating a subnet from a
     * subnet pool.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Human-readable description of the subnet. Changing this
     * updates the name of the existing subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * An array of DNS name server names used by hosts
     * in this subnet. Changing this updates the DNS name servers for the existing
     * subnet.
     */
    dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The administrative state of the network.
     * Acceptable values are "true" and "false". Changing this value enables or
     * disables the DHCP capabilities of the existing subnet. Defaults to true.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Default gateway used by devices in this subnet.
     * Leaving this blank and not setting `noGateway` will cause a default
     * gateway of `.1` to be used. Changing this updates the gateway IP of the
     * existing subnet.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * (**Deprecated** - use `openstack.networking.SubnetRoute`
     * instead) An array of routes that should be used by devices
     * with IPs from this subnet (not including local subnet route). The hostRoute
     * object structure is documented below. Changing this updates the host routes
     * for the existing subnet.
     *
     * @deprecated Use openstack.networking.SubnetRoute instead
     */
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.networking.SubnetHostRoute>[]>;
    /**
     * IP version, either 4 (default) or 6. Changing this creates a
     * new subnet.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    ipv6AddressMode?: pulumi.Input<string>;
    /**
     * The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    ipv6RaMode?: pulumi.Input<string>;
    /**
     * The name of the subnet. Changing this updates the name of
     * the existing subnet.
     */
    name?: pulumi.Input<string>;
    /**
     * The UUID of the parent network. Changing this
     * creates a new subnet.
     */
    networkId: pulumi.Input<string>;
    /**
     * Do not set a gateway IP on this subnet. Changing
     * this removes or adds a default gateway IP of the existing subnet.
     */
    noGateway?: pulumi.Input<boolean>;
    /**
     * The prefix length to use when creating a subnet
     * from a subnet pool. The default subnet pool prefix length that was defined
     * when creating the subnet pool will be used if not provided. Changing this
     * creates a new subnet.
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron subnet. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * subnet.
     */
    region?: pulumi.Input<string>;
    /**
     * An array of service types used by the subnet.
     * Changing this updates the service types for the existing subnet.
     */
    serviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subnetpool associated with the subnet.
     */
    subnetpoolId?: pulumi.Input<string>;
    /**
     * A set of string tags for the subnet.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The owner of the subnet. Required if admin wants to
     * create a subnet for another tenant. Changing this creates a new subnet.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Map of additional options.
     */
    valueSpecs?: pulumi.Input<{[key: string]: any}>;
}
