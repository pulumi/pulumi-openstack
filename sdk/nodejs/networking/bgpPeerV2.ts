// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a V2 Neutron BGP Peer resource within OpenStack.
 *
 * This resource allows you to configure a BGP peer that can be associated with a
 * BGP speaker to exchange routing information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const peer1 = new openstack.networking.BgpPeerV2("peer_1", {
 *     name: "bgp_peer_1",
 *     peerIp: "192.0.2.10",
 *     remoteAs: 65001,
 *     authType: "md5",
 *     password: "supersecret",
 * });
 * ```
 *
 * ## Import
 *
 * BGP peers can be imported using their ID:
 *
 * ```sh
 * $ pulumi import openstack:networking/bgpPeerV2:BgpPeerV2 peer1 a1b2c3d4-e5f6-7890-abcd-1234567890ef
 * ```
 */
export class BgpPeerV2 extends pulumi.CustomResource {
    /**
     * Get an existing BgpPeerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BgpPeerV2State, opts?: pulumi.CustomResourceOptions): BgpPeerV2 {
        return new BgpPeerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:networking/bgpPeerV2:BgpPeerV2';

    /**
     * Returns true if the given object is an instance of BgpPeerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BgpPeerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BgpPeerV2.__pulumiType;
    }

    /**
     * The authentication type to use. Can be one of `none`
     * or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
     * must also be provided. Changing this creates a new BGP peer.
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * A name for the BGP peer.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password used for MD5 authentication. Must be set
     * only when `authType` is not `none`.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The IP address of the BGP peer. Must be a valid IP
     * address. Changing this creates a new BGP peer.
     */
    public readonly peerIp!: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * peer.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The AS number of the BGP peer. Changing this
     * creates a new BGP peer.
     */
    public readonly remoteAs!: pulumi.Output<number>;
    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP peer.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a BgpPeerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BgpPeerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BgpPeerV2Args | BgpPeerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BgpPeerV2State | undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["peerIp"] = state ? state.peerIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["remoteAs"] = state ? state.remoteAs : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as BgpPeerV2Args | undefined;
            if ((!args || args.peerIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerIp'");
            }
            if ((!args || args.remoteAs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteAs'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["peerIp"] = args ? args.peerIp : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["remoteAs"] = args ? args.remoteAs : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BgpPeerV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BgpPeerV2 resources.
 */
export interface BgpPeerV2State {
    /**
     * The authentication type to use. Can be one of `none`
     * or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
     * must also be provided. Changing this creates a new BGP peer.
     */
    authType?: pulumi.Input<string>;
    /**
     * A name for the BGP peer.
     */
    name?: pulumi.Input<string>;
    /**
     * The password used for MD5 authentication. Must be set
     * only when `authType` is not `none`.
     */
    password?: pulumi.Input<string>;
    /**
     * The IP address of the BGP peer. Must be a valid IP
     * address. Changing this creates a new BGP peer.
     */
    peerIp?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * peer.
     */
    region?: pulumi.Input<string>;
    /**
     * The AS number of the BGP peer. Changing this
     * creates a new BGP peer.
     */
    remoteAs?: pulumi.Input<number>;
    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP peer.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BgpPeerV2 resource.
 */
export interface BgpPeerV2Args {
    /**
     * The authentication type to use. Can be one of `none`
     * or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
     * must also be provided. Changing this creates a new BGP peer.
     */
    authType?: pulumi.Input<string>;
    /**
     * A name for the BGP peer.
     */
    name?: pulumi.Input<string>;
    /**
     * The password used for MD5 authentication. Must be set
     * only when `authType` is not `none`.
     */
    password?: pulumi.Input<string>;
    /**
     * The IP address of the BGP peer. Must be a valid IP
     * address. Changing this creates a new BGP peer.
     */
    peerIp: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * peer.
     */
    region?: pulumi.Input<string>;
    /**
     * The AS number of the BGP peer. Changing this
     * creates a new BGP peer.
     */
    remoteAs: pulumi.Input<number>;
    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP peer.
     */
    tenantId?: pulumi.Input<string>;
}
