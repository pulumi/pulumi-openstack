// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to get the ID of an available OpenStack network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const network = openstack.networking.getSegmentV2({
 *     name: "tf_test_segment",
 * });
 * ```
 */
export function getSegmentV2(args?: GetSegmentV2Args, opts?: pulumi.InvokeOptions): Promise<GetSegmentV2Result> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("openstack:networking/getSegmentV2:getSegmentV2", {
        "description": args.description,
        "name": args.name,
        "networkId": args.networkId,
        "networkType": args.networkType,
        "physicalNetwork": args.physicalNetwork,
        "region": args.region,
        "revisionNumber": args.revisionNumber,
        "segmentId": args.segmentId,
        "segmentationId": args.segmentationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSegmentV2.
 */
export interface GetSegmentV2Args {
    /**
     * Human-readable description of the network segment.
     */
    description?: string;
    /**
     * The name of the network segment.
     */
    name?: string;
    /**
     * The ID of the network.
     */
    networkId?: string;
    /**
     * The type of the network, such as `vlan`, `vxlan`,
     * `flat`, `gre`, `geneve`, or `local`.
     */
    networkType?: string;
    /**
     * The name of the physical network.
     */
    physicalNetwork?: string;
    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve networks ids. If omitted, the
     * `region` argument of the provider is used.
     */
    region?: string;
    /**
     * See Argument Reference above.
     */
    revisionNumber?: number;
    /**
     * The ID of the network segment
     */
    segmentId?: string;
    /**
     * The segmentation ID of the network segment.
     */
    segmentationId?: number;
}

/**
 * A collection of values returned by getSegmentV2.
 */
export interface GetSegmentV2Result {
    /**
     * The date and time when the network segment was created.
     */
    readonly createdAt: string;
    /**
     * See Argument Reference above.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * See Argument Reference above.
     */
    readonly name: string;
    /**
     * See Argument Reference above.
     */
    readonly networkId: string;
    /**
     * See Argument Reference above.
     */
    readonly networkType: string;
    /**
     * See Argument Reference above.
     */
    readonly physicalNetwork: string;
    readonly region: string;
    /**
     * See Argument Reference above.
     */
    readonly revisionNumber: number;
    /**
     * See Argument Reference above.
     */
    readonly segmentId: string;
    /**
     * See Argument Reference above.
     */
    readonly segmentationId: number;
    /**
     * The date and time when the network segment was last updated.
     */
    readonly updatedAt: string;
}
/**
 * Use this data source to get the ID of an available OpenStack network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const network = openstack.networking.getSegmentV2({
 *     name: "tf_test_segment",
 * });
 * ```
 */
export function getSegmentV2Output(args?: GetSegmentV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSegmentV2Result> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("openstack:networking/getSegmentV2:getSegmentV2", {
        "description": args.description,
        "name": args.name,
        "networkId": args.networkId,
        "networkType": args.networkType,
        "physicalNetwork": args.physicalNetwork,
        "region": args.region,
        "revisionNumber": args.revisionNumber,
        "segmentId": args.segmentId,
        "segmentationId": args.segmentationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSegmentV2.
 */
export interface GetSegmentV2OutputArgs {
    /**
     * Human-readable description of the network segment.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the network segment.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the network.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The type of the network, such as `vlan`, `vxlan`,
     * `flat`, `gre`, `geneve`, or `local`.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The name of the physical network.
     */
    physicalNetwork?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve networks ids. If omitted, the
     * `region` argument of the provider is used.
     */
    region?: pulumi.Input<string>;
    /**
     * See Argument Reference above.
     */
    revisionNumber?: pulumi.Input<number>;
    /**
     * The ID of the network segment
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The segmentation ID of the network segment.
     */
    segmentationId?: pulumi.Input<number>;
}
