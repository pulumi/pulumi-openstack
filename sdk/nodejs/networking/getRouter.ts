// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get the ID of an available OpenStack router.
 */
export function getRouter(args?: GetRouterArgs, opts?: pulumi.InvokeOptions): Promise<GetRouterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("openstack:networking/getRouter:getRouter", {
        "adminStateUp": args.adminStateUp,
        "description": args.description,
        "distributed": args.distributed,
        "enableSnat": args.enableSnat,
        "name": args.name,
        "region": args.region,
        "routerId": args.routerId,
        "status": args.status,
        "tags": args.tags,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRouter.
 */
export interface GetRouterArgs {
    /**
     * Administrative up/down status for the router (must be "true" or "false" if provided).
     */
    adminStateUp?: boolean;
    /**
     * Human-readable description of the router.
     */
    description?: string;
    /**
     * Indicates whether or not to get a distributed router.
     */
    distributed?: boolean;
    /**
     * The value that points out if the Source NAT is enabled on the router.
     */
    enableSnat?: boolean;
    /**
     * The name of the router.
     */
    name?: string;
    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve router ids. If omitted, the
     * `region` argument of the provider is used.
     */
    region?: string;
    /**
     * The UUID of the router resource.
     */
    routerId?: string;
    /**
     * The status of the router (ACTIVE/DOWN).
     */
    status?: string;
    /**
     * The list of router tags to filter.
     */
    tags?: string[];
    /**
     * The owner of the router.
     */
    tenantId?: string;
}

/**
 * A collection of values returned by getRouter.
 */
export interface GetRouterResult {
    readonly adminStateUp?: boolean;
    /**
     * The set of string tags applied on the router.
     */
    readonly allTags: string[];
    /**
     * The availability zone that is used to make router resources highly available.
     */
    readonly availabilityZoneHints: string[];
    readonly description?: string;
    readonly distributed?: boolean;
    /**
     * The value that points out if the Source NAT is enabled on the router.
     */
    readonly enableSnat: boolean;
    /**
     * The external fixed IPs of the router.
     */
    readonly externalFixedIps: outputs.networking.GetRouterExternalFixedIp[];
    /**
     * The network UUID of an external gateway for the router.
     */
    readonly externalNetworkId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly region?: string;
    readonly routerId?: string;
    readonly status?: string;
    readonly tags?: string[];
    readonly tenantId?: string;
}
/**
 * Use this data source to get the ID of an available OpenStack router.
 */
export function getRouterOutput(args?: GetRouterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouterResult> {
    return pulumi.output(args).apply((a: any) => getRouter(a, opts))
}

/**
 * A collection of arguments for invoking getRouter.
 */
export interface GetRouterOutputArgs {
    /**
     * Administrative up/down status for the router (must be "true" or "false" if provided).
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * Human-readable description of the router.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether or not to get a distributed router.
     */
    distributed?: pulumi.Input<boolean>;
    /**
     * The value that points out if the Source NAT is enabled on the router.
     */
    enableSnat?: pulumi.Input<boolean>;
    /**
     * The name of the router.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve router ids. If omitted, the
     * `region` argument of the provider is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The UUID of the router resource.
     */
    routerId?: pulumi.Input<string>;
    /**
     * The status of the router (ACTIVE/DOWN).
     */
    status?: pulumi.Input<string>;
    /**
     * The list of router tags to filter.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The owner of the router.
     */
    tenantId?: pulumi.Input<string>;
}
