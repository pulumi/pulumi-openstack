// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddressGroupV2Args, AddressGroupV2State } from "./addressGroupV2";
export type AddressGroupV2 = import("./addressGroupV2").AddressGroupV2;
export const AddressGroupV2: typeof import("./addressGroupV2").AddressGroupV2 = null as any;
utilities.lazyLoad(exports, ["AddressGroupV2"], () => require("./addressGroupV2"));

export { AddressScopeArgs, AddressScopeState } from "./addressScope";
export type AddressScope = import("./addressScope").AddressScope;
export const AddressScope: typeof import("./addressScope").AddressScope = null as any;
utilities.lazyLoad(exports, ["AddressScope"], () => require("./addressScope"));

export { FloatingIpArgs, FloatingIpState } from "./floatingIp";
export type FloatingIp = import("./floatingIp").FloatingIp;
export const FloatingIp: typeof import("./floatingIp").FloatingIp = null as any;
utilities.lazyLoad(exports, ["FloatingIp"], () => require("./floatingIp"));

export { FloatingIpAssociateArgs, FloatingIpAssociateState } from "./floatingIpAssociate";
export type FloatingIpAssociate = import("./floatingIpAssociate").FloatingIpAssociate;
export const FloatingIpAssociate: typeof import("./floatingIpAssociate").FloatingIpAssociate = null as any;
utilities.lazyLoad(exports, ["FloatingIpAssociate"], () => require("./floatingIpAssociate"));

export { GetAddressScopeArgs, GetAddressScopeResult, GetAddressScopeOutputArgs } from "./getAddressScope";
export const getAddressScope: typeof import("./getAddressScope").getAddressScope = null as any;
export const getAddressScopeOutput: typeof import("./getAddressScope").getAddressScopeOutput = null as any;
utilities.lazyLoad(exports, ["getAddressScope","getAddressScopeOutput"], () => require("./getAddressScope"));

export { GetFloatingIpArgs, GetFloatingIpResult, GetFloatingIpOutputArgs } from "./getFloatingIp";
export const getFloatingIp: typeof import("./getFloatingIp").getFloatingIp = null as any;
export const getFloatingIpOutput: typeof import("./getFloatingIp").getFloatingIpOutput = null as any;
utilities.lazyLoad(exports, ["getFloatingIp","getFloatingIpOutput"], () => require("./getFloatingIp"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetPortArgs, GetPortResult, GetPortOutputArgs } from "./getPort";
export const getPort: typeof import("./getPort").getPort = null as any;
export const getPortOutput: typeof import("./getPort").getPortOutput = null as any;
utilities.lazyLoad(exports, ["getPort","getPortOutput"], () => require("./getPort"));

export { GetPortIdsArgs, GetPortIdsResult, GetPortIdsOutputArgs } from "./getPortIds";
export const getPortIds: typeof import("./getPortIds").getPortIds = null as any;
export const getPortIdsOutput: typeof import("./getPortIds").getPortIdsOutput = null as any;
utilities.lazyLoad(exports, ["getPortIds","getPortIdsOutput"], () => require("./getPortIds"));

export { GetQosBandwidthLimitRuleArgs, GetQosBandwidthLimitRuleResult, GetQosBandwidthLimitRuleOutputArgs } from "./getQosBandwidthLimitRule";
export const getQosBandwidthLimitRule: typeof import("./getQosBandwidthLimitRule").getQosBandwidthLimitRule = null as any;
export const getQosBandwidthLimitRuleOutput: typeof import("./getQosBandwidthLimitRule").getQosBandwidthLimitRuleOutput = null as any;
utilities.lazyLoad(exports, ["getQosBandwidthLimitRule","getQosBandwidthLimitRuleOutput"], () => require("./getQosBandwidthLimitRule"));

export { GetQosDscpMarkingRuleArgs, GetQosDscpMarkingRuleResult, GetQosDscpMarkingRuleOutputArgs } from "./getQosDscpMarkingRule";
export const getQosDscpMarkingRule: typeof import("./getQosDscpMarkingRule").getQosDscpMarkingRule = null as any;
export const getQosDscpMarkingRuleOutput: typeof import("./getQosDscpMarkingRule").getQosDscpMarkingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getQosDscpMarkingRule","getQosDscpMarkingRuleOutput"], () => require("./getQosDscpMarkingRule"));

export { GetQosMinimumBandwidthRuleArgs, GetQosMinimumBandwidthRuleResult, GetQosMinimumBandwidthRuleOutputArgs } from "./getQosMinimumBandwidthRule";
export const getQosMinimumBandwidthRule: typeof import("./getQosMinimumBandwidthRule").getQosMinimumBandwidthRule = null as any;
export const getQosMinimumBandwidthRuleOutput: typeof import("./getQosMinimumBandwidthRule").getQosMinimumBandwidthRuleOutput = null as any;
utilities.lazyLoad(exports, ["getQosMinimumBandwidthRule","getQosMinimumBandwidthRuleOutput"], () => require("./getQosMinimumBandwidthRule"));

export { GetQosPolicyArgs, GetQosPolicyResult, GetQosPolicyOutputArgs } from "./getQosPolicy";
export const getQosPolicy: typeof import("./getQosPolicy").getQosPolicy = null as any;
export const getQosPolicyOutput: typeof import("./getQosPolicy").getQosPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getQosPolicy","getQosPolicyOutput"], () => require("./getQosPolicy"));

export { GetQuotaV2Args, GetQuotaV2Result, GetQuotaV2OutputArgs } from "./getQuotaV2";
export const getQuotaV2: typeof import("./getQuotaV2").getQuotaV2 = null as any;
export const getQuotaV2Output: typeof import("./getQuotaV2").getQuotaV2Output = null as any;
utilities.lazyLoad(exports, ["getQuotaV2","getQuotaV2Output"], () => require("./getQuotaV2"));

export { GetRouterArgs, GetRouterResult, GetRouterOutputArgs } from "./getRouter";
export const getRouter: typeof import("./getRouter").getRouter = null as any;
export const getRouterOutput: typeof import("./getRouter").getRouterOutput = null as any;
utilities.lazyLoad(exports, ["getRouter","getRouterOutput"], () => require("./getRouter"));

export { GetSecGroupArgs, GetSecGroupResult, GetSecGroupOutputArgs } from "./getSecGroup";
export const getSecGroup: typeof import("./getSecGroup").getSecGroup = null as any;
export const getSecGroupOutput: typeof import("./getSecGroup").getSecGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecGroup","getSecGroupOutput"], () => require("./getSecGroup"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetIdsV2Args, GetSubnetIdsV2Result, GetSubnetIdsV2OutputArgs } from "./getSubnetIdsV2";
export const getSubnetIdsV2: typeof import("./getSubnetIdsV2").getSubnetIdsV2 = null as any;
export const getSubnetIdsV2Output: typeof import("./getSubnetIdsV2").getSubnetIdsV2Output = null as any;
utilities.lazyLoad(exports, ["getSubnetIdsV2","getSubnetIdsV2Output"], () => require("./getSubnetIdsV2"));

export { GetSubnetPoolArgs, GetSubnetPoolResult, GetSubnetPoolOutputArgs } from "./getSubnetPool";
export const getSubnetPool: typeof import("./getSubnetPool").getSubnetPool = null as any;
export const getSubnetPoolOutput: typeof import("./getSubnetPool").getSubnetPoolOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetPool","getSubnetPoolOutput"], () => require("./getSubnetPool"));

export { GetTrunkArgs, GetTrunkResult, GetTrunkOutputArgs } from "./getTrunk";
export const getTrunk: typeof import("./getTrunk").getTrunk = null as any;
export const getTrunkOutput: typeof import("./getTrunk").getTrunkOutput = null as any;
utilities.lazyLoad(exports, ["getTrunk","getTrunkOutput"], () => require("./getTrunk"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { PortArgs, PortState } from "./port";
export type Port = import("./port").Port;
export const Port: typeof import("./port").Port = null as any;
utilities.lazyLoad(exports, ["Port"], () => require("./port"));

export { PortForwardingV2Args, PortForwardingV2State } from "./portForwardingV2";
export type PortForwardingV2 = import("./portForwardingV2").PortForwardingV2;
export const PortForwardingV2: typeof import("./portForwardingV2").PortForwardingV2 = null as any;
utilities.lazyLoad(exports, ["PortForwardingV2"], () => require("./portForwardingV2"));

export { PortSecGroupAssociateArgs, PortSecGroupAssociateState } from "./portSecGroupAssociate";
export type PortSecGroupAssociate = import("./portSecGroupAssociate").PortSecGroupAssociate;
export const PortSecGroupAssociate: typeof import("./portSecGroupAssociate").PortSecGroupAssociate = null as any;
utilities.lazyLoad(exports, ["PortSecGroupAssociate"], () => require("./portSecGroupAssociate"));

export { QosBandwidthLimitRuleArgs, QosBandwidthLimitRuleState } from "./qosBandwidthLimitRule";
export type QosBandwidthLimitRule = import("./qosBandwidthLimitRule").QosBandwidthLimitRule;
export const QosBandwidthLimitRule: typeof import("./qosBandwidthLimitRule").QosBandwidthLimitRule = null as any;
utilities.lazyLoad(exports, ["QosBandwidthLimitRule"], () => require("./qosBandwidthLimitRule"));

export { QosDscpMarkingRuleArgs, QosDscpMarkingRuleState } from "./qosDscpMarkingRule";
export type QosDscpMarkingRule = import("./qosDscpMarkingRule").QosDscpMarkingRule;
export const QosDscpMarkingRule: typeof import("./qosDscpMarkingRule").QosDscpMarkingRule = null as any;
utilities.lazyLoad(exports, ["QosDscpMarkingRule"], () => require("./qosDscpMarkingRule"));

export { QosMinimumBandwidthRuleArgs, QosMinimumBandwidthRuleState } from "./qosMinimumBandwidthRule";
export type QosMinimumBandwidthRule = import("./qosMinimumBandwidthRule").QosMinimumBandwidthRule;
export const QosMinimumBandwidthRule: typeof import("./qosMinimumBandwidthRule").QosMinimumBandwidthRule = null as any;
utilities.lazyLoad(exports, ["QosMinimumBandwidthRule"], () => require("./qosMinimumBandwidthRule"));

export { QosPolicyArgs, QosPolicyState } from "./qosPolicy";
export type QosPolicy = import("./qosPolicy").QosPolicy;
export const QosPolicy: typeof import("./qosPolicy").QosPolicy = null as any;
utilities.lazyLoad(exports, ["QosPolicy"], () => require("./qosPolicy"));

export { QuotaV2Args, QuotaV2State } from "./quotaV2";
export type QuotaV2 = import("./quotaV2").QuotaV2;
export const QuotaV2: typeof import("./quotaV2").QuotaV2 = null as any;
utilities.lazyLoad(exports, ["QuotaV2"], () => require("./quotaV2"));

export { RbacPolicyV2Args, RbacPolicyV2State } from "./rbacPolicyV2";
export type RbacPolicyV2 = import("./rbacPolicyV2").RbacPolicyV2;
export const RbacPolicyV2: typeof import("./rbacPolicyV2").RbacPolicyV2 = null as any;
utilities.lazyLoad(exports, ["RbacPolicyV2"], () => require("./rbacPolicyV2"));

export { RouterArgs, RouterState } from "./router";
export type Router = import("./router").Router;
export const Router: typeof import("./router").Router = null as any;
utilities.lazyLoad(exports, ["Router"], () => require("./router"));

export { RouterInterfaceArgs, RouterInterfaceState } from "./routerInterface";
export type RouterInterface = import("./routerInterface").RouterInterface;
export const RouterInterface: typeof import("./routerInterface").RouterInterface = null as any;
utilities.lazyLoad(exports, ["RouterInterface"], () => require("./routerInterface"));

export { RouterRouteArgs, RouterRouteState } from "./routerRoute";
export type RouterRoute = import("./routerRoute").RouterRoute;
export const RouterRoute: typeof import("./routerRoute").RouterRoute = null as any;
utilities.lazyLoad(exports, ["RouterRoute"], () => require("./routerRoute"));

export { SecGroupArgs, SecGroupState } from "./secGroup";
export type SecGroup = import("./secGroup").SecGroup;
export const SecGroup: typeof import("./secGroup").SecGroup = null as any;
utilities.lazyLoad(exports, ["SecGroup"], () => require("./secGroup"));

export { SecGroupRuleArgs, SecGroupRuleState } from "./secGroupRule";
export type SecGroupRule = import("./secGroupRule").SecGroupRule;
export const SecGroupRule: typeof import("./secGroupRule").SecGroupRule = null as any;
utilities.lazyLoad(exports, ["SecGroupRule"], () => require("./secGroupRule"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SubnetPoolArgs, SubnetPoolState } from "./subnetPool";
export type SubnetPool = import("./subnetPool").SubnetPool;
export const SubnetPool: typeof import("./subnetPool").SubnetPool = null as any;
utilities.lazyLoad(exports, ["SubnetPool"], () => require("./subnetPool"));

export { SubnetRouteArgs, SubnetRouteState } from "./subnetRoute";
export type SubnetRoute = import("./subnetRoute").SubnetRoute;
export const SubnetRoute: typeof import("./subnetRoute").SubnetRoute = null as any;
utilities.lazyLoad(exports, ["SubnetRoute"], () => require("./subnetRoute"));

export { TrunkArgs, TrunkState } from "./trunk";
export type Trunk = import("./trunk").Trunk;
export const Trunk: typeof import("./trunk").Trunk = null as any;
utilities.lazyLoad(exports, ["Trunk"], () => require("./trunk"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:networking/addressGroupV2:AddressGroupV2":
                return new AddressGroupV2(name, <any>undefined, { urn })
            case "openstack:networking/addressScope:AddressScope":
                return new AddressScope(name, <any>undefined, { urn })
            case "openstack:networking/floatingIp:FloatingIp":
                return new FloatingIp(name, <any>undefined, { urn })
            case "openstack:networking/floatingIpAssociate:FloatingIpAssociate":
                return new FloatingIpAssociate(name, <any>undefined, { urn })
            case "openstack:networking/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "openstack:networking/port:Port":
                return new Port(name, <any>undefined, { urn })
            case "openstack:networking/portForwardingV2:PortForwardingV2":
                return new PortForwardingV2(name, <any>undefined, { urn })
            case "openstack:networking/portSecGroupAssociate:PortSecGroupAssociate":
                return new PortSecGroupAssociate(name, <any>undefined, { urn })
            case "openstack:networking/qosBandwidthLimitRule:QosBandwidthLimitRule":
                return new QosBandwidthLimitRule(name, <any>undefined, { urn })
            case "openstack:networking/qosDscpMarkingRule:QosDscpMarkingRule":
                return new QosDscpMarkingRule(name, <any>undefined, { urn })
            case "openstack:networking/qosMinimumBandwidthRule:QosMinimumBandwidthRule":
                return new QosMinimumBandwidthRule(name, <any>undefined, { urn })
            case "openstack:networking/qosPolicy:QosPolicy":
                return new QosPolicy(name, <any>undefined, { urn })
            case "openstack:networking/quotaV2:QuotaV2":
                return new QuotaV2(name, <any>undefined, { urn })
            case "openstack:networking/rbacPolicyV2:RbacPolicyV2":
                return new RbacPolicyV2(name, <any>undefined, { urn })
            case "openstack:networking/router:Router":
                return new Router(name, <any>undefined, { urn })
            case "openstack:networking/routerInterface:RouterInterface":
                return new RouterInterface(name, <any>undefined, { urn })
            case "openstack:networking/routerRoute:RouterRoute":
                return new RouterRoute(name, <any>undefined, { urn })
            case "openstack:networking/secGroup:SecGroup":
                return new SecGroup(name, <any>undefined, { urn })
            case "openstack:networking/secGroupRule:SecGroupRule":
                return new SecGroupRule(name, <any>undefined, { urn })
            case "openstack:networking/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "openstack:networking/subnetPool:SubnetPool":
                return new SubnetPool(name, <any>undefined, { urn })
            case "openstack:networking/subnetRoute:SubnetRoute":
                return new SubnetRoute(name, <any>undefined, { urn })
            case "openstack:networking/trunk:Trunk":
                return new Trunk(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "networking/addressGroupV2", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/addressScope", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/floatingIp", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/floatingIpAssociate", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/network", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/port", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/portForwardingV2", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/portSecGroupAssociate", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/qosBandwidthLimitRule", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/qosDscpMarkingRule", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/qosMinimumBandwidthRule", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/qosPolicy", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/quotaV2", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/rbacPolicyV2", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/router", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/routerInterface", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/routerRoute", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/secGroup", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/secGroupRule", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/subnet", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/subnetPool", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/subnetRoute", _module)
pulumi.runtime.registerResourceModule("openstack", "networking/trunk", _module)
