// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Simple secret
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const secret1 = new openstack.keymanager.SecretV1("secret1", {
 *     algorithm: "aes",
 *     bitLength: 256,
 *     metadata: {
 *         key: "foo",
 *     },
 *     mode: "cbc",
 *     payload: "foobar",
 *     payloadContentType: "text/plain",
 *     secretType: "passphrase",
 * });
 * ```
 * ### Secret with the ACL
 *
 * > **Note** Only read ACLs are supported
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as openstack from "@pulumi/openstack";
 *
 * const secret1 = new openstack.keymanager.SecretV1("secret1", {
 *     payload: fs.readFileSync("certificate.pem"),
 *     secretType: "certificate",
 *     payloadContentType: "text/plain",
 *     acl: {
 *         read: {
 *             projectAccess: false,
 *             users: [
 *                 "userid1",
 *                 "userid2",
 *             ],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Secrets can be imported using the secret id (the last part of the secret reference), e.g.:
 *
 * ```sh
 *  $ pulumi import openstack:keymanager/secretV1:SecretV1 secret_1 8a7a79c2-cf17-4e65-b2ae-ddc8bfcf6c74
 * ```
 */
export class SecretV1 extends pulumi.CustomResource {
    /**
     * Get an existing SecretV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretV1State, opts?: pulumi.CustomResourceOptions): SecretV1 {
        return new SecretV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openstack:keymanager/secretV1:SecretV1';

    /**
     * Returns true if the given object is an instance of SecretV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretV1.__pulumiType;
    }

    /**
     * Allows to control an access to a secret. Currently only the
     * `read` operation is supported. If not specified, the secret is accessible
     * project wide.
     */
    public readonly acl!: pulumi.Output<outputs.keymanager.SecretV1Acl>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * The map of metadata, assigned on the secret, which has been
     * explicitly and implicitly added.
     */
    public /*out*/ readonly allMetadata!: pulumi.Output<{[key: string]: any}>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    public readonly bitLength!: pulumi.Output<number>;
    /**
     * The map of the content types, assigned on the secret.
     */
    public /*out*/ readonly contentTypes!: pulumi.Output<{[key: string]: any}>;
    /**
     * The date the secret ACL was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The creator of the secret.
     */
    public /*out*/ readonly creatorId!: pulumi.Output<string>;
    /**
     * The expiration time of the secret in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted, a secret will never expire. Changing this creates a new secret.
     */
    public readonly expiration!: pulumi.Output<string | undefined>;
    /**
     * Additional Metadata for the secret.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Human-readable name for the Secret. Does not have
     * to be unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The secret's data to be stored. **payload\_content\_type** must also be supplied if **payload** is included.
     */
    public readonly payload!: pulumi.Output<string | undefined>;
    /**
     * (required if **payload** is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either `base64` or `binary`.
     */
    public readonly payloadContentEncoding!: pulumi.Output<string | undefined>;
    /**
     * (required if **payload** is included) The media type for the content of the payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
     */
    public readonly payloadContentType!: pulumi.Output<string | undefined>;
    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a secret. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 secret.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The secret reference / where to find the secret.
     */
    public /*out*/ readonly secretRef!: pulumi.Output<string>;
    /**
     * Used to indicate the type of secret being stored. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).
     */
    public readonly secretType!: pulumi.Output<string>;
    /**
     * The status of the secret.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The date the secret ACL was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a SecretV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretV1Args | SecretV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretV1State | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["allMetadata"] = state ? state.allMetadata : undefined;
            resourceInputs["bitLength"] = state ? state.bitLength : undefined;
            resourceInputs["contentTypes"] = state ? state.contentTypes : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["creatorId"] = state ? state.creatorId : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["payload"] = state ? state.payload : undefined;
            resourceInputs["payloadContentEncoding"] = state ? state.payloadContentEncoding : undefined;
            resourceInputs["payloadContentType"] = state ? state.payloadContentType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretRef"] = state ? state.secretRef : undefined;
            resourceInputs["secretType"] = state ? state.secretType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as SecretV1Args | undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["bitLength"] = args ? args.bitLength : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["payload"] = args?.payload ? pulumi.secret(args.payload) : undefined;
            resourceInputs["payloadContentEncoding"] = args ? args.payloadContentEncoding : undefined;
            resourceInputs["payloadContentType"] = args ? args.payloadContentType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretType"] = args ? args.secretType : undefined;
            resourceInputs["allMetadata"] = undefined /*out*/;
            resourceInputs["contentTypes"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["creatorId"] = undefined /*out*/;
            resourceInputs["secretRef"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["payload"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretV1.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretV1 resources.
 */
export interface SecretV1State {
    /**
     * Allows to control an access to a secret. Currently only the
     * `read` operation is supported. If not specified, the secret is accessible
     * project wide.
     */
    acl?: pulumi.Input<inputs.keymanager.SecretV1Acl>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The map of metadata, assigned on the secret, which has been
     * explicitly and implicitly added.
     */
    allMetadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    bitLength?: pulumi.Input<number>;
    /**
     * The map of the content types, assigned on the secret.
     */
    contentTypes?: pulumi.Input<{[key: string]: any}>;
    /**
     * The date the secret ACL was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The creator of the secret.
     */
    creatorId?: pulumi.Input<string>;
    /**
     * The expiration time of the secret in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted, a secret will never expire. Changing this creates a new secret.
     */
    expiration?: pulumi.Input<string>;
    /**
     * Additional Metadata for the secret.
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    mode?: pulumi.Input<string>;
    /**
     * Human-readable name for the Secret. Does not have
     * to be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The secret's data to be stored. **payload\_content\_type** must also be supplied if **payload** is included.
     */
    payload?: pulumi.Input<string>;
    /**
     * (required if **payload** is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either `base64` or `binary`.
     */
    payloadContentEncoding?: pulumi.Input<string>;
    /**
     * (required if **payload** is included) The media type for the content of the payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
     */
    payloadContentType?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a secret. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 secret.
     */
    region?: pulumi.Input<string>;
    /**
     * The secret reference / where to find the secret.
     */
    secretRef?: pulumi.Input<string>;
    /**
     * Used to indicate the type of secret being stored. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).
     */
    secretType?: pulumi.Input<string>;
    /**
     * The status of the secret.
     */
    status?: pulumi.Input<string>;
    /**
     * The date the secret ACL was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretV1 resource.
 */
export interface SecretV1Args {
    /**
     * Allows to control an access to a secret. Currently only the
     * `read` operation is supported. If not specified, the secret is accessible
     * project wide.
     */
    acl?: pulumi.Input<inputs.keymanager.SecretV1Acl>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    bitLength?: pulumi.Input<number>;
    /**
     * The expiration time of the secret in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted, a secret will never expire. Changing this creates a new secret.
     */
    expiration?: pulumi.Input<string>;
    /**
     * Additional Metadata for the secret.
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Metadata provided by a user or system for informational purposes.
     */
    mode?: pulumi.Input<string>;
    /**
     * Human-readable name for the Secret. Does not have
     * to be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The secret's data to be stored. **payload\_content\_type** must also be supplied if **payload** is included.
     */
    payload?: pulumi.Input<string>;
    /**
     * (required if **payload** is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either `base64` or `binary`.
     */
    payloadContentEncoding?: pulumi.Input<string>;
    /**
     * (required if **payload** is included) The media type for the content of the payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
     */
    payloadContentType?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a secret. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 secret.
     */
    region?: pulumi.Input<string>;
    /**
     * Used to indicate the type of secret being stored. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).
     */
    secretType?: pulumi.Input<string>;
}
