# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class ClusterTemplate(pulumi.CustomResource):
    """
    Manages a V1 Magnum cluster template resource within OpenStack.
    """
    def __init__(__self__, __name__, __opts__=None, apiserver_port=None, cluster_distro=None, coe=None, dns_nameserver=None, docker_storage_driver=None, docker_volume_size=None, external_network_id=None, fixed_network=None, fixed_subnet=None, flavor=None, floating_ip_enabled=None, http_proxy=None, https_proxy=None, image=None, insecure_registry=None, keypair_id=None, labels=None, master_flavor=None, master_lb_enabled=None, name=None, network_driver=None, no_proxy=None, public=None, region=None, registry_enabled=None, server_type=None, tls_disabled=None, volume_driver=None):
        """Create a ClusterTemplate resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['apiserver_port'] = apiserver_port

        __props__['cluster_distro'] = cluster_distro

        if not coe:
            raise TypeError('Missing required property coe')
        __props__['coe'] = coe

        __props__['dns_nameserver'] = dns_nameserver

        __props__['docker_storage_driver'] = docker_storage_driver

        __props__['docker_volume_size'] = docker_volume_size

        __props__['external_network_id'] = external_network_id

        __props__['fixed_network'] = fixed_network

        __props__['fixed_subnet'] = fixed_subnet

        __props__['flavor'] = flavor

        __props__['floating_ip_enabled'] = floating_ip_enabled

        __props__['http_proxy'] = http_proxy

        __props__['https_proxy'] = https_proxy

        if not image:
            raise TypeError('Missing required property image')
        __props__['image'] = image

        __props__['insecure_registry'] = insecure_registry

        __props__['keypair_id'] = keypair_id

        __props__['labels'] = labels

        __props__['master_flavor'] = master_flavor

        __props__['master_lb_enabled'] = master_lb_enabled

        __props__['name'] = name

        __props__['network_driver'] = network_driver

        __props__['no_proxy'] = no_proxy

        __props__['public'] = public

        __props__['region'] = region

        __props__['registry_enabled'] = registry_enabled

        __props__['server_type'] = server_type

        __props__['tls_disabled'] = tls_disabled

        __props__['volume_driver'] = volume_driver

        __props__['created_at'] = None
        __props__['project_id'] = None
        __props__['updated_at'] = None
        __props__['user_id'] = None

        super(ClusterTemplate, __self__).__init__(
            'openstack:containerinfra/clusterTemplate:ClusterTemplate',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

