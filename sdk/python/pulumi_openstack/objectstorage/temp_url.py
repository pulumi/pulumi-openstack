# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class TempUrl(pulumi.CustomResource):
    """
    Use this resource to generate an OpenStack Object Storage temporary URL.
    
    The temporary URL will be valid for as long as TTL is set to (in seconds).
    Once the URL has expired, it will no longer be valid, but the resource
    will remain in place. If you wish to automatically regenerate a URL, set
    the `regenerate` argument to `true`. This will create a new resource with
    a new ID and URL.
    """
    def __init__(__self__, __name__, __opts__=None, container=None, method=None, object=None, regenerate=None, region=None, split=None, ttl=None):
        """Create a TempUrl resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not container:
            raise TypeError('Missing required property container')
        __props__['container'] = container

        __props__['method'] = method

        if not object:
            raise TypeError('Missing required property object')
        __props__['object'] = object

        __props__['regenerate'] = regenerate

        __props__['region'] = region

        __props__['split'] = split

        if not ttl:
            raise TypeError('Missing required property ttl')
        __props__['ttl'] = ttl

        __props__['url'] = None

        super(TempUrl, __self__).__init__(
            'openstack:objectstorage/tempUrl:TempUrl',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

