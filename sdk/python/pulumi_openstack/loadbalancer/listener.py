# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ListenerArgs', 'Listener']

@pulumi.input_type
class ListenerArgs:
    def __init__(__self__, *,
                 loadbalancer_id: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 protocol_port: pulumi.Input[int],
                 admin_state_up: Optional[pulumi.Input[bool]] = None,
                 allowed_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alpn_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_authentication: Optional[pulumi.Input[str]] = None,
                 client_ca_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 client_crl_container_ref: Optional[pulumi.Input[str]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 default_pool_id: Optional[pulumi.Input[str]] = None,
                 default_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[bool]] = None,
                 hsts_max_age: Optional[pulumi.Input[int]] = None,
                 hsts_preload: Optional[pulumi.Input[bool]] = None,
                 insert_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 sni_container_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 timeout_client_data: Optional[pulumi.Input[int]] = None,
                 timeout_member_connect: Optional[pulumi.Input[int]] = None,
                 timeout_member_data: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_inspect: Optional[pulumi.Input[int]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Listener resource.
        """
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_port", protocol_port)
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if allowed_cidrs is not None:
            pulumi.set(__self__, "allowed_cidrs", allowed_cidrs)
        if alpn_protocols is not None:
            pulumi.set(__self__, "alpn_protocols", alpn_protocols)
        if client_authentication is not None:
            pulumi.set(__self__, "client_authentication", client_authentication)
        if client_ca_tls_container_ref is not None:
            pulumi.set(__self__, "client_ca_tls_container_ref", client_ca_tls_container_ref)
        if client_crl_container_ref is not None:
            pulumi.set(__self__, "client_crl_container_ref", client_crl_container_ref)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if default_pool_id is not None:
            pulumi.set(__self__, "default_pool_id", default_pool_id)
        if default_tls_container_ref is not None:
            pulumi.set(__self__, "default_tls_container_ref", default_tls_container_ref)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hsts_include_subdomains is not None:
            pulumi.set(__self__, "hsts_include_subdomains", hsts_include_subdomains)
        if hsts_max_age is not None:
            pulumi.set(__self__, "hsts_max_age", hsts_max_age)
        if hsts_preload is not None:
            pulumi.set(__self__, "hsts_preload", hsts_preload)
        if insert_headers is not None:
            pulumi.set(__self__, "insert_headers", insert_headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sni_container_refs is not None:
            pulumi.set(__self__, "sni_container_refs", sni_container_refs)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if timeout_client_data is not None:
            pulumi.set(__self__, "timeout_client_data", timeout_client_data)
        if timeout_member_connect is not None:
            pulumi.set(__self__, "timeout_member_connect", timeout_member_connect)
        if timeout_member_data is not None:
            pulumi.set(__self__, "timeout_member_data", timeout_member_data)
        if timeout_tcp_inspect is not None:
            pulumi.set(__self__, "timeout_tcp_inspect", timeout_tcp_inspect)
        if tls_ciphers is not None:
            pulumi.set(__self__, "tls_ciphers", tls_ciphers)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "loadbalancer_id", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "protocol_port")

    @protocol_port.setter
    def protocol_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "protocol_port", value)

    @property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_state_up", value)

    @property
    @pulumi.getter(name="allowedCidrs")
    def allowed_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_cidrs")

    @allowed_cidrs.setter
    def allowed_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_cidrs", value)

    @property
    @pulumi.getter(name="alpnProtocols")
    def alpn_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "alpn_protocols")

    @alpn_protocols.setter
    def alpn_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alpn_protocols", value)

    @property
    @pulumi.getter(name="clientAuthentication")
    def client_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_authentication")

    @client_authentication.setter
    def client_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_authentication", value)

    @property
    @pulumi.getter(name="clientCaTlsContainerRef")
    def client_ca_tls_container_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ca_tls_container_ref")

    @client_ca_tls_container_ref.setter
    def client_ca_tls_container_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ca_tls_container_ref", value)

    @property
    @pulumi.getter(name="clientCrlContainerRef")
    def client_crl_container_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_crl_container_ref")

    @client_crl_container_ref.setter
    def client_crl_container_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_crl_container_ref", value)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_limit", value)

    @property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_pool_id")

    @default_pool_id.setter
    def default_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_pool_id", value)

    @property
    @pulumi.getter(name="defaultTlsContainerRef")
    def default_tls_container_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_tls_container_ref")

    @default_tls_container_ref.setter
    def default_tls_container_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_tls_container_ref", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hstsIncludeSubdomains")
    def hsts_include_subdomains(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hsts_include_subdomains")

    @hsts_include_subdomains.setter
    def hsts_include_subdomains(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="hstsMaxAge")
    def hsts_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hsts_max_age")

    @hsts_max_age.setter
    def hsts_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hsts_max_age", value)

    @property
    @pulumi.getter(name="hstsPreload")
    def hsts_preload(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hsts_preload")

    @hsts_preload.setter
    def hsts_preload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hsts_preload", value)

    @property
    @pulumi.getter(name="insertHeaders")
    def insert_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "insert_headers")

    @insert_headers.setter
    def insert_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "insert_headers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sniContainerRefs")
    def sni_container_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sni_container_refs")

    @sni_container_refs.setter
    def sni_container_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sni_container_refs", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="timeoutClientData")
    def timeout_client_data(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_client_data")

    @timeout_client_data.setter
    def timeout_client_data(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_client_data", value)

    @property
    @pulumi.getter(name="timeoutMemberConnect")
    def timeout_member_connect(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_member_connect")

    @timeout_member_connect.setter
    def timeout_member_connect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_member_connect", value)

    @property
    @pulumi.getter(name="timeoutMemberData")
    def timeout_member_data(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_member_data")

    @timeout_member_data.setter
    def timeout_member_data(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_member_data", value)

    @property
    @pulumi.getter(name="timeoutTcpInspect")
    def timeout_tcp_inspect(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_tcp_inspect")

    @timeout_tcp_inspect.setter
    def timeout_tcp_inspect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp_inspect", value)

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_ciphers")

    @tls_ciphers.setter
    def tls_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_ciphers", value)

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_versions")

    @tls_versions.setter
    def tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_versions", value)


@pulumi.input_type
class _ListenerState:
    def __init__(__self__, *,
                 admin_state_up: Optional[pulumi.Input[bool]] = None,
                 allowed_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alpn_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_authentication: Optional[pulumi.Input[str]] = None,
                 client_ca_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 client_crl_container_ref: Optional[pulumi.Input[str]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 default_pool_id: Optional[pulumi.Input[str]] = None,
                 default_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[bool]] = None,
                 hsts_max_age: Optional[pulumi.Input[int]] = None,
                 hsts_preload: Optional[pulumi.Input[bool]] = None,
                 insert_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_port: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 sni_container_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 timeout_client_data: Optional[pulumi.Input[int]] = None,
                 timeout_member_connect: Optional[pulumi.Input[int]] = None,
                 timeout_member_data: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_inspect: Optional[pulumi.Input[int]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Listener resources.
        """
        if admin_state_up is not None:
            pulumi.set(__self__, "admin_state_up", admin_state_up)
        if allowed_cidrs is not None:
            pulumi.set(__self__, "allowed_cidrs", allowed_cidrs)
        if alpn_protocols is not None:
            pulumi.set(__self__, "alpn_protocols", alpn_protocols)
        if client_authentication is not None:
            pulumi.set(__self__, "client_authentication", client_authentication)
        if client_ca_tls_container_ref is not None:
            pulumi.set(__self__, "client_ca_tls_container_ref", client_ca_tls_container_ref)
        if client_crl_container_ref is not None:
            pulumi.set(__self__, "client_crl_container_ref", client_crl_container_ref)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if default_pool_id is not None:
            pulumi.set(__self__, "default_pool_id", default_pool_id)
        if default_tls_container_ref is not None:
            pulumi.set(__self__, "default_tls_container_ref", default_tls_container_ref)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hsts_include_subdomains is not None:
            pulumi.set(__self__, "hsts_include_subdomains", hsts_include_subdomains)
        if hsts_max_age is not None:
            pulumi.set(__self__, "hsts_max_age", hsts_max_age)
        if hsts_preload is not None:
            pulumi.set(__self__, "hsts_preload", hsts_preload)
        if insert_headers is not None:
            pulumi.set(__self__, "insert_headers", insert_headers)
        if loadbalancer_id is not None:
            pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_port is not None:
            pulumi.set(__self__, "protocol_port", protocol_port)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sni_container_refs is not None:
            pulumi.set(__self__, "sni_container_refs", sni_container_refs)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if timeout_client_data is not None:
            pulumi.set(__self__, "timeout_client_data", timeout_client_data)
        if timeout_member_connect is not None:
            pulumi.set(__self__, "timeout_member_connect", timeout_member_connect)
        if timeout_member_data is not None:
            pulumi.set(__self__, "timeout_member_data", timeout_member_data)
        if timeout_tcp_inspect is not None:
            pulumi.set(__self__, "timeout_tcp_inspect", timeout_tcp_inspect)
        if tls_ciphers is not None:
            pulumi.set(__self__, "tls_ciphers", tls_ciphers)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "admin_state_up")

    @admin_state_up.setter
    def admin_state_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_state_up", value)

    @property
    @pulumi.getter(name="allowedCidrs")
    def allowed_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_cidrs")

    @allowed_cidrs.setter
    def allowed_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_cidrs", value)

    @property
    @pulumi.getter(name="alpnProtocols")
    def alpn_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "alpn_protocols")

    @alpn_protocols.setter
    def alpn_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alpn_protocols", value)

    @property
    @pulumi.getter(name="clientAuthentication")
    def client_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_authentication")

    @client_authentication.setter
    def client_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_authentication", value)

    @property
    @pulumi.getter(name="clientCaTlsContainerRef")
    def client_ca_tls_container_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ca_tls_container_ref")

    @client_ca_tls_container_ref.setter
    def client_ca_tls_container_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ca_tls_container_ref", value)

    @property
    @pulumi.getter(name="clientCrlContainerRef")
    def client_crl_container_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_crl_container_ref")

    @client_crl_container_ref.setter
    def client_crl_container_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_crl_container_ref", value)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_limit", value)

    @property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_pool_id")

    @default_pool_id.setter
    def default_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_pool_id", value)

    @property
    @pulumi.getter(name="defaultTlsContainerRef")
    def default_tls_container_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_tls_container_ref")

    @default_tls_container_ref.setter
    def default_tls_container_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_tls_container_ref", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hstsIncludeSubdomains")
    def hsts_include_subdomains(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hsts_include_subdomains")

    @hsts_include_subdomains.setter
    def hsts_include_subdomains(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="hstsMaxAge")
    def hsts_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hsts_max_age")

    @hsts_max_age.setter
    def hsts_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hsts_max_age", value)

    @property
    @pulumi.getter(name="hstsPreload")
    def hsts_preload(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hsts_preload")

    @hsts_preload.setter
    def hsts_preload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hsts_preload", value)

    @property
    @pulumi.getter(name="insertHeaders")
    def insert_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "insert_headers")

    @insert_headers.setter
    def insert_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "insert_headers", value)

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loadbalancer_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol_port")

    @protocol_port.setter
    def protocol_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_port", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sniContainerRefs")
    def sni_container_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sni_container_refs")

    @sni_container_refs.setter
    def sni_container_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sni_container_refs", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="timeoutClientData")
    def timeout_client_data(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_client_data")

    @timeout_client_data.setter
    def timeout_client_data(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_client_data", value)

    @property
    @pulumi.getter(name="timeoutMemberConnect")
    def timeout_member_connect(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_member_connect")

    @timeout_member_connect.setter
    def timeout_member_connect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_member_connect", value)

    @property
    @pulumi.getter(name="timeoutMemberData")
    def timeout_member_data(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_member_data")

    @timeout_member_data.setter
    def timeout_member_data(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_member_data", value)

    @property
    @pulumi.getter(name="timeoutTcpInspect")
    def timeout_tcp_inspect(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_tcp_inspect")

    @timeout_tcp_inspect.setter
    def timeout_tcp_inspect(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_tcp_inspect", value)

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_ciphers")

    @tls_ciphers.setter
    def tls_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_ciphers", value)

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_versions")

    @tls_versions.setter
    def tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_versions", value)


class Listener(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[bool]] = None,
                 allowed_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alpn_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_authentication: Optional[pulumi.Input[str]] = None,
                 client_ca_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 client_crl_container_ref: Optional[pulumi.Input[str]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 default_pool_id: Optional[pulumi.Input[str]] = None,
                 default_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[bool]] = None,
                 hsts_max_age: Optional[pulumi.Input[int]] = None,
                 hsts_preload: Optional[pulumi.Input[bool]] = None,
                 insert_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_port: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 sni_container_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 timeout_client_data: Optional[pulumi.Input[int]] = None,
                 timeout_member_connect: Optional[pulumi.Input[int]] = None,
                 timeout_member_data: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_inspect: Optional[pulumi.Input[int]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Listener resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ListenerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Listener resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ListenerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ListenerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_state_up: Optional[pulumi.Input[bool]] = None,
                 allowed_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alpn_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_authentication: Optional[pulumi.Input[str]] = None,
                 client_ca_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 client_crl_container_ref: Optional[pulumi.Input[str]] = None,
                 connection_limit: Optional[pulumi.Input[int]] = None,
                 default_pool_id: Optional[pulumi.Input[str]] = None,
                 default_tls_container_ref: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[bool]] = None,
                 hsts_max_age: Optional[pulumi.Input[int]] = None,
                 hsts_preload: Optional[pulumi.Input[bool]] = None,
                 insert_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_port: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 sni_container_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 timeout_client_data: Optional[pulumi.Input[int]] = None,
                 timeout_member_connect: Optional[pulumi.Input[int]] = None,
                 timeout_member_data: Optional[pulumi.Input[int]] = None,
                 timeout_tcp_inspect: Optional[pulumi.Input[int]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ListenerArgs.__new__(ListenerArgs)

            __props__.__dict__["admin_state_up"] = admin_state_up
            __props__.__dict__["allowed_cidrs"] = allowed_cidrs
            __props__.__dict__["alpn_protocols"] = alpn_protocols
            __props__.__dict__["client_authentication"] = client_authentication
            __props__.__dict__["client_ca_tls_container_ref"] = client_ca_tls_container_ref
            __props__.__dict__["client_crl_container_ref"] = client_crl_container_ref
            __props__.__dict__["connection_limit"] = connection_limit
            __props__.__dict__["default_pool_id"] = default_pool_id
            __props__.__dict__["default_tls_container_ref"] = default_tls_container_ref
            __props__.__dict__["description"] = description
            __props__.__dict__["hsts_include_subdomains"] = hsts_include_subdomains
            __props__.__dict__["hsts_max_age"] = hsts_max_age
            __props__.__dict__["hsts_preload"] = hsts_preload
            __props__.__dict__["insert_headers"] = insert_headers
            if loadbalancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'loadbalancer_id'")
            __props__.__dict__["loadbalancer_id"] = loadbalancer_id
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if protocol_port is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_port'")
            __props__.__dict__["protocol_port"] = protocol_port
            __props__.__dict__["region"] = region
            __props__.__dict__["sni_container_refs"] = sni_container_refs
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["timeout_client_data"] = timeout_client_data
            __props__.__dict__["timeout_member_connect"] = timeout_member_connect
            __props__.__dict__["timeout_member_data"] = timeout_member_data
            __props__.__dict__["timeout_tcp_inspect"] = timeout_tcp_inspect
            __props__.__dict__["tls_ciphers"] = tls_ciphers
            __props__.__dict__["tls_versions"] = tls_versions
        super(Listener, __self__).__init__(
            'openstack:loadbalancer/listener:Listener',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_state_up: Optional[pulumi.Input[bool]] = None,
            allowed_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            alpn_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            client_authentication: Optional[pulumi.Input[str]] = None,
            client_ca_tls_container_ref: Optional[pulumi.Input[str]] = None,
            client_crl_container_ref: Optional[pulumi.Input[str]] = None,
            connection_limit: Optional[pulumi.Input[int]] = None,
            default_pool_id: Optional[pulumi.Input[str]] = None,
            default_tls_container_ref: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            hsts_include_subdomains: Optional[pulumi.Input[bool]] = None,
            hsts_max_age: Optional[pulumi.Input[int]] = None,
            hsts_preload: Optional[pulumi.Input[bool]] = None,
            insert_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            loadbalancer_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            protocol_port: Optional[pulumi.Input[int]] = None,
            region: Optional[pulumi.Input[str]] = None,
            sni_container_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_id: Optional[pulumi.Input[str]] = None,
            timeout_client_data: Optional[pulumi.Input[int]] = None,
            timeout_member_connect: Optional[pulumi.Input[int]] = None,
            timeout_member_data: Optional[pulumi.Input[int]] = None,
            timeout_tcp_inspect: Optional[pulumi.Input[int]] = None,
            tls_ciphers: Optional[pulumi.Input[str]] = None,
            tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Listener':
        """
        Get an existing Listener resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ListenerState.__new__(_ListenerState)

        __props__.__dict__["admin_state_up"] = admin_state_up
        __props__.__dict__["allowed_cidrs"] = allowed_cidrs
        __props__.__dict__["alpn_protocols"] = alpn_protocols
        __props__.__dict__["client_authentication"] = client_authentication
        __props__.__dict__["client_ca_tls_container_ref"] = client_ca_tls_container_ref
        __props__.__dict__["client_crl_container_ref"] = client_crl_container_ref
        __props__.__dict__["connection_limit"] = connection_limit
        __props__.__dict__["default_pool_id"] = default_pool_id
        __props__.__dict__["default_tls_container_ref"] = default_tls_container_ref
        __props__.__dict__["description"] = description
        __props__.__dict__["hsts_include_subdomains"] = hsts_include_subdomains
        __props__.__dict__["hsts_max_age"] = hsts_max_age
        __props__.__dict__["hsts_preload"] = hsts_preload
        __props__.__dict__["insert_headers"] = insert_headers
        __props__.__dict__["loadbalancer_id"] = loadbalancer_id
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["protocol_port"] = protocol_port
        __props__.__dict__["region"] = region
        __props__.__dict__["sni_container_refs"] = sni_container_refs
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["timeout_client_data"] = timeout_client_data
        __props__.__dict__["timeout_member_connect"] = timeout_member_connect
        __props__.__dict__["timeout_member_data"] = timeout_member_data
        __props__.__dict__["timeout_tcp_inspect"] = timeout_tcp_inspect
        __props__.__dict__["tls_ciphers"] = tls_ciphers
        __props__.__dict__["tls_versions"] = tls_versions
        return Listener(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "admin_state_up")

    @property
    @pulumi.getter(name="allowedCidrs")
    def allowed_cidrs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "allowed_cidrs")

    @property
    @pulumi.getter(name="alpnProtocols")
    def alpn_protocols(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "alpn_protocols")

    @property
    @pulumi.getter(name="clientAuthentication")
    def client_authentication(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "client_authentication")

    @property
    @pulumi.getter(name="clientCaTlsContainerRef")
    def client_ca_tls_container_ref(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "client_ca_tls_container_ref")

    @property
    @pulumi.getter(name="clientCrlContainerRef")
    def client_crl_container_ref(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "client_crl_container_ref")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="defaultPoolId")
    def default_pool_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_pool_id")

    @property
    @pulumi.getter(name="defaultTlsContainerRef")
    def default_tls_container_ref(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "default_tls_container_ref")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hstsIncludeSubdomains")
    def hsts_include_subdomains(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "hsts_include_subdomains")

    @property
    @pulumi.getter(name="hstsMaxAge")
    def hsts_max_age(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "hsts_max_age")

    @property
    @pulumi.getter(name="hstsPreload")
    def hsts_preload(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "hsts_preload")

    @property
    @pulumi.getter(name="insertHeaders")
    def insert_headers(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "insert_headers")

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "loadbalancer_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "protocol_port")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sniContainerRefs")
    def sni_container_refs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "sni_container_refs")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeoutClientData")
    def timeout_client_data(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout_client_data")

    @property
    @pulumi.getter(name="timeoutMemberConnect")
    def timeout_member_connect(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout_member_connect")

    @property
    @pulumi.getter(name="timeoutMemberData")
    def timeout_member_data(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout_member_data")

    @property
    @pulumi.getter(name="timeoutTcpInspect")
    def timeout_tcp_inspect(self) -> pulumi.Output[int]:
        return pulumi.get(self, "timeout_tcp_inspect")

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tls_ciphers")

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "tls_versions")

