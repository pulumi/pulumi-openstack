# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ShareExportLocation',
    'GetShareExportLocationResult',
]

@pulumi.output_type
class ShareExportLocation(dict):
    def __init__(__self__, *,
                 path: Optional[str] = None,
                 preferred: Optional[str] = None):
        ShareExportLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            preferred=preferred,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: Optional[str] = None,
             preferred: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if path is not None:
            _setter("path", path)
        if preferred is not None:
            _setter("preferred", preferred)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def preferred(self) -> Optional[str]:
        return pulumi.get(self, "preferred")


@pulumi.output_type
class GetShareExportLocationResult(dict):
    def __init__(__self__, *,
                 path: str,
                 preferred: str):
        GetShareExportLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            preferred=preferred,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: Optional[str] = None,
             preferred: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if path is None:
            raise TypeError("Missing 'path' argument")
        if preferred is None:
            raise TypeError("Missing 'preferred' argument")

        _setter("path", path)
        _setter("preferred", preferred)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def preferred(self) -> str:
        return pulumi.get(self, "preferred")


