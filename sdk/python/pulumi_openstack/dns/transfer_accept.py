# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TransferAcceptArgs', 'TransferAccept']

@pulumi.input_type
class TransferAcceptArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 zone_transfer_request_id: pulumi.Input[str],
                 disable_status_check: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a TransferAccept resource.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "zone_transfer_request_id", zone_transfer_request_id)
        if disable_status_check is not None:
            pulumi.set(__self__, "disable_status_check", disable_status_check)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="zoneTransferRequestId")
    def zone_transfer_request_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "zone_transfer_request_id")

    @zone_transfer_request_id.setter
    def zone_transfer_request_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_transfer_request_id", value)

    @property
    @pulumi.getter(name="disableStatusCheck")
    def disable_status_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_status_check")

    @disable_status_check.setter
    def disable_status_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_status_check", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "value_specs", value)


@pulumi.input_type
class _TransferAcceptState:
    def __init__(__self__, *,
                 disable_status_check: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 zone_transfer_request_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TransferAccept resources.
        """
        if disable_status_check is not None:
            pulumi.set(__self__, "disable_status_check", disable_status_check)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if value_specs is not None:
            pulumi.set(__self__, "value_specs", value_specs)
        if zone_transfer_request_id is not None:
            pulumi.set(__self__, "zone_transfer_request_id", zone_transfer_request_id)

    @property
    @pulumi.getter(name="disableStatusCheck")
    def disable_status_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_status_check")

    @disable_status_check.setter
    def disable_status_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_status_check", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "value_specs")

    @value_specs.setter
    def value_specs(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "value_specs", value)

    @property
    @pulumi.getter(name="zoneTransferRequestId")
    def zone_transfer_request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone_transfer_request_id")

    @zone_transfer_request_id.setter
    def zone_transfer_request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_transfer_request_id", value)


class TransferAccept(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_status_check: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 zone_transfer_request_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a TransferAccept resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransferAcceptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TransferAccept resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TransferAcceptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransferAcceptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_status_check: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 value_specs: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 zone_transfer_request_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransferAcceptArgs.__new__(TransferAcceptArgs)

            __props__.__dict__["disable_status_check"] = disable_status_check
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["region"] = region
            __props__.__dict__["value_specs"] = value_specs
            if zone_transfer_request_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_transfer_request_id'")
            __props__.__dict__["zone_transfer_request_id"] = zone_transfer_request_id
        super(TransferAccept, __self__).__init__(
            'openstack:dns/transferAccept:TransferAccept',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            disable_status_check: Optional[pulumi.Input[bool]] = None,
            key: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            value_specs: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            zone_transfer_request_id: Optional[pulumi.Input[str]] = None) -> 'TransferAccept':
        """
        Get an existing TransferAccept resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransferAcceptState.__new__(_TransferAcceptState)

        __props__.__dict__["disable_status_check"] = disable_status_check
        __props__.__dict__["key"] = key
        __props__.__dict__["region"] = region
        __props__.__dict__["value_specs"] = value_specs
        __props__.__dict__["zone_transfer_request_id"] = zone_transfer_request_id
        return TransferAccept(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="disableStatusCheck")
    def disable_status_check(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disable_status_check")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="valueSpecs")
    def value_specs(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "value_specs")

    @property
    @pulumi.getter(name="zoneTransferRequestId")
    def zone_transfer_request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "zone_transfer_request_id")

