# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetQosBandwidthLimitRuleResult',
    'AwaitableGetQosBandwidthLimitRuleResult',
    'get_qos_bandwidth_limit_rule',
    'get_qos_bandwidth_limit_rule_output',
]

@pulumi.output_type
class GetQosBandwidthLimitRuleResult:
    """
    A collection of values returned by getQosBandwidthLimitRule.
    """
    def __init__(__self__, direction=None, id=None, max_burst_kbps=None, max_kbps=None, qos_policy_id=None, region=None):
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_burst_kbps and not isinstance(max_burst_kbps, int):
            raise TypeError("Expected argument 'max_burst_kbps' to be a int")
        pulumi.set(__self__, "max_burst_kbps", max_burst_kbps)
        if max_kbps and not isinstance(max_kbps, int):
            raise TypeError("Expected argument 'max_kbps' to be a int")
        pulumi.set(__self__, "max_kbps", max_kbps)
        if qos_policy_id and not isinstance(qos_policy_id, str):
            raise TypeError("Expected argument 'qos_policy_id' to be a str")
        pulumi.set(__self__, "qos_policy_id", qos_policy_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxBurstKbps")
    def max_burst_kbps(self) -> int:
        return pulumi.get(self, "max_burst_kbps")

    @property
    @pulumi.getter(name="maxKbps")
    def max_kbps(self) -> int:
        return pulumi.get(self, "max_kbps")

    @property
    @pulumi.getter(name="qosPolicyId")
    def qos_policy_id(self) -> str:
        return pulumi.get(self, "qos_policy_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


class AwaitableGetQosBandwidthLimitRuleResult(GetQosBandwidthLimitRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQosBandwidthLimitRuleResult(
            direction=self.direction,
            id=self.id,
            max_burst_kbps=self.max_burst_kbps,
            max_kbps=self.max_kbps,
            qos_policy_id=self.qos_policy_id,
            region=self.region)


def get_qos_bandwidth_limit_rule(max_burst_kbps: Optional[int] = None,
                                 max_kbps: Optional[int] = None,
                                 qos_policy_id: Optional[str] = None,
                                 region: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQosBandwidthLimitRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['maxBurstKbps'] = max_burst_kbps
    __args__['maxKbps'] = max_kbps
    __args__['qosPolicyId'] = qos_policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('openstack:networking/getQosBandwidthLimitRule:getQosBandwidthLimitRule', __args__, opts=opts, typ=GetQosBandwidthLimitRuleResult).value

    return AwaitableGetQosBandwidthLimitRuleResult(
        direction=pulumi.get(__ret__, 'direction'),
        id=pulumi.get(__ret__, 'id'),
        max_burst_kbps=pulumi.get(__ret__, 'max_burst_kbps'),
        max_kbps=pulumi.get(__ret__, 'max_kbps'),
        qos_policy_id=pulumi.get(__ret__, 'qos_policy_id'),
        region=pulumi.get(__ret__, 'region'))


@_utilities.lift_output_func(get_qos_bandwidth_limit_rule)
def get_qos_bandwidth_limit_rule_output(max_burst_kbps: Optional[pulumi.Input[Optional[int]]] = None,
                                        max_kbps: Optional[pulumi.Input[Optional[int]]] = None,
                                        qos_policy_id: Optional[pulumi.Input[str]] = None,
                                        region: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQosBandwidthLimitRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
