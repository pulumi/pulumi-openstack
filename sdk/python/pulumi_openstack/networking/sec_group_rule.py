# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class SecGroupRule(pulumi.CustomResource):
    """
    Manages a V2 neutron security group rule resource within OpenStack.
    Unlike Nova security groups, neutron separates the group from the rules
    and also allows an admin to target a specific tenant_id.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, direction=None, ethertype=None, port_range_max=None, port_range_min=None, protocol=None, region=None, remote_group_id=None, remote_ip_prefix=None, security_group_id=None, tenant_id=None):
        """Create a SecGroupRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        if not direction:
            raise TypeError('Missing required property direction')
        __props__['direction'] = direction

        if not ethertype:
            raise TypeError('Missing required property ethertype')
        __props__['ethertype'] = ethertype

        __props__['port_range_max'] = port_range_max

        __props__['port_range_min'] = port_range_min

        __props__['protocol'] = protocol

        __props__['region'] = region

        __props__['remote_group_id'] = remote_group_id

        __props__['remote_ip_prefix'] = remote_ip_prefix

        if not security_group_id:
            raise TypeError('Missing required property security_group_id')
        __props__['security_group_id'] = security_group_id

        __props__['tenant_id'] = tenant_id

        super(SecGroupRule, __self__).__init__(
            'openstack:networking/secGroupRule:SecGroupRule',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

