# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NetworkSegment',
    'PortAllowedAddressPair',
    'PortBinding',
    'PortExtraDhcpOption',
    'PortFixedIp',
    'RouterExternalFixedIp',
    'RouterVendorOptions',
    'SubnetAllocationPool',
    'SubnetAllocationPoolsCollection',
    'SubnetHostRoute',
    'TrunkSubPort',
    'GetNetworkSegmentResult',
    'GetPortAllowedAddressPairResult',
    'GetPortBindingResult',
    'GetPortExtraDhcpOptionResult',
    'GetRouterExternalFixedIpResult',
    'GetSubnetAllocationPoolResult',
    'GetSubnetHostRouteResult',
    'GetTrunkSubPortResult',
]

@pulumi.output_type
class NetworkSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkType":
            suggest = "network_type"
        elif key == "physicalNetwork":
            suggest = "physical_network"
        elif key == "segmentationId":
            suggest = "segmentation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_type: Optional[str] = None,
                 physical_network: Optional[str] = None,
                 segmentation_id: Optional[int] = None):
        """
        :param str network_type: The type of physical network.
        :param str physical_network: The physical network where this network is implemented.
        :param int segmentation_id: An isolated segment on the physical network.
        """
        NetworkSegment._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_type=network_type,
            physical_network=physical_network,
            segmentation_id=segmentation_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_type: Optional[str] = None,
             physical_network: Optional[str] = None,
             segmentation_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if network_type is None and 'networkType' in kwargs:
            network_type = kwargs['networkType']
        if physical_network is None and 'physicalNetwork' in kwargs:
            physical_network = kwargs['physicalNetwork']
        if segmentation_id is None and 'segmentationId' in kwargs:
            segmentation_id = kwargs['segmentationId']

        if network_type is not None:
            _setter("network_type", network_type)
        if physical_network is not None:
            _setter("physical_network", physical_network)
        if segmentation_id is not None:
            _setter("segmentation_id", segmentation_id)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        """
        The type of physical network.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="physicalNetwork")
    def physical_network(self) -> Optional[str]:
        """
        The physical network where this network is implemented.
        """
        return pulumi.get(self, "physical_network")

    @property
    @pulumi.getter(name="segmentationId")
    def segmentation_id(self) -> Optional[int]:
        """
        An isolated segment on the physical network.
        """
        return pulumi.get(self, "segmentation_id")


@pulumi.output_type
class PortAllowedAddressPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortAllowedAddressPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortAllowedAddressPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortAllowedAddressPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 mac_address: Optional[str] = None):
        """
        :param str ip_address: The additional IP address.
        :param str mac_address: The additional MAC address.
        """
        PortAllowedAddressPair._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_address=ip_address,
            mac_address=mac_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_address: Optional[str] = None,
             mac_address: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if ip_address is None:
            raise TypeError("Missing 'ip_address' argument")
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']

        _setter("ip_address", ip_address)
        if mac_address is not None:
            _setter("mac_address", mac_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        The additional IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        The additional MAC address.
        """
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class PortBinding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostId":
            suggest = "host_id"
        elif key == "vifDetails":
            suggest = "vif_details"
        elif key == "vifType":
            suggest = "vif_type"
        elif key == "vnicType":
            suggest = "vnic_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortBinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortBinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortBinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_id: Optional[str] = None,
                 profile: Optional[str] = None,
                 vif_details: Optional[Mapping[str, Any]] = None,
                 vif_type: Optional[str] = None,
                 vnic_type: Optional[str] = None):
        """
        :param str host_id: The ID of the host to allocate port on.
        :param str profile: Custom data to be passed as `binding:profile`. Data
               must be passed as JSON.
        :param Mapping[str, Any] vif_details: A map of JSON strings containing additional
               details for this specific binding.
        :param str vif_type: The VNIC type of the port binding.
        :param str vnic_type: VNIC type for the port. Can either be `direct`,
               `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
               Default value is `normal`.
        """
        PortBinding._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_id=host_id,
            profile=profile,
            vif_details=vif_details,
            vif_type=vif_type,
            vnic_type=vnic_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_id: Optional[str] = None,
             profile: Optional[str] = None,
             vif_details: Optional[Mapping[str, Any]] = None,
             vif_type: Optional[str] = None,
             vnic_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if host_id is None and 'hostId' in kwargs:
            host_id = kwargs['hostId']
        if vif_details is None and 'vifDetails' in kwargs:
            vif_details = kwargs['vifDetails']
        if vif_type is None and 'vifType' in kwargs:
            vif_type = kwargs['vifType']
        if vnic_type is None and 'vnicType' in kwargs:
            vnic_type = kwargs['vnicType']

        if host_id is not None:
            _setter("host_id", host_id)
        if profile is not None:
            _setter("profile", profile)
        if vif_details is not None:
            _setter("vif_details", vif_details)
        if vif_type is not None:
            _setter("vif_type", vif_type)
        if vnic_type is not None:
            _setter("vnic_type", vnic_type)

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[str]:
        """
        The ID of the host to allocate port on.
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        Custom data to be passed as `binding:profile`. Data
        must be passed as JSON.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="vifDetails")
    def vif_details(self) -> Optional[Mapping[str, Any]]:
        """
        A map of JSON strings containing additional
        details for this specific binding.
        """
        return pulumi.get(self, "vif_details")

    @property
    @pulumi.getter(name="vifType")
    def vif_type(self) -> Optional[str]:
        """
        The VNIC type of the port binding.
        """
        return pulumi.get(self, "vif_type")

    @property
    @pulumi.getter(name="vnicType")
    def vnic_type(self) -> Optional[str]:
        """
        VNIC type for the port. Can either be `direct`,
        `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
        Default value is `normal`.
        """
        return pulumi.get(self, "vnic_type")


@pulumi.output_type
class PortExtraDhcpOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortExtraDhcpOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortExtraDhcpOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortExtraDhcpOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value: str,
                 ip_version: Optional[int] = None):
        """
        :param str name: Name of the DHCP option.
        :param str value: Value of the DHCP option.
        :param int ip_version: IP protocol version. Defaults to 4.
        """
        PortExtraDhcpOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
            ip_version=ip_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             ip_version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")
        if ip_version is None and 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']

        _setter("name", name)
        _setter("value", value)
        if ip_version is not None:
            _setter("ip_version", ip_version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the DHCP option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the DHCP option.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[int]:
        """
        IP protocol version. Defaults to 4.
        """
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class PortFixedIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortFixedIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortFixedIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortFixedIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 ip_address: Optional[str] = None):
        """
        :param str subnet_id: Subnet in which to allocate IP address for
               this port.
        :param str ip_address: IP address desired in the subnet for this port. If
               you don't specify `ip_address`, an available IP address from the specified
               subnet will be allocated to this port. This field will not be populated if it
               is left blank or omitted. To retrieve the assigned IP address, use the
               `all_fixed_ips` attribute.
        """
        PortFixedIp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_id=subnet_id,
            ip_address=ip_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_id: Optional[str] = None,
             ip_address: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']

        _setter("subnet_id", subnet_id)
        if ip_address is not None:
            _setter("ip_address", ip_address)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet in which to allocate IP address for
        this port.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        IP address desired in the subnet for this port. If
        you don't specify `ip_address`, an available IP address from the specified
        subnet will be allocated to this port. This field will not be populated if it
        is left blank or omitted. To retrieve the assigned IP address, use the
        `all_fixed_ips` attribute.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class RouterExternalFixedIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterExternalFixedIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterExternalFixedIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterExternalFixedIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str ip_address: The IP address to set on the router.
        :param str subnet_id: Subnet in which the fixed IP belongs to.
        """
        RouterExternalFixedIp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_address=ip_address,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_address: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']

        if ip_address is not None:
            _setter("ip_address", ip_address)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The IP address to set on the router.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet in which the fixed IP belongs to.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class RouterVendorOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "setRouterGatewayAfterCreate":
            suggest = "set_router_gateway_after_create"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouterVendorOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouterVendorOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouterVendorOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 set_router_gateway_after_create: Optional[bool] = None):
        """
        :param bool set_router_gateway_after_create: Boolean to control whether
               the Router gateway is assigned during creation or updated after creation.
        """
        RouterVendorOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            set_router_gateway_after_create=set_router_gateway_after_create,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             set_router_gateway_after_create: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if set_router_gateway_after_create is None and 'setRouterGatewayAfterCreate' in kwargs:
            set_router_gateway_after_create = kwargs['setRouterGatewayAfterCreate']

        if set_router_gateway_after_create is not None:
            _setter("set_router_gateway_after_create", set_router_gateway_after_create)

    @property
    @pulumi.getter(name="setRouterGatewayAfterCreate")
    def set_router_gateway_after_create(self) -> Optional[bool]:
        """
        Boolean to control whether
        the Router gateway is assigned during creation or updated after creation.
        """
        return pulumi.get(self, "set_router_gateway_after_create")


@pulumi.output_type
class SubnetAllocationPool(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        """
        :param str end: The ending address.
        :param str start: The starting address.
        """
        SubnetAllocationPool._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: Optional[str] = None,
             start: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if end is None:
            raise TypeError("Missing 'end' argument")
        if start is None:
            raise TypeError("Missing 'start' argument")

        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        """
        The ending address.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        The starting address.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class SubnetAllocationPoolsCollection(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        """
        :param str end: The ending address.
        :param str start: The starting address.
        """
        SubnetAllocationPoolsCollection._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: Optional[str] = None,
             start: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if end is None:
            raise TypeError("Missing 'end' argument")
        if start is None:
            raise TypeError("Missing 'start' argument")

        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        """
        The ending address.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        The starting address.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class SubnetHostRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationCidr":
            suggest = "destination_cidr"
        elif key == "nextHop":
            suggest = "next_hop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubnetHostRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubnetHostRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubnetHostRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_cidr: str,
                 next_hop: str):
        """
        :param str destination_cidr: The destination CIDR.
        :param str next_hop: The next hop in the route.
        """
        SubnetHostRoute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_cidr=destination_cidr,
            next_hop=next_hop,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_cidr: Optional[str] = None,
             next_hop: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination_cidr is None and 'destinationCidr' in kwargs:
            destination_cidr = kwargs['destinationCidr']
        if destination_cidr is None:
            raise TypeError("Missing 'destination_cidr' argument")
        if next_hop is None and 'nextHop' in kwargs:
            next_hop = kwargs['nextHop']
        if next_hop is None:
            raise TypeError("Missing 'next_hop' argument")

        _setter("destination_cidr", destination_cidr)
        _setter("next_hop", next_hop)

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> str:
        """
        The destination CIDR.
        """
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        """
        The next hop in the route.
        """
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class TrunkSubPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portId":
            suggest = "port_id"
        elif key == "segmentationId":
            suggest = "segmentation_id"
        elif key == "segmentationType":
            suggest = "segmentation_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrunkSubPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrunkSubPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrunkSubPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_id: str,
                 segmentation_id: int,
                 segmentation_type: str):
        """
        :param str port_id: The ID of the port to be made a subport of the trunk.
        :param int segmentation_id: The numeric id of the subport segment.
        :param str segmentation_type: The segmentation technology to use, e.g., "vlan".
        """
        TrunkSubPort._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_id=port_id,
            segmentation_id=segmentation_id,
            segmentation_type=segmentation_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_id: Optional[str] = None,
             segmentation_id: Optional[int] = None,
             segmentation_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if port_id is None and 'portId' in kwargs:
            port_id = kwargs['portId']
        if port_id is None:
            raise TypeError("Missing 'port_id' argument")
        if segmentation_id is None and 'segmentationId' in kwargs:
            segmentation_id = kwargs['segmentationId']
        if segmentation_id is None:
            raise TypeError("Missing 'segmentation_id' argument")
        if segmentation_type is None and 'segmentationType' in kwargs:
            segmentation_type = kwargs['segmentationType']
        if segmentation_type is None:
            raise TypeError("Missing 'segmentation_type' argument")

        _setter("port_id", port_id)
        _setter("segmentation_id", segmentation_id)
        _setter("segmentation_type", segmentation_type)

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        The ID of the port to be made a subport of the trunk.
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="segmentationId")
    def segmentation_id(self) -> int:
        """
        The numeric id of the subport segment.
        """
        return pulumi.get(self, "segmentation_id")

    @property
    @pulumi.getter(name="segmentationType")
    def segmentation_type(self) -> str:
        """
        The segmentation technology to use, e.g., "vlan".
        """
        return pulumi.get(self, "segmentation_type")


@pulumi.output_type
class GetNetworkSegmentResult(dict):
    def __init__(__self__, *,
                 network_type: str,
                 physical_network: str,
                 segmentation_id: int):
        GetNetworkSegmentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_type=network_type,
            physical_network=physical_network,
            segmentation_id=segmentation_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_type: Optional[str] = None,
             physical_network: Optional[str] = None,
             segmentation_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if network_type is None and 'networkType' in kwargs:
            network_type = kwargs['networkType']
        if network_type is None:
            raise TypeError("Missing 'network_type' argument")
        if physical_network is None and 'physicalNetwork' in kwargs:
            physical_network = kwargs['physicalNetwork']
        if physical_network is None:
            raise TypeError("Missing 'physical_network' argument")
        if segmentation_id is None and 'segmentationId' in kwargs:
            segmentation_id = kwargs['segmentationId']
        if segmentation_id is None:
            raise TypeError("Missing 'segmentation_id' argument")

        _setter("network_type", network_type)
        _setter("physical_network", physical_network)
        _setter("segmentation_id", segmentation_id)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="physicalNetwork")
    def physical_network(self) -> str:
        return pulumi.get(self, "physical_network")

    @property
    @pulumi.getter(name="segmentationId")
    def segmentation_id(self) -> int:
        return pulumi.get(self, "segmentation_id")


@pulumi.output_type
class GetPortAllowedAddressPairResult(dict):
    def __init__(__self__, *,
                 ip_address: str,
                 mac_address: str):
        """
        :param str ip_address: The additional IP address.
        :param str mac_address: The MAC address of the port.
        """
        GetPortAllowedAddressPairResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_address=ip_address,
            mac_address=mac_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_address: Optional[str] = None,
             mac_address: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if ip_address is None:
            raise TypeError("Missing 'ip_address' argument")
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']
        if mac_address is None:
            raise TypeError("Missing 'mac_address' argument")

        _setter("ip_address", ip_address)
        _setter("mac_address", mac_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        The additional IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        The MAC address of the port.
        """
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class GetPortBindingResult(dict):
    def __init__(__self__, *,
                 host_id: str,
                 profile: str,
                 vif_details: Mapping[str, Any],
                 vif_type: str,
                 vnic_type: str):
        """
        :param str host_id: The ID of the host, which has the allocatee port.
        :param str profile: A JSON string containing the binding profile information.
        :param Mapping[str, Any] vif_details: A map of JSON strings containing additional details for this
               specific binding.
        :param str vif_type: The VNIC type of the port binding.
        :param str vnic_type: VNIC type for the port.
        """
        GetPortBindingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_id=host_id,
            profile=profile,
            vif_details=vif_details,
            vif_type=vif_type,
            vnic_type=vnic_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_id: Optional[str] = None,
             profile: Optional[str] = None,
             vif_details: Optional[Mapping[str, Any]] = None,
             vif_type: Optional[str] = None,
             vnic_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if host_id is None and 'hostId' in kwargs:
            host_id = kwargs['hostId']
        if host_id is None:
            raise TypeError("Missing 'host_id' argument")
        if profile is None:
            raise TypeError("Missing 'profile' argument")
        if vif_details is None and 'vifDetails' in kwargs:
            vif_details = kwargs['vifDetails']
        if vif_details is None:
            raise TypeError("Missing 'vif_details' argument")
        if vif_type is None and 'vifType' in kwargs:
            vif_type = kwargs['vifType']
        if vif_type is None:
            raise TypeError("Missing 'vif_type' argument")
        if vnic_type is None and 'vnicType' in kwargs:
            vnic_type = kwargs['vnicType']
        if vnic_type is None:
            raise TypeError("Missing 'vnic_type' argument")

        _setter("host_id", host_id)
        _setter("profile", profile)
        _setter("vif_details", vif_details)
        _setter("vif_type", vif_type)
        _setter("vnic_type", vnic_type)

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> str:
        """
        The ID of the host, which has the allocatee port.
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        A JSON string containing the binding profile information.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="vifDetails")
    def vif_details(self) -> Mapping[str, Any]:
        """
        A map of JSON strings containing additional details for this
        specific binding.
        """
        return pulumi.get(self, "vif_details")

    @property
    @pulumi.getter(name="vifType")
    def vif_type(self) -> str:
        """
        The VNIC type of the port binding.
        """
        return pulumi.get(self, "vif_type")

    @property
    @pulumi.getter(name="vnicType")
    def vnic_type(self) -> str:
        """
        VNIC type for the port.
        """
        return pulumi.get(self, "vnic_type")


@pulumi.output_type
class GetPortExtraDhcpOptionResult(dict):
    def __init__(__self__, *,
                 ip_version: int,
                 name: str,
                 value: str):
        """
        :param int ip_version: IP protocol version
        :param str name: The name of the port.
        :param str value: Value of the DHCP option.
        """
        GetPortExtraDhcpOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_version=ip_version,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_version: Optional[int] = None,
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ip_version is None and 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']
        if ip_version is None:
            raise TypeError("Missing 'ip_version' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("ip_version", ip_version)
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> int:
        """
        IP protocol version
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the port.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the DHCP option.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRouterExternalFixedIpResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str ip_address: The IP address to set on the router.
        :param str subnet_id: Subnet in which the fixed IP belongs to.
        """
        GetRouterExternalFixedIpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_address=ip_address,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_address: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']

        if ip_address is not None:
            _setter("ip_address", ip_address)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The IP address to set on the router.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet in which the fixed IP belongs to.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetSubnetAllocationPoolResult(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        GetSubnetAllocationPoolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: Optional[str] = None,
             start: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if end is None:
            raise TypeError("Missing 'end' argument")
        if start is None:
            raise TypeError("Missing 'start' argument")

        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetSubnetHostRouteResult(dict):
    def __init__(__self__, *,
                 destination_cidr: str,
                 next_hop: str):
        GetSubnetHostRouteResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_cidr=destination_cidr,
            next_hop=next_hop,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_cidr: Optional[str] = None,
             next_hop: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination_cidr is None and 'destinationCidr' in kwargs:
            destination_cidr = kwargs['destinationCidr']
        if destination_cidr is None:
            raise TypeError("Missing 'destination_cidr' argument")
        if next_hop is None and 'nextHop' in kwargs:
            next_hop = kwargs['nextHop']
        if next_hop is None:
            raise TypeError("Missing 'next_hop' argument")

        _setter("destination_cidr", destination_cidr)
        _setter("next_hop", next_hop)

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> str:
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class GetTrunkSubPortResult(dict):
    def __init__(__self__, *,
                 port_id: str,
                 segmentation_id: int,
                 segmentation_type: str):
        """
        :param str port_id: The ID of the trunk parent port.
        :param int segmentation_id: The numeric id of the subport segment.
        :param str segmentation_type: The segmenation tecnology used, e.g., "vlan".
        """
        GetTrunkSubPortResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_id=port_id,
            segmentation_id=segmentation_id,
            segmentation_type=segmentation_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_id: Optional[str] = None,
             segmentation_id: Optional[int] = None,
             segmentation_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if port_id is None and 'portId' in kwargs:
            port_id = kwargs['portId']
        if port_id is None:
            raise TypeError("Missing 'port_id' argument")
        if segmentation_id is None and 'segmentationId' in kwargs:
            segmentation_id = kwargs['segmentationId']
        if segmentation_id is None:
            raise TypeError("Missing 'segmentation_id' argument")
        if segmentation_type is None and 'segmentationType' in kwargs:
            segmentation_type = kwargs['segmentationType']
        if segmentation_type is None:
            raise TypeError("Missing 'segmentation_type' argument")

        _setter("port_id", port_id)
        _setter("segmentation_id", segmentation_id)
        _setter("segmentation_type", segmentation_type)

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        The ID of the trunk parent port.
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="segmentationId")
    def segmentation_id(self) -> int:
        """
        The numeric id of the subport segment.
        """
        return pulumi.get(self, "segmentation_id")

    @property
    @pulumi.getter(name="segmentationType")
    def segmentation_type(self) -> str:
        """
        The segmenation tecnology used, e.g., "vlan".
        """
        return pulumi.get(self, "segmentation_type")


