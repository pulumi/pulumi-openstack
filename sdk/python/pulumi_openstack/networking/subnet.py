# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Subnet(pulumi.CustomResource):
    """
    Manages a V2 Neutron subnet resource within OpenStack.
    """
    def __init__(__self__, __name__, __opts__=None, allocation_pools=None, cidr=None, dns_nameservers=None, enable_dhcp=None, gateway_ip=None, host_routes=None, ip_version=None, ipv6_address_mode=None, ipv6_ra_mode=None, name=None, network_id=None, no_gateway=None, region=None, subnetpool_id=None, tenant_id=None, value_specs=None):
        """Create a Subnet resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['allocationPools'] = allocation_pools

        __props__['cidr'] = cidr

        __props__['dnsNameservers'] = dns_nameservers

        __props__['enableDhcp'] = enable_dhcp

        __props__['gatewayIp'] = gateway_ip

        __props__['hostRoutes'] = host_routes

        __props__['ipVersion'] = ip_version

        __props__['ipv6AddressMode'] = ipv6_address_mode

        __props__['ipv6RaMode'] = ipv6_ra_mode

        __props__['name'] = name

        if not network_id:
            raise TypeError('Missing required property network_id')
        __props__['networkId'] = network_id

        __props__['noGateway'] = no_gateway

        __props__['region'] = region

        __props__['subnetpoolId'] = subnetpool_id

        __props__['tenantId'] = tenant_id

        __props__['valueSpecs'] = value_specs

        super(Subnet, __self__).__init__(
            'openstack:networking/subnet:Subnet',
            __name__,
            __props__,
            __opts__)

