# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class Subnet(pulumi.CustomResource):
    """
    Manages a V2 Neutron subnet resource within OpenStack.
    """
    def __init__(__self__, __name__, __opts__=None, allocation_pools=None, cidr=None, dns_nameservers=None, enable_dhcp=None, gateway_ip=None, host_routes=None, ip_version=None, ipv6_address_mode=None, ipv6_ra_mode=None, name=None, network_id=None, no_gateway=None, region=None, subnetpool_id=None, tenant_id=None, value_specs=None):
        """Create a Subnet resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['allocation_pools'] = allocation_pools

        __props__['cidr'] = cidr

        __props__['dns_nameservers'] = dns_nameservers

        __props__['enable_dhcp'] = enable_dhcp

        __props__['gateway_ip'] = gateway_ip

        __props__['host_routes'] = host_routes

        __props__['ip_version'] = ip_version

        __props__['ipv6_address_mode'] = ipv6_address_mode

        __props__['ipv6_ra_mode'] = ipv6_ra_mode

        __props__['name'] = name

        if not network_id:
            raise TypeError('Missing required property network_id')
        __props__['network_id'] = network_id

        __props__['no_gateway'] = no_gateway

        __props__['region'] = region

        __props__['subnetpool_id'] = subnetpool_id

        __props__['tenant_id'] = tenant_id

        __props__['value_specs'] = value_specs

        super(Subnet, __self__).__init__(
            'openstack:networking/subnet:Subnet',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

