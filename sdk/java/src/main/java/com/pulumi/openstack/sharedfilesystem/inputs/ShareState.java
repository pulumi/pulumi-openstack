// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.sharedfilesystem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.openstack.sharedfilesystem.inputs.ShareExportLocationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShareState extends com.pulumi.resources.ResourceArgs {

    public static final ShareState Empty = new ShareState();

    /**
     * The map of metadata, assigned on the share, which has been
     * explicitly and implicitly added.
     * 
     */
    @Import(name="allMetadata")
    private @Nullable Output<Map<String,String>> allMetadata;

    /**
     * @return The map of metadata, assigned on the share, which has been
     * explicitly and implicitly added.
     * 
     */
    public Optional<Output<Map<String,String>>> allMetadata() {
        return Optional.ofNullable(this.allMetadata);
    }

    /**
     * The share availability zone. Changing this creates a
     * new share.
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return The share availability zone. Changing this creates a
     * new share.
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * The human-readable description for the share.
     * Changing this updates the description of the existing share.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The human-readable description for the share.
     * Changing this updates the description of the existing share.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of export locations. For example, when a share server
     * has more than one network interface, it can have multiple export locations.
     * 
     */
    @Import(name="exportLocations")
    private @Nullable Output<List<ShareExportLocationArgs>> exportLocations;

    /**
     * @return A list of export locations. For example, when a share server
     * has more than one network interface, it can have multiple export locations.
     * 
     */
    public Optional<Output<List<ShareExportLocationArgs>>> exportLocations() {
        return Optional.ofNullable(this.exportLocations);
    }

    /**
     * Indicates whether a share has replicas or not.
     * 
     */
    @Import(name="hasReplicas")
    private @Nullable Output<Boolean> hasReplicas;

    /**
     * @return Indicates whether a share has replicas or not.
     * 
     */
    public Optional<Output<Boolean>> hasReplicas() {
        return Optional.ofNullable(this.hasReplicas);
    }

    /**
     * The share host name.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The share host name.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The level of visibility for the share. Set to true to make
     * share public. Set to false to make it private. Default value is false. Changing this
     * updates the existing share.
     * 
     */
    @Import(name="isPublic")
    private @Nullable Output<Boolean> isPublic;

    /**
     * @return The level of visibility for the share. Set to true to make
     * share public. Set to false to make it private. Default value is false. Changing this
     * updates the existing share.
     * 
     */
    public Optional<Output<Boolean>> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }

    /**
     * One or more metadata key and value pairs as a dictionary of
     * strings.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return One or more metadata key and value pairs as a dictionary of
     * strings.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the share. Changing this updates the name
     * of the existing share.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the share. Changing this updates the name
     * of the existing share.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner of the Share.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The owner of the Share.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to create a share. Changing this
     * creates a new share.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to create a share. Changing this
     * creates a new share.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The share replication type.
     * 
     */
    @Import(name="replicationType")
    private @Nullable Output<String> replicationType;

    /**
     * @return The share replication type.
     * 
     */
    public Optional<Output<String>> replicationType() {
        return Optional.ofNullable(this.replicationType);
    }

    /**
     * The UUID of a share network where the share server exists
     * or will be created. If `share_network_id` is not set and you provide a `snapshot_id`,
     * the share_network_id value from the snapshot is used. Changing this creates a new share.
     * 
     */
    @Import(name="shareNetworkId")
    private @Nullable Output<String> shareNetworkId;

    /**
     * @return The UUID of a share network where the share server exists
     * or will be created. If `share_network_id` is not set and you provide a `snapshot_id`,
     * the share_network_id value from the snapshot is used. Changing this creates a new share.
     * 
     */
    public Optional<Output<String>> shareNetworkId() {
        return Optional.ofNullable(this.shareNetworkId);
    }

    /**
     * The share protocol - can either be NFS, CIFS,
     * CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
     * 
     */
    @Import(name="shareProto")
    private @Nullable Output<String> shareProto;

    /**
     * @return The share protocol - can either be NFS, CIFS,
     * CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
     * 
     */
    public Optional<Output<String>> shareProto() {
        return Optional.ofNullable(this.shareProto);
    }

    /**
     * The UUID of the share server.
     * 
     */
    @Import(name="shareServerId")
    private @Nullable Output<String> shareServerId;

    /**
     * @return The UUID of the share server.
     * 
     */
    public Optional<Output<String>> shareServerId() {
        return Optional.ofNullable(this.shareServerId);
    }

    /**
     * The share type name. If you omit this parameter, the default
     * share type is used.
     * 
     */
    @Import(name="shareType")
    private @Nullable Output<String> shareType;

    /**
     * @return The share type name. If you omit this parameter, the default
     * share type is used.
     * 
     */
    public Optional<Output<String>> shareType() {
        return Optional.ofNullable(this.shareType);
    }

    /**
     * The share size, in GBs. The requested share size cannot be greater
     * than the allowed GB quota. Changing this resizes the existing share.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The share size, in GBs. The requested share size cannot be greater
     * than the allowed GB quota. Changing this resizes the existing share.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The UUID of the share&#39;s base snapshot. Changing this creates
     * a new share.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The UUID of the share&#39;s base snapshot. Changing this creates
     * a new share.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    private ShareState() {}

    private ShareState(ShareState $) {
        this.allMetadata = $.allMetadata;
        this.availabilityZone = $.availabilityZone;
        this.description = $.description;
        this.exportLocations = $.exportLocations;
        this.hasReplicas = $.hasReplicas;
        this.host = $.host;
        this.isPublic = $.isPublic;
        this.metadata = $.metadata;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
        this.replicationType = $.replicationType;
        this.shareNetworkId = $.shareNetworkId;
        this.shareProto = $.shareProto;
        this.shareServerId = $.shareServerId;
        this.shareType = $.shareType;
        this.size = $.size;
        this.snapshotId = $.snapshotId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShareState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShareState $;

        public Builder() {
            $ = new ShareState();
        }

        public Builder(ShareState defaults) {
            $ = new ShareState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allMetadata The map of metadata, assigned on the share, which has been
         * explicitly and implicitly added.
         * 
         * @return builder
         * 
         */
        public Builder allMetadata(@Nullable Output<Map<String,String>> allMetadata) {
            $.allMetadata = allMetadata;
            return this;
        }

        /**
         * @param allMetadata The map of metadata, assigned on the share, which has been
         * explicitly and implicitly added.
         * 
         * @return builder
         * 
         */
        public Builder allMetadata(Map<String,String> allMetadata) {
            return allMetadata(Output.of(allMetadata));
        }

        /**
         * @param availabilityZone The share availability zone. Changing this creates a
         * new share.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone The share availability zone. Changing this creates a
         * new share.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param description The human-readable description for the share.
         * Changing this updates the description of the existing share.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The human-readable description for the share.
         * Changing this updates the description of the existing share.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param exportLocations A list of export locations. For example, when a share server
         * has more than one network interface, it can have multiple export locations.
         * 
         * @return builder
         * 
         */
        public Builder exportLocations(@Nullable Output<List<ShareExportLocationArgs>> exportLocations) {
            $.exportLocations = exportLocations;
            return this;
        }

        /**
         * @param exportLocations A list of export locations. For example, when a share server
         * has more than one network interface, it can have multiple export locations.
         * 
         * @return builder
         * 
         */
        public Builder exportLocations(List<ShareExportLocationArgs> exportLocations) {
            return exportLocations(Output.of(exportLocations));
        }

        /**
         * @param exportLocations A list of export locations. For example, when a share server
         * has more than one network interface, it can have multiple export locations.
         * 
         * @return builder
         * 
         */
        public Builder exportLocations(ShareExportLocationArgs... exportLocations) {
            return exportLocations(List.of(exportLocations));
        }

        /**
         * @param hasReplicas Indicates whether a share has replicas or not.
         * 
         * @return builder
         * 
         */
        public Builder hasReplicas(@Nullable Output<Boolean> hasReplicas) {
            $.hasReplicas = hasReplicas;
            return this;
        }

        /**
         * @param hasReplicas Indicates whether a share has replicas or not.
         * 
         * @return builder
         * 
         */
        public Builder hasReplicas(Boolean hasReplicas) {
            return hasReplicas(Output.of(hasReplicas));
        }

        /**
         * @param host The share host name.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The share host name.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param isPublic The level of visibility for the share. Set to true to make
         * share public. Set to false to make it private. Default value is false. Changing this
         * updates the existing share.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(@Nullable Output<Boolean> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        /**
         * @param isPublic The level of visibility for the share. Set to true to make
         * share public. Set to false to make it private. Default value is false. Changing this
         * updates the existing share.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Boolean isPublic) {
            return isPublic(Output.of(isPublic));
        }

        /**
         * @param metadata One or more metadata key and value pairs as a dictionary of
         * strings.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata One or more metadata key and value pairs as a dictionary of
         * strings.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name The name of the share. Changing this updates the name
         * of the existing share.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the share. Changing this updates the name
         * of the existing share.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The owner of the Share.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The owner of the Share.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * A Shared File System client is needed to create a share. Changing this
         * creates a new share.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * A Shared File System client is needed to create a share. Changing this
         * creates a new share.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param replicationType The share replication type.
         * 
         * @return builder
         * 
         */
        public Builder replicationType(@Nullable Output<String> replicationType) {
            $.replicationType = replicationType;
            return this;
        }

        /**
         * @param replicationType The share replication type.
         * 
         * @return builder
         * 
         */
        public Builder replicationType(String replicationType) {
            return replicationType(Output.of(replicationType));
        }

        /**
         * @param shareNetworkId The UUID of a share network where the share server exists
         * or will be created. If `share_network_id` is not set and you provide a `snapshot_id`,
         * the share_network_id value from the snapshot is used. Changing this creates a new share.
         * 
         * @return builder
         * 
         */
        public Builder shareNetworkId(@Nullable Output<String> shareNetworkId) {
            $.shareNetworkId = shareNetworkId;
            return this;
        }

        /**
         * @param shareNetworkId The UUID of a share network where the share server exists
         * or will be created. If `share_network_id` is not set and you provide a `snapshot_id`,
         * the share_network_id value from the snapshot is used. Changing this creates a new share.
         * 
         * @return builder
         * 
         */
        public Builder shareNetworkId(String shareNetworkId) {
            return shareNetworkId(Output.of(shareNetworkId));
        }

        /**
         * @param shareProto The share protocol - can either be NFS, CIFS,
         * CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
         * 
         * @return builder
         * 
         */
        public Builder shareProto(@Nullable Output<String> shareProto) {
            $.shareProto = shareProto;
            return this;
        }

        /**
         * @param shareProto The share protocol - can either be NFS, CIFS,
         * CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
         * 
         * @return builder
         * 
         */
        public Builder shareProto(String shareProto) {
            return shareProto(Output.of(shareProto));
        }

        /**
         * @param shareServerId The UUID of the share server.
         * 
         * @return builder
         * 
         */
        public Builder shareServerId(@Nullable Output<String> shareServerId) {
            $.shareServerId = shareServerId;
            return this;
        }

        /**
         * @param shareServerId The UUID of the share server.
         * 
         * @return builder
         * 
         */
        public Builder shareServerId(String shareServerId) {
            return shareServerId(Output.of(shareServerId));
        }

        /**
         * @param shareType The share type name. If you omit this parameter, the default
         * share type is used.
         * 
         * @return builder
         * 
         */
        public Builder shareType(@Nullable Output<String> shareType) {
            $.shareType = shareType;
            return this;
        }

        /**
         * @param shareType The share type name. If you omit this parameter, the default
         * share type is used.
         * 
         * @return builder
         * 
         */
        public Builder shareType(String shareType) {
            return shareType(Output.of(shareType));
        }

        /**
         * @param size The share size, in GBs. The requested share size cannot be greater
         * than the allowed GB quota. Changing this resizes the existing share.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The share size, in GBs. The requested share size cannot be greater
         * than the allowed GB quota. Changing this resizes the existing share.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotId The UUID of the share&#39;s base snapshot. Changing this creates
         * a new share.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The UUID of the share&#39;s base snapshot. Changing this creates
         * a new share.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        public ShareState build() {
            return $;
        }
    }

}
