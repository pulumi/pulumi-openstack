// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.bgpvpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2State extends com.pulumi.resources.ResourceArgs {

    public static final V2State Empty = new V2State();

    /**
     * A list of additional Route Targets that will be
     * used for export.
     * 
     */
    @Import(name="exportTargets")
    private @Nullable Output<List<String>> exportTargets;

    /**
     * @return A list of additional Route Targets that will be
     * used for export.
     * 
     */
    public Optional<Output<List<String>>> exportTargets() {
        return Optional.ofNullable(this.exportTargets);
    }

    /**
     * A list of additional Route Targets that will be
     * imported.
     * 
     */
    @Import(name="importTargets")
    private @Nullable Output<List<String>> importTargets;

    /**
     * @return A list of additional Route Targets that will be
     * imported.
     * 
     */
    public Optional<Output<List<String>>> importTargets() {
        return Optional.ofNullable(this.importTargets);
    }

    /**
     * The default BGP LOCAL\_PREF of routes that will be
     * advertised to the BGP VPN, unless overridden per-route.
     * 
     */
    @Import(name="localPref")
    private @Nullable Output<Integer> localPref;

    /**
     * @return The default BGP LOCAL\_PREF of routes that will be
     * advertised to the BGP VPN, unless overridden per-route.
     * 
     */
    public Optional<Output<Integer>> localPref() {
        return Optional.ofNullable(this.localPref);
    }

    /**
     * The name of the BGP VPN. Changing this updates the name of
     * the existing BGP VPN.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the BGP VPN. Changing this updates the name of
     * the existing BGP VPN.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of network IDs that are associated with the BGP VPN.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return A list of network IDs that are associated with the BGP VPN.
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * A list of port IDs that are associated with the BGP VPN.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return A list of port IDs that are associated with the BGP VPN.
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The ID of the project that owns the BGPVPN. Only
     * administrative and users with `advsvc` role can specify a project ID other
     * than their own. Changing this creates a new BGP VPN.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project that owns the BGPVPN. Only
     * administrative and users with `advsvc` role can specify a project ID other
     * than their own. Changing this creates a new BGP VPN.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a BGP VPN service. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * BGP VPN.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a BGP VPN service. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * BGP VPN.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A list of route distinguisher strings. If
     * specified, one of these RDs will be used to advertise VPN routes.
     * 
     */
    @Import(name="routeDistinguishers")
    private @Nullable Output<List<String>> routeDistinguishers;

    /**
     * @return A list of route distinguisher strings. If
     * specified, one of these RDs will be used to advertise VPN routes.
     * 
     */
    public Optional<Output<List<String>>> routeDistinguishers() {
        return Optional.ofNullable(this.routeDistinguishers);
    }

    /**
     * A list of Route Targets that will be both
     * imported and used for export.
     * 
     */
    @Import(name="routeTargets")
    private @Nullable Output<List<String>> routeTargets;

    /**
     * @return A list of Route Targets that will be both
     * imported and used for export.
     * 
     */
    public Optional<Output<List<String>>> routeTargets() {
        return Optional.ofNullable(this.routeTargets);
    }

    /**
     * A list of router IDs that are associated with the BGP VPN.
     * 
     */
    @Import(name="routers")
    private @Nullable Output<List<String>> routers;

    /**
     * @return A list of router IDs that are associated with the BGP VPN.
     * 
     */
    public Optional<Output<List<String>>> routers() {
        return Optional.ofNullable(this.routers);
    }

    /**
     * Indicates whether the BGP VPN is shared across projects.
     * 
     */
    @Import(name="shared")
    private @Nullable Output<Boolean> shared;

    /**
     * @return Indicates whether the BGP VPN is shared across projects.
     * 
     */
    public Optional<Output<Boolean>> shared() {
        return Optional.ofNullable(this.shared);
    }

    /**
     * The type of the BGP VPN (either `l2` or `l3`). Changing this
     * creates a new BGP VPN. Defaults to `l3`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the BGP VPN (either `l2` or `l3`). Changing this
     * creates a new BGP VPN. Defaults to `l3`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The globally-assigned VXLAN VNI for the BGP VPN. Changing
     * this creates a new BGP VPN.
     * 
     */
    @Import(name="vni")
    private @Nullable Output<Integer> vni;

    /**
     * @return The globally-assigned VXLAN VNI for the BGP VPN. Changing
     * this creates a new BGP VPN.
     * 
     */
    public Optional<Output<Integer>> vni() {
        return Optional.ofNullable(this.vni);
    }

    private V2State() {}

    private V2State(V2State $) {
        this.exportTargets = $.exportTargets;
        this.importTargets = $.importTargets;
        this.localPref = $.localPref;
        this.name = $.name;
        this.networks = $.networks;
        this.ports = $.ports;
        this.projectId = $.projectId;
        this.region = $.region;
        this.routeDistinguishers = $.routeDistinguishers;
        this.routeTargets = $.routeTargets;
        this.routers = $.routers;
        this.shared = $.shared;
        this.type = $.type;
        this.vni = $.vni;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2State $;

        public Builder() {
            $ = new V2State();
        }

        public Builder(V2State defaults) {
            $ = new V2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param exportTargets A list of additional Route Targets that will be
         * used for export.
         * 
         * @return builder
         * 
         */
        public Builder exportTargets(@Nullable Output<List<String>> exportTargets) {
            $.exportTargets = exportTargets;
            return this;
        }

        /**
         * @param exportTargets A list of additional Route Targets that will be
         * used for export.
         * 
         * @return builder
         * 
         */
        public Builder exportTargets(List<String> exportTargets) {
            return exportTargets(Output.of(exportTargets));
        }

        /**
         * @param exportTargets A list of additional Route Targets that will be
         * used for export.
         * 
         * @return builder
         * 
         */
        public Builder exportTargets(String... exportTargets) {
            return exportTargets(List.of(exportTargets));
        }

        /**
         * @param importTargets A list of additional Route Targets that will be
         * imported.
         * 
         * @return builder
         * 
         */
        public Builder importTargets(@Nullable Output<List<String>> importTargets) {
            $.importTargets = importTargets;
            return this;
        }

        /**
         * @param importTargets A list of additional Route Targets that will be
         * imported.
         * 
         * @return builder
         * 
         */
        public Builder importTargets(List<String> importTargets) {
            return importTargets(Output.of(importTargets));
        }

        /**
         * @param importTargets A list of additional Route Targets that will be
         * imported.
         * 
         * @return builder
         * 
         */
        public Builder importTargets(String... importTargets) {
            return importTargets(List.of(importTargets));
        }

        /**
         * @param localPref The default BGP LOCAL\_PREF of routes that will be
         * advertised to the BGP VPN, unless overridden per-route.
         * 
         * @return builder
         * 
         */
        public Builder localPref(@Nullable Output<Integer> localPref) {
            $.localPref = localPref;
            return this;
        }

        /**
         * @param localPref The default BGP LOCAL\_PREF of routes that will be
         * advertised to the BGP VPN, unless overridden per-route.
         * 
         * @return builder
         * 
         */
        public Builder localPref(Integer localPref) {
            return localPref(Output.of(localPref));
        }

        /**
         * @param name The name of the BGP VPN. Changing this updates the name of
         * the existing BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the BGP VPN. Changing this updates the name of
         * the existing BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks A list of network IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks A list of network IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks A list of network IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param ports A list of port IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports A list of port IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports A list of port IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param projectId The ID of the project that owns the BGPVPN. Only
         * administrative and users with `advsvc` role can specify a project ID other
         * than their own. Changing this creates a new BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project that owns the BGPVPN. Only
         * administrative and users with `advsvc` role can specify a project ID other
         * than their own. Changing this creates a new BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a BGP VPN service. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a BGP VPN service. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param routeDistinguishers A list of route distinguisher strings. If
         * specified, one of these RDs will be used to advertise VPN routes.
         * 
         * @return builder
         * 
         */
        public Builder routeDistinguishers(@Nullable Output<List<String>> routeDistinguishers) {
            $.routeDistinguishers = routeDistinguishers;
            return this;
        }

        /**
         * @param routeDistinguishers A list of route distinguisher strings. If
         * specified, one of these RDs will be used to advertise VPN routes.
         * 
         * @return builder
         * 
         */
        public Builder routeDistinguishers(List<String> routeDistinguishers) {
            return routeDistinguishers(Output.of(routeDistinguishers));
        }

        /**
         * @param routeDistinguishers A list of route distinguisher strings. If
         * specified, one of these RDs will be used to advertise VPN routes.
         * 
         * @return builder
         * 
         */
        public Builder routeDistinguishers(String... routeDistinguishers) {
            return routeDistinguishers(List.of(routeDistinguishers));
        }

        /**
         * @param routeTargets A list of Route Targets that will be both
         * imported and used for export.
         * 
         * @return builder
         * 
         */
        public Builder routeTargets(@Nullable Output<List<String>> routeTargets) {
            $.routeTargets = routeTargets;
            return this;
        }

        /**
         * @param routeTargets A list of Route Targets that will be both
         * imported and used for export.
         * 
         * @return builder
         * 
         */
        public Builder routeTargets(List<String> routeTargets) {
            return routeTargets(Output.of(routeTargets));
        }

        /**
         * @param routeTargets A list of Route Targets that will be both
         * imported and used for export.
         * 
         * @return builder
         * 
         */
        public Builder routeTargets(String... routeTargets) {
            return routeTargets(List.of(routeTargets));
        }

        /**
         * @param routers A list of router IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder routers(@Nullable Output<List<String>> routers) {
            $.routers = routers;
            return this;
        }

        /**
         * @param routers A list of router IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder routers(List<String> routers) {
            return routers(Output.of(routers));
        }

        /**
         * @param routers A list of router IDs that are associated with the BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder routers(String... routers) {
            return routers(List.of(routers));
        }

        /**
         * @param shared Indicates whether the BGP VPN is shared across projects.
         * 
         * @return builder
         * 
         */
        public Builder shared(@Nullable Output<Boolean> shared) {
            $.shared = shared;
            return this;
        }

        /**
         * @param shared Indicates whether the BGP VPN is shared across projects.
         * 
         * @return builder
         * 
         */
        public Builder shared(Boolean shared) {
            return shared(Output.of(shared));
        }

        /**
         * @param type The type of the BGP VPN (either `l2` or `l3`). Changing this
         * creates a new BGP VPN. Defaults to `l3`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the BGP VPN (either `l2` or `l3`). Changing this
         * creates a new BGP VPN. Defaults to `l3`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vni The globally-assigned VXLAN VNI for the BGP VPN. Changing
         * this creates a new BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder vni(@Nullable Output<Integer> vni) {
            $.vni = vni;
            return this;
        }

        /**
         * @param vni The globally-assigned VXLAN VNI for the BGP VPN. Changing
         * this creates a new BGP VPN.
         * 
         * @return builder
         * 
         */
        public Builder vni(Integer vni) {
            return vni(Output.of(vni));
        }

        public V2State build() {
            return $;
        }
    }

}
