// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.sharedfilesystem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShareNetworkState extends com.pulumi.resources.ResourceArgs {

    public static final ShareNetworkState Empty = new ShareNetworkState();

    /**
     * The share network CIDR.
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    /**
     * @return The share network CIDR.
     * 
     */
    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * The human-readable description for the share network.
     * Changing this updates the description of the existing share network.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The human-readable description for the share network.
     * Changing this updates the description of the existing share network.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The IP version of the share network. Can either be 4 or 6.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Integer> ipVersion;

    /**
     * @return The IP version of the share network. Can either be 4 or 6.
     * 
     */
    public Optional<Output<Integer>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The name for the share network. Changing this updates the name
     * of the existing share network.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the share network. Changing this updates the name
     * of the existing share network.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The share network type. Can either be VLAN, VXLAN, GRE, or flat.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The share network type. Can either be VLAN, VXLAN, GRE, or flat.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The UUID of a neutron network when setting up or updating
     * a share network. Changing this updates the existing share network if it&#39;s not used by
     * shares.
     * 
     */
    @Import(name="neutronNetId")
    private @Nullable Output<String> neutronNetId;

    /**
     * @return The UUID of a neutron network when setting up or updating
     * a share network. Changing this updates the existing share network if it&#39;s not used by
     * shares.
     * 
     */
    public Optional<Output<String>> neutronNetId() {
        return Optional.ofNullable(this.neutronNetId);
    }

    /**
     * The UUID of the neutron subnet when setting up or
     * updating a share network. Changing this updates the existing share network if it&#39;s
     * not used by shares.
     * 
     */
    @Import(name="neutronSubnetId")
    private @Nullable Output<String> neutronSubnetId;

    /**
     * @return The UUID of the neutron subnet when setting up or
     * updating a share network. Changing this updates the existing share network if it&#39;s
     * not used by shares.
     * 
     */
    public Optional<Output<String>> neutronSubnetId() {
        return Optional.ofNullable(this.neutronSubnetId);
    }

    /**
     * The owner of the Share Network.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The owner of the Share Network.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to create a share network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * share network.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to create a share network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * share network.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The list of security service IDs to associate with
     * the share network. The security service must be specified by ID and not name.
     * 
     */
    @Import(name="securityServiceIds")
    private @Nullable Output<List<String>> securityServiceIds;

    /**
     * @return The list of security service IDs to associate with
     * the share network. The security service must be specified by ID and not name.
     * 
     */
    public Optional<Output<List<String>>> securityServiceIds() {
        return Optional.ofNullable(this.securityServiceIds);
    }

    /**
     * The share network segmentation ID.
     * 
     */
    @Import(name="segmentationId")
    private @Nullable Output<Integer> segmentationId;

    /**
     * @return The share network segmentation ID.
     * 
     */
    public Optional<Output<Integer>> segmentationId() {
        return Optional.ofNullable(this.segmentationId);
    }

    private ShareNetworkState() {}

    private ShareNetworkState(ShareNetworkState $) {
        this.cidr = $.cidr;
        this.description = $.description;
        this.ipVersion = $.ipVersion;
        this.name = $.name;
        this.networkType = $.networkType;
        this.neutronNetId = $.neutronNetId;
        this.neutronSubnetId = $.neutronSubnetId;
        this.projectId = $.projectId;
        this.region = $.region;
        this.securityServiceIds = $.securityServiceIds;
        this.segmentationId = $.segmentationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShareNetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShareNetworkState $;

        public Builder() {
            $ = new ShareNetworkState();
        }

        public Builder(ShareNetworkState defaults) {
            $ = new ShareNetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr The share network CIDR.
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr The share network CIDR.
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param description The human-readable description for the share network.
         * Changing this updates the description of the existing share network.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The human-readable description for the share network.
         * Changing this updates the description of the existing share network.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipVersion The IP version of the share network. Can either be 4 or 6.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Integer> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version of the share network. Can either be 4 or 6.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Integer ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param name The name for the share network. Changing this updates the name
         * of the existing share network.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the share network. Changing this updates the name
         * of the existing share network.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkType The share network type. Can either be VLAN, VXLAN, GRE, or flat.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The share network type. Can either be VLAN, VXLAN, GRE, or flat.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param neutronNetId The UUID of a neutron network when setting up or updating
         * a share network. Changing this updates the existing share network if it&#39;s not used by
         * shares.
         * 
         * @return builder
         * 
         */
        public Builder neutronNetId(@Nullable Output<String> neutronNetId) {
            $.neutronNetId = neutronNetId;
            return this;
        }

        /**
         * @param neutronNetId The UUID of a neutron network when setting up or updating
         * a share network. Changing this updates the existing share network if it&#39;s not used by
         * shares.
         * 
         * @return builder
         * 
         */
        public Builder neutronNetId(String neutronNetId) {
            return neutronNetId(Output.of(neutronNetId));
        }

        /**
         * @param neutronSubnetId The UUID of the neutron subnet when setting up or
         * updating a share network. Changing this updates the existing share network if it&#39;s
         * not used by shares.
         * 
         * @return builder
         * 
         */
        public Builder neutronSubnetId(@Nullable Output<String> neutronSubnetId) {
            $.neutronSubnetId = neutronSubnetId;
            return this;
        }

        /**
         * @param neutronSubnetId The UUID of the neutron subnet when setting up or
         * updating a share network. Changing this updates the existing share network if it&#39;s
         * not used by shares.
         * 
         * @return builder
         * 
         */
        public Builder neutronSubnetId(String neutronSubnetId) {
            return neutronSubnetId(Output.of(neutronSubnetId));
        }

        /**
         * @param projectId The owner of the Share Network.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The owner of the Share Network.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * A Shared File System client is needed to create a share network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * share network.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * A Shared File System client is needed to create a share network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * share network.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param securityServiceIds The list of security service IDs to associate with
         * the share network. The security service must be specified by ID and not name.
         * 
         * @return builder
         * 
         */
        public Builder securityServiceIds(@Nullable Output<List<String>> securityServiceIds) {
            $.securityServiceIds = securityServiceIds;
            return this;
        }

        /**
         * @param securityServiceIds The list of security service IDs to associate with
         * the share network. The security service must be specified by ID and not name.
         * 
         * @return builder
         * 
         */
        public Builder securityServiceIds(List<String> securityServiceIds) {
            return securityServiceIds(Output.of(securityServiceIds));
        }

        /**
         * @param securityServiceIds The list of security service IDs to associate with
         * the share network. The security service must be specified by ID and not name.
         * 
         * @return builder
         * 
         */
        public Builder securityServiceIds(String... securityServiceIds) {
            return securityServiceIds(List.of(securityServiceIds));
        }

        /**
         * @param segmentationId The share network segmentation ID.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(@Nullable Output<Integer> segmentationId) {
            $.segmentationId = segmentationId;
            return this;
        }

        /**
         * @param segmentationId The share network segmentation ID.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(Integer segmentationId) {
            return segmentationId(Output.of(segmentationId));
        }

        public ShareNetworkState build() {
            return $;
        }
    }

}
