// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.blockstorage;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.openstack.Utilities;
import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3Args;
import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3PlainArgs;
import com.pulumi.openstack.blockstorage.inputs.GetQuotasetV3Args;
import com.pulumi.openstack.blockstorage.inputs.GetQuotasetV3PlainArgs;
import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2Args;
import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2PlainArgs;
import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3Args;
import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3PlainArgs;
import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2Args;
import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2PlainArgs;
import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3Args;
import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3PlainArgs;
import com.pulumi.openstack.blockstorage.outputs.GetAvailabilityZonesV3Result;
import com.pulumi.openstack.blockstorage.outputs.GetQuotasetV3Result;
import com.pulumi.openstack.blockstorage.outputs.GetSnapshotV2Result;
import com.pulumi.openstack.blockstorage.outputs.GetSnapshotV3Result;
import com.pulumi.openstack.blockstorage.outputs.GetVolumeV2Result;
import com.pulumi.openstack.blockstorage.outputs.GetVolumeV3Result;
import java.util.concurrent.CompletableFuture;

public final class BlockstorageFunctions {
    /**
     * Use this data source to get a list of Block Storage availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = BlockstorageFunctions.getAvailabilityZonesV3();
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAvailabilityZonesV3Result> getAvailabilityZonesV3() {
        return getAvailabilityZonesV3(GetAvailabilityZonesV3Args.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Block Storage availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = BlockstorageFunctions.getAvailabilityZonesV3();
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAvailabilityZonesV3Result> getAvailabilityZonesV3Plain() {
        return getAvailabilityZonesV3Plain(GetAvailabilityZonesV3PlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Block Storage availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = BlockstorageFunctions.getAvailabilityZonesV3();
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAvailabilityZonesV3Result> getAvailabilityZonesV3(GetAvailabilityZonesV3Args args) {
        return getAvailabilityZonesV3(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Block Storage availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = BlockstorageFunctions.getAvailabilityZonesV3();
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAvailabilityZonesV3Result> getAvailabilityZonesV3Plain(GetAvailabilityZonesV3PlainArgs args) {
        return getAvailabilityZonesV3Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Block Storage availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = BlockstorageFunctions.getAvailabilityZonesV3();
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAvailabilityZonesV3Result> getAvailabilityZonesV3(GetAvailabilityZonesV3Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:blockstorage/getAvailabilityZonesV3:getAvailabilityZonesV3", TypeShape.of(GetAvailabilityZonesV3Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of Block Storage availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetAvailabilityZonesV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = BlockstorageFunctions.getAvailabilityZonesV3();
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAvailabilityZonesV3Result> getAvailabilityZonesV3Plain(GetAvailabilityZonesV3PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:blockstorage/getAvailabilityZonesV3:getAvailabilityZonesV3", TypeShape.of(GetAvailabilityZonesV3Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the blockstorage quotaset v3 of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetQuotasetV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = BlockstorageFunctions.getQuotasetV3(GetQuotasetV3Args.builder()
     *             .projectId(&#34;2e367a3d29f94fd988e6ec54e305ec9d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotasetV3Result> getQuotasetV3(GetQuotasetV3Args args) {
        return getQuotasetV3(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the blockstorage quotaset v3 of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetQuotasetV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = BlockstorageFunctions.getQuotasetV3(GetQuotasetV3Args.builder()
     *             .projectId(&#34;2e367a3d29f94fd988e6ec54e305ec9d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuotasetV3Result> getQuotasetV3Plain(GetQuotasetV3PlainArgs args) {
        return getQuotasetV3Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the blockstorage quotaset v3 of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetQuotasetV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = BlockstorageFunctions.getQuotasetV3(GetQuotasetV3Args.builder()
     *             .projectId(&#34;2e367a3d29f94fd988e6ec54e305ec9d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotasetV3Result> getQuotasetV3(GetQuotasetV3Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:blockstorage/getQuotasetV3:getQuotasetV3", TypeShape.of(GetQuotasetV3Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the blockstorage quotaset v3 of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetQuotasetV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = BlockstorageFunctions.getQuotasetV3(GetQuotasetV3Args.builder()
     *             .projectId(&#34;2e367a3d29f94fd988e6ec54e305ec9d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuotasetV3Result> getQuotasetV3Plain(GetQuotasetV3PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:blockstorage/getQuotasetV3:getQuotasetV3", TypeShape.of(GetQuotasetV3Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV2(GetSnapshotV2Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSnapshotV2Result> getSnapshotV2() {
        return getSnapshotV2(GetSnapshotV2Args.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV2(GetSnapshotV2Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSnapshotV2Result> getSnapshotV2Plain() {
        return getSnapshotV2Plain(GetSnapshotV2PlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV2(GetSnapshotV2Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSnapshotV2Result> getSnapshotV2(GetSnapshotV2Args args) {
        return getSnapshotV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV2(GetSnapshotV2Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSnapshotV2Result> getSnapshotV2Plain(GetSnapshotV2PlainArgs args) {
        return getSnapshotV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV2(GetSnapshotV2Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSnapshotV2Result> getSnapshotV2(GetSnapshotV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:blockstorage/getSnapshotV2:getSnapshotV2", TypeShape.of(GetSnapshotV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV2(GetSnapshotV2Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSnapshotV2Result> getSnapshotV2Plain(GetSnapshotV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:blockstorage/getSnapshotV2:getSnapshotV2", TypeShape.of(GetSnapshotV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV3(GetSnapshotV3Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSnapshotV3Result> getSnapshotV3() {
        return getSnapshotV3(GetSnapshotV3Args.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV3(GetSnapshotV3Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSnapshotV3Result> getSnapshotV3Plain() {
        return getSnapshotV3Plain(GetSnapshotV3PlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV3(GetSnapshotV3Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSnapshotV3Result> getSnapshotV3(GetSnapshotV3Args args) {
        return getSnapshotV3(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV3(GetSnapshotV3Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSnapshotV3Result> getSnapshotV3Plain(GetSnapshotV3PlainArgs args) {
        return getSnapshotV3Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV3(GetSnapshotV3Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSnapshotV3Result> getSnapshotV3(GetSnapshotV3Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:blockstorage/getSnapshotV3:getSnapshotV3", TypeShape.of(GetSnapshotV3Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing snapshot.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetSnapshotV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot1 = BlockstorageFunctions.getSnapshotV3(GetSnapshotV3Args.builder()
     *             .name(&#34;snapshot_1&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSnapshotV3Result> getSnapshotV3Plain(GetSnapshotV3PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:blockstorage/getSnapshotV3:getSnapshotV3", TypeShape.of(GetSnapshotV3Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV2(GetVolumeV2Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeV2Result> getVolumeV2() {
        return getVolumeV2(GetVolumeV2Args.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV2(GetVolumeV2Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeV2Result> getVolumeV2Plain() {
        return getVolumeV2Plain(GetVolumeV2PlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV2(GetVolumeV2Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeV2Result> getVolumeV2(GetVolumeV2Args args) {
        return getVolumeV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV2(GetVolumeV2Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeV2Result> getVolumeV2Plain(GetVolumeV2PlainArgs args) {
        return getVolumeV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV2(GetVolumeV2Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeV2Result> getVolumeV2(GetVolumeV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:blockstorage/getVolumeV2:getVolumeV2", TypeShape.of(GetVolumeV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV2(GetVolumeV2Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeV2Result> getVolumeV2Plain(GetVolumeV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:blockstorage/getVolumeV2:getVolumeV2", TypeShape.of(GetVolumeV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV3(GetVolumeV3Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeV3Result> getVolumeV3() {
        return getVolumeV3(GetVolumeV3Args.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV3(GetVolumeV3Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeV3Result> getVolumeV3Plain() {
        return getVolumeV3Plain(GetVolumeV3PlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV3(GetVolumeV3Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeV3Result> getVolumeV3(GetVolumeV3Args args) {
        return getVolumeV3(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV3(GetVolumeV3Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeV3Result> getVolumeV3Plain(GetVolumeV3PlainArgs args) {
        return getVolumeV3Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV3(GetVolumeV3Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeV3Result> getVolumeV3(GetVolumeV3Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:blockstorage/getVolumeV3:getVolumeV3", TypeShape.of(GetVolumeV3Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about an existing volume.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.blockstorage.BlockstorageFunctions;
     * import com.pulumi.openstack.blockstorage.inputs.GetVolumeV3Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = BlockstorageFunctions.getVolumeV3(GetVolumeV3Args.builder()
     *             .name(&#34;volume_1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeV3Result> getVolumeV3Plain(GetVolumeV3PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:blockstorage/getVolumeV3:getVolumeV3", TypeShape.of(GetVolumeV3Result.class), args, Utilities.withVersion(options));
    }
}
