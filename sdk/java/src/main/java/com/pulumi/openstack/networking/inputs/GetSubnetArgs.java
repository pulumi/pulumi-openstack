// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubnetArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubnetArgs Empty = new GetSubnetArgs();

    /**
     * The CIDR of the subnet.
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    /**
     * @return The CIDR of the subnet.
     * 
     */
    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * Human-readable description of the subnet.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-readable description of the subnet.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If the subnet has DHCP enabled.
     * 
     */
    @Import(name="dhcpEnabled")
    private @Nullable Output<Boolean> dhcpEnabled;

    /**
     * @return If the subnet has DHCP enabled.
     * 
     */
    public Optional<Output<Boolean>> dhcpEnabled() {
        return Optional.ofNullable(this.dhcpEnabled);
    }

    /**
     * If the subnet publishes DNS records.
     * 
     */
    @Import(name="dnsPublishFixedIp")
    private @Nullable Output<Boolean> dnsPublishFixedIp;

    /**
     * @return If the subnet publishes DNS records.
     * 
     */
    public Optional<Output<Boolean>> dnsPublishFixedIp() {
        return Optional.ofNullable(this.dnsPublishFixedIp);
    }

    /**
     * The IP of the subnet&#39;s gateway.
     * 
     */
    @Import(name="gatewayIp")
    private @Nullable Output<String> gatewayIp;

    /**
     * @return The IP of the subnet&#39;s gateway.
     * 
     */
    public Optional<Output<String>> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }

    /**
     * The IP version of the subnet (either 4 or 6).
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Integer> ipVersion;

    /**
     * @return The IP version of the subnet (either 4 or 6).
     * 
     */
    public Optional<Output<Integer>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    @Import(name="ipv6AddressMode")
    private @Nullable Output<String> ipv6AddressMode;

    /**
     * @return The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    public Optional<Output<String>> ipv6AddressMode() {
        return Optional.ofNullable(this.ipv6AddressMode);
    }

    /**
     * The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    @Import(name="ipv6RaMode")
    private @Nullable Output<String> ipv6RaMode;

    /**
     * @return The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    public Optional<Output<String>> ipv6RaMode() {
        return Optional.ofNullable(this.ipv6RaMode);
    }

    /**
     * The name of the subnet.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the subnet.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the network the subnet belongs to.
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return The ID of the network the subnet belongs to.
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve subnet ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve subnet ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The ID of the segment the subnet belongs to.
     * Available when neutron segment extension is enabled.
     * 
     */
    @Import(name="segmentId")
    private @Nullable Output<String> segmentId;

    /**
     * @return The ID of the segment the subnet belongs to.
     * Available when neutron segment extension is enabled.
     * 
     */
    public Optional<Output<String>> segmentId() {
        return Optional.ofNullable(this.segmentId);
    }

    /**
     * The ID of the subnet.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The ID of the subnet.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The ID of the subnetpool associated with the subnet.
     * 
     */
    @Import(name="subnetpoolId")
    private @Nullable Output<String> subnetpoolId;

    /**
     * @return The ID of the subnetpool associated with the subnet.
     * 
     */
    public Optional<Output<String>> subnetpoolId() {
        return Optional.ofNullable(this.subnetpoolId);
    }

    /**
     * The list of subnet tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The list of subnet tags to filter.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The owner of the subnet.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The owner of the subnet.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetSubnetArgs() {}

    private GetSubnetArgs(GetSubnetArgs $) {
        this.cidr = $.cidr;
        this.description = $.description;
        this.dhcpEnabled = $.dhcpEnabled;
        this.dnsPublishFixedIp = $.dnsPublishFixedIp;
        this.gatewayIp = $.gatewayIp;
        this.ipVersion = $.ipVersion;
        this.ipv6AddressMode = $.ipv6AddressMode;
        this.ipv6RaMode = $.ipv6RaMode;
        this.name = $.name;
        this.networkId = $.networkId;
        this.region = $.region;
        this.segmentId = $.segmentId;
        this.subnetId = $.subnetId;
        this.subnetpoolId = $.subnetpoolId;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubnetArgs $;

        public Builder() {
            $ = new GetSubnetArgs();
        }

        public Builder(GetSubnetArgs defaults) {
            $ = new GetSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr The CIDR of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr The CIDR of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param description Human-readable description of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-readable description of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dhcpEnabled If the subnet has DHCP enabled.
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnabled(@Nullable Output<Boolean> dhcpEnabled) {
            $.dhcpEnabled = dhcpEnabled;
            return this;
        }

        /**
         * @param dhcpEnabled If the subnet has DHCP enabled.
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnabled(Boolean dhcpEnabled) {
            return dhcpEnabled(Output.of(dhcpEnabled));
        }

        /**
         * @param dnsPublishFixedIp If the subnet publishes DNS records.
         * 
         * @return builder
         * 
         */
        public Builder dnsPublishFixedIp(@Nullable Output<Boolean> dnsPublishFixedIp) {
            $.dnsPublishFixedIp = dnsPublishFixedIp;
            return this;
        }

        /**
         * @param dnsPublishFixedIp If the subnet publishes DNS records.
         * 
         * @return builder
         * 
         */
        public Builder dnsPublishFixedIp(Boolean dnsPublishFixedIp) {
            return dnsPublishFixedIp(Output.of(dnsPublishFixedIp));
        }

        /**
         * @param gatewayIp The IP of the subnet&#39;s gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(@Nullable Output<String> gatewayIp) {
            $.gatewayIp = gatewayIp;
            return this;
        }

        /**
         * @param gatewayIp The IP of the subnet&#39;s gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(String gatewayIp) {
            return gatewayIp(Output.of(gatewayIp));
        }

        /**
         * @param ipVersion The IP version of the subnet (either 4 or 6).
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Integer> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version of the subnet (either 4 or 6).
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Integer ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param ipv6AddressMode The IPv6 address mode. Valid values are
         * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressMode(@Nullable Output<String> ipv6AddressMode) {
            $.ipv6AddressMode = ipv6AddressMode;
            return this;
        }

        /**
         * @param ipv6AddressMode The IPv6 address mode. Valid values are
         * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressMode(String ipv6AddressMode) {
            return ipv6AddressMode(Output.of(ipv6AddressMode));
        }

        /**
         * @param ipv6RaMode The IPv6 Router Advertisement mode. Valid values
         * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaMode(@Nullable Output<String> ipv6RaMode) {
            $.ipv6RaMode = ipv6RaMode;
            return this;
        }

        /**
         * @param ipv6RaMode The IPv6 Router Advertisement mode. Valid values
         * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaMode(String ipv6RaMode) {
            return ipv6RaMode(Output.of(ipv6RaMode));
        }

        /**
         * @param name The name of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId The ID of the network the subnet belongs to.
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId The ID of the network the subnet belongs to.
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve subnet ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve subnet ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param segmentId The ID of the segment the subnet belongs to.
         * Available when neutron segment extension is enabled.
         * 
         * @return builder
         * 
         */
        public Builder segmentId(@Nullable Output<String> segmentId) {
            $.segmentId = segmentId;
            return this;
        }

        /**
         * @param segmentId The ID of the segment the subnet belongs to.
         * Available when neutron segment extension is enabled.
         * 
         * @return builder
         * 
         */
        public Builder segmentId(String segmentId) {
            return segmentId(Output.of(segmentId));
        }

        /**
         * @param subnetId The ID of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param subnetpoolId The ID of the subnetpool associated with the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetpoolId(@Nullable Output<String> subnetpoolId) {
            $.subnetpoolId = subnetpoolId;
            return this;
        }

        /**
         * @param subnetpoolId The ID of the subnetpool associated with the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetpoolId(String subnetpoolId) {
            return subnetpoolId(Output.of(subnetpoolId));
        }

        /**
         * @param tags The list of subnet tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of subnet tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The list of subnet tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId The owner of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The owner of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public GetSubnetArgs build() {
            return $;
        }
    }

}
