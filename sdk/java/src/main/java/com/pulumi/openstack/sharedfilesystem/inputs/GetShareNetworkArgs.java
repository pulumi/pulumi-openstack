// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.sharedfilesystem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetShareNetworkArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetShareNetworkArgs Empty = new GetShareNetworkArgs();

    /**
     * The human-readable description of the share network.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The human-readable description of the share network.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The IP version of the share network. Can either be 4 or 6.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Integer> ipVersion;

    /**
     * @return The IP version of the share network. Can either be 4 or 6.
     * 
     */
    public Optional<Output<Integer>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The name of the share network.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the share network.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The share network type. Can either be VLAN, VXLAN,
     * GRE, or flat.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The share network type. Can either be VLAN, VXLAN,
     * GRE, or flat.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The neutron network UUID of the share network.
     * 
     */
    @Import(name="neutronNetId")
    private @Nullable Output<String> neutronNetId;

    /**
     * @return The neutron network UUID of the share network.
     * 
     */
    public Optional<Output<String>> neutronNetId() {
        return Optional.ofNullable(this.neutronNetId);
    }

    /**
     * The neutron subnet UUID of the share network.
     * 
     */
    @Import(name="neutronSubnetId")
    private @Nullable Output<String> neutronSubnetId;

    /**
     * @return The neutron subnet UUID of the share network.
     * 
     */
    public Optional<Output<String>> neutronSubnetId() {
        return Optional.ofNullable(this.neutronSubnetId);
    }

    /**
     * The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to read a share network. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to read a share network. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The security service IDs associated with
     * the share network.
     * 
     */
    @Import(name="securityServiceId")
    private @Nullable Output<String> securityServiceId;

    /**
     * @return The security service IDs associated with
     * the share network.
     * 
     */
    public Optional<Output<String>> securityServiceId() {
        return Optional.ofNullable(this.securityServiceId);
    }

    /**
     * The share network segmentation ID.
     * 
     */
    @Import(name="segmentationId")
    private @Nullable Output<Integer> segmentationId;

    /**
     * @return The share network segmentation ID.
     * 
     */
    public Optional<Output<Integer>> segmentationId() {
        return Optional.ofNullable(this.segmentationId);
    }

    private GetShareNetworkArgs() {}

    private GetShareNetworkArgs(GetShareNetworkArgs $) {
        this.description = $.description;
        this.ipVersion = $.ipVersion;
        this.name = $.name;
        this.networkType = $.networkType;
        this.neutronNetId = $.neutronNetId;
        this.neutronSubnetId = $.neutronSubnetId;
        this.region = $.region;
        this.securityServiceId = $.securityServiceId;
        this.segmentationId = $.segmentationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetShareNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetShareNetworkArgs $;

        public Builder() {
            $ = new GetShareNetworkArgs();
        }

        public Builder(GetShareNetworkArgs defaults) {
            $ = new GetShareNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The human-readable description of the share network.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The human-readable description of the share network.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipVersion The IP version of the share network. Can either be 4 or 6.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Integer> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version of the share network. Can either be 4 or 6.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Integer ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param name The name of the share network.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the share network.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkType The share network type. Can either be VLAN, VXLAN,
         * GRE, or flat.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The share network type. Can either be VLAN, VXLAN,
         * GRE, or flat.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param neutronNetId The neutron network UUID of the share network.
         * 
         * @return builder
         * 
         */
        public Builder neutronNetId(@Nullable Output<String> neutronNetId) {
            $.neutronNetId = neutronNetId;
            return this;
        }

        /**
         * @param neutronNetId The neutron network UUID of the share network.
         * 
         * @return builder
         * 
         */
        public Builder neutronNetId(String neutronNetId) {
            return neutronNetId(Output.of(neutronNetId));
        }

        /**
         * @param neutronSubnetId The neutron subnet UUID of the share network.
         * 
         * @return builder
         * 
         */
        public Builder neutronSubnetId(@Nullable Output<String> neutronSubnetId) {
            $.neutronSubnetId = neutronSubnetId;
            return this;
        }

        /**
         * @param neutronSubnetId The neutron subnet UUID of the share network.
         * 
         * @return builder
         * 
         */
        public Builder neutronSubnetId(String neutronSubnetId) {
            return neutronSubnetId(Output.of(neutronSubnetId));
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * A Shared File System client is needed to read a share network. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * A Shared File System client is needed to read a share network. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param securityServiceId The security service IDs associated with
         * the share network.
         * 
         * @return builder
         * 
         */
        public Builder securityServiceId(@Nullable Output<String> securityServiceId) {
            $.securityServiceId = securityServiceId;
            return this;
        }

        /**
         * @param securityServiceId The security service IDs associated with
         * the share network.
         * 
         * @return builder
         * 
         */
        public Builder securityServiceId(String securityServiceId) {
            return securityServiceId(Output.of(securityServiceId));
        }

        /**
         * @param segmentationId The share network segmentation ID.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(@Nullable Output<Integer> segmentationId) {
            $.segmentationId = segmentationId;
            return this;
        }

        /**
         * @param segmentationId The share network segmentation ID.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(Integer segmentationId) {
            return segmentationId(Output.of(segmentationId));
        }

        public GetShareNetworkArgs build() {
            return $;
        }
    }

}
