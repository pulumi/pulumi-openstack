// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FloatingIpAssociateArgs extends com.pulumi.resources.ResourceArgs {

    public static final FloatingIpAssociateArgs Empty = new FloatingIpAssociateArgs();

    @Import(name="fixedIp")
    private @Nullable Output<String> fixedIp;

    public Optional<Output<String>> fixedIp() {
        return Optional.ofNullable(this.fixedIp);
    }

    /**
     * IP Address of an existing floating IP.
     * 
     */
    @Import(name="floatingIp", required=true)
    private Output<String> floatingIp;

    /**
     * @return IP Address of an existing floating IP.
     * 
     */
    public Output<String> floatingIp() {
        return this.floatingIp;
    }

    /**
     * ID of an existing port with at least one IP address to
     * associate with this floating IP.
     * 
     */
    @Import(name="portId", required=true)
    private Output<String> portId;

    /**
     * @return ID of an existing port with at least one IP address to
     * associate with this floating IP.
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a floating IP that can be used with
     * another networking resource, such as a load balancer. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * floating IP (which may or may not have a different address).
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a floating IP that can be used with
     * another networking resource, such as a load balancer. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * floating IP (which may or may not have a different address).
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private FloatingIpAssociateArgs() {}

    private FloatingIpAssociateArgs(FloatingIpAssociateArgs $) {
        this.fixedIp = $.fixedIp;
        this.floatingIp = $.floatingIp;
        this.portId = $.portId;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FloatingIpAssociateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FloatingIpAssociateArgs $;

        public Builder() {
            $ = new FloatingIpAssociateArgs();
        }

        public Builder(FloatingIpAssociateArgs defaults) {
            $ = new FloatingIpAssociateArgs(Objects.requireNonNull(defaults));
        }

        public Builder fixedIp(@Nullable Output<String> fixedIp) {
            $.fixedIp = fixedIp;
            return this;
        }

        public Builder fixedIp(String fixedIp) {
            return fixedIp(Output.of(fixedIp));
        }

        /**
         * @param floatingIp IP Address of an existing floating IP.
         * 
         * @return builder
         * 
         */
        public Builder floatingIp(Output<String> floatingIp) {
            $.floatingIp = floatingIp;
            return this;
        }

        /**
         * @param floatingIp IP Address of an existing floating IP.
         * 
         * @return builder
         * 
         */
        public Builder floatingIp(String floatingIp) {
            return floatingIp(Output.of(floatingIp));
        }

        /**
         * @param portId ID of an existing port with at least one IP address to
         * associate with this floating IP.
         * 
         * @return builder
         * 
         */
        public Builder portId(Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId ID of an existing port with at least one IP address to
         * associate with this floating IP.
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a floating IP that can be used with
         * another networking resource, such as a load balancer. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * floating IP (which may or may not have a different address).
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a floating IP that can be used with
         * another networking resource, such as a load balancer. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * floating IP (which may or may not have a different address).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public FloatingIpAssociateArgs build() {
            if ($.floatingIp == null) {
                throw new MissingRequiredPropertyException("FloatingIpAssociateArgs", "floatingIp");
            }
            if ($.portId == null) {
                throw new MissingRequiredPropertyException("FloatingIpAssociateArgs", "portId");
            }
            return $;
        }
    }

}
