// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserPlainArgs Empty = new GetUserPlainArgs();

    /**
     * The domain this user belongs to.
     * 
     */
    @Import(name="domainId")
    private @Nullable String domainId;

    /**
     * @return The domain this user belongs to.
     * 
     */
    public Optional<String> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * Whether the user is enabled or disabled. Valid
     * values are `true` and `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Whether the user is enabled or disabled. Valid
     * values are `true` and `false`.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The identity provider ID of the user.
     * 
     */
    @Import(name="idpId")
    private @Nullable String idpId;

    /**
     * @return The identity provider ID of the user.
     * 
     */
    public Optional<String> idpId() {
        return Optional.ofNullable(this.idpId);
    }

    /**
     * The name of the user.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the user.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Query for expired passwords. See the [OpenStack API docs](https://developer.openstack.org/api-ref/identity/v3/#list-users) for more information on the query format.
     * 
     */
    @Import(name="passwordExpiresAt")
    private @Nullable String passwordExpiresAt;

    /**
     * @return Query for expired passwords. See the [OpenStack API docs](https://developer.openstack.org/api-ref/identity/v3/#list-users) for more information on the query format.
     * 
     */
    public Optional<String> passwordExpiresAt() {
        return Optional.ofNullable(this.passwordExpiresAt);
    }

    /**
     * The protocol ID of the user.
     * 
     */
    @Import(name="protocolId")
    private @Nullable String protocolId;

    /**
     * @return The protocol ID of the user.
     * 
     */
    public Optional<String> protocolId() {
        return Optional.ofNullable(this.protocolId);
    }

    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The unique ID of the user.
     * 
     */
    @Import(name="uniqueId")
    private @Nullable String uniqueId;

    /**
     * @return The unique ID of the user.
     * 
     */
    public Optional<String> uniqueId() {
        return Optional.ofNullable(this.uniqueId);
    }

    private GetUserPlainArgs() {}

    private GetUserPlainArgs(GetUserPlainArgs $) {
        this.domainId = $.domainId;
        this.enabled = $.enabled;
        this.idpId = $.idpId;
        this.name = $.name;
        this.passwordExpiresAt = $.passwordExpiresAt;
        this.protocolId = $.protocolId;
        this.region = $.region;
        this.uniqueId = $.uniqueId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserPlainArgs $;

        public Builder() {
            $ = new GetUserPlainArgs();
        }

        public Builder(GetUserPlainArgs defaults) {
            $ = new GetUserPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainId The domain this user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder domainId(@Nullable String domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param enabled Whether the user is enabled or disabled. Valid
         * values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param idpId The identity provider ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder idpId(@Nullable String idpId) {
            $.idpId = idpId;
            return this;
        }

        /**
         * @param name The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param passwordExpiresAt Query for expired passwords. See the [OpenStack API docs](https://developer.openstack.org/api-ref/identity/v3/#list-users) for more information on the query format.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpiresAt(@Nullable String passwordExpiresAt) {
            $.passwordExpiresAt = passwordExpiresAt;
            return this;
        }

        /**
         * @param protocolId The protocol ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder protocolId(@Nullable String protocolId) {
            $.protocolId = protocolId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V3 Keystone client.
         * If omitted, the `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param uniqueId The unique ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder uniqueId(@Nullable String uniqueId) {
            $.uniqueId = uniqueId;
            return this;
        }

        public GetUserPlainArgs build() {
            return $;
        }
    }

}
