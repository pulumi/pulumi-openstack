// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.orchestration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.openstack.orchestration.inputs.StackV1StackOutputArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackV1State extends com.pulumi.resources.ResourceArgs {

    public static final StackV1State Empty = new StackV1State();

    /**
     * A list of stack outputs.
     * 
     */
    @Import(name="StackOutputs")
    private @Nullable Output<List<StackV1StackOutputArgs>> StackOutputs;

    /**
     * @return A list of stack outputs.
     * 
     */
    public Optional<Output<List<StackV1StackOutputArgs>>> StackOutputs() {
        return Optional.ofNullable(this.StackOutputs);
    }

    /**
     * List of stack capabilities for stack.
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<List<String>> capabilities;

    /**
     * @return List of stack capabilities for stack.
     * 
     */
    public Optional<Output<List<String>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return The date and time when the resource was created. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * The description of the stack resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the stack resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     * 
     */
    @Import(name="disableRollback")
    private @Nullable Output<Boolean> disableRollback;

    /**
     * @return Enables or disables deletion of all stack
     * resources when a stack creation fails. Default is true, meaning all
     * resources are not deleted when stack creation fails.
     * 
     */
    public Optional<Output<Boolean>> disableRollback() {
        return Optional.ofNullable(this.disableRollback);
    }

    /**
     * Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     * 
     */
    @Import(name="environmentOpts")
    private @Nullable Output<Map<String,String>> environmentOpts;

    /**
     * @return Environment key/value pairs to associate with
     * the stack which contains details for the environment of the stack.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Environment Opts.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentOpts() {
        return Optional.ofNullable(this.environmentOpts);
    }

    /**
     * A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the stack. It must start with an
     * alphabetic character. Changing this updates the stack&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of notification topics for stack.
     * 
     */
    @Import(name="notificationTopics")
    private @Nullable Output<List<String>> notificationTopics;

    /**
     * @return List of notification topics for stack.
     * 
     */
    public Optional<Output<List<String>>> notificationTopics() {
        return Optional.ofNullable(this.notificationTopics);
    }

    /**
     * User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    /**
     * @return User-defined key/value pairs as parameters to pass
     * to the template. Changing this updates the existing stack parameters.
     * 
     */
    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to create the stack. If
     * omitted, the `region` argument of the provider is used. Changing this
     * creates a new stack.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The status of the stack.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the stack.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The reason for the current status of the stack.
     * 
     */
    @Import(name="statusReason")
    private @Nullable Output<String> statusReason;

    /**
     * @return The reason for the current status of the stack.
     * 
     */
    public Optional<Output<String>> statusReason() {
        return Optional.ofNullable(this.statusReason);
    }

    /**
     * A list of tags to assosciate with the Stack
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags to assosciate with the Stack
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The description of the stack template.
     * 
     */
    @Import(name="templateDescription")
    private @Nullable Output<String> templateDescription;

    /**
     * @return The description of the stack template.
     * 
     */
    public Optional<Output<String>> templateDescription() {
        return Optional.ofNullable(this.templateDescription);
    }

    /**
     * Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     * 
     */
    @Import(name="templateOpts")
    private @Nullable Output<Map<String,String>> templateOpts;

    /**
     * @return Template key/value pairs to associate with the
     * stack which contains either the template file or url.
     * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
     * Template Opts.
     * 
     */
    public Optional<Output<Map<String,String>>> templateOpts() {
        return Optional.ofNullable(this.templateOpts);
    }

    /**
     * The timeout for stack action in minutes.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout for stack action in minutes.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return The date and time when the resource was updated. The date
     * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
     * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
     * is the time zone as an offset from UTC.
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    private StackV1State() {}

    private StackV1State(StackV1State $) {
        this.StackOutputs = $.StackOutputs;
        this.capabilities = $.capabilities;
        this.creationTime = $.creationTime;
        this.description = $.description;
        this.disableRollback = $.disableRollback;
        this.environmentOpts = $.environmentOpts;
        this.name = $.name;
        this.notificationTopics = $.notificationTopics;
        this.parameters = $.parameters;
        this.region = $.region;
        this.status = $.status;
        this.statusReason = $.statusReason;
        this.tags = $.tags;
        this.templateDescription = $.templateDescription;
        this.templateOpts = $.templateOpts;
        this.timeout = $.timeout;
        this.updatedTime = $.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackV1State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackV1State $;

        public Builder() {
            $ = new StackV1State();
        }

        public Builder(StackV1State defaults) {
            $ = new StackV1State(Objects.requireNonNull(defaults));
        }

        /**
         * @param StackOutputs A list of stack outputs.
         * 
         * @return builder
         * 
         */
        public Builder StackOutputs(@Nullable Output<List<StackV1StackOutputArgs>> StackOutputs) {
            $.StackOutputs = StackOutputs;
            return this;
        }

        /**
         * @param StackOutputs A list of stack outputs.
         * 
         * @return builder
         * 
         */
        public Builder StackOutputs(List<StackV1StackOutputArgs> StackOutputs) {
            return StackOutputs(Output.of(StackOutputs));
        }

        /**
         * @param StackOutputs A list of stack outputs.
         * 
         * @return builder
         * 
         */
        public Builder StackOutputs(StackV1StackOutputArgs... StackOutputs) {
            return StackOutputs(List.of(StackOutputs));
        }

        /**
         * @param capabilities List of stack capabilities for stack.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(@Nullable Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities List of stack capabilities for stack.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities List of stack capabilities for stack.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param creationTime The date and time when the resource was created. The date
         * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
         * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
         * is the time zone as an offset from UTC.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime The date and time when the resource was created. The date
         * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
         * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
         * is the time zone as an offset from UTC.
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param description The description of the stack resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the stack resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableRollback Enables or disables deletion of all stack
         * resources when a stack creation fails. Default is true, meaning all
         * resources are not deleted when stack creation fails.
         * 
         * @return builder
         * 
         */
        public Builder disableRollback(@Nullable Output<Boolean> disableRollback) {
            $.disableRollback = disableRollback;
            return this;
        }

        /**
         * @param disableRollback Enables or disables deletion of all stack
         * resources when a stack creation fails. Default is true, meaning all
         * resources are not deleted when stack creation fails.
         * 
         * @return builder
         * 
         */
        public Builder disableRollback(Boolean disableRollback) {
            return disableRollback(Output.of(disableRollback));
        }

        /**
         * @param environmentOpts Environment key/value pairs to associate with
         * the stack which contains details for the environment of the stack.
         * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
         * Environment Opts.
         * 
         * @return builder
         * 
         */
        public Builder environmentOpts(@Nullable Output<Map<String,String>> environmentOpts) {
            $.environmentOpts = environmentOpts;
            return this;
        }

        /**
         * @param environmentOpts Environment key/value pairs to associate with
         * the stack which contains details for the environment of the stack.
         * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
         * Environment Opts.
         * 
         * @return builder
         * 
         */
        public Builder environmentOpts(Map<String,String> environmentOpts) {
            return environmentOpts(Output.of(environmentOpts));
        }

        /**
         * @param name A unique name for the stack. It must start with an
         * alphabetic character. Changing this updates the stack&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the stack. It must start with an
         * alphabetic character. Changing this updates the stack&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationTopics List of notification topics for stack.
         * 
         * @return builder
         * 
         */
        public Builder notificationTopics(@Nullable Output<List<String>> notificationTopics) {
            $.notificationTopics = notificationTopics;
            return this;
        }

        /**
         * @param notificationTopics List of notification topics for stack.
         * 
         * @return builder
         * 
         */
        public Builder notificationTopics(List<String> notificationTopics) {
            return notificationTopics(Output.of(notificationTopics));
        }

        /**
         * @param notificationTopics List of notification topics for stack.
         * 
         * @return builder
         * 
         */
        public Builder notificationTopics(String... notificationTopics) {
            return notificationTopics(List.of(notificationTopics));
        }

        /**
         * @param parameters User-defined key/value pairs as parameters to pass
         * to the template. Changing this updates the existing stack parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters User-defined key/value pairs as parameters to pass
         * to the template. Changing this updates the existing stack parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param region The region in which to create the stack. If
         * omitted, the `region` argument of the provider is used. Changing this
         * creates a new stack.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to create the stack. If
         * omitted, the `region` argument of the provider is used. Changing this
         * creates a new stack.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param status The status of the stack.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the stack.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusReason The reason for the current status of the stack.
         * 
         * @return builder
         * 
         */
        public Builder statusReason(@Nullable Output<String> statusReason) {
            $.statusReason = statusReason;
            return this;
        }

        /**
         * @param statusReason The reason for the current status of the stack.
         * 
         * @return builder
         * 
         */
        public Builder statusReason(String statusReason) {
            return statusReason(Output.of(statusReason));
        }

        /**
         * @param tags A list of tags to assosciate with the Stack
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to assosciate with the Stack
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags to assosciate with the Stack
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param templateDescription The description of the stack template.
         * 
         * @return builder
         * 
         */
        public Builder templateDescription(@Nullable Output<String> templateDescription) {
            $.templateDescription = templateDescription;
            return this;
        }

        /**
         * @param templateDescription The description of the stack template.
         * 
         * @return builder
         * 
         */
        public Builder templateDescription(String templateDescription) {
            return templateDescription(Output.of(templateDescription));
        }

        /**
         * @param templateOpts Template key/value pairs to associate with the
         * stack which contains either the template file or url.
         * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
         * Template Opts.
         * 
         * @return builder
         * 
         */
        public Builder templateOpts(@Nullable Output<Map<String,String>> templateOpts) {
            $.templateOpts = templateOpts;
            return this;
        }

        /**
         * @param templateOpts Template key/value pairs to associate with the
         * stack which contains either the template file or url.
         * Allowed keys: Bin, URL, Files. Changing this updates the existing stack
         * Template Opts.
         * 
         * @return builder
         * 
         */
        public Builder templateOpts(Map<String,String> templateOpts) {
            return templateOpts(Output.of(templateOpts));
        }

        /**
         * @param timeout The timeout for stack action in minutes.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout for stack action in minutes.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param updatedTime The date and time when the resource was updated. The date
         * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
         * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
         * is the time zone as an offset from UTC.
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime The date and time when the resource was updated. The date
         * and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
         * For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
         * is the time zone as an offset from UTC.
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        public StackV1State build() {
            return $;
        }
    }

}
