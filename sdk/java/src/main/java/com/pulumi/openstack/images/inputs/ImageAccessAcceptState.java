// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.images.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageAccessAcceptState extends com.pulumi.resources.ResourceArgs {

    public static final ImageAccessAcceptState Empty = new ImageAccessAcceptState();

    /**
     * The date the image membership was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date the image membership was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The proposed image ID.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The proposed image ID.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * The member ID, e.g. the target project ID. Optional
     * for admin accounts. Defaults to the current scope project ID.
     * 
     */
    @Import(name="memberId")
    private @Nullable Output<String> memberId;

    /**
     * @return The member ID, e.g. the target project ID. Optional
     * for admin accounts. Defaults to the current scope project ID.
     * 
     */
    public Optional<Output<String>> memberId() {
        return Optional.ofNullable(this.memberId);
    }

    /**
     * The region in which to obtain the V2 Glance client.
     * A Glance client is needed to manage Image memberships. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * membership.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Glance client.
     * A Glance client is needed to manage Image memberships. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * membership.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The membership schema.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The membership schema.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * The membership proposal status. Can either be
     * `accepted`, `rejected` or `pending`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The membership proposal status. Can either be
     * `accepted`, `rejected` or `pending`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The date the image membership was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date the image membership was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private ImageAccessAcceptState() {}

    private ImageAccessAcceptState(ImageAccessAcceptState $) {
        this.createdAt = $.createdAt;
        this.imageId = $.imageId;
        this.memberId = $.memberId;
        this.region = $.region;
        this.schema = $.schema;
        this.status = $.status;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageAccessAcceptState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageAccessAcceptState $;

        public Builder() {
            $ = new ImageAccessAcceptState();
        }

        public Builder(ImageAccessAcceptState defaults) {
            $ = new ImageAccessAcceptState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The date the image membership was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date the image membership was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param imageId The proposed image ID.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The proposed image ID.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param memberId The member ID, e.g. the target project ID. Optional
         * for admin accounts. Defaults to the current scope project ID.
         * 
         * @return builder
         * 
         */
        public Builder memberId(@Nullable Output<String> memberId) {
            $.memberId = memberId;
            return this;
        }

        /**
         * @param memberId The member ID, e.g. the target project ID. Optional
         * for admin accounts. Defaults to the current scope project ID.
         * 
         * @return builder
         * 
         */
        public Builder memberId(String memberId) {
            return memberId(Output.of(memberId));
        }

        /**
         * @param region The region in which to obtain the V2 Glance client.
         * A Glance client is needed to manage Image memberships. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * membership.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Glance client.
         * A Glance client is needed to manage Image memberships. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * membership.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param schema The membership schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The membership schema.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param status The membership proposal status. Can either be
         * `accepted`, `rejected` or `pending`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The membership proposal status. Can either be
         * `accepted`, `rejected` or `pending`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param updatedAt The date the image membership was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date the image membership was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public ImageAccessAcceptState build() {
            return $;
        }
    }

}
