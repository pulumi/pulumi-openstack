// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.loadbalancer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuotaArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuotaArgs Empty = new QuotaArgs();

    /**
     * Quota value for health_monitors. Changing
     * this updates the existing quota. Omitting it sets it to 0.
     * 
     */
    @Import(name="healthMonitor")
    private @Nullable Output<Integer> healthMonitor;

    /**
     * @return Quota value for health_monitors. Changing
     * this updates the existing quota. Omitting it sets it to 0.
     * 
     */
    public Optional<Output<Integer>> healthMonitor() {
        return Optional.ofNullable(this.healthMonitor);
    }

    /**
     * Quota value for l7_policies. Changing this
     * updates the existing quota. Omitting it sets it to 0. Available in
     * **Octavia minor version 2.19**.
     * 
     */
    @Import(name="l7Policy")
    private @Nullable Output<Integer> l7Policy;

    /**
     * @return Quota value for l7_policies. Changing this
     * updates the existing quota. Omitting it sets it to 0. Available in
     * **Octavia minor version 2.19**.
     * 
     */
    public Optional<Output<Integer>> l7Policy() {
        return Optional.ofNullable(this.l7Policy);
    }

    /**
     * Quota value for l7_rules. Changing this
     * updates the existing quota. Omitting it sets it to 0. Available in
     * **Octavia minor version 2.19**.
     * 
     */
    @Import(name="l7Rule")
    private @Nullable Output<Integer> l7Rule;

    /**
     * @return Quota value for l7_rules. Changing this
     * updates the existing quota. Omitting it sets it to 0. Available in
     * **Octavia minor version 2.19**.
     * 
     */
    public Optional<Output<Integer>> l7Rule() {
        return Optional.ofNullable(this.l7Rule);
    }

    /**
     * Quota value for listeners. Changing this updates
     * the existing quota. Omitting it sets it to 0.
     * 
     */
    @Import(name="listener")
    private @Nullable Output<Integer> listener;

    /**
     * @return Quota value for listeners. Changing this updates
     * the existing quota. Omitting it sets it to 0.
     * 
     */
    public Optional<Output<Integer>> listener() {
        return Optional.ofNullable(this.listener);
    }

    /**
     * Quota value for loadbalancers. Changing this
     * updates the existing quota. Omitting it sets it to 0.
     * 
     */
    @Import(name="loadbalancer")
    private @Nullable Output<Integer> loadbalancer;

    /**
     * @return Quota value for loadbalancers. Changing this
     * updates the existing quota. Omitting it sets it to 0.
     * 
     */
    public Optional<Output<Integer>> loadbalancer() {
        return Optional.ofNullable(this.loadbalancer);
    }

    /**
     * Quota value for members. Changing this updates
     * the existing quota. Omitting it sets it to 0.
     * 
     */
    @Import(name="member")
    private @Nullable Output<Integer> member;

    /**
     * @return Quota value for members. Changing this updates
     * the existing quota. Omitting it sets it to 0.
     * 
     */
    public Optional<Output<Integer>> member() {
        return Optional.ofNullable(this.member);
    }

    /**
     * Quota value for pools. Changing this updates the
     * the existing quota. Omitting it sets it to 0.
     * 
     */
    @Import(name="pool")
    private @Nullable Output<Integer> pool;

    /**
     * @return Quota value for pools. Changing this updates the
     * the existing quota. Omitting it sets it to 0.
     * 
     */
    public Optional<Output<Integer>> pool() {
        return Optional.ofNullable(this.pool);
    }

    /**
     * ID of the project to manage quotas. Changing this
     * creates a new quota.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return ID of the project to manage quotas. Changing this
     * creates a new quota.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Region in which to manage quotas. Changing this
     * creates a new quota. If ommited, the region of the credentials is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region in which to manage quotas. Changing this
     * creates a new quota. If ommited, the region of the credentials is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private QuotaArgs() {}

    private QuotaArgs(QuotaArgs $) {
        this.healthMonitor = $.healthMonitor;
        this.l7Policy = $.l7Policy;
        this.l7Rule = $.l7Rule;
        this.listener = $.listener;
        this.loadbalancer = $.loadbalancer;
        this.member = $.member;
        this.pool = $.pool;
        this.projectId = $.projectId;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuotaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuotaArgs $;

        public Builder() {
            $ = new QuotaArgs();
        }

        public Builder(QuotaArgs defaults) {
            $ = new QuotaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param healthMonitor Quota value for health_monitors. Changing
         * this updates the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder healthMonitor(@Nullable Output<Integer> healthMonitor) {
            $.healthMonitor = healthMonitor;
            return this;
        }

        /**
         * @param healthMonitor Quota value for health_monitors. Changing
         * this updates the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder healthMonitor(Integer healthMonitor) {
            return healthMonitor(Output.of(healthMonitor));
        }

        /**
         * @param l7Policy Quota value for l7_policies. Changing this
         * updates the existing quota. Omitting it sets it to 0. Available in
         * **Octavia minor version 2.19**.
         * 
         * @return builder
         * 
         */
        public Builder l7Policy(@Nullable Output<Integer> l7Policy) {
            $.l7Policy = l7Policy;
            return this;
        }

        /**
         * @param l7Policy Quota value for l7_policies. Changing this
         * updates the existing quota. Omitting it sets it to 0. Available in
         * **Octavia minor version 2.19**.
         * 
         * @return builder
         * 
         */
        public Builder l7Policy(Integer l7Policy) {
            return l7Policy(Output.of(l7Policy));
        }

        /**
         * @param l7Rule Quota value for l7_rules. Changing this
         * updates the existing quota. Omitting it sets it to 0. Available in
         * **Octavia minor version 2.19**.
         * 
         * @return builder
         * 
         */
        public Builder l7Rule(@Nullable Output<Integer> l7Rule) {
            $.l7Rule = l7Rule;
            return this;
        }

        /**
         * @param l7Rule Quota value for l7_rules. Changing this
         * updates the existing quota. Omitting it sets it to 0. Available in
         * **Octavia minor version 2.19**.
         * 
         * @return builder
         * 
         */
        public Builder l7Rule(Integer l7Rule) {
            return l7Rule(Output.of(l7Rule));
        }

        /**
         * @param listener Quota value for listeners. Changing this updates
         * the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder listener(@Nullable Output<Integer> listener) {
            $.listener = listener;
            return this;
        }

        /**
         * @param listener Quota value for listeners. Changing this updates
         * the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder listener(Integer listener) {
            return listener(Output.of(listener));
        }

        /**
         * @param loadbalancer Quota value for loadbalancers. Changing this
         * updates the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(@Nullable Output<Integer> loadbalancer) {
            $.loadbalancer = loadbalancer;
            return this;
        }

        /**
         * @param loadbalancer Quota value for loadbalancers. Changing this
         * updates the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(Integer loadbalancer) {
            return loadbalancer(Output.of(loadbalancer));
        }

        /**
         * @param member Quota value for members. Changing this updates
         * the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder member(@Nullable Output<Integer> member) {
            $.member = member;
            return this;
        }

        /**
         * @param member Quota value for members. Changing this updates
         * the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder member(Integer member) {
            return member(Output.of(member));
        }

        /**
         * @param pool Quota value for pools. Changing this updates the
         * the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder pool(@Nullable Output<Integer> pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param pool Quota value for pools. Changing this updates the
         * the existing quota. Omitting it sets it to 0.
         * 
         * @return builder
         * 
         */
        public Builder pool(Integer pool) {
            return pool(Output.of(pool));
        }

        /**
         * @param projectId ID of the project to manage quotas. Changing this
         * creates a new quota.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId ID of the project to manage quotas. Changing this
         * creates a new quota.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region Region in which to manage quotas. Changing this
         * creates a new quota. If ommited, the region of the credentials is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region in which to manage quotas. Changing this
         * creates a new quota. If ommited, the region of the credentials is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public QuotaArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("QuotaArgs", "projectId");
            }
            return $;
        }
    }

}
