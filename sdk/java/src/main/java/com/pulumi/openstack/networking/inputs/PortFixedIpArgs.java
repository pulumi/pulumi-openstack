// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortFixedIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortFixedIpArgs Empty = new PortFixedIpArgs();

    /**
     * IP address desired in the subnet for this port. If
     * you don&#39;t specify `ip_address`, an available IP address from the specified
     * subnet will be allocated to this port. This field will not be populated if it
     * is left blank or omitted. To retrieve the assigned IP address, use the
     * `all_fixed_ips` attribute.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return IP address desired in the subnet for this port. If
     * you don&#39;t specify `ip_address`, an available IP address from the specified
     * subnet will be allocated to this port. This field will not be populated if it
     * is left blank or omitted. To retrieve the assigned IP address, use the
     * `all_fixed_ips` attribute.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Subnet in which to allocate IP address for
     * this port.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return Subnet in which to allocate IP address for
     * this port.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private PortFixedIpArgs() {}

    private PortFixedIpArgs(PortFixedIpArgs $) {
        this.ipAddress = $.ipAddress;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortFixedIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortFixedIpArgs $;

        public Builder() {
            $ = new PortFixedIpArgs();
        }

        public Builder(PortFixedIpArgs defaults) {
            $ = new PortFixedIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipAddress IP address desired in the subnet for this port. If
         * you don&#39;t specify `ip_address`, an available IP address from the specified
         * subnet will be allocated to this port. This field will not be populated if it
         * is left blank or omitted. To retrieve the assigned IP address, use the
         * `all_fixed_ips` attribute.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress IP address desired in the subnet for this port. If
         * you don&#39;t specify `ip_address`, an available IP address from the specified
         * subnet will be allocated to this port. This field will not be populated if it
         * is left blank or omitted. To retrieve the assigned IP address, use the
         * `all_fixed_ips` attribute.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param subnetId Subnet in which to allocate IP address for
         * this port.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId Subnet in which to allocate IP address for
         * this port.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public PortFixedIpArgs build() {
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("PortFixedIpArgs", "subnetId");
            }
            return $;
        }
    }

}
