// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.openstack.networking.outputs.GetNetworkSegment;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkResult {
    /**
     * @return The administrative state of the network.
     * 
     */
    private String adminStateUp;
    /**
     * @return The set of string tags applied on the network.
     * 
     */
    private List<String> allTags;
    /**
     * @return The availability zone candidates for the network.
     * 
     */
    private List<String> availabilityZoneHints;
    /**
     * @return See Argument Reference above.
     * 
     */
    private @Nullable String description;
    /**
     * @return The network DNS domain. Available, when Neutron DNS extension
     * is enabled
     * 
     */
    private String dnsDomain;
    /**
     * @return See Argument Reference above.
     * 
     */
    private @Nullable Boolean external;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String matchingSubnetCidr;
    /**
     * @return See Argument Reference above.
     * 
     */
    private @Nullable Integer mtu;
    /**
     * @return See Argument Reference above.
     * 
     */
    private @Nullable String name;
    private @Nullable String networkId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String region;
    /**
     * @return An array of one or more provider segment objects.
     * 
     */
    private List<GetNetworkSegment> segments;
    /**
     * @return Specifies whether the network resource can be accessed by any
     * tenant or not.
     * 
     */
    private String shared;
    private @Nullable String status;
    /**
     * @return A list of subnet IDs belonging to the network.
     * 
     */
    private List<String> subnets;
    private @Nullable List<String> tags;
    private @Nullable String tenantId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private @Nullable Boolean transparentVlan;

    private GetNetworkResult() {}
    /**
     * @return The administrative state of the network.
     * 
     */
    public String adminStateUp() {
        return this.adminStateUp;
    }
    /**
     * @return The set of string tags applied on the network.
     * 
     */
    public List<String> allTags() {
        return this.allTags;
    }
    /**
     * @return The availability zone candidates for the network.
     * 
     */
    public List<String> availabilityZoneHints() {
        return this.availabilityZoneHints;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The network DNS domain. Available, when Neutron DNS extension
     * is enabled
     * 
     */
    public String dnsDomain() {
        return this.dnsDomain;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Boolean> external() {
        return Optional.ofNullable(this.external);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> matchingSubnetCidr() {
        return Optional.ofNullable(this.matchingSubnetCidr);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Integer> mtu() {
        return Optional.ofNullable(this.mtu);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return An array of one or more provider segment objects.
     * 
     */
    public List<GetNetworkSegment> segments() {
        return this.segments;
    }
    /**
     * @return Specifies whether the network resource can be accessed by any
     * tenant or not.
     * 
     */
    public String shared() {
        return this.shared;
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return A list of subnet IDs belonging to the network.
     * 
     */
    public List<String> subnets() {
        return this.subnets;
    }
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Boolean> transparentVlan() {
        return Optional.ofNullable(this.transparentVlan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminStateUp;
        private List<String> allTags;
        private List<String> availabilityZoneHints;
        private @Nullable String description;
        private String dnsDomain;
        private @Nullable Boolean external;
        private String id;
        private @Nullable String matchingSubnetCidr;
        private @Nullable Integer mtu;
        private @Nullable String name;
        private @Nullable String networkId;
        private String region;
        private List<GetNetworkSegment> segments;
        private String shared;
        private @Nullable String status;
        private List<String> subnets;
        private @Nullable List<String> tags;
        private @Nullable String tenantId;
        private @Nullable Boolean transparentVlan;
        public Builder() {}
        public Builder(GetNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminStateUp = defaults.adminStateUp;
    	      this.allTags = defaults.allTags;
    	      this.availabilityZoneHints = defaults.availabilityZoneHints;
    	      this.description = defaults.description;
    	      this.dnsDomain = defaults.dnsDomain;
    	      this.external = defaults.external;
    	      this.id = defaults.id;
    	      this.matchingSubnetCidr = defaults.matchingSubnetCidr;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.networkId = defaults.networkId;
    	      this.region = defaults.region;
    	      this.segments = defaults.segments;
    	      this.shared = defaults.shared;
    	      this.status = defaults.status;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.transparentVlan = defaults.transparentVlan;
        }

        @CustomType.Setter
        public Builder adminStateUp(String adminStateUp) {
            if (adminStateUp == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "adminStateUp");
            }
            this.adminStateUp = adminStateUp;
            return this;
        }
        @CustomType.Setter
        public Builder allTags(List<String> allTags) {
            if (allTags == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "allTags");
            }
            this.allTags = allTags;
            return this;
        }
        public Builder allTags(String... allTags) {
            return allTags(List.of(allTags));
        }
        @CustomType.Setter
        public Builder availabilityZoneHints(List<String> availabilityZoneHints) {
            if (availabilityZoneHints == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "availabilityZoneHints");
            }
            this.availabilityZoneHints = availabilityZoneHints;
            return this;
        }
        public Builder availabilityZoneHints(String... availabilityZoneHints) {
            return availabilityZoneHints(List.of(availabilityZoneHints));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsDomain(String dnsDomain) {
            if (dnsDomain == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "dnsDomain");
            }
            this.dnsDomain = dnsDomain;
            return this;
        }
        @CustomType.Setter
        public Builder external(@Nullable Boolean external) {

            this.external = external;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder matchingSubnetCidr(@Nullable String matchingSubnetCidr) {

            this.matchingSubnetCidr = matchingSubnetCidr;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(@Nullable Integer mtu) {

            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkId(@Nullable String networkId) {

            this.networkId = networkId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder segments(List<GetNetworkSegment> segments) {
            if (segments == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "segments");
            }
            this.segments = segments;
            return this;
        }
        public Builder segments(GetNetworkSegment... segments) {
            return segments(List.of(segments));
        }
        @CustomType.Setter
        public Builder shared(String shared) {
            if (shared == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "shared");
            }
            this.shared = shared;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnets(List<String> subnets) {
            if (subnets == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "subnets");
            }
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {

            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder transparentVlan(@Nullable Boolean transparentVlan) {

            this.transparentVlan = transparentVlan;
            return this;
        }
        public GetNetworkResult build() {
            final var _resultValue = new GetNetworkResult();
            _resultValue.adminStateUp = adminStateUp;
            _resultValue.allTags = allTags;
            _resultValue.availabilityZoneHints = availabilityZoneHints;
            _resultValue.description = description;
            _resultValue.dnsDomain = dnsDomain;
            _resultValue.external = external;
            _resultValue.id = id;
            _resultValue.matchingSubnetCidr = matchingSubnetCidr;
            _resultValue.mtu = mtu;
            _resultValue.name = name;
            _resultValue.networkId = networkId;
            _resultValue.region = region;
            _resultValue.segments = segments;
            _resultValue.shared = shared;
            _resultValue.status = status;
            _resultValue.subnets = subnets;
            _resultValue.tags = tags;
            _resultValue.tenantId = tenantId;
            _resultValue.transparentVlan = transparentVlan;
            return _resultValue;
        }
    }
}
