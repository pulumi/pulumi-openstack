// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.sharedfilesystem.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetShareNetworkPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetShareNetworkPlainArgs Empty = new GetShareNetworkPlainArgs();

    /**
     * The human-readable description of the share network.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The human-readable description of the share network.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The IP version of the share network. Can either be 4 or 6.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Integer ipVersion;

    /**
     * @return The IP version of the share network. Can either be 4 or 6.
     * 
     */
    public Optional<Integer> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The name of the share network.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the share network.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The share network type. Can either be VLAN, VXLAN,
     * GRE, or flat.
     * 
     */
    @Import(name="networkType")
    private @Nullable String networkType;

    /**
     * @return The share network type. Can either be VLAN, VXLAN,
     * GRE, or flat.
     * 
     */
    public Optional<String> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The neutron network UUID of the share network.
     * 
     */
    @Import(name="neutronNetId")
    private @Nullable String neutronNetId;

    /**
     * @return The neutron network UUID of the share network.
     * 
     */
    public Optional<String> neutronNetId() {
        return Optional.ofNullable(this.neutronNetId);
    }

    /**
     * The neutron subnet UUID of the share network.
     * 
     */
    @Import(name="neutronSubnetId")
    private @Nullable String neutronSubnetId;

    /**
     * @return The neutron subnet UUID of the share network.
     * 
     */
    public Optional<String> neutronSubnetId() {
        return Optional.ofNullable(this.neutronSubnetId);
    }

    /**
     * The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to read a share network. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Shared File System client.
     * A Shared File System client is needed to read a share network. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The security service IDs associated with
     * the share network.
     * 
     */
    @Import(name="securityServiceId")
    private @Nullable String securityServiceId;

    /**
     * @return The security service IDs associated with
     * the share network.
     * 
     */
    public Optional<String> securityServiceId() {
        return Optional.ofNullable(this.securityServiceId);
    }

    /**
     * The share network segmentation ID.
     * 
     */
    @Import(name="segmentationId")
    private @Nullable Integer segmentationId;

    /**
     * @return The share network segmentation ID.
     * 
     */
    public Optional<Integer> segmentationId() {
        return Optional.ofNullable(this.segmentationId);
    }

    private GetShareNetworkPlainArgs() {}

    private GetShareNetworkPlainArgs(GetShareNetworkPlainArgs $) {
        this.description = $.description;
        this.ipVersion = $.ipVersion;
        this.name = $.name;
        this.networkType = $.networkType;
        this.neutronNetId = $.neutronNetId;
        this.neutronSubnetId = $.neutronSubnetId;
        this.region = $.region;
        this.securityServiceId = $.securityServiceId;
        this.segmentationId = $.segmentationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetShareNetworkPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetShareNetworkPlainArgs $;

        public Builder() {
            $ = new GetShareNetworkPlainArgs();
        }

        public Builder(GetShareNetworkPlainArgs defaults) {
            $ = new GetShareNetworkPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The human-readable description of the share network.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param ipVersion The IP version of the share network. Can either be 4 or 6.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Integer ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param name The name of the share network.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param networkType The share network type. Can either be VLAN, VXLAN,
         * GRE, or flat.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable String networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param neutronNetId The neutron network UUID of the share network.
         * 
         * @return builder
         * 
         */
        public Builder neutronNetId(@Nullable String neutronNetId) {
            $.neutronNetId = neutronNetId;
            return this;
        }

        /**
         * @param neutronSubnetId The neutron subnet UUID of the share network.
         * 
         * @return builder
         * 
         */
        public Builder neutronSubnetId(@Nullable String neutronSubnetId) {
            $.neutronSubnetId = neutronSubnetId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * A Shared File System client is needed to read a share network. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param securityServiceId The security service IDs associated with
         * the share network.
         * 
         * @return builder
         * 
         */
        public Builder securityServiceId(@Nullable String securityServiceId) {
            $.securityServiceId = securityServiceId;
            return this;
        }

        /**
         * @param segmentationId The share network segmentation ID.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(@Nullable Integer segmentationId) {
            $.segmentationId = segmentationId;
            return this;
        }

        public GetShareNetworkPlainArgs build() {
            return $;
        }
    }

}
