// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDnsZoneArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDnsZoneArgs Empty = new GetDnsZoneArgs();

    /**
     * Try to obtain zone ID by listing all projects
     * (requires admin role by default, depends on your policy configuration)
     * 
     */
    @Import(name="allProjects")
    private @Nullable Output<String> allProjects;

    /**
     * @return Try to obtain zone ID by listing all projects
     * (requires admin role by default, depends on your policy configuration)
     * 
     */
    public Optional<Output<String>> allProjects() {
        return Optional.ofNullable(this.allProjects);
    }

    /**
     * Attributes of the DNS Service scheduler.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    /**
     * @return Attributes of the DNS Service scheduler.
     * 
     */
    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The time the zone was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The time the zone was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * A description of the zone.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the zone.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The email contact for the zone record.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The email contact for the zone record.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * An array of master DNS servers. When `type` is  `SECONDARY`.
     * 
     */
    @Import(name="masters")
    private @Nullable Output<List<String>> masters;

    /**
     * @return An array of master DNS servers. When `type` is  `SECONDARY`.
     * 
     */
    public Optional<Output<List<String>>> masters() {
        return Optional.ofNullable(this.masters);
    }

    /**
     * The name of the zone.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the zone.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the pool hosting the zone.
     * 
     */
    @Import(name="poolId")
    private @Nullable Output<String> poolId;

    /**
     * @return The ID of the pool hosting the zone.
     * 
     */
    public Optional<Output<String>> poolId() {
        return Optional.ofNullable(this.poolId);
    }

    /**
     * The ID of the project the DNS zone is obtained from,
     * sets `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target project)
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project the DNS zone is obtained from,
     * sets `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target project)
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 DNS client.
     * A DNS client is needed to retrieve zone ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 DNS client.
     * A DNS client is needed to retrieve zone ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The serial number of the zone.
     * 
     */
    @Import(name="serial")
    private @Nullable Output<Integer> serial;

    /**
     * @return The serial number of the zone.
     * 
     */
    public Optional<Output<Integer>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * The zone&#39;s status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The zone&#39;s status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The time the zone was transferred.
     * 
     */
    @Import(name="transferredAt")
    private @Nullable Output<String> transferredAt;

    /**
     * @return The time the zone was transferred.
     * 
     */
    public Optional<Output<String>> transferredAt() {
        return Optional.ofNullable(this.transferredAt);
    }

    /**
     * The time to live (TTL) of the zone.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The time to live (TTL) of the zone.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The type of the zone. Can either be `PRIMARY` or `SECONDARY`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the zone. Can either be `PRIMARY` or `SECONDARY`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The time the zone was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The time the zone was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The version of the zone.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the zone.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private GetDnsZoneArgs() {}

    private GetDnsZoneArgs(GetDnsZoneArgs $) {
        this.allProjects = $.allProjects;
        this.attributes = $.attributes;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.email = $.email;
        this.masters = $.masters;
        this.name = $.name;
        this.poolId = $.poolId;
        this.projectId = $.projectId;
        this.region = $.region;
        this.serial = $.serial;
        this.status = $.status;
        this.transferredAt = $.transferredAt;
        this.ttl = $.ttl;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDnsZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDnsZoneArgs $;

        public Builder() {
            $ = new GetDnsZoneArgs();
        }

        public Builder(GetDnsZoneArgs defaults) {
            $ = new GetDnsZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allProjects Try to obtain zone ID by listing all projects
         * (requires admin role by default, depends on your policy configuration)
         * 
         * @return builder
         * 
         */
        public Builder allProjects(@Nullable Output<String> allProjects) {
            $.allProjects = allProjects;
            return this;
        }

        /**
         * @param allProjects Try to obtain zone ID by listing all projects
         * (requires admin role by default, depends on your policy configuration)
         * 
         * @return builder
         * 
         */
        public Builder allProjects(String allProjects) {
            return allProjects(Output.of(allProjects));
        }

        /**
         * @param attributes Attributes of the DNS Service scheduler.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Attributes of the DNS Service scheduler.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param createdAt The time the zone was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The time the zone was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description A description of the zone.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the zone.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param email The email contact for the zone record.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email contact for the zone record.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param masters An array of master DNS servers. When `type` is  `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder masters(@Nullable Output<List<String>> masters) {
            $.masters = masters;
            return this;
        }

        /**
         * @param masters An array of master DNS servers. When `type` is  `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder masters(List<String> masters) {
            return masters(Output.of(masters));
        }

        /**
         * @param masters An array of master DNS servers. When `type` is  `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder masters(String... masters) {
            return masters(List.of(masters));
        }

        /**
         * @param name The name of the zone.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the zone.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param poolId The ID of the pool hosting the zone.
         * 
         * @return builder
         * 
         */
        public Builder poolId(@Nullable Output<String> poolId) {
            $.poolId = poolId;
            return this;
        }

        /**
         * @param poolId The ID of the pool hosting the zone.
         * 
         * @return builder
         * 
         */
        public Builder poolId(String poolId) {
            return poolId(Output.of(poolId));
        }

        /**
         * @param projectId The ID of the project the DNS zone is obtained from,
         * sets `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target project)
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project the DNS zone is obtained from,
         * sets `X-Auth-Sudo-Tenant-ID` header (requires an assigned user role in target project)
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region The region in which to obtain the V2 DNS client.
         * A DNS client is needed to retrieve zone ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 DNS client.
         * A DNS client is needed to retrieve zone ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serial The serial number of the zone.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<Integer> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial The serial number of the zone.
         * 
         * @return builder
         * 
         */
        public Builder serial(Integer serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param status The zone&#39;s status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The zone&#39;s status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param transferredAt The time the zone was transferred.
         * 
         * @return builder
         * 
         */
        public Builder transferredAt(@Nullable Output<String> transferredAt) {
            $.transferredAt = transferredAt;
            return this;
        }

        /**
         * @param transferredAt The time the zone was transferred.
         * 
         * @return builder
         * 
         */
        public Builder transferredAt(String transferredAt) {
            return transferredAt(Output.of(transferredAt));
        }

        /**
         * @param ttl The time to live (TTL) of the zone.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The time to live (TTL) of the zone.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param type The type of the zone. Can either be `PRIMARY` or `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the zone. Can either be `PRIMARY` or `SECONDARY`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updatedAt The time the zone was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The time the zone was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param version The version of the zone.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the zone.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public GetDnsZoneArgs build() {
            return $;
        }
    }

}
