// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.openstack.identity.inputs.UserMultiFactorAuthRuleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * The default project this user belongs to.
     * 
     */
    @Import(name="defaultProjectId")
    private @Nullable Output<String> defaultProjectId;

    /**
     * @return The default project this user belongs to.
     * 
     */
    public Optional<Output<String>> defaultProjectId() {
        return Optional.ofNullable(this.defaultProjectId);
    }

    /**
     * A description of the user.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the user.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The domain this user belongs to.
     * 
     */
    @Import(name="domainId")
    private @Nullable Output<String> domainId;

    /**
     * @return The domain this user belongs to.
     * 
     */
    public Optional<Output<String>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * Whether the user is enabled or disabled. Valid
     * values are `true` and `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the user is enabled or disabled. Valid
     * values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Free-form key/value pairs of extra information.
     * 
     */
    @Import(name="extra")
    private @Nullable Output<Map<String,String>> extra;

    /**
     * @return Free-form key/value pairs of extra information.
     * 
     */
    public Optional<Output<Map<String,String>>> extra() {
        return Optional.ofNullable(this.extra);
    }

    /**
     * User will not have to
     * change their password upon first use. Valid values are `true` and `false`.
     * 
     */
    @Import(name="ignoreChangePasswordUponFirstUse")
    private @Nullable Output<Boolean> ignoreChangePasswordUponFirstUse;

    /**
     * @return User will not have to
     * change their password upon first use. Valid values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> ignoreChangePasswordUponFirstUse() {
        return Optional.ofNullable(this.ignoreChangePasswordUponFirstUse);
    }

    /**
     * User will not have a failure
     * lockout placed on their account. Valid values are `true` and `false`.
     * 
     */
    @Import(name="ignoreLockoutFailureAttempts")
    private @Nullable Output<Boolean> ignoreLockoutFailureAttempts;

    /**
     * @return User will not have a failure
     * lockout placed on their account. Valid values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> ignoreLockoutFailureAttempts() {
        return Optional.ofNullable(this.ignoreLockoutFailureAttempts);
    }

    /**
     * User&#39;s password will not expire.
     * Valid values are `true` and `false`.
     * 
     */
    @Import(name="ignorePasswordExpiry")
    private @Nullable Output<Boolean> ignorePasswordExpiry;

    /**
     * @return User&#39;s password will not expire.
     * Valid values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> ignorePasswordExpiry() {
        return Optional.ofNullable(this.ignorePasswordExpiry);
    }

    /**
     * Whether to enable multi-factor
     * authentication. Valid values are `true` and `false`.
     * 
     */
    @Import(name="multiFactorAuthEnabled")
    private @Nullable Output<Boolean> multiFactorAuthEnabled;

    /**
     * @return Whether to enable multi-factor
     * authentication. Valid values are `true` and `false`.
     * 
     */
    public Optional<Output<Boolean>> multiFactorAuthEnabled() {
        return Optional.ofNullable(this.multiFactorAuthEnabled);
    }

    /**
     * A multi-factor authentication rule.
     * The structure is documented below. Please see the
     * [Ocata release notes](https://docs.openstack.org/releasenotes/keystone/ocata.html)
     * for more information on how to use mulit-factor rules.
     * 
     */
    @Import(name="multiFactorAuthRules")
    private @Nullable Output<List<UserMultiFactorAuthRuleArgs>> multiFactorAuthRules;

    /**
     * @return A multi-factor authentication rule.
     * The structure is documented below. Please see the
     * [Ocata release notes](https://docs.openstack.org/releasenotes/keystone/ocata.html)
     * for more information on how to use mulit-factor rules.
     * 
     */
    public Optional<Output<List<UserMultiFactorAuthRuleArgs>>> multiFactorAuthRules() {
        return Optional.ofNullable(this.multiFactorAuthRules);
    }

    /**
     * The name of the user.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the user.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The password for the user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new User.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new User.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.defaultProjectId = $.defaultProjectId;
        this.description = $.description;
        this.domainId = $.domainId;
        this.enabled = $.enabled;
        this.extra = $.extra;
        this.ignoreChangePasswordUponFirstUse = $.ignoreChangePasswordUponFirstUse;
        this.ignoreLockoutFailureAttempts = $.ignoreLockoutFailureAttempts;
        this.ignorePasswordExpiry = $.ignorePasswordExpiry;
        this.multiFactorAuthEnabled = $.multiFactorAuthEnabled;
        this.multiFactorAuthRules = $.multiFactorAuthRules;
        this.name = $.name;
        this.password = $.password;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultProjectId The default project this user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectId(@Nullable Output<String> defaultProjectId) {
            $.defaultProjectId = defaultProjectId;
            return this;
        }

        /**
         * @param defaultProjectId The default project this user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectId(String defaultProjectId) {
            return defaultProjectId(Output.of(defaultProjectId));
        }

        /**
         * @param description A description of the user.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the user.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainId The domain this user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder domainId(@Nullable Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId The domain this user belongs to.
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param enabled Whether the user is enabled or disabled. Valid
         * values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the user is enabled or disabled. Valid
         * values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param extra Free-form key/value pairs of extra information.
         * 
         * @return builder
         * 
         */
        public Builder extra(@Nullable Output<Map<String,String>> extra) {
            $.extra = extra;
            return this;
        }

        /**
         * @param extra Free-form key/value pairs of extra information.
         * 
         * @return builder
         * 
         */
        public Builder extra(Map<String,String> extra) {
            return extra(Output.of(extra));
        }

        /**
         * @param ignoreChangePasswordUponFirstUse User will not have to
         * change their password upon first use. Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreChangePasswordUponFirstUse(@Nullable Output<Boolean> ignoreChangePasswordUponFirstUse) {
            $.ignoreChangePasswordUponFirstUse = ignoreChangePasswordUponFirstUse;
            return this;
        }

        /**
         * @param ignoreChangePasswordUponFirstUse User will not have to
         * change their password upon first use. Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreChangePasswordUponFirstUse(Boolean ignoreChangePasswordUponFirstUse) {
            return ignoreChangePasswordUponFirstUse(Output.of(ignoreChangePasswordUponFirstUse));
        }

        /**
         * @param ignoreLockoutFailureAttempts User will not have a failure
         * lockout placed on their account. Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreLockoutFailureAttempts(@Nullable Output<Boolean> ignoreLockoutFailureAttempts) {
            $.ignoreLockoutFailureAttempts = ignoreLockoutFailureAttempts;
            return this;
        }

        /**
         * @param ignoreLockoutFailureAttempts User will not have a failure
         * lockout placed on their account. Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreLockoutFailureAttempts(Boolean ignoreLockoutFailureAttempts) {
            return ignoreLockoutFailureAttempts(Output.of(ignoreLockoutFailureAttempts));
        }

        /**
         * @param ignorePasswordExpiry User&#39;s password will not expire.
         * Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignorePasswordExpiry(@Nullable Output<Boolean> ignorePasswordExpiry) {
            $.ignorePasswordExpiry = ignorePasswordExpiry;
            return this;
        }

        /**
         * @param ignorePasswordExpiry User&#39;s password will not expire.
         * Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignorePasswordExpiry(Boolean ignorePasswordExpiry) {
            return ignorePasswordExpiry(Output.of(ignorePasswordExpiry));
        }

        /**
         * @param multiFactorAuthEnabled Whether to enable multi-factor
         * authentication. Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder multiFactorAuthEnabled(@Nullable Output<Boolean> multiFactorAuthEnabled) {
            $.multiFactorAuthEnabled = multiFactorAuthEnabled;
            return this;
        }

        /**
         * @param multiFactorAuthEnabled Whether to enable multi-factor
         * authentication. Valid values are `true` and `false`.
         * 
         * @return builder
         * 
         */
        public Builder multiFactorAuthEnabled(Boolean multiFactorAuthEnabled) {
            return multiFactorAuthEnabled(Output.of(multiFactorAuthEnabled));
        }

        /**
         * @param multiFactorAuthRules A multi-factor authentication rule.
         * The structure is documented below. Please see the
         * [Ocata release notes](https://docs.openstack.org/releasenotes/keystone/ocata.html)
         * for more information on how to use mulit-factor rules.
         * 
         * @return builder
         * 
         */
        public Builder multiFactorAuthRules(@Nullable Output<List<UserMultiFactorAuthRuleArgs>> multiFactorAuthRules) {
            $.multiFactorAuthRules = multiFactorAuthRules;
            return this;
        }

        /**
         * @param multiFactorAuthRules A multi-factor authentication rule.
         * The structure is documented below. Please see the
         * [Ocata release notes](https://docs.openstack.org/releasenotes/keystone/ocata.html)
         * for more information on how to use mulit-factor rules.
         * 
         * @return builder
         * 
         */
        public Builder multiFactorAuthRules(List<UserMultiFactorAuthRuleArgs> multiFactorAuthRules) {
            return multiFactorAuthRules(Output.of(multiFactorAuthRules));
        }

        /**
         * @param multiFactorAuthRules A multi-factor authentication rule.
         * The structure is documented below. Please see the
         * [Ocata release notes](https://docs.openstack.org/releasenotes/keystone/ocata.html)
         * for more information on how to use mulit-factor rules.
         * 
         * @return builder
         * 
         */
        public Builder multiFactorAuthRules(UserMultiFactorAuthRuleArgs... multiFactorAuthRules) {
            return multiFactorAuthRules(List.of(multiFactorAuthRules));
        }

        /**
         * @param name The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The password for the user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param region The region in which to obtain the V3 Keystone client.
         * If omitted, the `region` argument of the provider is used. Changing this
         * creates a new User.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V3 Keystone client.
         * If omitted, the `region` argument of the provider is used. Changing this
         * creates a new User.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public UserState build() {
            return $;
        }
    }

}
