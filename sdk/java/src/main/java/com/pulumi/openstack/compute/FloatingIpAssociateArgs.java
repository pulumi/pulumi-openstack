// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FloatingIpAssociateArgs extends com.pulumi.resources.ResourceArgs {

    public static final FloatingIpAssociateArgs Empty = new FloatingIpAssociateArgs();

    /**
     * The specific IP address to direct traffic to.
     * 
     */
    @Import(name="fixedIp")
    private @Nullable Output<String> fixedIp;

    /**
     * @return The specific IP address to direct traffic to.
     * 
     */
    public Optional<Output<String>> fixedIp() {
        return Optional.ofNullable(this.fixedIp);
    }

    /**
     * The floating IP to associate.
     * 
     */
    @Import(name="floatingIp", required=true)
    private Output<String> floatingIp;

    /**
     * @return The floating IP to associate.
     * 
     */
    public Output<String> floatingIp() {
        return this.floatingIp;
    }

    /**
     * The instance to associte the floating IP with.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The instance to associte the floating IP with.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new floatingip_associate.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Compute client.
     * Keypairs are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new floatingip_associate.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="waitUntilAssociated")
    private @Nullable Output<Boolean> waitUntilAssociated;

    public Optional<Output<Boolean>> waitUntilAssociated() {
        return Optional.ofNullable(this.waitUntilAssociated);
    }

    private FloatingIpAssociateArgs() {}

    private FloatingIpAssociateArgs(FloatingIpAssociateArgs $) {
        this.fixedIp = $.fixedIp;
        this.floatingIp = $.floatingIp;
        this.instanceId = $.instanceId;
        this.region = $.region;
        this.waitUntilAssociated = $.waitUntilAssociated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FloatingIpAssociateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FloatingIpAssociateArgs $;

        public Builder() {
            $ = new FloatingIpAssociateArgs();
        }

        public Builder(FloatingIpAssociateArgs defaults) {
            $ = new FloatingIpAssociateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fixedIp The specific IP address to direct traffic to.
         * 
         * @return builder
         * 
         */
        public Builder fixedIp(@Nullable Output<String> fixedIp) {
            $.fixedIp = fixedIp;
            return this;
        }

        /**
         * @param fixedIp The specific IP address to direct traffic to.
         * 
         * @return builder
         * 
         */
        public Builder fixedIp(String fixedIp) {
            return fixedIp(Output.of(fixedIp));
        }

        /**
         * @param floatingIp The floating IP to associate.
         * 
         * @return builder
         * 
         */
        public Builder floatingIp(Output<String> floatingIp) {
            $.floatingIp = floatingIp;
            return this;
        }

        /**
         * @param floatingIp The floating IP to associate.
         * 
         * @return builder
         * 
         */
        public Builder floatingIp(String floatingIp) {
            return floatingIp(Output.of(floatingIp));
        }

        /**
         * @param instanceId The instance to associte the floating IP with.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The instance to associte the floating IP with.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * Keypairs are associated with accounts, but a Compute client is needed to
         * create one. If omitted, the `region` argument of the provider is used.
         * Changing this creates a new floatingip_associate.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * Keypairs are associated with accounts, but a Compute client is needed to
         * create one. If omitted, the `region` argument of the provider is used.
         * Changing this creates a new floatingip_associate.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder waitUntilAssociated(@Nullable Output<Boolean> waitUntilAssociated) {
            $.waitUntilAssociated = waitUntilAssociated;
            return this;
        }

        public Builder waitUntilAssociated(Boolean waitUntilAssociated) {
            return waitUntilAssociated(Output.of(waitUntilAssociated));
        }

        public FloatingIpAssociateArgs build() {
            if ($.floatingIp == null) {
                throw new MissingRequiredPropertyException("FloatingIpAssociateArgs", "floatingIp");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("FloatingIpAssociateArgs", "instanceId");
            }
            return $;
        }
    }

}
