// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubnetPoolPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubnetPoolPlainArgs Empty = new GetSubnetPoolPlainArgs();

    /**
     * The Neutron address scope that subnetpools
     * is assigned to.
     * 
     */
    @Import(name="addressScopeId")
    private @Nullable String addressScopeId;

    /**
     * @return The Neutron address scope that subnetpools
     * is assigned to.
     * 
     */
    public Optional<String> addressScopeId() {
        return Optional.ofNullable(this.addressScopeId);
    }

    /**
     * The size of the subnetpool default prefix
     * length.
     * 
     */
    @Import(name="defaultPrefixlen")
    private @Nullable Integer defaultPrefixlen;

    /**
     * @return The size of the subnetpool default prefix
     * length.
     * 
     */
    public Optional<Integer> defaultPrefixlen() {
        return Optional.ofNullable(this.defaultPrefixlen);
    }

    /**
     * The per-project quota on the prefix space that
     * can be allocated from the subnetpool for project subnets.
     * 
     */
    @Import(name="defaultQuota")
    private @Nullable Integer defaultQuota;

    /**
     * @return The per-project quota on the prefix space that
     * can be allocated from the subnetpool for project subnets.
     * 
     */
    public Optional<Integer> defaultQuota() {
        return Optional.ofNullable(this.defaultQuota);
    }

    /**
     * The human-readable description for the subnetpool.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The human-readable description for the subnetpool.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The IP protocol version.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Integer ipVersion;

    /**
     * @return The IP protocol version.
     * 
     */
    public Optional<Integer> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * Whether the subnetpool is default subnetpool or not.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Boolean isDefault;

    /**
     * @return Whether the subnetpool is default subnetpool or not.
     * 
     */
    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * The size of the subnetpool max prefix length.
     * 
     */
    @Import(name="maxPrefixlen")
    private @Nullable Integer maxPrefixlen;

    /**
     * @return The size of the subnetpool max prefix length.
     * 
     */
    public Optional<Integer> maxPrefixlen() {
        return Optional.ofNullable(this.maxPrefixlen);
    }

    /**
     * The size of the subnetpool min prefix length.
     * 
     */
    @Import(name="minPrefixlen")
    private @Nullable Integer minPrefixlen;

    /**
     * @return The size of the subnetpool min prefix length.
     * 
     */
    public Optional<Integer> minPrefixlen() {
        return Optional.ofNullable(this.minPrefixlen);
    }

    /**
     * The name of the subnetpool.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the subnetpool.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner of the subnetpool.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return The owner of the subnetpool.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to retrieve a subnetpool id. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to retrieve a subnetpool id. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Whether this subnetpool is shared across all projects.
     * 
     */
    @Import(name="shared")
    private @Nullable Boolean shared;

    /**
     * @return Whether this subnetpool is shared across all projects.
     * 
     */
    public Optional<Boolean> shared() {
        return Optional.ofNullable(this.shared);
    }

    /**
     * The list of subnetpool tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return The list of subnetpool tags to filter.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetSubnetPoolPlainArgs() {}

    private GetSubnetPoolPlainArgs(GetSubnetPoolPlainArgs $) {
        this.addressScopeId = $.addressScopeId;
        this.defaultPrefixlen = $.defaultPrefixlen;
        this.defaultQuota = $.defaultQuota;
        this.description = $.description;
        this.ipVersion = $.ipVersion;
        this.isDefault = $.isDefault;
        this.maxPrefixlen = $.maxPrefixlen;
        this.minPrefixlen = $.minPrefixlen;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
        this.shared = $.shared;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubnetPoolPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubnetPoolPlainArgs $;

        public Builder() {
            $ = new GetSubnetPoolPlainArgs();
        }

        public Builder(GetSubnetPoolPlainArgs defaults) {
            $ = new GetSubnetPoolPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressScopeId The Neutron address scope that subnetpools
         * is assigned to.
         * 
         * @return builder
         * 
         */
        public Builder addressScopeId(@Nullable String addressScopeId) {
            $.addressScopeId = addressScopeId;
            return this;
        }

        /**
         * @param defaultPrefixlen The size of the subnetpool default prefix
         * length.
         * 
         * @return builder
         * 
         */
        public Builder defaultPrefixlen(@Nullable Integer defaultPrefixlen) {
            $.defaultPrefixlen = defaultPrefixlen;
            return this;
        }

        /**
         * @param defaultQuota The per-project quota on the prefix space that
         * can be allocated from the subnetpool for project subnets.
         * 
         * @return builder
         * 
         */
        public Builder defaultQuota(@Nullable Integer defaultQuota) {
            $.defaultQuota = defaultQuota;
            return this;
        }

        /**
         * @param description The human-readable description for the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param ipVersion The IP protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Integer ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param isDefault Whether the subnetpool is default subnetpool or not.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Boolean isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param maxPrefixlen The size of the subnetpool max prefix length.
         * 
         * @return builder
         * 
         */
        public Builder maxPrefixlen(@Nullable Integer maxPrefixlen) {
            $.maxPrefixlen = maxPrefixlen;
            return this;
        }

        /**
         * @param minPrefixlen The size of the subnetpool min prefix length.
         * 
         * @return builder
         * 
         */
        public Builder minPrefixlen(@Nullable Integer minPrefixlen) {
            $.minPrefixlen = minPrefixlen;
            return this;
        }

        /**
         * @param name The name of the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param projectId The owner of the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to retrieve a subnetpool id. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param shared Whether this subnetpool is shared across all projects.
         * 
         * @return builder
         * 
         */
        public Builder shared(@Nullable Boolean shared) {
            $.shared = shared;
            return this;
        }

        /**
         * @param tags The list of subnetpool tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of subnetpool tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GetSubnetPoolPlainArgs build() {
            return $;
        }
    }

}
