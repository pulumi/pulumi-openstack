// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.keymanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.openstack.keymanager.inputs.OrderV1MetaArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrderV1State extends com.pulumi.resources.ResourceArgs {

    public static final OrderV1State Empty = new OrderV1State();

    /**
     * The container reference / where to find the container.
     * 
     */
    @Import(name="containerRef")
    private @Nullable Output<String> containerRef;

    /**
     * @return The container reference / where to find the container.
     * 
     */
    public Optional<Output<String>> containerRef() {
        return Optional.ofNullable(this.containerRef);
    }

    /**
     * The date the order was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return The date the order was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * The creator of the order.
     * 
     */
    @Import(name="creatorId")
    private @Nullable Output<String> creatorId;

    /**
     * @return The creator of the order.
     * 
     */
    public Optional<Output<String>> creatorId() {
        return Optional.ofNullable(this.creatorId);
    }

    /**
     * Dictionary containing the order metadata used to generate the order. The structure is described below.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<OrderV1MetaArgs> meta;

    /**
     * @return Dictionary containing the order metadata used to generate the order. The structure is described below.
     * 
     */
    public Optional<Output<OrderV1MetaArgs>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * The order reference / where to find the order.
     * 
     */
    @Import(name="orderRef")
    private @Nullable Output<String> orderRef;

    /**
     * @return The order reference / where to find the order.
     * 
     */
    public Optional<Output<String>> orderRef() {
        return Optional.ofNullable(this.orderRef);
    }

    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a order. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 order.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a order. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 order.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The secret reference / where to find the secret.
     * 
     */
    @Import(name="secretRef")
    private @Nullable Output<String> secretRef;

    /**
     * @return The secret reference / where to find the secret.
     * 
     */
    public Optional<Output<String>> secretRef() {
        return Optional.ofNullable(this.secretRef);
    }

    /**
     * The status of the order.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the order.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The sub status of the order.
     * 
     */
    @Import(name="subStatus")
    private @Nullable Output<String> subStatus;

    /**
     * @return The sub status of the order.
     * 
     */
    public Optional<Output<String>> subStatus() {
        return Optional.ofNullable(this.subStatus);
    }

    /**
     * The sub status message of the order.
     * 
     */
    @Import(name="subStatusMessage")
    private @Nullable Output<String> subStatusMessage;

    /**
     * @return The sub status message of the order.
     * 
     */
    public Optional<Output<String>> subStatusMessage() {
        return Optional.ofNullable(this.subStatusMessage);
    }

    /**
     * The type of key to be generated. Must be one of `asymmetric`, `key`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of key to be generated. Must be one of `asymmetric`, `key`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The date the order was last updated.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return The date the order was last updated.
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    private OrderV1State() {}

    private OrderV1State(OrderV1State $) {
        this.containerRef = $.containerRef;
        this.created = $.created;
        this.creatorId = $.creatorId;
        this.meta = $.meta;
        this.orderRef = $.orderRef;
        this.region = $.region;
        this.secretRef = $.secretRef;
        this.status = $.status;
        this.subStatus = $.subStatus;
        this.subStatusMessage = $.subStatusMessage;
        this.type = $.type;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrderV1State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrderV1State $;

        public Builder() {
            $ = new OrderV1State();
        }

        public Builder(OrderV1State defaults) {
            $ = new OrderV1State(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerRef The container reference / where to find the container.
         * 
         * @return builder
         * 
         */
        public Builder containerRef(@Nullable Output<String> containerRef) {
            $.containerRef = containerRef;
            return this;
        }

        /**
         * @param containerRef The container reference / where to find the container.
         * 
         * @return builder
         * 
         */
        public Builder containerRef(String containerRef) {
            return containerRef(Output.of(containerRef));
        }

        /**
         * @param created The date the order was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The date the order was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param creatorId The creator of the order.
         * 
         * @return builder
         * 
         */
        public Builder creatorId(@Nullable Output<String> creatorId) {
            $.creatorId = creatorId;
            return this;
        }

        /**
         * @param creatorId The creator of the order.
         * 
         * @return builder
         * 
         */
        public Builder creatorId(String creatorId) {
            return creatorId(Output.of(creatorId));
        }

        /**
         * @param meta Dictionary containing the order metadata used to generate the order. The structure is described below.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<OrderV1MetaArgs> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Dictionary containing the order metadata used to generate the order. The structure is described below.
         * 
         * @return builder
         * 
         */
        public Builder meta(OrderV1MetaArgs meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param orderRef The order reference / where to find the order.
         * 
         * @return builder
         * 
         */
        public Builder orderRef(@Nullable Output<String> orderRef) {
            $.orderRef = orderRef;
            return this;
        }

        /**
         * @param orderRef The order reference / where to find the order.
         * 
         * @return builder
         * 
         */
        public Builder orderRef(String orderRef) {
            return orderRef(Output.of(orderRef));
        }

        /**
         * @param region The region in which to obtain the V1 KeyManager client.
         * A KeyManager client is needed to create a order. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * V1 order.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V1 KeyManager client.
         * A KeyManager client is needed to create a order. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * V1 order.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretRef The secret reference / where to find the secret.
         * 
         * @return builder
         * 
         */
        public Builder secretRef(@Nullable Output<String> secretRef) {
            $.secretRef = secretRef;
            return this;
        }

        /**
         * @param secretRef The secret reference / where to find the secret.
         * 
         * @return builder
         * 
         */
        public Builder secretRef(String secretRef) {
            return secretRef(Output.of(secretRef));
        }

        /**
         * @param status The status of the order.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the order.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subStatus The sub status of the order.
         * 
         * @return builder
         * 
         */
        public Builder subStatus(@Nullable Output<String> subStatus) {
            $.subStatus = subStatus;
            return this;
        }

        /**
         * @param subStatus The sub status of the order.
         * 
         * @return builder
         * 
         */
        public Builder subStatus(String subStatus) {
            return subStatus(Output.of(subStatus));
        }

        /**
         * @param subStatusMessage The sub status message of the order.
         * 
         * @return builder
         * 
         */
        public Builder subStatusMessage(@Nullable Output<String> subStatusMessage) {
            $.subStatusMessage = subStatusMessage;
            return this;
        }

        /**
         * @param subStatusMessage The sub status message of the order.
         * 
         * @return builder
         * 
         */
        public Builder subStatusMessage(String subStatusMessage) {
            return subStatusMessage(Output.of(subStatusMessage));
        }

        /**
         * @param type The type of key to be generated. Must be one of `asymmetric`, `key`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of key to be generated. Must be one of `asymmetric`, `key`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updated The date the order was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated The date the order was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public OrderV1State build() {
            return $;
        }
    }

}
