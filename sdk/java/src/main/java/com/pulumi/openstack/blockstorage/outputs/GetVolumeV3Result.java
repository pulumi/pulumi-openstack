// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.blockstorage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVolumeV3Result {
    /**
     * @return Indicates if the volume is bootable.
     * 
     */
    private String bootable;
    /**
     * @return The OpenStack host on which the volume is located.
     * 
     */
    private String host;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return See Argument Reference above.
     * 
     */
    private Map<String,Object> metadata;
    /**
     * @return Indicates if the volume can be attached to more then one server.
     * 
     */
    private Boolean multiattach;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String name;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String region;
    /**
     * @return The size of the volume in GBs.
     * 
     */
    private Integer size;
    /**
     * @return The ID of the volume from which the current volume was created.
     * 
     */
    private String sourceVolumeId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String status;
    /**
     * @return The type of the volume.
     * 
     */
    private String volumeType;

    private GetVolumeV3Result() {}
    /**
     * @return Indicates if the volume is bootable.
     * 
     */
    public String bootable() {
        return this.bootable;
    }
    /**
     * @return The OpenStack host on which the volume is located.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return Indicates if the volume can be attached to more then one server.
     * 
     */
    public Boolean multiattach() {
        return this.multiattach;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The size of the volume in GBs.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The ID of the volume from which the current volume was created.
     * 
     */
    public String sourceVolumeId() {
        return this.sourceVolumeId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of the volume.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeV3Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bootable;
        private String host;
        private String id;
        private Map<String,Object> metadata;
        private Boolean multiattach;
        private String name;
        private String region;
        private Integer size;
        private String sourceVolumeId;
        private String status;
        private String volumeType;
        public Builder() {}
        public Builder(GetVolumeV3Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootable = defaults.bootable;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.multiattach = defaults.multiattach;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.size = defaults.size;
    	      this.sourceVolumeId = defaults.sourceVolumeId;
    	      this.status = defaults.status;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder bootable(String bootable) {
            this.bootable = Objects.requireNonNull(bootable);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder multiattach(Boolean multiattach) {
            this.multiattach = Objects.requireNonNull(multiattach);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder sourceVolumeId(String sourceVolumeId) {
            this.sourceVolumeId = Objects.requireNonNull(sourceVolumeId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public GetVolumeV3Result build() {
            final var _resultValue = new GetVolumeV3Result();
            _resultValue.bootable = bootable;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.metadata = metadata;
            _resultValue.multiattach = multiattach;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.size = size;
            _resultValue.sourceVolumeId = sourceVolumeId;
            _resultValue.status = status;
            _resultValue.volumeType = volumeType;
            return _resultValue;
        }
    }
}
