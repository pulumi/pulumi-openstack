// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.openstack.Utilities;
import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
import com.pulumi.openstack.networking.inputs.GetAddressScopePlainArgs;
import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
import com.pulumi.openstack.networking.inputs.GetFloatingIpPlainArgs;
import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
import com.pulumi.openstack.networking.inputs.GetNetworkPlainArgs;
import com.pulumi.openstack.networking.inputs.GetPortArgs;
import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
import com.pulumi.openstack.networking.inputs.GetPortIdsPlainArgs;
import com.pulumi.openstack.networking.inputs.GetPortPlainArgs;
import com.pulumi.openstack.networking.inputs.GetQosBandwidthLimitRuleArgs;
import com.pulumi.openstack.networking.inputs.GetQosBandwidthLimitRulePlainArgs;
import com.pulumi.openstack.networking.inputs.GetQosDscpMarkingRuleArgs;
import com.pulumi.openstack.networking.inputs.GetQosDscpMarkingRulePlainArgs;
import com.pulumi.openstack.networking.inputs.GetQosMinimumBandwidthRuleArgs;
import com.pulumi.openstack.networking.inputs.GetQosMinimumBandwidthRulePlainArgs;
import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
import com.pulumi.openstack.networking.inputs.GetQosPolicyPlainArgs;
import com.pulumi.openstack.networking.inputs.GetQuotaV2Args;
import com.pulumi.openstack.networking.inputs.GetQuotaV2PlainArgs;
import com.pulumi.openstack.networking.inputs.GetRouterArgs;
import com.pulumi.openstack.networking.inputs.GetRouterPlainArgs;
import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
import com.pulumi.openstack.networking.inputs.GetSecGroupPlainArgs;
import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2PlainArgs;
import com.pulumi.openstack.networking.inputs.GetSubnetPlainArgs;
import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
import com.pulumi.openstack.networking.inputs.GetSubnetPoolPlainArgs;
import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
import com.pulumi.openstack.networking.inputs.GetTrunkPlainArgs;
import com.pulumi.openstack.networking.outputs.GetAddressScopeResult;
import com.pulumi.openstack.networking.outputs.GetFloatingIpResult;
import com.pulumi.openstack.networking.outputs.GetNetworkResult;
import com.pulumi.openstack.networking.outputs.GetPortIdsResult;
import com.pulumi.openstack.networking.outputs.GetPortResult;
import com.pulumi.openstack.networking.outputs.GetQosBandwidthLimitRuleResult;
import com.pulumi.openstack.networking.outputs.GetQosDscpMarkingRuleResult;
import com.pulumi.openstack.networking.outputs.GetQosMinimumBandwidthRuleResult;
import com.pulumi.openstack.networking.outputs.GetQosPolicyResult;
import com.pulumi.openstack.networking.outputs.GetQuotaV2Result;
import com.pulumi.openstack.networking.outputs.GetRouterResult;
import com.pulumi.openstack.networking.outputs.GetSecGroupResult;
import com.pulumi.openstack.networking.outputs.GetSubnetIdsV2Result;
import com.pulumi.openstack.networking.outputs.GetSubnetPoolResult;
import com.pulumi.openstack.networking.outputs.GetSubnetResult;
import com.pulumi.openstack.networking.outputs.GetTrunkResult;
import java.util.concurrent.CompletableFuture;

public final class NetworkingFunctions {
    /**
     * Use this data source to get the ID of an available OpenStack address-scope.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var publicAddressscope = NetworkingFunctions.getAddressScope(GetAddressScopeArgs.builder()
     *             .name("public_addressscope")
     *             .shared(true)
     *             .ipVersion(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAddressScopeResult> getAddressScope() {
        return getAddressScope(GetAddressScopeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack address-scope.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var publicAddressscope = NetworkingFunctions.getAddressScope(GetAddressScopeArgs.builder()
     *             .name("public_addressscope")
     *             .shared(true)
     *             .ipVersion(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAddressScopeResult> getAddressScopePlain() {
        return getAddressScopePlain(GetAddressScopePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack address-scope.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var publicAddressscope = NetworkingFunctions.getAddressScope(GetAddressScopeArgs.builder()
     *             .name("public_addressscope")
     *             .shared(true)
     *             .ipVersion(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAddressScopeResult> getAddressScope(GetAddressScopeArgs args) {
        return getAddressScope(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack address-scope.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var publicAddressscope = NetworkingFunctions.getAddressScope(GetAddressScopeArgs.builder()
     *             .name("public_addressscope")
     *             .shared(true)
     *             .ipVersion(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAddressScopeResult> getAddressScopePlain(GetAddressScopePlainArgs args) {
        return getAddressScopePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack address-scope.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var publicAddressscope = NetworkingFunctions.getAddressScope(GetAddressScopeArgs.builder()
     *             .name("public_addressscope")
     *             .shared(true)
     *             .ipVersion(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAddressScopeResult> getAddressScope(GetAddressScopeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getAddressScope:getAddressScope", TypeShape.of(GetAddressScopeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack address-scope.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var publicAddressscope = NetworkingFunctions.getAddressScope(GetAddressScopeArgs.builder()
     *             .name("public_addressscope")
     *             .shared(true)
     *             .ipVersion(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAddressScopeResult> getAddressScope(GetAddressScopeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getAddressScope:getAddressScope", TypeShape.of(GetAddressScopeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack address-scope.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetAddressScopeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var publicAddressscope = NetworkingFunctions.getAddressScope(GetAddressScopeArgs.builder()
     *             .name("public_addressscope")
     *             .shared(true)
     *             .ipVersion(4)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAddressScopeResult> getAddressScopePlain(GetAddressScopePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getAddressScope:getAddressScope", TypeShape.of(GetAddressScopeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack floating IP.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var floatingip1 = NetworkingFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .address("192.168.0.4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp() {
        return getFloatingIp(GetFloatingIpArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack floating IP.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var floatingip1 = NetworkingFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .address("192.168.0.4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain() {
        return getFloatingIpPlain(GetFloatingIpPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack floating IP.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var floatingip1 = NetworkingFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .address("192.168.0.4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args) {
        return getFloatingIp(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack floating IP.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var floatingip1 = NetworkingFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .address("192.168.0.4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain(GetFloatingIpPlainArgs args) {
        return getFloatingIpPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack floating IP.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var floatingip1 = NetworkingFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .address("192.168.0.4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack floating IP.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var floatingip1 = NetworkingFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .address("192.168.0.4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack floating IP.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var floatingip1 = NetworkingFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .address("192.168.0.4")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain(GetFloatingIpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network = NetworkingFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("tf_test_network")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork() {
        return getNetwork(GetNetworkArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network = NetworkingFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("tf_test_network")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain() {
        return getNetworkPlain(GetNetworkPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network = NetworkingFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("tf_test_network")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args) {
        return getNetwork(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network = NetworkingFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("tf_test_network")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args) {
        return getNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network = NetworkingFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("tf_test_network")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network = NetworkingFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("tf_test_network")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network = NetworkingFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("tf_test_network")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack port.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var port1 = NetworkingFunctions.getPort(GetPortArgs.builder()
     *             .name("port_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort() {
        return getPort(GetPortArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack port.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var port1 = NetworkingFunctions.getPort(GetPortArgs.builder()
     *             .name("port_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain() {
        return getPortPlain(GetPortPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack port.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var port1 = NetworkingFunctions.getPort(GetPortArgs.builder()
     *             .name("port_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args) {
        return getPort(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack port.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var port1 = NetworkingFunctions.getPort(GetPortArgs.builder()
     *             .name("port_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args) {
        return getPortPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack port.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var port1 = NetworkingFunctions.getPort(GetPortArgs.builder()
     *             .name("port_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack port.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var port1 = NetworkingFunctions.getPort(GetPortArgs.builder()
     *             .name("port_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack port.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var port1 = NetworkingFunctions.getPort(GetPortArgs.builder()
     *             .name("port_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of Openstack Port IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ports = NetworkingFunctions.getPortIds(GetPortIdsArgs.builder()
     *             .name("port")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortIdsResult> getPortIds() {
        return getPortIds(GetPortIdsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Port IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ports = NetworkingFunctions.getPortIds(GetPortIdsArgs.builder()
     *             .name("port")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortIdsResult> getPortIdsPlain() {
        return getPortIdsPlain(GetPortIdsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Port IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ports = NetworkingFunctions.getPortIds(GetPortIdsArgs.builder()
     *             .name("port")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortIdsResult> getPortIds(GetPortIdsArgs args) {
        return getPortIds(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Port IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ports = NetworkingFunctions.getPortIds(GetPortIdsArgs.builder()
     *             .name("port")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortIdsResult> getPortIdsPlain(GetPortIdsPlainArgs args) {
        return getPortIdsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Port IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ports = NetworkingFunctions.getPortIds(GetPortIdsArgs.builder()
     *             .name("port")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortIdsResult> getPortIds(GetPortIdsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getPortIds:getPortIds", TypeShape.of(GetPortIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of Openstack Port IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ports = NetworkingFunctions.getPortIds(GetPortIdsArgs.builder()
     *             .name("port")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortIdsResult> getPortIds(GetPortIdsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getPortIds:getPortIds", TypeShape.of(GetPortIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of Openstack Port IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetPortIdsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ports = NetworkingFunctions.getPortIds(GetPortIdsArgs.builder()
     *             .name("port")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortIdsResult> getPortIdsPlain(GetPortIdsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getPortIds:getPortIds", TypeShape.of(GetPortIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS bandwidth limit rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosBandwidthLimitRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosBandwidthLimitRule1 = NetworkingFunctions.getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs.builder()
     *             .maxKbps(300)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosBandwidthLimitRuleResult> getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs args) {
        return getQosBandwidthLimitRule(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS bandwidth limit rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosBandwidthLimitRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosBandwidthLimitRule1 = NetworkingFunctions.getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs.builder()
     *             .maxKbps(300)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosBandwidthLimitRuleResult> getQosBandwidthLimitRulePlain(GetQosBandwidthLimitRulePlainArgs args) {
        return getQosBandwidthLimitRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS bandwidth limit rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosBandwidthLimitRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosBandwidthLimitRule1 = NetworkingFunctions.getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs.builder()
     *             .maxKbps(300)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosBandwidthLimitRuleResult> getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosBandwidthLimitRule:getQosBandwidthLimitRule", TypeShape.of(GetQosBandwidthLimitRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS bandwidth limit rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosBandwidthLimitRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosBandwidthLimitRule1 = NetworkingFunctions.getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs.builder()
     *             .maxKbps(300)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosBandwidthLimitRuleResult> getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosBandwidthLimitRule:getQosBandwidthLimitRule", TypeShape.of(GetQosBandwidthLimitRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS bandwidth limit rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosBandwidthLimitRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosBandwidthLimitRule1 = NetworkingFunctions.getQosBandwidthLimitRule(GetQosBandwidthLimitRuleArgs.builder()
     *             .maxKbps(300)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosBandwidthLimitRuleResult> getQosBandwidthLimitRulePlain(GetQosBandwidthLimitRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getQosBandwidthLimitRule:getQosBandwidthLimitRule", TypeShape.of(GetQosBandwidthLimitRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS DSCP marking rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosDscpMarkingRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosDscpMarkingRule1 = NetworkingFunctions.getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs.builder()
     *             .dscpMark(26)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosDscpMarkingRuleResult> getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs args) {
        return getQosDscpMarkingRule(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS DSCP marking rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosDscpMarkingRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosDscpMarkingRule1 = NetworkingFunctions.getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs.builder()
     *             .dscpMark(26)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosDscpMarkingRuleResult> getQosDscpMarkingRulePlain(GetQosDscpMarkingRulePlainArgs args) {
        return getQosDscpMarkingRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS DSCP marking rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosDscpMarkingRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosDscpMarkingRule1 = NetworkingFunctions.getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs.builder()
     *             .dscpMark(26)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosDscpMarkingRuleResult> getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosDscpMarkingRule:getQosDscpMarkingRule", TypeShape.of(GetQosDscpMarkingRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS DSCP marking rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosDscpMarkingRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosDscpMarkingRule1 = NetworkingFunctions.getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs.builder()
     *             .dscpMark(26)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosDscpMarkingRuleResult> getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosDscpMarkingRule:getQosDscpMarkingRule", TypeShape.of(GetQosDscpMarkingRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS DSCP marking rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosDscpMarkingRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosDscpMarkingRule1 = NetworkingFunctions.getQosDscpMarkingRule(GetQosDscpMarkingRuleArgs.builder()
     *             .dscpMark(26)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosDscpMarkingRuleResult> getQosDscpMarkingRulePlain(GetQosDscpMarkingRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getQosDscpMarkingRule:getQosDscpMarkingRule", TypeShape.of(GetQosDscpMarkingRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS minimum bandwidth rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosMinimumBandwidthRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosMinBwRule1 = NetworkingFunctions.getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs.builder()
     *             .minKbps(2000)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosMinimumBandwidthRuleResult> getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs args) {
        return getQosMinimumBandwidthRule(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS minimum bandwidth rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosMinimumBandwidthRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosMinBwRule1 = NetworkingFunctions.getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs.builder()
     *             .minKbps(2000)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosMinimumBandwidthRuleResult> getQosMinimumBandwidthRulePlain(GetQosMinimumBandwidthRulePlainArgs args) {
        return getQosMinimumBandwidthRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS minimum bandwidth rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosMinimumBandwidthRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosMinBwRule1 = NetworkingFunctions.getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs.builder()
     *             .minKbps(2000)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosMinimumBandwidthRuleResult> getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosMinimumBandwidthRule:getQosMinimumBandwidthRule", TypeShape.of(GetQosMinimumBandwidthRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS minimum bandwidth rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosMinimumBandwidthRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosMinBwRule1 = NetworkingFunctions.getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs.builder()
     *             .minKbps(2000)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosMinimumBandwidthRuleResult> getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosMinimumBandwidthRule:getQosMinimumBandwidthRule", TypeShape.of(GetQosMinimumBandwidthRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS minimum bandwidth rule.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosMinimumBandwidthRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosMinBwRule1 = NetworkingFunctions.getQosMinimumBandwidthRule(GetQosMinimumBandwidthRuleArgs.builder()
     *             .minKbps(2000)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosMinimumBandwidthRuleResult> getQosMinimumBandwidthRulePlain(GetQosMinimumBandwidthRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getQosMinimumBandwidthRule:getQosMinimumBandwidthRule", TypeShape.of(GetQosMinimumBandwidthRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosPolicy1 = NetworkingFunctions.getQosPolicy(GetQosPolicyArgs.builder()
     *             .name("qos_policy_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosPolicyResult> getQosPolicy() {
        return getQosPolicy(GetQosPolicyArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosPolicy1 = NetworkingFunctions.getQosPolicy(GetQosPolicyArgs.builder()
     *             .name("qos_policy_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosPolicyResult> getQosPolicyPlain() {
        return getQosPolicyPlain(GetQosPolicyPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosPolicy1 = NetworkingFunctions.getQosPolicy(GetQosPolicyArgs.builder()
     *             .name("qos_policy_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosPolicyResult> getQosPolicy(GetQosPolicyArgs args) {
        return getQosPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosPolicy1 = NetworkingFunctions.getQosPolicy(GetQosPolicyArgs.builder()
     *             .name("qos_policy_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosPolicyResult> getQosPolicyPlain(GetQosPolicyPlainArgs args) {
        return getQosPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosPolicy1 = NetworkingFunctions.getQosPolicy(GetQosPolicyArgs.builder()
     *             .name("qos_policy_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosPolicyResult> getQosPolicy(GetQosPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosPolicy:getQosPolicy", TypeShape.of(GetQosPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosPolicy1 = NetworkingFunctions.getQosPolicy(GetQosPolicyArgs.builder()
     *             .name("qos_policy_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQosPolicyResult> getQosPolicy(GetQosPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQosPolicy:getQosPolicy", TypeShape.of(GetQosPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack QoS policy.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQosPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var qosPolicy1 = NetworkingFunctions.getQosPolicy(GetQosPolicyArgs.builder()
     *             .name("qos_policy_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQosPolicyResult> getQosPolicyPlain(GetQosPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getQosPolicy:getQosPolicy", TypeShape.of(GetQosPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the networking quota of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQuotaV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = NetworkingFunctions.getQuotaV2(GetQuotaV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotaV2Result> getQuotaV2(GetQuotaV2Args args) {
        return getQuotaV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the networking quota of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQuotaV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = NetworkingFunctions.getQuotaV2(GetQuotaV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuotaV2Result> getQuotaV2Plain(GetQuotaV2PlainArgs args) {
        return getQuotaV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the networking quota of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQuotaV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = NetworkingFunctions.getQuotaV2(GetQuotaV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotaV2Result> getQuotaV2(GetQuotaV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQuotaV2:getQuotaV2", TypeShape.of(GetQuotaV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the networking quota of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQuotaV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = NetworkingFunctions.getQuotaV2(GetQuotaV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotaV2Result> getQuotaV2(GetQuotaV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getQuotaV2:getQuotaV2", TypeShape.of(GetQuotaV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the networking quota of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetQuotaV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = NetworkingFunctions.getQuotaV2(GetQuotaV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuotaV2Result> getQuotaV2Plain(GetQuotaV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getQuotaV2:getQuotaV2", TypeShape.of(GetQuotaV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack router.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var router = NetworkingFunctions.getRouter(GetRouterArgs.builder()
     *             .name("router_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouterResult> getRouter() {
        return getRouter(GetRouterArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack router.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var router = NetworkingFunctions.getRouter(GetRouterArgs.builder()
     *             .name("router_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouterResult> getRouterPlain() {
        return getRouterPlain(GetRouterPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack router.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var router = NetworkingFunctions.getRouter(GetRouterArgs.builder()
     *             .name("router_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouterResult> getRouter(GetRouterArgs args) {
        return getRouter(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack router.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var router = NetworkingFunctions.getRouter(GetRouterArgs.builder()
     *             .name("router_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouterResult> getRouterPlain(GetRouterPlainArgs args) {
        return getRouterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack router.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var router = NetworkingFunctions.getRouter(GetRouterArgs.builder()
     *             .name("router_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouterResult> getRouter(GetRouterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getRouter:getRouter", TypeShape.of(GetRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack router.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var router = NetworkingFunctions.getRouter(GetRouterArgs.builder()
     *             .name("router_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouterResult> getRouter(GetRouterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getRouter:getRouter", TypeShape.of(GetRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack router.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var router = NetworkingFunctions.getRouter(GetRouterArgs.builder()
     *             .name("router_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouterResult> getRouterPlain(GetRouterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getRouter:getRouter", TypeShape.of(GetRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack security group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var secgroup = NetworkingFunctions.getSecGroup(GetSecGroupArgs.builder()
     *             .name("tf_test_secgroup")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecGroupResult> getSecGroup() {
        return getSecGroup(GetSecGroupArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack security group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var secgroup = NetworkingFunctions.getSecGroup(GetSecGroupArgs.builder()
     *             .name("tf_test_secgroup")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecGroupResult> getSecGroupPlain() {
        return getSecGroupPlain(GetSecGroupPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack security group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var secgroup = NetworkingFunctions.getSecGroup(GetSecGroupArgs.builder()
     *             .name("tf_test_secgroup")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecGroupResult> getSecGroup(GetSecGroupArgs args) {
        return getSecGroup(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack security group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var secgroup = NetworkingFunctions.getSecGroup(GetSecGroupArgs.builder()
     *             .name("tf_test_secgroup")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecGroupResult> getSecGroupPlain(GetSecGroupPlainArgs args) {
        return getSecGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack security group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var secgroup = NetworkingFunctions.getSecGroup(GetSecGroupArgs.builder()
     *             .name("tf_test_secgroup")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecGroupResult> getSecGroup(GetSecGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSecGroup:getSecGroup", TypeShape.of(GetSecGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack security group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var secgroup = NetworkingFunctions.getSecGroup(GetSecGroupArgs.builder()
     *             .name("tf_test_secgroup")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSecGroupResult> getSecGroup(GetSecGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSecGroup:getSecGroup", TypeShape.of(GetSecGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack security group.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSecGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var secgroup = NetworkingFunctions.getSecGroup(GetSecGroupArgs.builder()
     *             .name("tf_test_secgroup")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSecGroupResult> getSecGroupPlain(GetSecGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getSecGroup:getSecGroup", TypeShape.of(GetSecGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnet.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnet1 = NetworkingFunctions.getSubnet(GetSubnetArgs.builder()
     *             .name("subnet_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetResult> getSubnet() {
        return getSubnet(GetSubnetArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnet.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnet1 = NetworkingFunctions.getSubnet(GetSubnetArgs.builder()
     *             .name("subnet_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetResult> getSubnetPlain() {
        return getSubnetPlain(GetSubnetPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnet.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnet1 = NetworkingFunctions.getSubnet(GetSubnetArgs.builder()
     *             .name("subnet_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetResult> getSubnet(GetSubnetArgs args) {
        return getSubnet(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnet.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnet1 = NetworkingFunctions.getSubnet(GetSubnetArgs.builder()
     *             .name("subnet_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetResult> getSubnetPlain(GetSubnetPlainArgs args) {
        return getSubnetPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnet.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnet1 = NetworkingFunctions.getSubnet(GetSubnetArgs.builder()
     *             .name("subnet_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetResult> getSubnet(GetSubnetArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSubnet:getSubnet", TypeShape.of(GetSubnetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnet.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnet1 = NetworkingFunctions.getSubnet(GetSubnetArgs.builder()
     *             .name("subnet_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetResult> getSubnet(GetSubnetArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSubnet:getSubnet", TypeShape.of(GetSubnetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnet.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnet1 = NetworkingFunctions.getSubnet(GetSubnetArgs.builder()
     *             .name("subnet_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetResult> getSubnetPlain(GetSubnetPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getSubnet:getSubnet", TypeShape.of(GetSubnetResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of Openstack Subnet IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnets = NetworkingFunctions.getSubnetIdsV2(GetSubnetIdsV2Args.builder()
     *             .nameRegex("public")
     *             .tags("public")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetIdsV2Result> getSubnetIdsV2() {
        return getSubnetIdsV2(GetSubnetIdsV2Args.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Subnet IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnets = NetworkingFunctions.getSubnetIdsV2(GetSubnetIdsV2Args.builder()
     *             .nameRegex("public")
     *             .tags("public")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetIdsV2Result> getSubnetIdsV2Plain() {
        return getSubnetIdsV2Plain(GetSubnetIdsV2PlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Subnet IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnets = NetworkingFunctions.getSubnetIdsV2(GetSubnetIdsV2Args.builder()
     *             .nameRegex("public")
     *             .tags("public")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetIdsV2Result> getSubnetIdsV2(GetSubnetIdsV2Args args) {
        return getSubnetIdsV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Subnet IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnets = NetworkingFunctions.getSubnetIdsV2(GetSubnetIdsV2Args.builder()
     *             .nameRegex("public")
     *             .tags("public")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetIdsV2Result> getSubnetIdsV2Plain(GetSubnetIdsV2PlainArgs args) {
        return getSubnetIdsV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of Openstack Subnet IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnets = NetworkingFunctions.getSubnetIdsV2(GetSubnetIdsV2Args.builder()
     *             .nameRegex("public")
     *             .tags("public")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetIdsV2Result> getSubnetIdsV2(GetSubnetIdsV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSubnetIdsV2:getSubnetIdsV2", TypeShape.of(GetSubnetIdsV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of Openstack Subnet IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnets = NetworkingFunctions.getSubnetIdsV2(GetSubnetIdsV2Args.builder()
     *             .nameRegex("public")
     *             .tags("public")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetIdsV2Result> getSubnetIdsV2(GetSubnetIdsV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSubnetIdsV2:getSubnetIdsV2", TypeShape.of(GetSubnetIdsV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of Openstack Subnet IDs matching the
     * specified criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetIdsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnets = NetworkingFunctions.getSubnetIdsV2(GetSubnetIdsV2Args.builder()
     *             .nameRegex("public")
     *             .tags("public")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetIdsV2Result> getSubnetIdsV2Plain(GetSubnetIdsV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getSubnetIdsV2:getSubnetIdsV2", TypeShape.of(GetSubnetIdsV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnetpool.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnetpool1 = NetworkingFunctions.getSubnetPool(GetSubnetPoolArgs.builder()
     *             .name("subnetpool_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetPoolResult> getSubnetPool() {
        return getSubnetPool(GetSubnetPoolArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnetpool.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnetpool1 = NetworkingFunctions.getSubnetPool(GetSubnetPoolArgs.builder()
     *             .name("subnetpool_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetPoolResult> getSubnetPoolPlain() {
        return getSubnetPoolPlain(GetSubnetPoolPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnetpool.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnetpool1 = NetworkingFunctions.getSubnetPool(GetSubnetPoolArgs.builder()
     *             .name("subnetpool_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetPoolResult> getSubnetPool(GetSubnetPoolArgs args) {
        return getSubnetPool(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnetpool.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnetpool1 = NetworkingFunctions.getSubnetPool(GetSubnetPoolArgs.builder()
     *             .name("subnetpool_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetPoolResult> getSubnetPoolPlain(GetSubnetPoolPlainArgs args) {
        return getSubnetPoolPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnetpool.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnetpool1 = NetworkingFunctions.getSubnetPool(GetSubnetPoolArgs.builder()
     *             .name("subnetpool_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetPoolResult> getSubnetPool(GetSubnetPoolArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSubnetPool:getSubnetPool", TypeShape.of(GetSubnetPoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnetpool.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnetpool1 = NetworkingFunctions.getSubnetPool(GetSubnetPoolArgs.builder()
     *             .name("subnetpool_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSubnetPoolResult> getSubnetPool(GetSubnetPoolArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getSubnetPool:getSubnetPool", TypeShape.of(GetSubnetPoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack subnetpool.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetSubnetPoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subnetpool1 = NetworkingFunctions.getSubnetPool(GetSubnetPoolArgs.builder()
     *             .name("subnetpool_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSubnetPoolResult> getSubnetPoolPlain(GetSubnetPoolPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getSubnetPool:getSubnetPool", TypeShape.of(GetSubnetPoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack trunk.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var trunk1 = NetworkingFunctions.getTrunk(GetTrunkArgs.builder()
     *             .name("trunk_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTrunkResult> getTrunk() {
        return getTrunk(GetTrunkArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack trunk.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var trunk1 = NetworkingFunctions.getTrunk(GetTrunkArgs.builder()
     *             .name("trunk_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTrunkResult> getTrunkPlain() {
        return getTrunkPlain(GetTrunkPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack trunk.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var trunk1 = NetworkingFunctions.getTrunk(GetTrunkArgs.builder()
     *             .name("trunk_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTrunkResult> getTrunk(GetTrunkArgs args) {
        return getTrunk(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack trunk.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var trunk1 = NetworkingFunctions.getTrunk(GetTrunkArgs.builder()
     *             .name("trunk_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTrunkResult> getTrunkPlain(GetTrunkPlainArgs args) {
        return getTrunkPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack trunk.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var trunk1 = NetworkingFunctions.getTrunk(GetTrunkArgs.builder()
     *             .name("trunk_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTrunkResult> getTrunk(GetTrunkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getTrunk:getTrunk", TypeShape.of(GetTrunkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack trunk.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var trunk1 = NetworkingFunctions.getTrunk(GetTrunkArgs.builder()
     *             .name("trunk_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTrunkResult> getTrunk(GetTrunkArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:networking/getTrunk:getTrunk", TypeShape.of(GetTrunkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack trunk.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.networking.NetworkingFunctions;
     * import com.pulumi.openstack.networking.inputs.GetTrunkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var trunk1 = NetworkingFunctions.getTrunk(GetTrunkArgs.builder()
     *             .name("trunk_1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTrunkResult> getTrunkPlain(GetTrunkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:networking/getTrunk:getTrunk", TypeShape.of(GetTrunkResult.class), args, Utilities.withVersion(options));
    }
}
