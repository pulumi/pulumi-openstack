// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectIdsV3Result {
    private String description;
    private String domainId;
    private @Nullable Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> ids;
    private @Nullable Boolean isDomain;
    private @Nullable String name;
    private @Nullable String nameRegex;
    private @Nullable String parentId;
    private String region;
    private @Nullable List<String> tags;

    private GetProjectIdsV3Result() {}
    public String description() {
        return this.description;
    }
    public String domainId() {
        return this.domainId;
    }
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> ids() {
        return this.ids;
    }
    public Optional<Boolean> isDomain() {
        return Optional.ofNullable(this.isDomain);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    public Optional<String> parentId() {
        return Optional.ofNullable(this.parentId);
    }
    public String region() {
        return this.region;
    }
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectIdsV3Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String domainId;
        private @Nullable Boolean enabled;
        private String id;
        private List<String> ids;
        private @Nullable Boolean isDomain;
        private @Nullable String name;
        private @Nullable String nameRegex;
        private @Nullable String parentId;
        private String region;
        private @Nullable List<String> tags;
        public Builder() {}
        public Builder(GetProjectIdsV3Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.domainId = defaults.domainId;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.isDomain = defaults.isDomain;
    	      this.name = defaults.name;
    	      this.nameRegex = defaults.nameRegex;
    	      this.parentId = defaults.parentId;
    	      this.region = defaults.region;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetProjectIdsV3Result", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainId(String domainId) {
            if (domainId == null) {
              throw new MissingRequiredPropertyException("GetProjectIdsV3Result", "domainId");
            }
            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectIdsV3Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(List<String> ids) {
            if (ids == null) {
              throw new MissingRequiredPropertyException("GetProjectIdsV3Result", "ids");
            }
            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder isDomain(@Nullable Boolean isDomain) {

            this.isDomain = isDomain;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {

            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder parentId(@Nullable String parentId) {

            this.parentId = parentId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetProjectIdsV3Result", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetProjectIdsV3Result build() {
            final var _resultValue = new GetProjectIdsV3Result();
            _resultValue.description = description;
            _resultValue.domainId = domainId;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.isDomain = isDomain;
            _resultValue.name = name;
            _resultValue.nameRegex = nameRegex;
            _resultValue.parentId = parentId;
            _resultValue.region = region;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
