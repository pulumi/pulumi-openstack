// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.keymanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrderV1MetaArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrderV1MetaArgs Empty = new OrderV1MetaArgs();

    /**
     * Algorithm to use for key generation.
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    /**
     * @return Algorithm to use for key generation.
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * Bit lenght of key to be generated.
     * 
     */
    @Import(name="bitLength", required=true)
    private Output<Integer> bitLength;

    /**
     * @return Bit lenght of key to be generated.
     * 
     */
    public Output<Integer> bitLength() {
        return this.bitLength;
    }

    /**
     * This is a UTC timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. If set, the secret will not be available after this time.
     * 
     */
    @Import(name="expiration")
    private @Nullable Output<String> expiration;

    /**
     * @return This is a UTC timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. If set, the secret will not be available after this time.
     * 
     */
    public Optional<Output<String>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * The mode to use for key generation.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode to use for key generation.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the secret set by the user.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the secret set by the user.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The media type for the content of the secrets payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
     * 
     */
    @Import(name="payloadContentType")
    private @Nullable Output<String> payloadContentType;

    /**
     * @return The media type for the content of the secrets payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
     * 
     */
    public Optional<Output<String>> payloadContentType() {
        return Optional.ofNullable(this.payloadContentType);
    }

    private OrderV1MetaArgs() {}

    private OrderV1MetaArgs(OrderV1MetaArgs $) {
        this.algorithm = $.algorithm;
        this.bitLength = $.bitLength;
        this.expiration = $.expiration;
        this.mode = $.mode;
        this.name = $.name;
        this.payloadContentType = $.payloadContentType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrderV1MetaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrderV1MetaArgs $;

        public Builder() {
            $ = new OrderV1MetaArgs();
        }

        public Builder(OrderV1MetaArgs defaults) {
            $ = new OrderV1MetaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Algorithm to use for key generation.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Algorithm to use for key generation.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param bitLength Bit lenght of key to be generated.
         * 
         * @return builder
         * 
         */
        public Builder bitLength(Output<Integer> bitLength) {
            $.bitLength = bitLength;
            return this;
        }

        /**
         * @param bitLength Bit lenght of key to be generated.
         * 
         * @return builder
         * 
         */
        public Builder bitLength(Integer bitLength) {
            return bitLength(Output.of(bitLength));
        }

        /**
         * @param expiration This is a UTC timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. If set, the secret will not be available after this time.
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable Output<String> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration This is a UTC timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. If set, the secret will not be available after this time.
         * 
         * @return builder
         * 
         */
        public Builder expiration(String expiration) {
            return expiration(Output.of(expiration));
        }

        /**
         * @param mode The mode to use for key generation.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode to use for key generation.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the secret set by the user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the secret set by the user.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param payloadContentType The media type for the content of the secrets payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
         * 
         * @return builder
         * 
         */
        public Builder payloadContentType(@Nullable Output<String> payloadContentType) {
            $.payloadContentType = payloadContentType;
            return this;
        }

        /**
         * @param payloadContentType The media type for the content of the secrets payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
         * 
         * @return builder
         * 
         */
        public Builder payloadContentType(String payloadContentType) {
            return payloadContentType(Output.of(payloadContentType));
        }

        public OrderV1MetaArgs build() {
            if ($.algorithm == null) {
                throw new MissingRequiredPropertyException("OrderV1MetaArgs", "algorithm");
            }
            if ($.bitLength == null) {
                throw new MissingRequiredPropertyException("OrderV1MetaArgs", "bitLength");
            }
            return $;
        }
    }

}
