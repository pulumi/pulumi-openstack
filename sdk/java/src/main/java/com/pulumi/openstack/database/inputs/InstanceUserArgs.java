// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceUserArgs Empty = new InstanceUserArgs();

    /**
     * A list of databases that user will have access to. If not specified,
     * user has access to all databases on th einstance. Changing this creates a new instance.
     * 
     */
    @Import(name="databases")
    private @Nullable Output<List<String>> databases;

    /**
     * @return A list of databases that user will have access to. If not specified,
     * user has access to all databases on th einstance. Changing this creates a new instance.
     * 
     */
    public Optional<Output<List<String>>> databases() {
        return Optional.ofNullable(this.databases);
    }

    /**
     * An ip address or %!s(MISSING)ign indicating what ip addresses can connect with
     * this user credentials. Changing this creates a new instance.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return An ip address or %!s(MISSING)ign indicating what ip addresses can connect with
     * this user credentials. Changing this creates a new instance.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Username to be created on new instance. Changing this creates a
     * new instance.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Username to be created on new instance. Changing this creates a
     * new instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * User&#39;s password. Changing this creates a
     * new instance.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return User&#39;s password. Changing this creates a
     * new instance.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    private InstanceUserArgs() {}

    private InstanceUserArgs(InstanceUserArgs $) {
        this.databases = $.databases;
        this.host = $.host;
        this.name = $.name;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceUserArgs $;

        public Builder() {
            $ = new InstanceUserArgs();
        }

        public Builder(InstanceUserArgs defaults) {
            $ = new InstanceUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databases A list of databases that user will have access to. If not specified,
         * user has access to all databases on th einstance. Changing this creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder databases(@Nullable Output<List<String>> databases) {
            $.databases = databases;
            return this;
        }

        /**
         * @param databases A list of databases that user will have access to. If not specified,
         * user has access to all databases on th einstance. Changing this creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder databases(List<String> databases) {
            return databases(Output.of(databases));
        }

        /**
         * @param databases A list of databases that user will have access to. If not specified,
         * user has access to all databases on th einstance. Changing this creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder databases(String... databases) {
            return databases(List.of(databases));
        }

        /**
         * @param host An ip address or %!s(MISSING)ign indicating what ip addresses can connect with
         * this user credentials. Changing this creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host An ip address or %!s(MISSING)ign indicating what ip addresses can connect with
         * this user credentials. Changing this creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param name Username to be created on new instance. Changing this creates a
         * new instance.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Username to be created on new instance. Changing this creates a
         * new instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password User&#39;s password. Changing this creates a
         * new instance.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password User&#39;s password. Changing this creates a
         * new instance.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public InstanceUserArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("InstanceUserArgs", "name");
            }
            return $;
        }
    }

}
