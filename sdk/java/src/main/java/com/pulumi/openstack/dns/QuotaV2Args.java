// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.dns;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuotaV2Args extends com.pulumi.resources.ResourceArgs {

    public static final QuotaV2Args Empty = new QuotaV2Args();

    /**
     * The maximum number of zones that can be
     * exported via the API.
     * 
     */
    @Import(name="apiExportSize")
    private @Nullable Output<Integer> apiExportSize;

    /**
     * @return The maximum number of zones that can be
     * exported via the API.
     * 
     */
    public Optional<Output<Integer>> apiExportSize() {
        return Optional.ofNullable(this.apiExportSize);
    }

    /**
     * ID of the project to manage quota. Changing this
     * creates new quota.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return ID of the project to manage quota. Changing this
     * creates new quota.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The maximum number of records in a
     * recordset.
     * 
     */
    @Import(name="recordsetRecords")
    private @Nullable Output<Integer> recordsetRecords;

    /**
     * @return The maximum number of records in a
     * recordset.
     * 
     */
    public Optional<Output<Integer>> recordsetRecords() {
        return Optional.ofNullable(this.recordsetRecords);
    }

    /**
     * The region in which to obtain the V2 DNS client. If
     * omitted, the `region` argument of the provider is used. Changing this creates
     * a new DNS quota.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 DNS client. If
     * omitted, the `region` argument of the provider is used. Changing this creates
     * a new DNS quota.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The maximum number of records in a zone.
     * 
     */
    @Import(name="zoneRecords")
    private @Nullable Output<Integer> zoneRecords;

    /**
     * @return The maximum number of records in a zone.
     * 
     */
    public Optional<Output<Integer>> zoneRecords() {
        return Optional.ofNullable(this.zoneRecords);
    }

    /**
     * The maximum number of recordsets in a zone.
     * 
     */
    @Import(name="zoneRecordsets")
    private @Nullable Output<Integer> zoneRecordsets;

    /**
     * @return The maximum number of recordsets in a zone.
     * 
     */
    public Optional<Output<Integer>> zoneRecordsets() {
        return Optional.ofNullable(this.zoneRecordsets);
    }

    /**
     * The maximum number of zones that can be created.
     * 
     */
    @Import(name="zones")
    private @Nullable Output<Integer> zones;

    /**
     * @return The maximum number of zones that can be created.
     * 
     */
    public Optional<Output<Integer>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private QuotaV2Args() {}

    private QuotaV2Args(QuotaV2Args $) {
        this.apiExportSize = $.apiExportSize;
        this.projectId = $.projectId;
        this.recordsetRecords = $.recordsetRecords;
        this.region = $.region;
        this.zoneRecords = $.zoneRecords;
        this.zoneRecordsets = $.zoneRecordsets;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuotaV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuotaV2Args $;

        public Builder() {
            $ = new QuotaV2Args();
        }

        public Builder(QuotaV2Args defaults) {
            $ = new QuotaV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiExportSize The maximum number of zones that can be
         * exported via the API.
         * 
         * @return builder
         * 
         */
        public Builder apiExportSize(@Nullable Output<Integer> apiExportSize) {
            $.apiExportSize = apiExportSize;
            return this;
        }

        /**
         * @param apiExportSize The maximum number of zones that can be
         * exported via the API.
         * 
         * @return builder
         * 
         */
        public Builder apiExportSize(Integer apiExportSize) {
            return apiExportSize(Output.of(apiExportSize));
        }

        /**
         * @param projectId ID of the project to manage quota. Changing this
         * creates new quota.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId ID of the project to manage quota. Changing this
         * creates new quota.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param recordsetRecords The maximum number of records in a
         * recordset.
         * 
         * @return builder
         * 
         */
        public Builder recordsetRecords(@Nullable Output<Integer> recordsetRecords) {
            $.recordsetRecords = recordsetRecords;
            return this;
        }

        /**
         * @param recordsetRecords The maximum number of records in a
         * recordset.
         * 
         * @return builder
         * 
         */
        public Builder recordsetRecords(Integer recordsetRecords) {
            return recordsetRecords(Output.of(recordsetRecords));
        }

        /**
         * @param region The region in which to obtain the V2 DNS client. If
         * omitted, the `region` argument of the provider is used. Changing this creates
         * a new DNS quota.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 DNS client. If
         * omitted, the `region` argument of the provider is used. Changing this creates
         * a new DNS quota.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param zoneRecords The maximum number of records in a zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneRecords(@Nullable Output<Integer> zoneRecords) {
            $.zoneRecords = zoneRecords;
            return this;
        }

        /**
         * @param zoneRecords The maximum number of records in a zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneRecords(Integer zoneRecords) {
            return zoneRecords(Output.of(zoneRecords));
        }

        /**
         * @param zoneRecordsets The maximum number of recordsets in a zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneRecordsets(@Nullable Output<Integer> zoneRecordsets) {
            $.zoneRecordsets = zoneRecordsets;
            return this;
        }

        /**
         * @param zoneRecordsets The maximum number of recordsets in a zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneRecordsets(Integer zoneRecordsets) {
            return zoneRecordsets(Output.of(zoneRecordsets));
        }

        /**
         * @param zones The maximum number of zones that can be created.
         * 
         * @return builder
         * 
         */
        public Builder zones(@Nullable Output<Integer> zones) {
            $.zones = zones;
            return this;
        }

        /**
         * @param zones The maximum number of zones that can be created.
         * 
         * @return builder
         * 
         */
        public Builder zones(Integer zones) {
            return zones(Output.of(zones));
        }

        public QuotaV2Args build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("QuotaV2Args", "projectId");
            }
            return $;
        }
    }

}
