// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubnetPoolArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubnetPoolArgs Empty = new GetSubnetPoolArgs();

    /**
     * The Neutron address scope that subnetpools
     * is assigned to.
     * 
     */
    @Import(name="addressScopeId")
    private @Nullable Output<String> addressScopeId;

    /**
     * @return The Neutron address scope that subnetpools
     * is assigned to.
     * 
     */
    public Optional<Output<String>> addressScopeId() {
        return Optional.ofNullable(this.addressScopeId);
    }

    /**
     * The size of the subnetpool default prefix
     * length.
     * 
     */
    @Import(name="defaultPrefixlen")
    private @Nullable Output<Integer> defaultPrefixlen;

    /**
     * @return The size of the subnetpool default prefix
     * length.
     * 
     */
    public Optional<Output<Integer>> defaultPrefixlen() {
        return Optional.ofNullable(this.defaultPrefixlen);
    }

    /**
     * The per-project quota on the prefix space that
     * can be allocated from the subnetpool for project subnets.
     * 
     */
    @Import(name="defaultQuota")
    private @Nullable Output<Integer> defaultQuota;

    /**
     * @return The per-project quota on the prefix space that
     * can be allocated from the subnetpool for project subnets.
     * 
     */
    public Optional<Output<Integer>> defaultQuota() {
        return Optional.ofNullable(this.defaultQuota);
    }

    /**
     * The human-readable description for the subnetpool.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The human-readable description for the subnetpool.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The IP protocol version.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Integer> ipVersion;

    /**
     * @return The IP protocol version.
     * 
     */
    public Optional<Output<Integer>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * Whether the subnetpool is default subnetpool or not.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether the subnetpool is default subnetpool or not.
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * The size of the subnetpool max prefix length.
     * 
     */
    @Import(name="maxPrefixlen")
    private @Nullable Output<Integer> maxPrefixlen;

    /**
     * @return The size of the subnetpool max prefix length.
     * 
     */
    public Optional<Output<Integer>> maxPrefixlen() {
        return Optional.ofNullable(this.maxPrefixlen);
    }

    /**
     * The size of the subnetpool min prefix length.
     * 
     */
    @Import(name="minPrefixlen")
    private @Nullable Output<Integer> minPrefixlen;

    /**
     * @return The size of the subnetpool min prefix length.
     * 
     */
    public Optional<Output<Integer>> minPrefixlen() {
        return Optional.ofNullable(this.minPrefixlen);
    }

    /**
     * The name of the subnetpool.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the subnetpool.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner of the subnetpool.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The owner of the subnetpool.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to retrieve a subnetpool id. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to retrieve a subnetpool id. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Whether this subnetpool is shared across all projects.
     * 
     */
    @Import(name="shared")
    private @Nullable Output<Boolean> shared;

    /**
     * @return Whether this subnetpool is shared across all projects.
     * 
     */
    public Optional<Output<Boolean>> shared() {
        return Optional.ofNullable(this.shared);
    }

    /**
     * The list of subnetpool tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The list of subnetpool tags to filter.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetSubnetPoolArgs() {}

    private GetSubnetPoolArgs(GetSubnetPoolArgs $) {
        this.addressScopeId = $.addressScopeId;
        this.defaultPrefixlen = $.defaultPrefixlen;
        this.defaultQuota = $.defaultQuota;
        this.description = $.description;
        this.ipVersion = $.ipVersion;
        this.isDefault = $.isDefault;
        this.maxPrefixlen = $.maxPrefixlen;
        this.minPrefixlen = $.minPrefixlen;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
        this.shared = $.shared;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubnetPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubnetPoolArgs $;

        public Builder() {
            $ = new GetSubnetPoolArgs();
        }

        public Builder(GetSubnetPoolArgs defaults) {
            $ = new GetSubnetPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressScopeId The Neutron address scope that subnetpools
         * is assigned to.
         * 
         * @return builder
         * 
         */
        public Builder addressScopeId(@Nullable Output<String> addressScopeId) {
            $.addressScopeId = addressScopeId;
            return this;
        }

        /**
         * @param addressScopeId The Neutron address scope that subnetpools
         * is assigned to.
         * 
         * @return builder
         * 
         */
        public Builder addressScopeId(String addressScopeId) {
            return addressScopeId(Output.of(addressScopeId));
        }

        /**
         * @param defaultPrefixlen The size of the subnetpool default prefix
         * length.
         * 
         * @return builder
         * 
         */
        public Builder defaultPrefixlen(@Nullable Output<Integer> defaultPrefixlen) {
            $.defaultPrefixlen = defaultPrefixlen;
            return this;
        }

        /**
         * @param defaultPrefixlen The size of the subnetpool default prefix
         * length.
         * 
         * @return builder
         * 
         */
        public Builder defaultPrefixlen(Integer defaultPrefixlen) {
            return defaultPrefixlen(Output.of(defaultPrefixlen));
        }

        /**
         * @param defaultQuota The per-project quota on the prefix space that
         * can be allocated from the subnetpool for project subnets.
         * 
         * @return builder
         * 
         */
        public Builder defaultQuota(@Nullable Output<Integer> defaultQuota) {
            $.defaultQuota = defaultQuota;
            return this;
        }

        /**
         * @param defaultQuota The per-project quota on the prefix space that
         * can be allocated from the subnetpool for project subnets.
         * 
         * @return builder
         * 
         */
        public Builder defaultQuota(Integer defaultQuota) {
            return defaultQuota(Output.of(defaultQuota));
        }

        /**
         * @param description The human-readable description for the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The human-readable description for the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipVersion The IP protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Integer> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP protocol version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Integer ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param isDefault Whether the subnetpool is default subnetpool or not.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether the subnetpool is default subnetpool or not.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param maxPrefixlen The size of the subnetpool max prefix length.
         * 
         * @return builder
         * 
         */
        public Builder maxPrefixlen(@Nullable Output<Integer> maxPrefixlen) {
            $.maxPrefixlen = maxPrefixlen;
            return this;
        }

        /**
         * @param maxPrefixlen The size of the subnetpool max prefix length.
         * 
         * @return builder
         * 
         */
        public Builder maxPrefixlen(Integer maxPrefixlen) {
            return maxPrefixlen(Output.of(maxPrefixlen));
        }

        /**
         * @param minPrefixlen The size of the subnetpool min prefix length.
         * 
         * @return builder
         * 
         */
        public Builder minPrefixlen(@Nullable Output<Integer> minPrefixlen) {
            $.minPrefixlen = minPrefixlen;
            return this;
        }

        /**
         * @param minPrefixlen The size of the subnetpool min prefix length.
         * 
         * @return builder
         * 
         */
        public Builder minPrefixlen(Integer minPrefixlen) {
            return minPrefixlen(Output.of(minPrefixlen));
        }

        /**
         * @param name The name of the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The owner of the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The owner of the subnetpool.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to retrieve a subnetpool id. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to retrieve a subnetpool id. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param shared Whether this subnetpool is shared across all projects.
         * 
         * @return builder
         * 
         */
        public Builder shared(@Nullable Output<Boolean> shared) {
            $.shared = shared;
            return this;
        }

        /**
         * @param shared Whether this subnetpool is shared across all projects.
         * 
         * @return builder
         * 
         */
        public Builder shared(Boolean shared) {
            return shared(Output.of(shared));
        }

        /**
         * @param tags The list of subnetpool tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of subnetpool tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The list of subnetpool tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GetSubnetPoolArgs build() {
            return $;
        }
    }

}
