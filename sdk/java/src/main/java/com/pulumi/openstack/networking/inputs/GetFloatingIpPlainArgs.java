// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFloatingIpPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFloatingIpPlainArgs Empty = new GetFloatingIpPlainArgs();

    /**
     * The IP address of the floating IP.
     * 
     */
    @Import(name="address")
    private @Nullable String address;

    /**
     * @return The IP address of the floating IP.
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Human-readable description of the floating IP.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Human-readable description of the floating IP.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The specific IP address of the internal port which should be associated with the floating IP.
     * 
     */
    @Import(name="fixedIp")
    private @Nullable String fixedIp;

    /**
     * @return The specific IP address of the internal port which should be associated with the floating IP.
     * 
     */
    public Optional<String> fixedIp() {
        return Optional.ofNullable(this.fixedIp);
    }

    /**
     * The ID of the network from which the floating IP belongs to.
     * 
     */
    @Import(name="pool")
    private @Nullable String pool;

    /**
     * @return The ID of the network from which the floating IP belongs to.
     * 
     */
    public Optional<String> pool() {
        return Optional.ofNullable(this.pool);
    }

    /**
     * The ID of the port the floating IP is attached.
     * 
     */
    @Import(name="portId")
    private @Nullable String portId;

    /**
     * @return The ID of the port the floating IP is attached.
     * 
     */
    public Optional<String> portId() {
        return Optional.ofNullable(this.portId);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve floating IP ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve floating IP ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * status of the floating IP (ACTIVE/DOWN).
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return status of the floating IP (ACTIVE/DOWN).
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The list of floating IP tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return The list of floating IP tags to filter.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The owner of the floating IP.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return The owner of the floating IP.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetFloatingIpPlainArgs() {}

    private GetFloatingIpPlainArgs(GetFloatingIpPlainArgs $) {
        this.address = $.address;
        this.description = $.description;
        this.fixedIp = $.fixedIp;
        this.pool = $.pool;
        this.portId = $.portId;
        this.region = $.region;
        this.status = $.status;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFloatingIpPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFloatingIpPlainArgs $;

        public Builder() {
            $ = new GetFloatingIpPlainArgs();
        }

        public Builder(GetFloatingIpPlainArgs defaults) {
            $ = new GetFloatingIpPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The IP address of the floating IP.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable String address) {
            $.address = address;
            return this;
        }

        /**
         * @param description Human-readable description of the floating IP.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param fixedIp The specific IP address of the internal port which should be associated with the floating IP.
         * 
         * @return builder
         * 
         */
        public Builder fixedIp(@Nullable String fixedIp) {
            $.fixedIp = fixedIp;
            return this;
        }

        /**
         * @param pool The ID of the network from which the floating IP belongs to.
         * 
         * @return builder
         * 
         */
        public Builder pool(@Nullable String pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param portId The ID of the port the floating IP is attached.
         * 
         * @return builder
         * 
         */
        public Builder portId(@Nullable String portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve floating IP ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param status status of the floating IP (ACTIVE/DOWN).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags The list of floating IP tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of floating IP tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId The owner of the floating IP.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public GetFloatingIpPlainArgs build() {
            return $;
        }
    }

}
