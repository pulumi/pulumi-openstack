// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSegmentV2Args extends com.pulumi.resources.InvokeArgs {

    public static final GetSegmentV2Args Empty = new GetSegmentV2Args();

    /**
     * Human-readable description of the network segment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-readable description of the network segment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the network segment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the network segment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the network.
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return The ID of the network.
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * The type of the network, such as `vlan`, `vxlan`,
     * `flat`, `gre`, `geneve`, or `local`.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The type of the network, such as `vlan`, `vxlan`,
     * `flat`, `gre`, `geneve`, or `local`.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The name of the physical network.
     * 
     */
    @Import(name="physicalNetwork")
    private @Nullable Output<String> physicalNetwork;

    /**
     * @return The name of the physical network.
     * 
     */
    public Optional<Output<String>> physicalNetwork() {
        return Optional.ofNullable(this.physicalNetwork);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve networks ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve networks ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * See Argument Reference above.
     * 
     */
    @Import(name="revisionNumber")
    private @Nullable Output<Integer> revisionNumber;

    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Output<Integer>> revisionNumber() {
        return Optional.ofNullable(this.revisionNumber);
    }

    /**
     * The ID of the network segment
     * 
     */
    @Import(name="segmentId")
    private @Nullable Output<String> segmentId;

    /**
     * @return The ID of the network segment
     * 
     */
    public Optional<Output<String>> segmentId() {
        return Optional.ofNullable(this.segmentId);
    }

    /**
     * The segmentation ID of the network segment.
     * 
     */
    @Import(name="segmentationId")
    private @Nullable Output<Integer> segmentationId;

    /**
     * @return The segmentation ID of the network segment.
     * 
     */
    public Optional<Output<Integer>> segmentationId() {
        return Optional.ofNullable(this.segmentationId);
    }

    private GetSegmentV2Args() {}

    private GetSegmentV2Args(GetSegmentV2Args $) {
        this.description = $.description;
        this.name = $.name;
        this.networkId = $.networkId;
        this.networkType = $.networkType;
        this.physicalNetwork = $.physicalNetwork;
        this.region = $.region;
        this.revisionNumber = $.revisionNumber;
        this.segmentId = $.segmentId;
        this.segmentationId = $.segmentationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSegmentV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSegmentV2Args $;

        public Builder() {
            $ = new GetSegmentV2Args();
        }

        public Builder(GetSegmentV2Args defaults) {
            $ = new GetSegmentV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Human-readable description of the network segment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-readable description of the network segment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the network segment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network segment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId The ID of the network.
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId The ID of the network.
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param networkType The type of the network, such as `vlan`, `vxlan`,
         * `flat`, `gre`, `geneve`, or `local`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The type of the network, such as `vlan`, `vxlan`,
         * `flat`, `gre`, `geneve`, or `local`.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param physicalNetwork The name of the physical network.
         * 
         * @return builder
         * 
         */
        public Builder physicalNetwork(@Nullable Output<String> physicalNetwork) {
            $.physicalNetwork = physicalNetwork;
            return this;
        }

        /**
         * @param physicalNetwork The name of the physical network.
         * 
         * @return builder
         * 
         */
        public Builder physicalNetwork(String physicalNetwork) {
            return physicalNetwork(Output.of(physicalNetwork));
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve networks ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve networks ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param revisionNumber See Argument Reference above.
         * 
         * @return builder
         * 
         */
        public Builder revisionNumber(@Nullable Output<Integer> revisionNumber) {
            $.revisionNumber = revisionNumber;
            return this;
        }

        /**
         * @param revisionNumber See Argument Reference above.
         * 
         * @return builder
         * 
         */
        public Builder revisionNumber(Integer revisionNumber) {
            return revisionNumber(Output.of(revisionNumber));
        }

        /**
         * @param segmentId The ID of the network segment
         * 
         * @return builder
         * 
         */
        public Builder segmentId(@Nullable Output<String> segmentId) {
            $.segmentId = segmentId;
            return this;
        }

        /**
         * @param segmentId The ID of the network segment
         * 
         * @return builder
         * 
         */
        public Builder segmentId(String segmentId) {
            return segmentId(Output.of(segmentId));
        }

        /**
         * @param segmentationId The segmentation ID of the network segment.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(@Nullable Output<Integer> segmentationId) {
            $.segmentationId = segmentationId;
            return this;
        }

        /**
         * @param segmentationId The segmentation ID of the network segment.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(Integer segmentationId) {
            return segmentationId(Output.of(segmentationId));
        }

        public GetSegmentV2Args build() {
            return $;
        }
    }

}
