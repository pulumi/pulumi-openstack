// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAddressScopePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAddressScopePlainArgs Empty = new GetAddressScopePlainArgs();

    /**
     * IP version.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Integer ipVersion;

    /**
     * @return IP version.
     * 
     */
    public Optional<Integer> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * Name of the address-scope.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the address-scope.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner of the address-scope.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return The owner of the address-scope.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve address-scopes. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve address-scopes. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Indicates whether this address-scope is shared across
     * all projects.
     * 
     */
    @Import(name="shared")
    private @Nullable Boolean shared;

    /**
     * @return Indicates whether this address-scope is shared across
     * all projects.
     * 
     */
    public Optional<Boolean> shared() {
        return Optional.ofNullable(this.shared);
    }

    private GetAddressScopePlainArgs() {}

    private GetAddressScopePlainArgs(GetAddressScopePlainArgs $) {
        this.ipVersion = $.ipVersion;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
        this.shared = $.shared;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAddressScopePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAddressScopePlainArgs $;

        public Builder() {
            $ = new GetAddressScopePlainArgs();
        }

        public Builder(GetAddressScopePlainArgs defaults) {
            $ = new GetAddressScopePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipVersion IP version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Integer ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param name Name of the address-scope.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param projectId The owner of the address-scope.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve address-scopes. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param shared Indicates whether this address-scope is shared across
         * all projects.
         * 
         * @return builder
         * 
         */
        public Builder shared(@Nullable Boolean shared) {
            $.shared = shared;
            return this;
        }

        public GetAddressScopePlainArgs build() {
            return $;
        }
    }

}
