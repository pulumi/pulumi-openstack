// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceVendorOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceVendorOptionsArgs Empty = new InstanceVendorOptionsArgs();

    /**
     * Whether to try to detach all attached
     * ports to the vm before destroying it to make sure the port state is correct
     * after the vm destruction. This is helpful when the port is not deleted.
     * 
     */
    @Import(name="detachPortsBeforeDestroy")
    private @Nullable Output<Boolean> detachPortsBeforeDestroy;

    /**
     * @return Whether to try to detach all attached
     * ports to the vm before destroying it to make sure the port state is correct
     * after the vm destruction. This is helpful when the port is not deleted.
     * 
     */
    public Optional<Output<Boolean>> detachPortsBeforeDestroy() {
        return Optional.ofNullable(this.detachPortsBeforeDestroy);
    }

    /**
     * Boolean to control whether
     * to ignore manual confirmation of the instance resizing. This can be helpful
     * to work with some OpenStack clouds which automatically confirm resizing of
     * instances after some timeout.
     * 
     */
    @Import(name="ignoreResizeConfirmation")
    private @Nullable Output<Boolean> ignoreResizeConfirmation;

    /**
     * @return Boolean to control whether
     * to ignore manual confirmation of the instance resizing. This can be helpful
     * to work with some OpenStack clouds which automatically confirm resizing of
     * instances after some timeout.
     * 
     */
    public Optional<Output<Boolean>> ignoreResizeConfirmation() {
        return Optional.ofNullable(this.ignoreResizeConfirmation);
    }

    private InstanceVendorOptionsArgs() {}

    private InstanceVendorOptionsArgs(InstanceVendorOptionsArgs $) {
        this.detachPortsBeforeDestroy = $.detachPortsBeforeDestroy;
        this.ignoreResizeConfirmation = $.ignoreResizeConfirmation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceVendorOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceVendorOptionsArgs $;

        public Builder() {
            $ = new InstanceVendorOptionsArgs();
        }

        public Builder(InstanceVendorOptionsArgs defaults) {
            $ = new InstanceVendorOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param detachPortsBeforeDestroy Whether to try to detach all attached
         * ports to the vm before destroying it to make sure the port state is correct
         * after the vm destruction. This is helpful when the port is not deleted.
         * 
         * @return builder
         * 
         */
        public Builder detachPortsBeforeDestroy(@Nullable Output<Boolean> detachPortsBeforeDestroy) {
            $.detachPortsBeforeDestroy = detachPortsBeforeDestroy;
            return this;
        }

        /**
         * @param detachPortsBeforeDestroy Whether to try to detach all attached
         * ports to the vm before destroying it to make sure the port state is correct
         * after the vm destruction. This is helpful when the port is not deleted.
         * 
         * @return builder
         * 
         */
        public Builder detachPortsBeforeDestroy(Boolean detachPortsBeforeDestroy) {
            return detachPortsBeforeDestroy(Output.of(detachPortsBeforeDestroy));
        }

        /**
         * @param ignoreResizeConfirmation Boolean to control whether
         * to ignore manual confirmation of the instance resizing. This can be helpful
         * to work with some OpenStack clouds which automatically confirm resizing of
         * instances after some timeout.
         * 
         * @return builder
         * 
         */
        public Builder ignoreResizeConfirmation(@Nullable Output<Boolean> ignoreResizeConfirmation) {
            $.ignoreResizeConfirmation = ignoreResizeConfirmation;
            return this;
        }

        /**
         * @param ignoreResizeConfirmation Boolean to control whether
         * to ignore manual confirmation of the instance resizing. This can be helpful
         * to work with some OpenStack clouds which automatically confirm resizing of
         * instances after some timeout.
         * 
         * @return builder
         * 
         */
        public Builder ignoreResizeConfirmation(Boolean ignoreResizeConfirmation) {
            return ignoreResizeConfirmation(Output.of(ignoreResizeConfirmation));
        }

        public InstanceVendorOptionsArgs build() {
            return $;
        }
    }

}
