// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class TrunkSubPortArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrunkSubPortArgs Empty = new TrunkSubPortArgs();

    /**
     * The ID of the port to be made a subport of the trunk.
     * 
     */
    @Import(name="portId", required=true)
    private Output<String> portId;

    /**
     * @return The ID of the port to be made a subport of the trunk.
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }

    /**
     * The numeric id of the subport segment.
     * 
     */
    @Import(name="segmentationId", required=true)
    private Output<Integer> segmentationId;

    /**
     * @return The numeric id of the subport segment.
     * 
     */
    public Output<Integer> segmentationId() {
        return this.segmentationId;
    }

    /**
     * The segmentation technology to use, e.g., &#34;vlan&#34;.
     * 
     */
    @Import(name="segmentationType", required=true)
    private Output<String> segmentationType;

    /**
     * @return The segmentation technology to use, e.g., &#34;vlan&#34;.
     * 
     */
    public Output<String> segmentationType() {
        return this.segmentationType;
    }

    private TrunkSubPortArgs() {}

    private TrunkSubPortArgs(TrunkSubPortArgs $) {
        this.portId = $.portId;
        this.segmentationId = $.segmentationId;
        this.segmentationType = $.segmentationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrunkSubPortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrunkSubPortArgs $;

        public Builder() {
            $ = new TrunkSubPortArgs();
        }

        public Builder(TrunkSubPortArgs defaults) {
            $ = new TrunkSubPortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param portId The ID of the port to be made a subport of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder portId(Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId The ID of the port to be made a subport of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param segmentationId The numeric id of the subport segment.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(Output<Integer> segmentationId) {
            $.segmentationId = segmentationId;
            return this;
        }

        /**
         * @param segmentationId The numeric id of the subport segment.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(Integer segmentationId) {
            return segmentationId(Output.of(segmentationId));
        }

        /**
         * @param segmentationType The segmentation technology to use, e.g., &#34;vlan&#34;.
         * 
         * @return builder
         * 
         */
        public Builder segmentationType(Output<String> segmentationType) {
            $.segmentationType = segmentationType;
            return this;
        }

        /**
         * @param segmentationType The segmentation technology to use, e.g., &#34;vlan&#34;.
         * 
         * @return builder
         * 
         */
        public Builder segmentationType(String segmentationType) {
            return segmentationType(Output.of(segmentationType));
        }

        public TrunkSubPortArgs build() {
            if ($.portId == null) {
                throw new MissingRequiredPropertyException("TrunkSubPortArgs", "portId");
            }
            if ($.segmentationId == null) {
                throw new MissingRequiredPropertyException("TrunkSubPortArgs", "segmentationId");
            }
            if ($.segmentationType == null) {
                throw new MissingRequiredPropertyException("TrunkSubPortArgs", "segmentationType");
            }
            return $;
        }
    }

}
