// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.openstack.LbFlavorprofileV2Args;
import com.pulumi.openstack.Utilities;
import com.pulumi.openstack.inputs.LbFlavorprofileV2State;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages a V2 load balancer flavorprofile resource within OpenStack.
 * 
 * &gt; **Note:** This usually requires admin privileges.
 * 
 * ## Example Usage
 * 
 * ### Using jsonencode
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.openstack.loadbalancer.FlavorprofileV2;
 * import com.pulumi.openstack.loadbalancer.FlavorprofileV2Args;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var flavorprofile1 = new FlavorprofileV2("flavorprofile1", FlavorprofileV2Args.builder()
 *             .name("amphora-single-profile")
 *             .providerName("amphora")
 *             .flavorData(serializeJson(
 *                 jsonObject(
 *                     jsonProperty("loadbalancer_topology", "SINGLE")
 *                 )))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Using plain string
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.openstack.loadbalancer.FlavorprofileV2;
 * import com.pulumi.openstack.loadbalancer.FlavorprofileV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var flavorprofile1 = new FlavorprofileV2("flavorprofile1", FlavorprofileV2Args.builder()
 *             .name("amphora-single-profile")
 *             .providerName("amphora")
 *             .flavorData("{\"loadbalancer_topology\": \"SINGLE\"}")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * flavorprofiles can be imported using their `id`. Example:
 * 
 * ```sh
 * $ pulumi import openstack:index/lbFlavorprofileV2:LbFlavorprofileV2 flavorprofile_1 2a0f2240-c5e6-41de-896d-e80d97428d6b
 * ```
 * 
 * @deprecated
 * openstack.index/lbflavorprofilev2.LbFlavorprofileV2 has been deprecated in favor of openstack.loadbalancer/flavorprofilev2.FlavorprofileV2
 * 
 */
@Deprecated /* openstack.index/lbflavorprofilev2.LbFlavorprofileV2 has been deprecated in favor of openstack.loadbalancer/flavorprofilev2.FlavorprofileV2 */
@ResourceType(type="openstack:index/lbFlavorprofileV2:LbFlavorprofileV2")
public class LbFlavorprofileV2 extends com.pulumi.resources.CustomResource {
    /**
     * String that passes the flavorData for the flavorprofile.
     * The data that are allowed depend on the `providerName` that is passed. jsonencode
     * can be used for readability as shown in the example above.
     * Changing this updates the existing flavorprofile.
     * 
     */
    @Export(name="flavorData", refs={String.class}, tree="[0]")
    private Output<String> flavorData;

    /**
     * @return String that passes the flavorData for the flavorprofile.
     * The data that are allowed depend on the `providerName` that is passed. jsonencode
     * can be used for readability as shown in the example above.
     * Changing this updates the existing flavorprofile.
     * 
     */
    public Output<String> flavorData() {
        return this.flavorData;
    }
    /**
     * Name of the flavorprofile. Changing this updates the existing
     * flavorprofile.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the flavorprofile. Changing this updates the existing
     * flavorprofile.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The providerName that the flavorProfile will use.
     * Changing this updates the existing flavorprofile.
     * 
     */
    @Export(name="providerName", refs={String.class}, tree="[0]")
    private Output<String> providerName;

    /**
     * @return The providerName that the flavorProfile will use.
     * Changing this updates the existing flavorprofile.
     * 
     */
    public Output<String> providerName() {
        return this.providerName;
    }
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB flavorprofile.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB flavorprofile.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LbFlavorprofileV2(java.lang.String name) {
        this(name, LbFlavorprofileV2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LbFlavorprofileV2(java.lang.String name, LbFlavorprofileV2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LbFlavorprofileV2(java.lang.String name, LbFlavorprofileV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:index/lbFlavorprofileV2:LbFlavorprofileV2", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LbFlavorprofileV2(java.lang.String name, Output<java.lang.String> id, @Nullable LbFlavorprofileV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:index/lbFlavorprofileV2:LbFlavorprofileV2", name, state, makeResourceOptions(options, id), false);
    }

    private static LbFlavorprofileV2Args makeArgs(LbFlavorprofileV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LbFlavorprofileV2Args.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LbFlavorprofileV2 get(java.lang.String name, Output<java.lang.String> id, @Nullable LbFlavorprofileV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LbFlavorprofileV2(name, id, state, options);
    }
}
