// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AddressGroupV2Args extends com.pulumi.resources.ResourceArgs {

    public static final AddressGroupV2Args Empty = new AddressGroupV2Args();

    /**
     * A list of CIDR blocks that define the addresses in
     * the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
     * 
     */
    @Import(name="addresses", required=true)
    private Output<List<String>> addresses;

    /**
     * @return A list of CIDR blocks that define the addresses in
     * the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
     * 
     */
    public Output<List<String>> addresses() {
        return this.addresses;
    }

    /**
     * A description of the address group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the address group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A name of the address group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name of the address group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner of the address group. Required if admin
     * wants to create a group for a specific project. Changing this creates a new
     * address group.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The owner of the address group. Required if admin
     * wants to create a group for a specific project. Changing this creates a new
     * address group.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 networking client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new address group.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 networking client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new address group.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private AddressGroupV2Args() {}

    private AddressGroupV2Args(AddressGroupV2Args $) {
        this.addresses = $.addresses;
        this.description = $.description;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddressGroupV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddressGroupV2Args $;

        public Builder() {
            $ = new AddressGroupV2Args();
        }

        public Builder(AddressGroupV2Args defaults) {
            $ = new AddressGroupV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses A list of CIDR blocks that define the addresses in
         * the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder addresses(Output<List<String>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses A list of CIDR blocks that define the addresses in
         * the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<String> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses A list of CIDR blocks that define the addresses in
         * the address group. Each address must be a valid IPv4 or IPv6 CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param description A description of the address group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the address group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name A name of the address group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name of the address group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The owner of the address group. Required if admin
         * wants to create a group for a specific project. Changing this creates a new
         * address group.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The owner of the address group. Required if admin
         * wants to create a group for a specific project. Changing this creates a new
         * address group.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * If omitted, the `region` argument of the provider is used. Changing this
         * creates a new address group.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * If omitted, the `region` argument of the provider is used. Changing this
         * creates a new address group.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public AddressGroupV2Args build() {
            if ($.addresses == null) {
                throw new MissingRequiredPropertyException("AddressGroupV2Args", "addresses");
            }
            return $;
        }
    }

}
