// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.images.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageIdsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageIdsPlainArgs Empty = new GetImageIdsPlainArgs();

    /**
     * The status of the image. Must be one of
     * &#34;accepted&#34;, &#34;pending&#34;, &#34;rejected&#34;, or &#34;all&#34;.
     * 
     */
    @Import(name="memberStatus")
    private @Nullable String memberStatus;

    /**
     * @return The status of the image. Must be one of
     * &#34;accepted&#34;, &#34;pending&#34;, &#34;rejected&#34;, or &#34;all&#34;.
     * 
     */
    public Optional<String> memberStatus() {
        return Optional.ofNullable(this.memberStatus);
    }

    /**
     * The name of the image. Cannot be used simultaneously
     * with `name_regex`.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the image. Cannot be used simultaneously
     * with `name_regex`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The regular expressian of the name of the image.
     * Cannot be used simultaneously with `name`. Unlike filtering by `name` the\
     * `name_regex` filtering does by client on the result of OpenStack search
     * query.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return The regular expressian of the name of the image.
     * Cannot be used simultaneously with `name`. Unlike filtering by `name` the\
     * `name_regex` filtering does by client on the result of OpenStack search
     * query.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The owner (UUID) of the image.
     * 
     */
    @Import(name="owner")
    private @Nullable String owner;

    /**
     * @return The owner (UUID) of the image.
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * a map of key/value pairs to match an image with.
     * All specified properties must be matched. Unlike other options filtering\
     * by `properties` does by client on the result of OpenStack search query.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,Object> properties;

    /**
     * @return a map of key/value pairs to match an image with.
     * All specified properties must be matched. Unlike other options filtering\
     * by `properties` does by client on the result of OpenStack search query.
     * 
     */
    public Optional<Map<String,Object>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The region in which to obtain the V2 Glance client.
     * A Glance client is needed to create an Image that can be used with
     * a compute instance. If omitted, the `region` argument of the provider
     * is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Glance client.
     * A Glance client is needed to create an Image that can be used with
     * a compute instance. If omitted, the `region` argument of the provider
     * is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The maximum size (in bytes) of the image to return.
     * 
     */
    @Import(name="sizeMax")
    private @Nullable Integer sizeMax;

    /**
     * @return The maximum size (in bytes) of the image to return.
     * 
     */
    public Optional<Integer> sizeMax() {
        return Optional.ofNullable(this.sizeMax);
    }

    /**
     * The minimum size (in bytes) of the image to return.
     * 
     */
    @Import(name="sizeMin")
    private @Nullable Integer sizeMin;

    /**
     * @return The minimum size (in bytes) of the image to return.
     * 
     */
    public Optional<Integer> sizeMin() {
        return Optional.ofNullable(this.sizeMin);
    }

    /**
     * Sorts the response by one or more attribute and sort
     * direction combinations. You can also set multiple sort keys and directions.
     * Default direction is `desc`. Use the comma (,) character to separate
     * multiple values. For example expression `sort = &#34;name:asc,status&#34;`
     * sorts ascending by name and descending by status. `sort` cannot be used
     * simultaneously with `sort_key`. If both are present in a configuration
     * then only `sort` will be used.
     * 
     */
    @Import(name="sort")
    private @Nullable String sort;

    /**
     * @return Sorts the response by one or more attribute and sort
     * direction combinations. You can also set multiple sort keys and directions.
     * Default direction is `desc`. Use the comma (,) character to separate
     * multiple values. For example expression `sort = &#34;name:asc,status&#34;`
     * sorts ascending by name and descending by status. `sort` cannot be used
     * simultaneously with `sort_key`. If both are present in a configuration
     * then only `sort` will be used.
     * 
     */
    public Optional<String> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * Order the results in either `asc` or `desc`.
     * Can be applied only with `sort_key`. Defaults to `asc`
     * 
     * @deprecated
     * Use option &#39;sort&#39; instead.
     * 
     */
    @Deprecated /* Use option 'sort' instead. */
    @Import(name="sortDirection")
    private @Nullable String sortDirection;

    /**
     * @return Order the results in either `asc` or `desc`.
     * Can be applied only with `sort_key`. Defaults to `asc`
     * 
     * @deprecated
     * Use option &#39;sort&#39; instead.
     * 
     */
    @Deprecated /* Use option 'sort' instead. */
    public Optional<String> sortDirection() {
        return Optional.ofNullable(this.sortDirection);
    }

    /**
     * Sort images based on a certain key. Defaults to
     * `name`. `sort_key` cannot be used simultaneously with `sort`. If both
     * are present in a configuration then only `sort` will be used.
     * 
     * @deprecated
     * Use option &#39;sort&#39; instead.
     * 
     */
    @Deprecated /* Use option 'sort' instead. */
    @Import(name="sortKey")
    private @Nullable String sortKey;

    /**
     * @return Sort images based on a certain key. Defaults to
     * `name`. `sort_key` cannot be used simultaneously with `sort`. If both
     * are present in a configuration then only `sort` will be used.
     * 
     * @deprecated
     * Use option &#39;sort&#39; instead.
     * 
     */
    @Deprecated /* Use option 'sort' instead. */
    public Optional<String> sortKey() {
        return Optional.ofNullable(this.sortKey);
    }

    /**
     * Search for images with a specific tag.
     * 
     */
    @Import(name="tag")
    private @Nullable String tag;

    /**
     * @return Search for images with a specific tag.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * A list of tags required to be set on the image
     * (all specified tags must be in the images tag list for it to be matched).
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return A list of tags required to be set on the image
     * (all specified tags must be in the images tag list for it to be matched).
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The visibility of the image. Must be one of
     * &#34;public&#34;, &#34;private&#34;, &#34;community&#34;, or &#34;shared&#34;. Defaults to &#34;private&#34;.
     * 
     */
    @Import(name="visibility")
    private @Nullable String visibility;

    /**
     * @return The visibility of the image. Must be one of
     * &#34;public&#34;, &#34;private&#34;, &#34;community&#34;, or &#34;shared&#34;. Defaults to &#34;private&#34;.
     * 
     */
    public Optional<String> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private GetImageIdsPlainArgs() {}

    private GetImageIdsPlainArgs(GetImageIdsPlainArgs $) {
        this.memberStatus = $.memberStatus;
        this.name = $.name;
        this.nameRegex = $.nameRegex;
        this.owner = $.owner;
        this.properties = $.properties;
        this.region = $.region;
        this.sizeMax = $.sizeMax;
        this.sizeMin = $.sizeMin;
        this.sort = $.sort;
        this.sortDirection = $.sortDirection;
        this.sortKey = $.sortKey;
        this.tag = $.tag;
        this.tags = $.tags;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageIdsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageIdsPlainArgs $;

        public Builder() {
            $ = new GetImageIdsPlainArgs();
        }

        public Builder(GetImageIdsPlainArgs defaults) {
            $ = new GetImageIdsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param memberStatus The status of the image. Must be one of
         * &#34;accepted&#34;, &#34;pending&#34;, &#34;rejected&#34;, or &#34;all&#34;.
         * 
         * @return builder
         * 
         */
        public Builder memberStatus(@Nullable String memberStatus) {
            $.memberStatus = memberStatus;
            return this;
        }

        /**
         * @param name The name of the image. Cannot be used simultaneously
         * with `name_regex`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nameRegex The regular expressian of the name of the image.
         * Cannot be used simultaneously with `name`. Unlike filtering by `name` the\
         * `name_regex` filtering does by client on the result of OpenStack search
         * query.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param owner The owner (UUID) of the image.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable String owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param properties a map of key/value pairs to match an image with.
         * All specified properties must be matched. Unlike other options filtering\
         * by `properties` does by client on the result of OpenStack search query.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,Object> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Glance client.
         * A Glance client is needed to create an Image that can be used with
         * a compute instance. If omitted, the `region` argument of the provider
         * is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param sizeMax The maximum size (in bytes) of the image to return.
         * 
         * @return builder
         * 
         */
        public Builder sizeMax(@Nullable Integer sizeMax) {
            $.sizeMax = sizeMax;
            return this;
        }

        /**
         * @param sizeMin The minimum size (in bytes) of the image to return.
         * 
         * @return builder
         * 
         */
        public Builder sizeMin(@Nullable Integer sizeMin) {
            $.sizeMin = sizeMin;
            return this;
        }

        /**
         * @param sort Sorts the response by one or more attribute and sort
         * direction combinations. You can also set multiple sort keys and directions.
         * Default direction is `desc`. Use the comma (,) character to separate
         * multiple values. For example expression `sort = &#34;name:asc,status&#34;`
         * sorts ascending by name and descending by status. `sort` cannot be used
         * simultaneously with `sort_key`. If both are present in a configuration
         * then only `sort` will be used.
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable String sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sortDirection Order the results in either `asc` or `desc`.
         * Can be applied only with `sort_key`. Defaults to `asc`
         * 
         * @return builder
         * 
         * @deprecated
         * Use option &#39;sort&#39; instead.
         * 
         */
        @Deprecated /* Use option 'sort' instead. */
        public Builder sortDirection(@Nullable String sortDirection) {
            $.sortDirection = sortDirection;
            return this;
        }

        /**
         * @param sortKey Sort images based on a certain key. Defaults to
         * `name`. `sort_key` cannot be used simultaneously with `sort`. If both
         * are present in a configuration then only `sort` will be used.
         * 
         * @return builder
         * 
         * @deprecated
         * Use option &#39;sort&#39; instead.
         * 
         */
        @Deprecated /* Use option 'sort' instead. */
        public Builder sortKey(@Nullable String sortKey) {
            $.sortKey = sortKey;
            return this;
        }

        /**
         * @param tag Search for images with a specific tag.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable String tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tags A list of tags required to be set on the image
         * (all specified tags must be in the images tag list for it to be matched).
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags required to be set on the image
         * (all specified tags must be in the images tag list for it to be matched).
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param visibility The visibility of the image. Must be one of
         * &#34;public&#34;, &#34;private&#34;, &#34;community&#34;, or &#34;shared&#34;. Defaults to &#34;private&#34;.
         * 
         * @return builder
         * 
         */
        public Builder visibility(@Nullable String visibility) {
            $.visibility = visibility;
            return this;
        }

        public GetImageIdsPlainArgs build() {
            return $;
        }
    }

}
