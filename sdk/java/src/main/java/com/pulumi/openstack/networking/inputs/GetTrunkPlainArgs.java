// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTrunkPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTrunkPlainArgs Empty = new GetTrunkPlainArgs();

    /**
     * The administrative state of the trunk.
     * 
     */
    @Import(name="adminStateUp")
    private @Nullable Boolean adminStateUp;

    /**
     * @return The administrative state of the trunk.
     * 
     */
    public Optional<Boolean> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }

    /**
     * Human-readable description of the trunk.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Human-readable description of the trunk.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the trunk.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the trunk.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the trunk parent port.
     * 
     */
    @Import(name="portId")
    private @Nullable String portId;

    /**
     * @return The ID of the trunk parent port.
     * 
     */
    public Optional<String> portId() {
        return Optional.ofNullable(this.portId);
    }

    /**
     * The owner of the trunk.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return The owner of the trunk.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve trunk ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve trunk ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The status of the trunk.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the trunk.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The list of trunk tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return The list of trunk tags to filter.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the trunk.
     * 
     */
    @Import(name="trunkId")
    private @Nullable String trunkId;

    /**
     * @return The ID of the trunk.
     * 
     */
    public Optional<String> trunkId() {
        return Optional.ofNullable(this.trunkId);
    }

    private GetTrunkPlainArgs() {}

    private GetTrunkPlainArgs(GetTrunkPlainArgs $) {
        this.adminStateUp = $.adminStateUp;
        this.description = $.description;
        this.name = $.name;
        this.portId = $.portId;
        this.projectId = $.projectId;
        this.region = $.region;
        this.status = $.status;
        this.tags = $.tags;
        this.trunkId = $.trunkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTrunkPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTrunkPlainArgs $;

        public Builder() {
            $ = new GetTrunkPlainArgs();
        }

        public Builder(GetTrunkPlainArgs defaults) {
            $ = new GetTrunkPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminStateUp The administrative state of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(@Nullable Boolean adminStateUp) {
            $.adminStateUp = adminStateUp;
            return this;
        }

        /**
         * @param description Human-readable description of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param name The name of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param portId The ID of the trunk parent port.
         * 
         * @return builder
         * 
         */
        public Builder portId(@Nullable String portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param projectId The owner of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve trunk ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param status The status of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags The list of trunk tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of trunk tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param trunkId The ID of the trunk.
         * 
         * @return builder
         * 
         */
        public Builder trunkId(@Nullable String trunkId) {
            $.trunkId = trunkId;
            return this;
        }

        public GetTrunkPlainArgs build() {
            return $;
        }
    }

}
