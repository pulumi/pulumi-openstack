// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.containerinfra.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodeGroupResult {
    private String clusterId;
    /**
     * @return The time at which the node group was created.
     * 
     */
    private String createdAt;
    /**
     * @return The size (in GB) of the Docker volume.
     * 
     */
    private Integer dockerVolumeSize;
    /**
     * @return The flavor for the nodes of the node group.
     * 
     */
    private String flavor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The reference to an image that is used for nodes of the node group.
     * 
     */
    private String image;
    /**
     * @return The list of key value pairs representing additional properties of
     * the node group.
     * 
     */
    private Map<String,Object> labels;
    /**
     * @return The maximum number of nodes for the node group.
     * 
     */
    private Integer maxNodeCount;
    /**
     * @return The minimum number of nodes for the node group.
     * 
     */
    private Integer minNodeCount;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String name;
    /**
     * @return The number of nodes for the node group.
     * 
     */
    private Integer nodeCount;
    /**
     * @return The project of the node group.
     * 
     */
    private String projectId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String region;
    /**
     * @return The role of the node group.
     * 
     */
    private String role;
    /**
     * @return The time at which the node group was updated.
     * 
     */
    private String updatedAt;

    private GetNodeGroupResult() {}
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The time at which the node group was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The size (in GB) of the Docker volume.
     * 
     */
    public Integer dockerVolumeSize() {
        return this.dockerVolumeSize;
    }
    /**
     * @return The flavor for the nodes of the node group.
     * 
     */
    public String flavor() {
        return this.flavor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The reference to an image that is used for nodes of the node group.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return The list of key value pairs representing additional properties of
     * the node group.
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    /**
     * @return The maximum number of nodes for the node group.
     * 
     */
    public Integer maxNodeCount() {
        return this.maxNodeCount;
    }
    /**
     * @return The minimum number of nodes for the node group.
     * 
     */
    public Integer minNodeCount() {
        return this.minNodeCount;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of nodes for the node group.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The project of the node group.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The role of the node group.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The time at which the node group was updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String createdAt;
        private Integer dockerVolumeSize;
        private String flavor;
        private String id;
        private String image;
        private Map<String,Object> labels;
        private Integer maxNodeCount;
        private Integer minNodeCount;
        private String name;
        private Integer nodeCount;
        private String projectId;
        private String region;
        private String role;
        private String updatedAt;
        public Builder() {}
        public Builder(GetNodeGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.createdAt = defaults.createdAt;
    	      this.dockerVolumeSize = defaults.dockerVolumeSize;
    	      this.flavor = defaults.flavor;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.labels = defaults.labels;
    	      this.maxNodeCount = defaults.maxNodeCount;
    	      this.minNodeCount = defaults.minNodeCount;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.role = defaults.role;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder dockerVolumeSize(Integer dockerVolumeSize) {
            this.dockerVolumeSize = Objects.requireNonNull(dockerVolumeSize);
            return this;
        }
        @CustomType.Setter
        public Builder flavor(String flavor) {
            this.flavor = Objects.requireNonNull(flavor);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder maxNodeCount(Integer maxNodeCount) {
            this.maxNodeCount = Objects.requireNonNull(maxNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder minNodeCount(Integer minNodeCount) {
            this.minNodeCount = Objects.requireNonNull(minNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        public GetNodeGroupResult build() {
            final var _resultValue = new GetNodeGroupResult();
            _resultValue.clusterId = clusterId;
            _resultValue.createdAt = createdAt;
            _resultValue.dockerVolumeSize = dockerVolumeSize;
            _resultValue.flavor = flavor;
            _resultValue.id = id;
            _resultValue.image = image;
            _resultValue.labels = labels;
            _resultValue.maxNodeCount = maxNodeCount;
            _resultValue.minNodeCount = minNodeCount;
            _resultValue.name = name;
            _resultValue.nodeCount = nodeCount;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.role = role;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
