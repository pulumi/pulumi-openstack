// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.openstack.networking.inputs.BgpSpeakerV2AdvertisedRouteArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BgpSpeakerV2State extends com.pulumi.resources.ResourceArgs {

    public static final BgpSpeakerV2State Empty = new BgpSpeakerV2State();

    /**
     * A boolean value indicating
     * whether to advertise floating IP host routes. Defaults to `true`.
     * 
     */
    @Import(name="advertiseFloatingIpHostRoutes")
    private @Nullable Output<Boolean> advertiseFloatingIpHostRoutes;

    /**
     * @return A boolean value indicating
     * whether to advertise floating IP host routes. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> advertiseFloatingIpHostRoutes() {
        return Optional.ofNullable(this.advertiseFloatingIpHostRoutes);
    }

    /**
     * A boolean value indicating whether to
     * advertise tenant networks. Defaults to `true`.
     * 
     */
    @Import(name="advertiseTenantNetworks")
    private @Nullable Output<Boolean> advertiseTenantNetworks;

    /**
     * @return A boolean value indicating whether to
     * advertise tenant networks. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> advertiseTenantNetworks() {
        return Optional.ofNullable(this.advertiseTenantNetworks);
    }

    /**
     * A list of dictionaries containing the `destination` and
     * `next_hop` for each route advertised by the BGP speaker. This attribute is
     * only populated after the BGP speaker has been created and has established BGP
     * sessions with its peers.
     * 
     */
    @Import(name="advertisedRoutes")
    private @Nullable Output<List<BgpSpeakerV2AdvertisedRouteArgs>> advertisedRoutes;

    /**
     * @return A list of dictionaries containing the `destination` and
     * `next_hop` for each route advertised by the BGP speaker. This attribute is
     * only populated after the BGP speaker has been created and has established BGP
     * sessions with its peers.
     * 
     */
    public Optional<Output<List<BgpSpeakerV2AdvertisedRouteArgs>>> advertisedRoutes() {
        return Optional.ofNullable(this.advertisedRoutes);
    }

    /**
     * The IP version of the BGP speaker. Valid values are
     * `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Integer> ipVersion;

    /**
     * @return The IP version of the BGP speaker. Valid values are
     * `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
     * 
     */
    public Optional<Output<Integer>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The local autonomous system number (ASN) for the BGP
     * speaker. This is a mandatory field and must be specified. Changing this
     * creates a new BGP speaker.
     * 
     */
    @Import(name="localAs")
    private @Nullable Output<Integer> localAs;

    /**
     * @return The local autonomous system number (ASN) for the BGP
     * speaker. This is a mandatory field and must be specified. Changing this
     * creates a new BGP speaker.
     * 
     */
    public Optional<Output<Integer>> localAs() {
        return Optional.ofNullable(this.localAs);
    }

    /**
     * A name for the BGP speaker.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the BGP speaker.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of network IDs to associate with the BGP speaker.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return A list of network IDs to associate with the BGP speaker.
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * A list of BGP peer IDs to associate with the BGP speaker.
     * 
     */
    @Import(name="peers")
    private @Nullable Output<List<String>> peers;

    /**
     * @return A list of BGP peer IDs to associate with the BGP speaker.
     * 
     */
    public Optional<Output<List<String>>> peers() {
        return Optional.ofNullable(this.peers);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * speaker.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * speaker.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP speaker.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP speaker.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private BgpSpeakerV2State() {}

    private BgpSpeakerV2State(BgpSpeakerV2State $) {
        this.advertiseFloatingIpHostRoutes = $.advertiseFloatingIpHostRoutes;
        this.advertiseTenantNetworks = $.advertiseTenantNetworks;
        this.advertisedRoutes = $.advertisedRoutes;
        this.ipVersion = $.ipVersion;
        this.localAs = $.localAs;
        this.name = $.name;
        this.networks = $.networks;
        this.peers = $.peers;
        this.region = $.region;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BgpSpeakerV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BgpSpeakerV2State $;

        public Builder() {
            $ = new BgpSpeakerV2State();
        }

        public Builder(BgpSpeakerV2State defaults) {
            $ = new BgpSpeakerV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param advertiseFloatingIpHostRoutes A boolean value indicating
         * whether to advertise floating IP host routes. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder advertiseFloatingIpHostRoutes(@Nullable Output<Boolean> advertiseFloatingIpHostRoutes) {
            $.advertiseFloatingIpHostRoutes = advertiseFloatingIpHostRoutes;
            return this;
        }

        /**
         * @param advertiseFloatingIpHostRoutes A boolean value indicating
         * whether to advertise floating IP host routes. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder advertiseFloatingIpHostRoutes(Boolean advertiseFloatingIpHostRoutes) {
            return advertiseFloatingIpHostRoutes(Output.of(advertiseFloatingIpHostRoutes));
        }

        /**
         * @param advertiseTenantNetworks A boolean value indicating whether to
         * advertise tenant networks. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder advertiseTenantNetworks(@Nullable Output<Boolean> advertiseTenantNetworks) {
            $.advertiseTenantNetworks = advertiseTenantNetworks;
            return this;
        }

        /**
         * @param advertiseTenantNetworks A boolean value indicating whether to
         * advertise tenant networks. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder advertiseTenantNetworks(Boolean advertiseTenantNetworks) {
            return advertiseTenantNetworks(Output.of(advertiseTenantNetworks));
        }

        /**
         * @param advertisedRoutes A list of dictionaries containing the `destination` and
         * `next_hop` for each route advertised by the BGP speaker. This attribute is
         * only populated after the BGP speaker has been created and has established BGP
         * sessions with its peers.
         * 
         * @return builder
         * 
         */
        public Builder advertisedRoutes(@Nullable Output<List<BgpSpeakerV2AdvertisedRouteArgs>> advertisedRoutes) {
            $.advertisedRoutes = advertisedRoutes;
            return this;
        }

        /**
         * @param advertisedRoutes A list of dictionaries containing the `destination` and
         * `next_hop` for each route advertised by the BGP speaker. This attribute is
         * only populated after the BGP speaker has been created and has established BGP
         * sessions with its peers.
         * 
         * @return builder
         * 
         */
        public Builder advertisedRoutes(List<BgpSpeakerV2AdvertisedRouteArgs> advertisedRoutes) {
            return advertisedRoutes(Output.of(advertisedRoutes));
        }

        /**
         * @param advertisedRoutes A list of dictionaries containing the `destination` and
         * `next_hop` for each route advertised by the BGP speaker. This attribute is
         * only populated after the BGP speaker has been created and has established BGP
         * sessions with its peers.
         * 
         * @return builder
         * 
         */
        public Builder advertisedRoutes(BgpSpeakerV2AdvertisedRouteArgs... advertisedRoutes) {
            return advertisedRoutes(List.of(advertisedRoutes));
        }

        /**
         * @param ipVersion The IP version of the BGP speaker. Valid values are
         * `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Integer> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion The IP version of the BGP speaker. Valid values are
         * `4` or `6`. Defaults to `4`. Changing this creates a new BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Integer ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param localAs The local autonomous system number (ASN) for the BGP
         * speaker. This is a mandatory field and must be specified. Changing this
         * creates a new BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder localAs(@Nullable Output<Integer> localAs) {
            $.localAs = localAs;
            return this;
        }

        /**
         * @param localAs The local autonomous system number (ASN) for the BGP
         * speaker. This is a mandatory field and must be specified. Changing this
         * creates a new BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder localAs(Integer localAs) {
            return localAs(Output.of(localAs));
        }

        /**
         * @param name A name for the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks A list of network IDs to associate with the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks A list of network IDs to associate with the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks A list of network IDs to associate with the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param peers A list of BGP peer IDs to associate with the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder peers(@Nullable Output<List<String>> peers) {
            $.peers = peers;
            return this;
        }

        /**
         * @param peers A list of BGP peer IDs to associate with the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder peers(List<String> peers) {
            return peers(Output.of(peers));
        }

        /**
         * @param peers A list of BGP peer IDs to associate with the BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder peers(String... peers) {
            return peers(List.of(peers));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a Neutron network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new BGP
         * speaker.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a Neutron network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new BGP
         * speaker.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tenantId The tenant/project ID. Required if admin privileges
         * are used. Changing this creates a new BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The tenant/project ID. Required if admin privileges
         * are used. Changing this creates a new BGP speaker.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public BgpSpeakerV2State build() {
            return $;
        }
    }

}
