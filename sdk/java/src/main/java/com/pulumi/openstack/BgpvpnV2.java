// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.openstack.BgpvpnV2Args;
import com.pulumi.openstack.Utilities;
import com.pulumi.openstack.inputs.BgpvpnV2State;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a V2 BGP VPN service resource within OpenStack.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.openstack.BgpvpnV2;
 * import com.pulumi.openstack.BgpvpnV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var bgpvpn1 = new BgpvpnV2("bgpvpn1", BgpvpnV2Args.builder()
 *             .name("bgpvpn1")
 *             .routeDistinguishers("64512:1")
 *             .routeTargets("64512:1")
 *             .importTargets("64512:2")
 *             .exportTargets("64512:3")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * BGP VPNs can be imported using the `id`, e.g.
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import openstack:index/bgpvpnV2:BgpvpnV2 bgpvpn_1 1eec2c66-6be2-4305-af3f-354c9b81f18c
 * ```
 * 
 */
@ResourceType(type="openstack:index/bgpvpnV2:BgpvpnV2")
public class BgpvpnV2 extends com.pulumi.resources.CustomResource {
    /**
     * A list of additional Route Targets that will be
     * used for export.
     * 
     */
    @Export(name="exportTargets", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> exportTargets;

    /**
     * @return A list of additional Route Targets that will be
     * used for export.
     * 
     */
    public Output<List<String>> exportTargets() {
        return this.exportTargets;
    }
    /**
     * A list of additional Route Targets that will be
     * imported.
     * 
     */
    @Export(name="importTargets", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> importTargets;

    /**
     * @return A list of additional Route Targets that will be
     * imported.
     * 
     */
    public Output<List<String>> importTargets() {
        return this.importTargets;
    }
    /**
     * The default BGP LOCAL\_PREF of routes that will be
     * advertised to the BGP VPN, unless overridden per-route.
     * 
     */
    @Export(name="localPref", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> localPref;

    /**
     * @return The default BGP LOCAL\_PREF of routes that will be
     * advertised to the BGP VPN, unless overridden per-route.
     * 
     */
    public Output<Optional<Integer>> localPref() {
        return Codegen.optional(this.localPref);
    }
    /**
     * The name of the BGP VPN. Changing this updates the name of
     * the existing BGP VPN.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the BGP VPN. Changing this updates the name of
     * the existing BGP VPN.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A list of network IDs that are associated with the BGP VPN.
     * 
     */
    @Export(name="networks", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> networks;

    /**
     * @return A list of network IDs that are associated with the BGP VPN.
     * 
     */
    public Output<List<String>> networks() {
        return this.networks;
    }
    /**
     * A list of port IDs that are associated with the BGP VPN.
     * 
     */
    @Export(name="ports", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> ports;

    /**
     * @return A list of port IDs that are associated with the BGP VPN.
     * 
     */
    public Output<List<String>> ports() {
        return this.ports;
    }
    /**
     * The ID of the project that owns the BGPVPN. Only
     * administrative and users with `advsvc` role can specify a project ID other
     * than their own. Changing this creates a new BGP VPN.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The ID of the project that owns the BGPVPN. Only
     * administrative and users with `advsvc` role can specify a project ID other
     * than their own. Changing this creates a new BGP VPN.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a BGP VPN service. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * BGP VPN.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a BGP VPN service. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * BGP VPN.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * A list of route distinguisher strings. If
     * specified, one of these RDs will be used to advertise VPN routes.
     * 
     */
    @Export(name="routeDistinguishers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> routeDistinguishers;

    /**
     * @return A list of route distinguisher strings. If
     * specified, one of these RDs will be used to advertise VPN routes.
     * 
     */
    public Output<List<String>> routeDistinguishers() {
        return this.routeDistinguishers;
    }
    /**
     * A list of Route Targets that will be both
     * imported and used for export.
     * 
     */
    @Export(name="routeTargets", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> routeTargets;

    /**
     * @return A list of Route Targets that will be both
     * imported and used for export.
     * 
     */
    public Output<List<String>> routeTargets() {
        return this.routeTargets;
    }
    /**
     * A list of router IDs that are associated with the BGP VPN.
     * 
     */
    @Export(name="routers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> routers;

    /**
     * @return A list of router IDs that are associated with the BGP VPN.
     * 
     */
    public Output<List<String>> routers() {
        return this.routers;
    }
    /**
     * Indicates whether the BGP VPN is shared across projects.
     * 
     */
    @Export(name="shared", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> shared;

    /**
     * @return Indicates whether the BGP VPN is shared across projects.
     * 
     */
    public Output<Boolean> shared() {
        return this.shared;
    }
    /**
     * The type of the BGP VPN (either `l2` or `l3`). Changing this
     * creates a new BGP VPN. Defaults to `l3`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the BGP VPN (either `l2` or `l3`). Changing this
     * creates a new BGP VPN. Defaults to `l3`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The globally-assigned VXLAN VNI for the BGP VPN. Changing
     * this creates a new BGP VPN.
     * 
     */
    @Export(name="vni", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> vni;

    /**
     * @return The globally-assigned VXLAN VNI for the BGP VPN. Changing
     * this creates a new BGP VPN.
     * 
     */
    public Output<Optional<Integer>> vni() {
        return Codegen.optional(this.vni);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BgpvpnV2(String name) {
        this(name, BgpvpnV2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BgpvpnV2(String name, @Nullable BgpvpnV2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BgpvpnV2(String name, @Nullable BgpvpnV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:index/bgpvpnV2:BgpvpnV2", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private BgpvpnV2(String name, Output<String> id, @Nullable BgpvpnV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:index/bgpvpnV2:BgpvpnV2", name, state, makeResourceOptions(options, id));
    }

    private static BgpvpnV2Args makeArgs(@Nullable BgpvpnV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BgpvpnV2Args.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BgpvpnV2 get(String name, Output<String> id, @Nullable BgpvpnV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BgpvpnV2(name, id, state, options);
    }
}
