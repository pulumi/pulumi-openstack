// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.loadbalancer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerState extends com.pulumi.resources.ResourceArgs {

    public static final ListenerState Empty = new ListenerState();

    /**
     * The administrative state of the Listener. A
     * valid value is true (UP) or false (DOWN).
     * 
     */
    @Import(name="adminStateUp")
    private @Nullable Output<Boolean> adminStateUp;

    /**
     * @return The administrative state of the Listener. A
     * valid value is true (UP) or false (DOWN).
     * 
     */
    public Optional<Output<Boolean>> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }

    /**
     * A list of CIDR blocks that are permitted to
     * connect to this listener, denying all other source addresses. If not present,
     * defaults to allow all.
     * 
     */
    @Import(name="allowedCidrs")
    private @Nullable Output<List<String>> allowedCidrs;

    /**
     * @return A list of CIDR blocks that are permitted to
     * connect to this listener, denying all other source addresses. If not present,
     * defaults to allow all.
     * 
     */
    public Optional<Output<List<String>>> allowedCidrs() {
        return Optional.ofNullable(this.allowedCidrs);
    }

    /**
     * A list of ALPN protocols. Available protocols:
     * `http/1.0`, `http/1.1`, `h2`. Supported only in **Octavia minor version &gt;=
     * 2.20**.
     * 
     */
    @Import(name="alpnProtocols")
    private @Nullable Output<List<String>> alpnProtocols;

    /**
     * @return A list of ALPN protocols. Available protocols:
     * `http/1.0`, `http/1.1`, `h2`. Supported only in **Octavia minor version &gt;=
     * 2.20**.
     * 
     */
    public Optional<Output<List<String>>> alpnProtocols() {
        return Optional.ofNullable(this.alpnProtocols);
    }

    /**
     * The TLS client authentication mode.
     * Available options: `NONE`, `OPTIONAL` or `MANDATORY`. Requires
     * `TERMINATED_HTTPS` listener protocol and the `client_ca_tls_container_ref`.
     * Supported only in **Octavia minor version &gt;= 2.8**.
     * 
     */
    @Import(name="clientAuthentication")
    private @Nullable Output<String> clientAuthentication;

    /**
     * @return The TLS client authentication mode.
     * Available options: `NONE`, `OPTIONAL` or `MANDATORY`. Requires
     * `TERMINATED_HTTPS` listener protocol and the `client_ca_tls_container_ref`.
     * Supported only in **Octavia minor version &gt;= 2.8**.
     * 
     */
    public Optional<Output<String>> clientAuthentication() {
        return Optional.ofNullable(this.clientAuthentication);
    }

    /**
     * The ref of the key manager service
     * secret containing a PEM format client CA certificate bundle for
     * `TERMINATED_HTTPS` listeners. Required if `client_authentication` is
     * `OPTIONAL` or `MANDATORY`. Supported only in **Octavia minor version &gt;=
     * 2.8**.
     * 
     */
    @Import(name="clientCaTlsContainerRef")
    private @Nullable Output<String> clientCaTlsContainerRef;

    /**
     * @return The ref of the key manager service
     * secret containing a PEM format client CA certificate bundle for
     * `TERMINATED_HTTPS` listeners. Required if `client_authentication` is
     * `OPTIONAL` or `MANDATORY`. Supported only in **Octavia minor version &gt;=
     * 2.8**.
     * 
     */
    public Optional<Output<String>> clientCaTlsContainerRef() {
        return Optional.ofNullable(this.clientCaTlsContainerRef);
    }

    /**
     * The URI of the key manager service
     * secret containing a PEM format CA revocation list file for `TERMINATED_HTTPS`
     * listeners. Supported only in **Octavia minor version &gt;= 2.8**.
     * 
     */
    @Import(name="clientCrlContainerRef")
    private @Nullable Output<String> clientCrlContainerRef;

    /**
     * @return The URI of the key manager service
     * secret containing a PEM format CA revocation list file for `TERMINATED_HTTPS`
     * listeners. Supported only in **Octavia minor version &gt;= 2.8**.
     * 
     */
    public Optional<Output<String>> clientCrlContainerRef() {
        return Optional.ofNullable(this.clientCrlContainerRef);
    }

    /**
     * The maximum number of connections allowed for
     * the Listener.
     * 
     */
    @Import(name="connectionLimit")
    private @Nullable Output<Integer> connectionLimit;

    /**
     * @return The maximum number of connections allowed for
     * the Listener.
     * 
     */
    public Optional<Output<Integer>> connectionLimit() {
        return Optional.ofNullable(this.connectionLimit);
    }

    /**
     * The ID of the default pool with which the
     * Listener is associated.
     * 
     */
    @Import(name="defaultPoolId")
    private @Nullable Output<String> defaultPoolId;

    /**
     * @return The ID of the default pool with which the
     * Listener is associated.
     * 
     */
    public Optional<Output<String>> defaultPoolId() {
        return Optional.ofNullable(this.defaultPoolId);
    }

    /**
     * A reference to a Barbican Secrets
     * container which stores TLS information. This is required if the protocol is
     * `TERMINATED_HTTPS`. See
     * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
     * for more information.
     * 
     */
    @Import(name="defaultTlsContainerRef")
    private @Nullable Output<String> defaultTlsContainerRef;

    /**
     * @return A reference to a Barbican Secrets
     * container which stores TLS information. This is required if the protocol is
     * `TERMINATED_HTTPS`. See
     * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
     * for more information.
     * 
     */
    public Optional<Output<String>> defaultTlsContainerRef() {
        return Optional.ofNullable(this.defaultTlsContainerRef);
    }

    /**
     * Human-readable description for the Listener.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-readable description for the Listener.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Defines whether the
     * **includeSubDomains** directive should be added to the
     * Strict-Transport-Security HTTP response header. This requires setting the
     * `hsts_max_age` option as well in order to become effective. Requires
     * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
     * version &gt;= 2.27**.
     * 
     */
    @Import(name="hstsIncludeSubdomains")
    private @Nullable Output<Boolean> hstsIncludeSubdomains;

    /**
     * @return Defines whether the
     * **includeSubDomains** directive should be added to the
     * Strict-Transport-Security HTTP response header. This requires setting the
     * `hsts_max_age` option as well in order to become effective. Requires
     * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
     * version &gt;= 2.27**.
     * 
     */
    public Optional<Output<Boolean>> hstsIncludeSubdomains() {
        return Optional.ofNullable(this.hstsIncludeSubdomains);
    }

    /**
     * The value of the **max_age** directive for the
     * Strict-Transport-Security HTTP response header. Setting this enables HTTP
     * Strict Transport Security (HSTS) for the TLS-terminated listener. Requires
     * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
     * version &gt;= 2.27**.
     * 
     */
    @Import(name="hstsMaxAge")
    private @Nullable Output<Integer> hstsMaxAge;

    /**
     * @return The value of the **max_age** directive for the
     * Strict-Transport-Security HTTP response header. Setting this enables HTTP
     * Strict Transport Security (HSTS) for the TLS-terminated listener. Requires
     * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
     * version &gt;= 2.27**.
     * 
     */
    public Optional<Output<Integer>> hstsMaxAge() {
        return Optional.ofNullable(this.hstsMaxAge);
    }

    /**
     * Defines whether the **preload** directive should
     * be added to the Strict-Transport-Security HTTP response header. This requires
     * setting the `hsts_max_age` option as well in order to become effective.
     * Requires `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia
     * minor version &gt;= 2.27**.
     * 
     */
    @Import(name="hstsPreload")
    private @Nullable Output<Boolean> hstsPreload;

    /**
     * @return Defines whether the **preload** directive should
     * be added to the Strict-Transport-Security HTTP response header. This requires
     * setting the `hsts_max_age` option as well in order to become effective.
     * Requires `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia
     * minor version &gt;= 2.27**.
     * 
     */
    public Optional<Output<Boolean>> hstsPreload() {
        return Optional.ofNullable(this.hstsPreload);
    }

    /**
     * The list of key value pairs representing
     * headers to insert into the request before it is sent to the backend members.
     * Changing this updates the headers of the existing listener.
     * 
     */
    @Import(name="insertHeaders")
    private @Nullable Output<Map<String,String>> insertHeaders;

    /**
     * @return The list of key value pairs representing
     * headers to insert into the request before it is sent to the backend members.
     * Changing this updates the headers of the existing listener.
     * 
     */
    public Optional<Output<Map<String,String>>> insertHeaders() {
        return Optional.ofNullable(this.insertHeaders);
    }

    /**
     * The load balancer on which to provision this
     * Listener. Changing this creates a new Listener.
     * 
     */
    @Import(name="loadbalancerId")
    private @Nullable Output<String> loadbalancerId;

    /**
     * @return The load balancer on which to provision this
     * Listener. Changing this creates a new Listener.
     * 
     */
    public Optional<Output<String>> loadbalancerId() {
        return Optional.ofNullable(this.loadbalancerId);
    }

    /**
     * Human-readable name for the Listener. Does not have to be
     * unique.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human-readable name for the Listener. Does not have to be
     * unique.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The protocol can be either `TCP`, `HTTP`, `HTTPS`,
     * `TERMINATED_HTTPS`, `UDP`, `SCTP` (supported only in **Octavia minor version
     * \&gt;= 2.23**), or `PROMETHEUS` (supported only in **Octavia minor version &gt;=
     * 2.25**). Changing this creates a new Listener.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol can be either `TCP`, `HTTP`, `HTTPS`,
     * `TERMINATED_HTTPS`, `UDP`, `SCTP` (supported only in **Octavia minor version
     * \&gt;= 2.23**), or `PROMETHEUS` (supported only in **Octavia minor version &gt;=
     * 2.25**). Changing this creates a new Listener.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The port on which to listen for client traffic.
     * * Changing this creates a new Listener.
     * 
     */
    @Import(name="protocolPort")
    private @Nullable Output<Integer> protocolPort;

    /**
     * @return The port on which to listen for client traffic.
     * * Changing this creates a new Listener.
     * 
     */
    public Optional<Output<Integer>> protocolPort() {
        return Optional.ofNullable(this.protocolPort);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a listener. If omitted, the `region`
     * argument of the provider is used. Changing this creates a new Listener.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a listener. If omitted, the `region`
     * argument of the provider is used. Changing this creates a new Listener.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A list of references to Barbican Secrets
     * containers which store SNI information. See
     * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
     * for more information.
     * 
     */
    @Import(name="sniContainerRefs")
    private @Nullable Output<List<String>> sniContainerRefs;

    /**
     * @return A list of references to Barbican Secrets
     * containers which store SNI information. See
     * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
     * for more information.
     * 
     */
    public Optional<Output<List<String>>> sniContainerRefs() {
        return Optional.ofNullable(this.sniContainerRefs);
    }

    /**
     * A list of simple strings assigned to the pool. Available
     * for Octavia **minor version 2.5 or later**.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of simple strings assigned to the pool. Available
     * for Octavia **minor version 2.5 or later**.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Required for admins. The UUID of the tenant who owns
     * the Listener.  Only administrative users can specify a tenant UUID other than
     * their own. Changing this creates a new Listener.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Required for admins. The UUID of the tenant who owns
     * the Listener.  Only administrative users can specify a tenant UUID other than
     * their own. Changing this creates a new Listener.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The client inactivity timeout in
     * milliseconds.
     * 
     */
    @Import(name="timeoutClientData")
    private @Nullable Output<Integer> timeoutClientData;

    /**
     * @return The client inactivity timeout in
     * milliseconds.
     * 
     */
    public Optional<Output<Integer>> timeoutClientData() {
        return Optional.ofNullable(this.timeoutClientData);
    }

    /**
     * The member connection timeout in
     * milliseconds.
     * 
     */
    @Import(name="timeoutMemberConnect")
    private @Nullable Output<Integer> timeoutMemberConnect;

    /**
     * @return The member connection timeout in
     * milliseconds.
     * 
     */
    public Optional<Output<Integer>> timeoutMemberConnect() {
        return Optional.ofNullable(this.timeoutMemberConnect);
    }

    /**
     * The member inactivity timeout in
     * milliseconds.
     * 
     */
    @Import(name="timeoutMemberData")
    private @Nullable Output<Integer> timeoutMemberData;

    /**
     * @return The member inactivity timeout in
     * milliseconds.
     * 
     */
    public Optional<Output<Integer>> timeoutMemberData() {
        return Optional.ofNullable(this.timeoutMemberData);
    }

    /**
     * The time in milliseconds, to wait for
     * additional TCP packets for content inspection.
     * 
     */
    @Import(name="timeoutTcpInspect")
    private @Nullable Output<Integer> timeoutTcpInspect;

    /**
     * @return The time in milliseconds, to wait for
     * additional TCP packets for content inspection.
     * 
     */
    public Optional<Output<Integer>> timeoutTcpInspect() {
        return Optional.ofNullable(this.timeoutTcpInspect);
    }

    /**
     * List of ciphers in OpenSSL format
     * (colon-separated). See
     * https://www.openssl.org/docs/man1.1.1/man1/ciphers.html for more information.
     * Supported only in **Octavia minor version &gt;= 2.15**.
     * 
     */
    @Import(name="tlsCiphers")
    private @Nullable Output<String> tlsCiphers;

    /**
     * @return List of ciphers in OpenSSL format
     * (colon-separated). See
     * https://www.openssl.org/docs/man1.1.1/man1/ciphers.html for more information.
     * Supported only in **Octavia minor version &gt;= 2.15**.
     * 
     */
    public Optional<Output<String>> tlsCiphers() {
        return Optional.ofNullable(this.tlsCiphers);
    }

    /**
     * A list of TLS protocol versions. Available
     * versions: `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. Supported only in
     * **Octavia minor version &gt;= 2.17**.
     * 
     */
    @Import(name="tlsVersions")
    private @Nullable Output<List<String>> tlsVersions;

    /**
     * @return A list of TLS protocol versions. Available
     * versions: `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. Supported only in
     * **Octavia minor version &gt;= 2.17**.
     * 
     */
    public Optional<Output<List<String>>> tlsVersions() {
        return Optional.ofNullable(this.tlsVersions);
    }

    private ListenerState() {}

    private ListenerState(ListenerState $) {
        this.adminStateUp = $.adminStateUp;
        this.allowedCidrs = $.allowedCidrs;
        this.alpnProtocols = $.alpnProtocols;
        this.clientAuthentication = $.clientAuthentication;
        this.clientCaTlsContainerRef = $.clientCaTlsContainerRef;
        this.clientCrlContainerRef = $.clientCrlContainerRef;
        this.connectionLimit = $.connectionLimit;
        this.defaultPoolId = $.defaultPoolId;
        this.defaultTlsContainerRef = $.defaultTlsContainerRef;
        this.description = $.description;
        this.hstsIncludeSubdomains = $.hstsIncludeSubdomains;
        this.hstsMaxAge = $.hstsMaxAge;
        this.hstsPreload = $.hstsPreload;
        this.insertHeaders = $.insertHeaders;
        this.loadbalancerId = $.loadbalancerId;
        this.name = $.name;
        this.protocol = $.protocol;
        this.protocolPort = $.protocolPort;
        this.region = $.region;
        this.sniContainerRefs = $.sniContainerRefs;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
        this.timeoutClientData = $.timeoutClientData;
        this.timeoutMemberConnect = $.timeoutMemberConnect;
        this.timeoutMemberData = $.timeoutMemberData;
        this.timeoutTcpInspect = $.timeoutTcpInspect;
        this.tlsCiphers = $.tlsCiphers;
        this.tlsVersions = $.tlsVersions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerState $;

        public Builder() {
            $ = new ListenerState();
        }

        public Builder(ListenerState defaults) {
            $ = new ListenerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminStateUp The administrative state of the Listener. A
         * valid value is true (UP) or false (DOWN).
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(@Nullable Output<Boolean> adminStateUp) {
            $.adminStateUp = adminStateUp;
            return this;
        }

        /**
         * @param adminStateUp The administrative state of the Listener. A
         * valid value is true (UP) or false (DOWN).
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(Boolean adminStateUp) {
            return adminStateUp(Output.of(adminStateUp));
        }

        /**
         * @param allowedCidrs A list of CIDR blocks that are permitted to
         * connect to this listener, denying all other source addresses. If not present,
         * defaults to allow all.
         * 
         * @return builder
         * 
         */
        public Builder allowedCidrs(@Nullable Output<List<String>> allowedCidrs) {
            $.allowedCidrs = allowedCidrs;
            return this;
        }

        /**
         * @param allowedCidrs A list of CIDR blocks that are permitted to
         * connect to this listener, denying all other source addresses. If not present,
         * defaults to allow all.
         * 
         * @return builder
         * 
         */
        public Builder allowedCidrs(List<String> allowedCidrs) {
            return allowedCidrs(Output.of(allowedCidrs));
        }

        /**
         * @param allowedCidrs A list of CIDR blocks that are permitted to
         * connect to this listener, denying all other source addresses. If not present,
         * defaults to allow all.
         * 
         * @return builder
         * 
         */
        public Builder allowedCidrs(String... allowedCidrs) {
            return allowedCidrs(List.of(allowedCidrs));
        }

        /**
         * @param alpnProtocols A list of ALPN protocols. Available protocols:
         * `http/1.0`, `http/1.1`, `h2`. Supported only in **Octavia minor version &gt;=
         * 2.20**.
         * 
         * @return builder
         * 
         */
        public Builder alpnProtocols(@Nullable Output<List<String>> alpnProtocols) {
            $.alpnProtocols = alpnProtocols;
            return this;
        }

        /**
         * @param alpnProtocols A list of ALPN protocols. Available protocols:
         * `http/1.0`, `http/1.1`, `h2`. Supported only in **Octavia minor version &gt;=
         * 2.20**.
         * 
         * @return builder
         * 
         */
        public Builder alpnProtocols(List<String> alpnProtocols) {
            return alpnProtocols(Output.of(alpnProtocols));
        }

        /**
         * @param alpnProtocols A list of ALPN protocols. Available protocols:
         * `http/1.0`, `http/1.1`, `h2`. Supported only in **Octavia minor version &gt;=
         * 2.20**.
         * 
         * @return builder
         * 
         */
        public Builder alpnProtocols(String... alpnProtocols) {
            return alpnProtocols(List.of(alpnProtocols));
        }

        /**
         * @param clientAuthentication The TLS client authentication mode.
         * Available options: `NONE`, `OPTIONAL` or `MANDATORY`. Requires
         * `TERMINATED_HTTPS` listener protocol and the `client_ca_tls_container_ref`.
         * Supported only in **Octavia minor version &gt;= 2.8**.
         * 
         * @return builder
         * 
         */
        public Builder clientAuthentication(@Nullable Output<String> clientAuthentication) {
            $.clientAuthentication = clientAuthentication;
            return this;
        }

        /**
         * @param clientAuthentication The TLS client authentication mode.
         * Available options: `NONE`, `OPTIONAL` or `MANDATORY`. Requires
         * `TERMINATED_HTTPS` listener protocol and the `client_ca_tls_container_ref`.
         * Supported only in **Octavia minor version &gt;= 2.8**.
         * 
         * @return builder
         * 
         */
        public Builder clientAuthentication(String clientAuthentication) {
            return clientAuthentication(Output.of(clientAuthentication));
        }

        /**
         * @param clientCaTlsContainerRef The ref of the key manager service
         * secret containing a PEM format client CA certificate bundle for
         * `TERMINATED_HTTPS` listeners. Required if `client_authentication` is
         * `OPTIONAL` or `MANDATORY`. Supported only in **Octavia minor version &gt;=
         * 2.8**.
         * 
         * @return builder
         * 
         */
        public Builder clientCaTlsContainerRef(@Nullable Output<String> clientCaTlsContainerRef) {
            $.clientCaTlsContainerRef = clientCaTlsContainerRef;
            return this;
        }

        /**
         * @param clientCaTlsContainerRef The ref of the key manager service
         * secret containing a PEM format client CA certificate bundle for
         * `TERMINATED_HTTPS` listeners. Required if `client_authentication` is
         * `OPTIONAL` or `MANDATORY`. Supported only in **Octavia minor version &gt;=
         * 2.8**.
         * 
         * @return builder
         * 
         */
        public Builder clientCaTlsContainerRef(String clientCaTlsContainerRef) {
            return clientCaTlsContainerRef(Output.of(clientCaTlsContainerRef));
        }

        /**
         * @param clientCrlContainerRef The URI of the key manager service
         * secret containing a PEM format CA revocation list file for `TERMINATED_HTTPS`
         * listeners. Supported only in **Octavia minor version &gt;= 2.8**.
         * 
         * @return builder
         * 
         */
        public Builder clientCrlContainerRef(@Nullable Output<String> clientCrlContainerRef) {
            $.clientCrlContainerRef = clientCrlContainerRef;
            return this;
        }

        /**
         * @param clientCrlContainerRef The URI of the key manager service
         * secret containing a PEM format CA revocation list file for `TERMINATED_HTTPS`
         * listeners. Supported only in **Octavia minor version &gt;= 2.8**.
         * 
         * @return builder
         * 
         */
        public Builder clientCrlContainerRef(String clientCrlContainerRef) {
            return clientCrlContainerRef(Output.of(clientCrlContainerRef));
        }

        /**
         * @param connectionLimit The maximum number of connections allowed for
         * the Listener.
         * 
         * @return builder
         * 
         */
        public Builder connectionLimit(@Nullable Output<Integer> connectionLimit) {
            $.connectionLimit = connectionLimit;
            return this;
        }

        /**
         * @param connectionLimit The maximum number of connections allowed for
         * the Listener.
         * 
         * @return builder
         * 
         */
        public Builder connectionLimit(Integer connectionLimit) {
            return connectionLimit(Output.of(connectionLimit));
        }

        /**
         * @param defaultPoolId The ID of the default pool with which the
         * Listener is associated.
         * 
         * @return builder
         * 
         */
        public Builder defaultPoolId(@Nullable Output<String> defaultPoolId) {
            $.defaultPoolId = defaultPoolId;
            return this;
        }

        /**
         * @param defaultPoolId The ID of the default pool with which the
         * Listener is associated.
         * 
         * @return builder
         * 
         */
        public Builder defaultPoolId(String defaultPoolId) {
            return defaultPoolId(Output.of(defaultPoolId));
        }

        /**
         * @param defaultTlsContainerRef A reference to a Barbican Secrets
         * container which stores TLS information. This is required if the protocol is
         * `TERMINATED_HTTPS`. See
         * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
         * for more information.
         * 
         * @return builder
         * 
         */
        public Builder defaultTlsContainerRef(@Nullable Output<String> defaultTlsContainerRef) {
            $.defaultTlsContainerRef = defaultTlsContainerRef;
            return this;
        }

        /**
         * @param defaultTlsContainerRef A reference to a Barbican Secrets
         * container which stores TLS information. This is required if the protocol is
         * `TERMINATED_HTTPS`. See
         * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
         * for more information.
         * 
         * @return builder
         * 
         */
        public Builder defaultTlsContainerRef(String defaultTlsContainerRef) {
            return defaultTlsContainerRef(Output.of(defaultTlsContainerRef));
        }

        /**
         * @param description Human-readable description for the Listener.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-readable description for the Listener.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param hstsIncludeSubdomains Defines whether the
         * **includeSubDomains** directive should be added to the
         * Strict-Transport-Security HTTP response header. This requires setting the
         * `hsts_max_age` option as well in order to become effective. Requires
         * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
         * version &gt;= 2.27**.
         * 
         * @return builder
         * 
         */
        public Builder hstsIncludeSubdomains(@Nullable Output<Boolean> hstsIncludeSubdomains) {
            $.hstsIncludeSubdomains = hstsIncludeSubdomains;
            return this;
        }

        /**
         * @param hstsIncludeSubdomains Defines whether the
         * **includeSubDomains** directive should be added to the
         * Strict-Transport-Security HTTP response header. This requires setting the
         * `hsts_max_age` option as well in order to become effective. Requires
         * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
         * version &gt;= 2.27**.
         * 
         * @return builder
         * 
         */
        public Builder hstsIncludeSubdomains(Boolean hstsIncludeSubdomains) {
            return hstsIncludeSubdomains(Output.of(hstsIncludeSubdomains));
        }

        /**
         * @param hstsMaxAge The value of the **max_age** directive for the
         * Strict-Transport-Security HTTP response header. Setting this enables HTTP
         * Strict Transport Security (HSTS) for the TLS-terminated listener. Requires
         * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
         * version &gt;= 2.27**.
         * 
         * @return builder
         * 
         */
        public Builder hstsMaxAge(@Nullable Output<Integer> hstsMaxAge) {
            $.hstsMaxAge = hstsMaxAge;
            return this;
        }

        /**
         * @param hstsMaxAge The value of the **max_age** directive for the
         * Strict-Transport-Security HTTP response header. Setting this enables HTTP
         * Strict Transport Security (HSTS) for the TLS-terminated listener. Requires
         * `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia minor
         * version &gt;= 2.27**.
         * 
         * @return builder
         * 
         */
        public Builder hstsMaxAge(Integer hstsMaxAge) {
            return hstsMaxAge(Output.of(hstsMaxAge));
        }

        /**
         * @param hstsPreload Defines whether the **preload** directive should
         * be added to the Strict-Transport-Security HTTP response header. This requires
         * setting the `hsts_max_age` option as well in order to become effective.
         * Requires `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia
         * minor version &gt;= 2.27**.
         * 
         * @return builder
         * 
         */
        public Builder hstsPreload(@Nullable Output<Boolean> hstsPreload) {
            $.hstsPreload = hstsPreload;
            return this;
        }

        /**
         * @param hstsPreload Defines whether the **preload** directive should
         * be added to the Strict-Transport-Security HTTP response header. This requires
         * setting the `hsts_max_age` option as well in order to become effective.
         * Requires `TERMINATED_HTTPS` listener protocol. Supported only in **Octavia
         * minor version &gt;= 2.27**.
         * 
         * @return builder
         * 
         */
        public Builder hstsPreload(Boolean hstsPreload) {
            return hstsPreload(Output.of(hstsPreload));
        }

        /**
         * @param insertHeaders The list of key value pairs representing
         * headers to insert into the request before it is sent to the backend members.
         * Changing this updates the headers of the existing listener.
         * 
         * @return builder
         * 
         */
        public Builder insertHeaders(@Nullable Output<Map<String,String>> insertHeaders) {
            $.insertHeaders = insertHeaders;
            return this;
        }

        /**
         * @param insertHeaders The list of key value pairs representing
         * headers to insert into the request before it is sent to the backend members.
         * Changing this updates the headers of the existing listener.
         * 
         * @return builder
         * 
         */
        public Builder insertHeaders(Map<String,String> insertHeaders) {
            return insertHeaders(Output.of(insertHeaders));
        }

        /**
         * @param loadbalancerId The load balancer on which to provision this
         * Listener. Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(@Nullable Output<String> loadbalancerId) {
            $.loadbalancerId = loadbalancerId;
            return this;
        }

        /**
         * @param loadbalancerId The load balancer on which to provision this
         * Listener. Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(String loadbalancerId) {
            return loadbalancerId(Output.of(loadbalancerId));
        }

        /**
         * @param name Human-readable name for the Listener. Does not have to be
         * unique.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human-readable name for the Listener. Does not have to be
         * unique.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol The protocol can be either `TCP`, `HTTP`, `HTTPS`,
         * `TERMINATED_HTTPS`, `UDP`, `SCTP` (supported only in **Octavia minor version
         * \&gt;= 2.23**), or `PROMETHEUS` (supported only in **Octavia minor version &gt;=
         * 2.25**). Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol can be either `TCP`, `HTTP`, `HTTPS`,
         * `TERMINATED_HTTPS`, `UDP`, `SCTP` (supported only in **Octavia minor version
         * \&gt;= 2.23**), or `PROMETHEUS` (supported only in **Octavia minor version &gt;=
         * 2.25**). Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolPort The port on which to listen for client traffic.
         * * Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder protocolPort(@Nullable Output<Integer> protocolPort) {
            $.protocolPort = protocolPort;
            return this;
        }

        /**
         * @param protocolPort The port on which to listen for client traffic.
         * * Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder protocolPort(Integer protocolPort) {
            return protocolPort(Output.of(protocolPort));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a listener. If omitted, the `region`
         * argument of the provider is used. Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a listener. If omitted, the `region`
         * argument of the provider is used. Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sniContainerRefs A list of references to Barbican Secrets
         * containers which store SNI information. See
         * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
         * for more information.
         * 
         * @return builder
         * 
         */
        public Builder sniContainerRefs(@Nullable Output<List<String>> sniContainerRefs) {
            $.sniContainerRefs = sniContainerRefs;
            return this;
        }

        /**
         * @param sniContainerRefs A list of references to Barbican Secrets
         * containers which store SNI information. See
         * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
         * for more information.
         * 
         * @return builder
         * 
         */
        public Builder sniContainerRefs(List<String> sniContainerRefs) {
            return sniContainerRefs(Output.of(sniContainerRefs));
        }

        /**
         * @param sniContainerRefs A list of references to Barbican Secrets
         * containers which store SNI information. See
         * [here](https://docs.openstack.org/octavia/latest/user/guides/basic-cookbook.html#deploy-a-tls-terminated-https-load-balancer)
         * for more information.
         * 
         * @return builder
         * 
         */
        public Builder sniContainerRefs(String... sniContainerRefs) {
            return sniContainerRefs(List.of(sniContainerRefs));
        }

        /**
         * @param tags A list of simple strings assigned to the pool. Available
         * for Octavia **minor version 2.5 or later**.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of simple strings assigned to the pool. Available
         * for Octavia **minor version 2.5 or later**.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of simple strings assigned to the pool. Available
         * for Octavia **minor version 2.5 or later**.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId Required for admins. The UUID of the tenant who owns
         * the Listener.  Only administrative users can specify a tenant UUID other than
         * their own. Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Required for admins. The UUID of the tenant who owns
         * the Listener.  Only administrative users can specify a tenant UUID other than
         * their own. Changing this creates a new Listener.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param timeoutClientData The client inactivity timeout in
         * milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutClientData(@Nullable Output<Integer> timeoutClientData) {
            $.timeoutClientData = timeoutClientData;
            return this;
        }

        /**
         * @param timeoutClientData The client inactivity timeout in
         * milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutClientData(Integer timeoutClientData) {
            return timeoutClientData(Output.of(timeoutClientData));
        }

        /**
         * @param timeoutMemberConnect The member connection timeout in
         * milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutMemberConnect(@Nullable Output<Integer> timeoutMemberConnect) {
            $.timeoutMemberConnect = timeoutMemberConnect;
            return this;
        }

        /**
         * @param timeoutMemberConnect The member connection timeout in
         * milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutMemberConnect(Integer timeoutMemberConnect) {
            return timeoutMemberConnect(Output.of(timeoutMemberConnect));
        }

        /**
         * @param timeoutMemberData The member inactivity timeout in
         * milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutMemberData(@Nullable Output<Integer> timeoutMemberData) {
            $.timeoutMemberData = timeoutMemberData;
            return this;
        }

        /**
         * @param timeoutMemberData The member inactivity timeout in
         * milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutMemberData(Integer timeoutMemberData) {
            return timeoutMemberData(Output.of(timeoutMemberData));
        }

        /**
         * @param timeoutTcpInspect The time in milliseconds, to wait for
         * additional TCP packets for content inspection.
         * 
         * @return builder
         * 
         */
        public Builder timeoutTcpInspect(@Nullable Output<Integer> timeoutTcpInspect) {
            $.timeoutTcpInspect = timeoutTcpInspect;
            return this;
        }

        /**
         * @param timeoutTcpInspect The time in milliseconds, to wait for
         * additional TCP packets for content inspection.
         * 
         * @return builder
         * 
         */
        public Builder timeoutTcpInspect(Integer timeoutTcpInspect) {
            return timeoutTcpInspect(Output.of(timeoutTcpInspect));
        }

        /**
         * @param tlsCiphers List of ciphers in OpenSSL format
         * (colon-separated). See
         * https://www.openssl.org/docs/man1.1.1/man1/ciphers.html for more information.
         * Supported only in **Octavia minor version &gt;= 2.15**.
         * 
         * @return builder
         * 
         */
        public Builder tlsCiphers(@Nullable Output<String> tlsCiphers) {
            $.tlsCiphers = tlsCiphers;
            return this;
        }

        /**
         * @param tlsCiphers List of ciphers in OpenSSL format
         * (colon-separated). See
         * https://www.openssl.org/docs/man1.1.1/man1/ciphers.html for more information.
         * Supported only in **Octavia minor version &gt;= 2.15**.
         * 
         * @return builder
         * 
         */
        public Builder tlsCiphers(String tlsCiphers) {
            return tlsCiphers(Output.of(tlsCiphers));
        }

        /**
         * @param tlsVersions A list of TLS protocol versions. Available
         * versions: `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. Supported only in
         * **Octavia minor version &gt;= 2.17**.
         * 
         * @return builder
         * 
         */
        public Builder tlsVersions(@Nullable Output<List<String>> tlsVersions) {
            $.tlsVersions = tlsVersions;
            return this;
        }

        /**
         * @param tlsVersions A list of TLS protocol versions. Available
         * versions: `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. Supported only in
         * **Octavia minor version &gt;= 2.17**.
         * 
         * @return builder
         * 
         */
        public Builder tlsVersions(List<String> tlsVersions) {
            return tlsVersions(Output.of(tlsVersions));
        }

        /**
         * @param tlsVersions A list of TLS protocol versions. Available
         * versions: `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. Supported only in
         * **Octavia minor version &gt;= 2.17**.
         * 
         * @return builder
         * 
         */
        public Builder tlsVersions(String... tlsVersions) {
            return tlsVersions(List.of(tlsVersions));
        }

        public ListenerState build() {
            return $;
        }
    }

}
