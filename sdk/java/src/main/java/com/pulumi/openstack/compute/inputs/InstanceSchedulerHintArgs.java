// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceSchedulerHintArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceSchedulerHintArgs Empty = new InstanceSchedulerHintArgs();

    /**
     * Arbitrary key/value pairs of additional
     * properties to pass to the scheduler.
     * 
     */
    @Import(name="additionalProperties")
    private @Nullable Output<Map<String,String>> additionalProperties;

    /**
     * @return Arbitrary key/value pairs of additional
     * properties to pass to the scheduler.
     * 
     */
    public Optional<Output<Map<String,String>>> additionalProperties() {
        return Optional.ofNullable(this.additionalProperties);
    }

    /**
     * An IP Address in CIDR form. The instance
     * will be placed on a compute node that is in the same subnet.
     * 
     */
    @Import(name="buildNearHostIp")
    private @Nullable Output<String> buildNearHostIp;

    /**
     * @return An IP Address in CIDR form. The instance
     * will be placed on a compute node that is in the same subnet.
     * 
     */
    public Optional<Output<String>> buildNearHostIp() {
        return Optional.ofNullable(this.buildNearHostIp);
    }

    /**
     * The names of cells where not to build the instance.
     * 
     */
    @Import(name="differentCells")
    private @Nullable Output<List<String>> differentCells;

    /**
     * @return The names of cells where not to build the instance.
     * 
     */
    public Optional<Output<List<String>>> differentCells() {
        return Optional.ofNullable(this.differentCells);
    }

    /**
     * A list of instance UUIDs. The instance will
     * be scheduled on a different host than all other instances.
     * 
     */
    @Import(name="differentHosts")
    private @Nullable Output<List<String>> differentHosts;

    /**
     * @return A list of instance UUIDs. The instance will
     * be scheduled on a different host than all other instances.
     * 
     */
    public Optional<Output<List<String>>> differentHosts() {
        return Optional.ofNullable(this.differentHosts);
    }

    /**
     * A UUID of a Server Group. The instance will be placed
     * into that group. See reference
     * for details on managing servergroup resources
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return A UUID of a Server Group. The instance will be placed
     * into that group. See reference
     * for details on managing servergroup resources
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * A conditional query that a compute node must pass in
     * order to host an instance. The query must use the `JsonFilter` syntax
     * which is described
     * [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
     * At this time, only simple queries are supported. Compound queries using
     * `and`, `or`, or `not` are not supported. An example of a simple query is:
     * 
     */
    @Import(name="queries")
    private @Nullable Output<List<String>> queries;

    /**
     * @return A conditional query that a compute node must pass in
     * order to host an instance. The query must use the `JsonFilter` syntax
     * which is described
     * [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
     * At this time, only simple queries are supported. Compound queries using
     * `and`, `or`, or `not` are not supported. An example of a simple query is:
     * 
     */
    public Optional<Output<List<String>>> queries() {
        return Optional.ofNullable(this.queries);
    }

    /**
     * A list of instance UUIDs. The instance will be
     * scheduled on the same host of those specified.
     * 
     */
    @Import(name="sameHosts")
    private @Nullable Output<List<String>> sameHosts;

    /**
     * @return A list of instance UUIDs. The instance will be
     * scheduled on the same host of those specified.
     * 
     */
    public Optional<Output<List<String>>> sameHosts() {
        return Optional.ofNullable(this.sameHosts);
    }

    /**
     * The name of a cell to host the instance.
     * 
     */
    @Import(name="targetCell")
    private @Nullable Output<String> targetCell;

    /**
     * @return The name of a cell to host the instance.
     * 
     */
    public Optional<Output<String>> targetCell() {
        return Optional.ofNullable(this.targetCell);
    }

    private InstanceSchedulerHintArgs() {}

    private InstanceSchedulerHintArgs(InstanceSchedulerHintArgs $) {
        this.additionalProperties = $.additionalProperties;
        this.buildNearHostIp = $.buildNearHostIp;
        this.differentCells = $.differentCells;
        this.differentHosts = $.differentHosts;
        this.group = $.group;
        this.queries = $.queries;
        this.sameHosts = $.sameHosts;
        this.targetCell = $.targetCell;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceSchedulerHintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceSchedulerHintArgs $;

        public Builder() {
            $ = new InstanceSchedulerHintArgs();
        }

        public Builder(InstanceSchedulerHintArgs defaults) {
            $ = new InstanceSchedulerHintArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalProperties Arbitrary key/value pairs of additional
         * properties to pass to the scheduler.
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(@Nullable Output<Map<String,String>> additionalProperties) {
            $.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * @param additionalProperties Arbitrary key/value pairs of additional
         * properties to pass to the scheduler.
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(Map<String,String> additionalProperties) {
            return additionalProperties(Output.of(additionalProperties));
        }

        /**
         * @param buildNearHostIp An IP Address in CIDR form. The instance
         * will be placed on a compute node that is in the same subnet.
         * 
         * @return builder
         * 
         */
        public Builder buildNearHostIp(@Nullable Output<String> buildNearHostIp) {
            $.buildNearHostIp = buildNearHostIp;
            return this;
        }

        /**
         * @param buildNearHostIp An IP Address in CIDR form. The instance
         * will be placed on a compute node that is in the same subnet.
         * 
         * @return builder
         * 
         */
        public Builder buildNearHostIp(String buildNearHostIp) {
            return buildNearHostIp(Output.of(buildNearHostIp));
        }

        /**
         * @param differentCells The names of cells where not to build the instance.
         * 
         * @return builder
         * 
         */
        public Builder differentCells(@Nullable Output<List<String>> differentCells) {
            $.differentCells = differentCells;
            return this;
        }

        /**
         * @param differentCells The names of cells where not to build the instance.
         * 
         * @return builder
         * 
         */
        public Builder differentCells(List<String> differentCells) {
            return differentCells(Output.of(differentCells));
        }

        /**
         * @param differentCells The names of cells where not to build the instance.
         * 
         * @return builder
         * 
         */
        public Builder differentCells(String... differentCells) {
            return differentCells(List.of(differentCells));
        }

        /**
         * @param differentHosts A list of instance UUIDs. The instance will
         * be scheduled on a different host than all other instances.
         * 
         * @return builder
         * 
         */
        public Builder differentHosts(@Nullable Output<List<String>> differentHosts) {
            $.differentHosts = differentHosts;
            return this;
        }

        /**
         * @param differentHosts A list of instance UUIDs. The instance will
         * be scheduled on a different host than all other instances.
         * 
         * @return builder
         * 
         */
        public Builder differentHosts(List<String> differentHosts) {
            return differentHosts(Output.of(differentHosts));
        }

        /**
         * @param differentHosts A list of instance UUIDs. The instance will
         * be scheduled on a different host than all other instances.
         * 
         * @return builder
         * 
         */
        public Builder differentHosts(String... differentHosts) {
            return differentHosts(List.of(differentHosts));
        }

        /**
         * @param group A UUID of a Server Group. The instance will be placed
         * into that group. See reference
         * for details on managing servergroup resources
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group A UUID of a Server Group. The instance will be placed
         * into that group. See reference
         * for details on managing servergroup resources
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param queries A conditional query that a compute node must pass in
         * order to host an instance. The query must use the `JsonFilter` syntax
         * which is described
         * [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
         * At this time, only simple queries are supported. Compound queries using
         * `and`, `or`, or `not` are not supported. An example of a simple query is:
         * 
         * @return builder
         * 
         */
        public Builder queries(@Nullable Output<List<String>> queries) {
            $.queries = queries;
            return this;
        }

        /**
         * @param queries A conditional query that a compute node must pass in
         * order to host an instance. The query must use the `JsonFilter` syntax
         * which is described
         * [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
         * At this time, only simple queries are supported. Compound queries using
         * `and`, `or`, or `not` are not supported. An example of a simple query is:
         * 
         * @return builder
         * 
         */
        public Builder queries(List<String> queries) {
            return queries(Output.of(queries));
        }

        /**
         * @param queries A conditional query that a compute node must pass in
         * order to host an instance. The query must use the `JsonFilter` syntax
         * which is described
         * [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
         * At this time, only simple queries are supported. Compound queries using
         * `and`, `or`, or `not` are not supported. An example of a simple query is:
         * 
         * @return builder
         * 
         */
        public Builder queries(String... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param sameHosts A list of instance UUIDs. The instance will be
         * scheduled on the same host of those specified.
         * 
         * @return builder
         * 
         */
        public Builder sameHosts(@Nullable Output<List<String>> sameHosts) {
            $.sameHosts = sameHosts;
            return this;
        }

        /**
         * @param sameHosts A list of instance UUIDs. The instance will be
         * scheduled on the same host of those specified.
         * 
         * @return builder
         * 
         */
        public Builder sameHosts(List<String> sameHosts) {
            return sameHosts(Output.of(sameHosts));
        }

        /**
         * @param sameHosts A list of instance UUIDs. The instance will be
         * scheduled on the same host of those specified.
         * 
         * @return builder
         * 
         */
        public Builder sameHosts(String... sameHosts) {
            return sameHosts(List.of(sameHosts));
        }

        /**
         * @param targetCell The name of a cell to host the instance.
         * 
         * @return builder
         * 
         */
        public Builder targetCell(@Nullable Output<String> targetCell) {
            $.targetCell = targetCell;
            return this;
        }

        /**
         * @param targetCell The name of a cell to host the instance.
         * 
         * @return builder
         * 
         */
        public Builder targetCell(String targetCell) {
            return targetCell(Output.of(targetCell));
        }

        public InstanceSchedulerHintArgs build() {
            return $;
        }
    }

}
