// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortBindingArgs Empty = new PortBindingArgs();

    /**
     * The ID of the host to allocate port on.
     * 
     */
    @Import(name="hostId")
    private @Nullable Output<String> hostId;

    /**
     * @return The ID of the host to allocate port on.
     * 
     */
    public Optional<Output<String>> hostId() {
        return Optional.ofNullable(this.hostId);
    }

    /**
     * Custom data to be passed as `binding:profile`. Data
     * must be passed as JSON.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return Custom data to be passed as `binding:profile`. Data
     * must be passed as JSON.
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * A map of JSON strings containing additional
     * details for this specific binding.
     * 
     */
    @Import(name="vifDetails")
    private @Nullable Output<Map<String,Object>> vifDetails;

    /**
     * @return A map of JSON strings containing additional
     * details for this specific binding.
     * 
     */
    public Optional<Output<Map<String,Object>>> vifDetails() {
        return Optional.ofNullable(this.vifDetails);
    }

    /**
     * The VNIC type of the port binding.
     * 
     */
    @Import(name="vifType")
    private @Nullable Output<String> vifType;

    /**
     * @return The VNIC type of the port binding.
     * 
     */
    public Optional<Output<String>> vifType() {
        return Optional.ofNullable(this.vifType);
    }

    /**
     * VNIC type for the port. Can either be `direct`,
     * `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
     * Default value is `normal`. It can be updated on unbound ports only.
     * 
     */
    @Import(name="vnicType")
    private @Nullable Output<String> vnicType;

    /**
     * @return VNIC type for the port. Can either be `direct`,
     * `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
     * Default value is `normal`. It can be updated on unbound ports only.
     * 
     */
    public Optional<Output<String>> vnicType() {
        return Optional.ofNullable(this.vnicType);
    }

    private PortBindingArgs() {}

    private PortBindingArgs(PortBindingArgs $) {
        this.hostId = $.hostId;
        this.profile = $.profile;
        this.vifDetails = $.vifDetails;
        this.vifType = $.vifType;
        this.vnicType = $.vnicType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortBindingArgs $;

        public Builder() {
            $ = new PortBindingArgs();
        }

        public Builder(PortBindingArgs defaults) {
            $ = new PortBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostId The ID of the host to allocate port on.
         * 
         * @return builder
         * 
         */
        public Builder hostId(@Nullable Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId The ID of the host to allocate port on.
         * 
         * @return builder
         * 
         */
        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        /**
         * @param profile Custom data to be passed as `binding:profile`. Data
         * must be passed as JSON.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile Custom data to be passed as `binding:profile`. Data
         * must be passed as JSON.
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param vifDetails A map of JSON strings containing additional
         * details for this specific binding.
         * 
         * @return builder
         * 
         */
        public Builder vifDetails(@Nullable Output<Map<String,Object>> vifDetails) {
            $.vifDetails = vifDetails;
            return this;
        }

        /**
         * @param vifDetails A map of JSON strings containing additional
         * details for this specific binding.
         * 
         * @return builder
         * 
         */
        public Builder vifDetails(Map<String,Object> vifDetails) {
            return vifDetails(Output.of(vifDetails));
        }

        /**
         * @param vifType The VNIC type of the port binding.
         * 
         * @return builder
         * 
         */
        public Builder vifType(@Nullable Output<String> vifType) {
            $.vifType = vifType;
            return this;
        }

        /**
         * @param vifType The VNIC type of the port binding.
         * 
         * @return builder
         * 
         */
        public Builder vifType(String vifType) {
            return vifType(Output.of(vifType));
        }

        /**
         * @param vnicType VNIC type for the port. Can either be `direct`,
         * `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
         * Default value is `normal`. It can be updated on unbound ports only.
         * 
         * @return builder
         * 
         */
        public Builder vnicType(@Nullable Output<String> vnicType) {
            $.vnicType = vnicType;
            return this;
        }

        /**
         * @param vnicType VNIC type for the port. Can either be `direct`,
         * `direct-physical`, `macvtap`, `normal`, `baremetal` or `virtio-forwarder`.
         * Default value is `normal`. It can be updated on unbound ports only.
         * 
         * @return builder
         * 
         */
        public Builder vnicType(String vnicType) {
            return vnicType(Output.of(vnicType));
        }

        public PortBindingArgs build() {
            return $;
        }
    }

}
