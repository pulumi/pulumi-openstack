// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHypervisorV2Result {
    /**
     * @return The amount in GigaBytes of local storage the hypervisor can provide
     * 
     */
    private Integer disk;
    /**
     * @return The IP address of the Hypervisor
     * 
     */
    private String hostIp;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String hostname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The number in MegaBytes of memory the hypervisor can provide
     * 
     */
    private Integer memory;
    /**
     * @return The state of the hypervisor (`up` or `down`)
     * 
     */
    private String state;
    /**
     * @return The status of the hypervisor (`enabled` or `disabled`)
     * 
     */
    private String status;
    /**
     * @return The type of the hypervisor (example: `QEMU`)
     * 
     */
    private String type;
    /**
     * @return The number of virtual CPUs the hypervisor can provide
     * 
     */
    private Integer vcpus;

    private GetHypervisorV2Result() {}
    /**
     * @return The amount in GigaBytes of local storage the hypervisor can provide
     * 
     */
    public Integer disk() {
        return this.disk;
    }
    /**
     * @return The IP address of the Hypervisor
     * 
     */
    public String hostIp() {
        return this.hostIp;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number in MegaBytes of memory the hypervisor can provide
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return The state of the hypervisor (`up` or `down`)
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The status of the hypervisor (`enabled` or `disabled`)
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of the hypervisor (example: `QEMU`)
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The number of virtual CPUs the hypervisor can provide
     * 
     */
    public Integer vcpus() {
        return this.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHypervisorV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer disk;
        private String hostIp;
        private String hostname;
        private String id;
        private Integer memory;
        private String state;
        private String status;
        private String type;
        private Integer vcpus;
        public Builder() {}
        public Builder(GetHypervisorV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disk = defaults.disk;
    	      this.hostIp = defaults.hostIp;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.memory = defaults.memory;
    	      this.state = defaults.state;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.vcpus = defaults.vcpus;
        }

        @CustomType.Setter
        public Builder disk(Integer disk) {
            if (disk == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "disk");
            }
            this.disk = disk;
            return this;
        }
        @CustomType.Setter
        public Builder hostIp(String hostIp) {
            if (hostIp == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "hostIp");
            }
            this.hostIp = hostIp;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vcpus(Integer vcpus) {
            if (vcpus == null) {
              throw new MissingRequiredPropertyException("GetHypervisorV2Result", "vcpus");
            }
            this.vcpus = vcpus;
            return this;
        }
        public GetHypervisorV2Result build() {
            final var _resultValue = new GetHypervisorV2Result();
            _resultValue.disk = disk;
            _resultValue.hostIp = hostIp;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.memory = memory;
            _resultValue.state = state;
            _resultValue.status = status;
            _resultValue.type = type;
            _resultValue.vcpus = vcpus;
            return _resultValue;
        }
    }
}
