// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.database;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.openstack.database.inputs.ConfigurationConfigurationArgs;
import com.pulumi.openstack.database.inputs.ConfigurationDatastoreArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationArgs Empty = new ConfigurationArgs();

    /**
     * An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
     * 
     */
    @Import(name="configurations")
    private @Nullable Output<List<ConfigurationConfigurationArgs>> configurations;

    /**
     * @return An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
     * 
     */
    public Optional<Output<List<ConfigurationConfigurationArgs>>> configurations() {
        return Optional.ofNullable(this.configurations);
    }

    /**
     * An array of database engine type and version. The datastore
     * object structure is documented below. Changing this creates resource.
     * 
     */
    @Import(name="datastore", required=true)
    private Output<ConfigurationDatastoreArgs> datastore;

    /**
     * @return An array of database engine type and version. The datastore
     * object structure is documented below. Changing this creates resource.
     * 
     */
    public Output<ConfigurationDatastoreArgs> datastore() {
        return this.datastore;
    }

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * A unique name for the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to create the db instance. Changing this
     * creates a new instance.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to create the db instance. Changing this
     * creates a new instance.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private ConfigurationArgs() {}

    private ConfigurationArgs(ConfigurationArgs $) {
        this.configurations = $.configurations;
        this.datastore = $.datastore;
        this.description = $.description;
        this.name = $.name;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationArgs $;

        public Builder() {
            $ = new ConfigurationArgs();
        }

        public Builder(ConfigurationArgs defaults) {
            $ = new ConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurations An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configurations(@Nullable Output<List<ConfigurationConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<ConfigurationConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configurations(ConfigurationConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param datastore An array of database engine type and version. The datastore
         * object structure is documented below. Changing this creates resource.
         * 
         * @return builder
         * 
         */
        public Builder datastore(Output<ConfigurationDatastoreArgs> datastore) {
            $.datastore = datastore;
            return this;
        }

        /**
         * @param datastore An array of database engine type and version. The datastore
         * object structure is documented below. Changing this creates resource.
         * 
         * @return builder
         * 
         */
        public Builder datastore(ConfigurationDatastoreArgs datastore) {
            return datastore(Output.of(datastore));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name A unique name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region in which to create the db instance. Changing this
         * creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to create the db instance. Changing this
         * creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public ConfigurationArgs build() {
            if ($.datastore == null) {
                throw new MissingRequiredPropertyException("ConfigurationArgs", "datastore");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("ConfigurationArgs", "description");
            }
            return $;
        }
    }

}
