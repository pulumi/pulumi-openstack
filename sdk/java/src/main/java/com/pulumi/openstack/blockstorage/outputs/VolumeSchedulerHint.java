// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.blockstorage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeSchedulerHint {
    /**
     * @return Arbitrary key/value pairs of additional
     * properties to pass to the scheduler.
     * 
     */
    private @Nullable Map<String,Object> additionalProperties;
    /**
     * @return The volume should be scheduled on a
     * different host from the set of volumes specified in the list provided.
     * 
     */
    private @Nullable List<String> differentHosts;
    /**
     * @return An instance UUID. The volume should be
     * scheduled on the same host as the instance.
     * 
     */
    private @Nullable String localToInstance;
    /**
     * @return A conditional query that a back-end must pass in
     * order to host a volume. The query must use the `JsonFilter` syntax
     * which is described
     * [here](https://docs.openstack.org/cinder/latest/configuration/block-storage/scheduler-filters.html#jsonfilter).
     * At this time, only simple queries are supported. Compound queries using
     * `and`, `or`, or `not` are not supported. An example of a simple query is:
     * 
     */
    private @Nullable String query;
    /**
     * @return A list of volume UUIDs. The volume should be
     * scheduled on the same host as another volume specified in the list provided.
     * 
     */
    private @Nullable List<String> sameHosts;

    private VolumeSchedulerHint() {}
    /**
     * @return Arbitrary key/value pairs of additional
     * properties to pass to the scheduler.
     * 
     */
    public Map<String,Object> additionalProperties() {
        return this.additionalProperties == null ? Map.of() : this.additionalProperties;
    }
    /**
     * @return The volume should be scheduled on a
     * different host from the set of volumes specified in the list provided.
     * 
     */
    public List<String> differentHosts() {
        return this.differentHosts == null ? List.of() : this.differentHosts;
    }
    /**
     * @return An instance UUID. The volume should be
     * scheduled on the same host as the instance.
     * 
     */
    public Optional<String> localToInstance() {
        return Optional.ofNullable(this.localToInstance);
    }
    /**
     * @return A conditional query that a back-end must pass in
     * order to host a volume. The query must use the `JsonFilter` syntax
     * which is described
     * [here](https://docs.openstack.org/cinder/latest/configuration/block-storage/scheduler-filters.html#jsonfilter).
     * At this time, only simple queries are supported. Compound queries using
     * `and`, `or`, or `not` are not supported. An example of a simple query is:
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }
    /**
     * @return A list of volume UUIDs. The volume should be
     * scheduled on the same host as another volume specified in the list provided.
     * 
     */
    public List<String> sameHosts() {
        return this.sameHosts == null ? List.of() : this.sameHosts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeSchedulerHint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,Object> additionalProperties;
        private @Nullable List<String> differentHosts;
        private @Nullable String localToInstance;
        private @Nullable String query;
        private @Nullable List<String> sameHosts;
        public Builder() {}
        public Builder(VolumeSchedulerHint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalProperties = defaults.additionalProperties;
    	      this.differentHosts = defaults.differentHosts;
    	      this.localToInstance = defaults.localToInstance;
    	      this.query = defaults.query;
    	      this.sameHosts = defaults.sameHosts;
        }

        @CustomType.Setter
        public Builder additionalProperties(@Nullable Map<String,Object> additionalProperties) {
            this.additionalProperties = additionalProperties;
            return this;
        }
        @CustomType.Setter
        public Builder differentHosts(@Nullable List<String> differentHosts) {
            this.differentHosts = differentHosts;
            return this;
        }
        public Builder differentHosts(String... differentHosts) {
            return differentHosts(List.of(differentHosts));
        }
        @CustomType.Setter
        public Builder localToInstance(@Nullable String localToInstance) {
            this.localToInstance = localToInstance;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder sameHosts(@Nullable List<String> sameHosts) {
            this.sameHosts = sameHosts;
            return this;
        }
        public Builder sameHosts(String... sameHosts) {
            return sameHosts(List.of(sameHosts));
        }
        public VolumeSchedulerHint build() {
            final var _resultValue = new VolumeSchedulerHint();
            _resultValue.additionalProperties = additionalProperties;
            _resultValue.differentHosts = differentHosts;
            _resultValue.localToInstance = localToInstance;
            _resultValue.query = query;
            _resultValue.sameHosts = sameHosts;
            return _resultValue;
        }
    }
}
