// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.openstack.compute.outputs.GetInstanceV2Network;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstanceV2Result {
    /**
     * @return The first IPv4 address assigned to this server.
     * 
     */
    private String accessIpV4;
    /**
     * @return The first IPv6 address assigned to this server.
     * 
     */
    private String accessIpV6;
    /**
     * @return The availability zone of this server.
     * 
     */
    private String availabilityZone;
    /**
     * @return The creation time of the instance.
     * 
     */
    private String created;
    /**
     * @return The flavor ID used to create the server.
     * 
     */
    private String flavorId;
    /**
     * @return The flavor name used to create the server.
     * 
     */
    private String flavorName;
    private String id;
    /**
     * @return The image ID used to create the server.
     * 
     */
    private String imageId;
    /**
     * @return The image name used to create the server.
     * 
     */
    private String imageName;
    /**
     * @return The name of the key pair assigned to this server.
     * 
     */
    private String keyPair;
    /**
     * @return A set of key/value pairs made available to the server.
     * 
     */
    private Map<String,Object> metadata;
    /**
     * @return The name of the network
     * 
     */
    private String name;
    /**
     * @return An array of maps, detailed below.
     * 
     */
    private List<GetInstanceV2Network> networks;
    private String powerState;
    private String region;
    /**
     * @return An array of security group names associated with this server.
     * 
     */
    private List<String> securityGroups;
    /**
     * @return A set of string tags assigned to this server.
     * 
     */
    private List<String> tags;
    /**
     * @return The time when the instance was last updated.
     * 
     */
    private String updated;
    /**
     * @return The user data added when the server was created.
     * 
     */
    private String userData;

    private GetInstanceV2Result() {}
    /**
     * @return The first IPv4 address assigned to this server.
     * 
     */
    public String accessIpV4() {
        return this.accessIpV4;
    }
    /**
     * @return The first IPv6 address assigned to this server.
     * 
     */
    public String accessIpV6() {
        return this.accessIpV6;
    }
    /**
     * @return The availability zone of this server.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return The creation time of the instance.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The flavor ID used to create the server.
     * 
     */
    public String flavorId() {
        return this.flavorId;
    }
    /**
     * @return The flavor name used to create the server.
     * 
     */
    public String flavorName() {
        return this.flavorName;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The image ID used to create the server.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return The image name used to create the server.
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return The name of the key pair assigned to this server.
     * 
     */
    public String keyPair() {
        return this.keyPair;
    }
    /**
     * @return A set of key/value pairs made available to the server.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return The name of the network
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return An array of maps, detailed below.
     * 
     */
    public List<GetInstanceV2Network> networks() {
        return this.networks;
    }
    public String powerState() {
        return this.powerState;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return An array of security group names associated with this server.
     * 
     */
    public List<String> securityGroups() {
        return this.securityGroups;
    }
    /**
     * @return A set of string tags assigned to this server.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The time when the instance was last updated.
     * 
     */
    public String updated() {
        return this.updated;
    }
    /**
     * @return The user data added when the server was created.
     * 
     */
    public String userData() {
        return this.userData;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessIpV4;
        private String accessIpV6;
        private String availabilityZone;
        private String created;
        private String flavorId;
        private String flavorName;
        private String id;
        private String imageId;
        private String imageName;
        private String keyPair;
        private Map<String,Object> metadata;
        private String name;
        private List<GetInstanceV2Network> networks;
        private String powerState;
        private String region;
        private List<String> securityGroups;
        private List<String> tags;
        private String updated;
        private String userData;
        public Builder() {}
        public Builder(GetInstanceV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessIpV4 = defaults.accessIpV4;
    	      this.accessIpV6 = defaults.accessIpV6;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.created = defaults.created;
    	      this.flavorId = defaults.flavorId;
    	      this.flavorName = defaults.flavorName;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageName = defaults.imageName;
    	      this.keyPair = defaults.keyPair;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.networks = defaults.networks;
    	      this.powerState = defaults.powerState;
    	      this.region = defaults.region;
    	      this.securityGroups = defaults.securityGroups;
    	      this.tags = defaults.tags;
    	      this.updated = defaults.updated;
    	      this.userData = defaults.userData;
        }

        @CustomType.Setter
        public Builder accessIpV4(String accessIpV4) {
            if (accessIpV4 == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "accessIpV4");
            }
            this.accessIpV4 = accessIpV4;
            return this;
        }
        @CustomType.Setter
        public Builder accessIpV6(String accessIpV6) {
            if (accessIpV6 == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "accessIpV6");
            }
            this.accessIpV6 = accessIpV6;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder flavorId(String flavorId) {
            if (flavorId == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "flavorId");
            }
            this.flavorId = flavorId;
            return this;
        }
        @CustomType.Setter
        public Builder flavorName(String flavorName) {
            if (flavorName == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "flavorName");
            }
            this.flavorName = flavorName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            if (imageName == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "imageName");
            }
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder keyPair(String keyPair) {
            if (keyPair == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "keyPair");
            }
            this.keyPair = keyPair;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networks(List<GetInstanceV2Network> networks) {
            if (networks == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "networks");
            }
            this.networks = networks;
            return this;
        }
        public Builder networks(GetInstanceV2Network... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder powerState(String powerState) {
            if (powerState == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "powerState");
            }
            this.powerState = powerState;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroups(List<String> securityGroups) {
            if (securityGroups == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "securityGroups");
            }
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "updated");
            }
            this.updated = updated;
            return this;
        }
        @CustomType.Setter
        public Builder userData(String userData) {
            if (userData == null) {
              throw new MissingRequiredPropertyException("GetInstanceV2Result", "userData");
            }
            this.userData = userData;
            return this;
        }
        public GetInstanceV2Result build() {
            final var _resultValue = new GetInstanceV2Result();
            _resultValue.accessIpV4 = accessIpV4;
            _resultValue.accessIpV6 = accessIpV6;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.created = created;
            _resultValue.flavorId = flavorId;
            _resultValue.flavorName = flavorName;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.imageName = imageName;
            _resultValue.keyPair = keyPair;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.networks = networks;
            _resultValue.powerState = powerState;
            _resultValue.region = region;
            _resultValue.securityGroups = securityGroups;
            _resultValue.tags = tags;
            _resultValue.updated = updated;
            _resultValue.userData = userData;
            return _resultValue;
        }
    }
}
