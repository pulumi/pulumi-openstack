// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.images.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImageResult {
    /**
     * @return The checksum of the data associated with the image.
     * 
     */
    private String checksum;
    /**
     * @return The format of the image&#39;s container.
     * 
     */
    private String containerFormat;
    /**
     * @return The date the image was created.
     * 
     */
    private String createdAt;
    /**
     * @return The format of the image&#39;s disk.
     * 
     */
    private String diskFormat;
    /**
     * @return the trailing path after the glance endpoint that represent the
     * location of the image or the path to retrieve it.
     * 
     */
    private String file;
    private @Nullable Boolean hidden;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String memberStatus;
    /**
     * @return The metadata associated with the image.
     * Image metadata allow for meaningfully define the image properties
     * and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
     * 
     */
    private Map<String,Object> metadata;
    /**
     * @return The minimum amount of disk space required to use the image.
     * 
     */
    private Integer minDiskGb;
    /**
     * @return The minimum amount of ram required to use the image.
     * 
     */
    private Integer minRamMb;
    private @Nullable Boolean mostRecent;
    private @Nullable String name;
    private @Nullable String nameRegex;
    private @Nullable String owner;
    /**
     * @return Freeform information about the image.
     * 
     */
    private @Nullable Map<String,Object> properties;
    /**
     * @return Whether or not the image is protected.
     * 
     */
    private Boolean protected_;
    private String region;
    /**
     * @return The path to the JSON-schema that represent
     * the image or image
     * 
     */
    private String schema;
    /**
     * @return The size of the image (in bytes).
     * 
     */
    private Integer sizeBytes;
    private @Nullable Integer sizeMax;
    private @Nullable Integer sizeMin;
    private @Nullable String sortDirection;
    private @Nullable String sortKey;
    private @Nullable String tag;
    /**
     * @return The tags list of the image.
     * 
     */
    private List<String> tags;
    /**
     * @return The date the image was last updated.
     * 
     */
    private String updatedAt;
    private @Nullable String visibility;

    private GetImageResult() {}
    /**
     * @return The checksum of the data associated with the image.
     * 
     */
    public String checksum() {
        return this.checksum;
    }
    /**
     * @return The format of the image&#39;s container.
     * 
     */
    public String containerFormat() {
        return this.containerFormat;
    }
    /**
     * @return The date the image was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The format of the image&#39;s disk.
     * 
     */
    public String diskFormat() {
        return this.diskFormat;
    }
    /**
     * @return the trailing path after the glance endpoint that represent the
     * location of the image or the path to retrieve it.
     * 
     */
    public String file() {
        return this.file;
    }
    public Optional<Boolean> hidden() {
        return Optional.ofNullable(this.hidden);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> memberStatus() {
        return Optional.ofNullable(this.memberStatus);
    }
    /**
     * @return The metadata associated with the image.
     * Image metadata allow for meaningfully define the image properties
     * and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return The minimum amount of disk space required to use the image.
     * 
     */
    public Integer minDiskGb() {
        return this.minDiskGb;
    }
    /**
     * @return The minimum amount of ram required to use the image.
     * 
     */
    public Integer minRamMb() {
        return this.minRamMb;
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return Freeform information about the image.
     * 
     */
    public Map<String,Object> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    /**
     * @return Whether or not the image is protected.
     * 
     */
    public Boolean protected_() {
        return this.protected_;
    }
    public String region() {
        return this.region;
    }
    /**
     * @return The path to the JSON-schema that represent
     * the image or image
     * 
     */
    public String schema() {
        return this.schema;
    }
    /**
     * @return The size of the image (in bytes).
     * 
     */
    public Integer sizeBytes() {
        return this.sizeBytes;
    }
    public Optional<Integer> sizeMax() {
        return Optional.ofNullable(this.sizeMax);
    }
    public Optional<Integer> sizeMin() {
        return Optional.ofNullable(this.sizeMin);
    }
    public Optional<String> sortDirection() {
        return Optional.ofNullable(this.sortDirection);
    }
    public Optional<String> sortKey() {
        return Optional.ofNullable(this.sortKey);
    }
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }
    /**
     * @return The tags list of the image.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The date the image was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    public Optional<String> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String checksum;
        private String containerFormat;
        private String createdAt;
        private String diskFormat;
        private String file;
        private @Nullable Boolean hidden;
        private String id;
        private @Nullable String memberStatus;
        private Map<String,Object> metadata;
        private Integer minDiskGb;
        private Integer minRamMb;
        private @Nullable Boolean mostRecent;
        private @Nullable String name;
        private @Nullable String nameRegex;
        private @Nullable String owner;
        private @Nullable Map<String,Object> properties;
        private Boolean protected_;
        private String region;
        private String schema;
        private Integer sizeBytes;
        private @Nullable Integer sizeMax;
        private @Nullable Integer sizeMin;
        private @Nullable String sortDirection;
        private @Nullable String sortKey;
        private @Nullable String tag;
        private List<String> tags;
        private String updatedAt;
        private @Nullable String visibility;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checksum = defaults.checksum;
    	      this.containerFormat = defaults.containerFormat;
    	      this.createdAt = defaults.createdAt;
    	      this.diskFormat = defaults.diskFormat;
    	      this.file = defaults.file;
    	      this.hidden = defaults.hidden;
    	      this.id = defaults.id;
    	      this.memberStatus = defaults.memberStatus;
    	      this.metadata = defaults.metadata;
    	      this.minDiskGb = defaults.minDiskGb;
    	      this.minRamMb = defaults.minRamMb;
    	      this.mostRecent = defaults.mostRecent;
    	      this.name = defaults.name;
    	      this.nameRegex = defaults.nameRegex;
    	      this.owner = defaults.owner;
    	      this.properties = defaults.properties;
    	      this.protected_ = defaults.protected_;
    	      this.region = defaults.region;
    	      this.schema = defaults.schema;
    	      this.sizeBytes = defaults.sizeBytes;
    	      this.sizeMax = defaults.sizeMax;
    	      this.sizeMin = defaults.sizeMin;
    	      this.sortDirection = defaults.sortDirection;
    	      this.sortKey = defaults.sortKey;
    	      this.tag = defaults.tag;
    	      this.tags = defaults.tags;
    	      this.updatedAt = defaults.updatedAt;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder checksum(String checksum) {
            this.checksum = Objects.requireNonNull(checksum);
            return this;
        }
        @CustomType.Setter
        public Builder containerFormat(String containerFormat) {
            this.containerFormat = Objects.requireNonNull(containerFormat);
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder diskFormat(String diskFormat) {
            this.diskFormat = Objects.requireNonNull(diskFormat);
            return this;
        }
        @CustomType.Setter
        public Builder file(String file) {
            this.file = Objects.requireNonNull(file);
            return this;
        }
        @CustomType.Setter
        public Builder hidden(@Nullable Boolean hidden) {
            this.hidden = hidden;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder memberStatus(@Nullable String memberStatus) {
            this.memberStatus = memberStatus;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder minDiskGb(Integer minDiskGb) {
            this.minDiskGb = Objects.requireNonNull(minDiskGb);
            return this;
        }
        @CustomType.Setter
        public Builder minRamMb(Integer minRamMb) {
            this.minRamMb = Objects.requireNonNull(minRamMb);
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameRegex(@Nullable String nameRegex) {
            this.nameRegex = nameRegex;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable Map<String,Object> properties) {
            this.properties = properties;
            return this;
        }
        @CustomType.Setter("protected")
        public Builder protected_(Boolean protected_) {
            this.protected_ = Objects.requireNonNull(protected_);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder schema(String schema) {
            this.schema = Objects.requireNonNull(schema);
            return this;
        }
        @CustomType.Setter
        public Builder sizeBytes(Integer sizeBytes) {
            this.sizeBytes = Objects.requireNonNull(sizeBytes);
            return this;
        }
        @CustomType.Setter
        public Builder sizeMax(@Nullable Integer sizeMax) {
            this.sizeMax = sizeMax;
            return this;
        }
        @CustomType.Setter
        public Builder sizeMin(@Nullable Integer sizeMin) {
            this.sizeMin = sizeMin;
            return this;
        }
        @CustomType.Setter
        public Builder sortDirection(@Nullable String sortDirection) {
            this.sortDirection = sortDirection;
            return this;
        }
        @CustomType.Setter
        public Builder sortKey(@Nullable String sortKey) {
            this.sortKey = sortKey;
            return this;
        }
        @CustomType.Setter
        public Builder tag(@Nullable String tag) {
            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        @CustomType.Setter
        public Builder visibility(@Nullable String visibility) {
            this.visibility = visibility;
            return this;
        }
        public GetImageResult build() {
            final var _resultValue = new GetImageResult();
            _resultValue.checksum = checksum;
            _resultValue.containerFormat = containerFormat;
            _resultValue.createdAt = createdAt;
            _resultValue.diskFormat = diskFormat;
            _resultValue.file = file;
            _resultValue.hidden = hidden;
            _resultValue.id = id;
            _resultValue.memberStatus = memberStatus;
            _resultValue.metadata = metadata;
            _resultValue.minDiskGb = minDiskGb;
            _resultValue.minRamMb = minRamMb;
            _resultValue.mostRecent = mostRecent;
            _resultValue.name = name;
            _resultValue.nameRegex = nameRegex;
            _resultValue.owner = owner;
            _resultValue.properties = properties;
            _resultValue.protected_ = protected_;
            _resultValue.region = region;
            _resultValue.schema = schema;
            _resultValue.sizeBytes = sizeBytes;
            _resultValue.sizeMax = sizeMax;
            _resultValue.sizeMin = sizeMin;
            _resultValue.sortDirection = sortDirection;
            _resultValue.sortKey = sortKey;
            _resultValue.tag = tag;
            _resultValue.tags = tags;
            _resultValue.updatedAt = updatedAt;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
