// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.openstack.networking.inputs.RouterRoutesV2RouteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterRoutesV2Args extends com.pulumi.resources.ResourceArgs {

    public static final RouterRoutesV2Args Empty = new RouterRoutesV2Args();

    /**
     * The region in which to obtain the V2 networking client.
     * A networking client is needed to configure routing entres on a router. If
     * omitted, the `region` argument of the provider is used. Changing this creates
     * new routing entries.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 networking client.
     * A networking client is needed to configure routing entres on a router. If
     * omitted, the `region` argument of the provider is used. Changing this creates
     * new routing entries.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * ID of the router these routing entries belong to.
     * Changing this creates new routing entries.
     * 
     */
    @Import(name="routerId", required=true)
    private Output<String> routerId;

    /**
     * @return ID of the router these routing entries belong to.
     * Changing this creates new routing entries.
     * 
     */
    public Output<String> routerId() {
        return this.routerId;
    }

    /**
     * A set of routing entries to add to the router.
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<RouterRoutesV2RouteArgs>> routes;

    /**
     * @return A set of routing entries to add to the router.
     * 
     */
    public Optional<Output<List<RouterRoutesV2RouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    private RouterRoutesV2Args() {}

    private RouterRoutesV2Args(RouterRoutesV2Args $) {
        this.region = $.region;
        this.routerId = $.routerId;
        this.routes = $.routes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterRoutesV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterRoutesV2Args $;

        public Builder() {
            $ = new RouterRoutesV2Args();
        }

        public Builder(RouterRoutesV2Args defaults) {
            $ = new RouterRoutesV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * A networking client is needed to configure routing entres on a router. If
         * omitted, the `region` argument of the provider is used. Changing this creates
         * new routing entries.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * A networking client is needed to configure routing entres on a router. If
         * omitted, the `region` argument of the provider is used. Changing this creates
         * new routing entries.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param routerId ID of the router these routing entries belong to.
         * Changing this creates new routing entries.
         * 
         * @return builder
         * 
         */
        public Builder routerId(Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerId ID of the router these routing entries belong to.
         * Changing this creates new routing entries.
         * 
         * @return builder
         * 
         */
        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        /**
         * @param routes A set of routing entries to add to the router.
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<RouterRoutesV2RouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes A set of routing entries to add to the router.
         * 
         * @return builder
         * 
         */
        public Builder routes(List<RouterRoutesV2RouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes A set of routing entries to add to the router.
         * 
         * @return builder
         * 
         */
        public Builder routes(RouterRoutesV2RouteArgs... routes) {
            return routes(List.of(routes));
        }

        public RouterRoutesV2Args build() {
            if ($.routerId == null) {
                throw new MissingRequiredPropertyException("RouterRoutesV2Args", "routerId");
            }
            return $;
        }
    }

}
