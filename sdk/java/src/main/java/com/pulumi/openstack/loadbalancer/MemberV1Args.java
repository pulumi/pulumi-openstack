// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.loadbalancer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MemberV1Args extends com.pulumi.resources.ResourceArgs {

    public static final MemberV1Args Empty = new MemberV1Args();

    /**
     * The IP address of the member. Changing this creates a
     * new member.
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return The IP address of the member. Changing this creates a
     * new member.
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * The administrative state of the member.
     * Acceptable values are &#39;true&#39; and &#39;false&#39;. Changing this value updates the
     * state of the existing member.
     * 
     */
    @Import(name="adminStateUp")
    private @Nullable Output<Boolean> adminStateUp;

    /**
     * @return The administrative state of the member.
     * Acceptable values are &#39;true&#39; and &#39;false&#39;. Changing this value updates the
     * state of the existing member.
     * 
     */
    public Optional<Output<Boolean>> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }

    /**
     * The ID of the LB pool. Changing this creates a new
     * member.
     * 
     */
    @Import(name="poolId", required=true)
    private Output<String> poolId;

    /**
     * @return The ID of the LB pool. Changing this creates a new
     * member.
     * 
     */
    public Output<String> poolId() {
        return this.poolId;
    }

    /**
     * An integer representing the port on which the member is
     * hosted. Changing this creates a new member.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return An integer representing the port on which the member is
     * hosted. Changing this creates a new member.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB member.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB member.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The owner of the member. Required if admin wants to
     * create a member for another tenant. Changing this creates a new member.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The owner of the member. Required if admin wants to
     * create a member for another tenant. Changing this creates a new member.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private MemberV1Args() {}

    private MemberV1Args(MemberV1Args $) {
        this.address = $.address;
        this.adminStateUp = $.adminStateUp;
        this.poolId = $.poolId;
        this.port = $.port;
        this.region = $.region;
        this.tenantId = $.tenantId;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MemberV1Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MemberV1Args $;

        public Builder() {
            $ = new MemberV1Args();
        }

        public Builder(MemberV1Args defaults) {
            $ = new MemberV1Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The IP address of the member. Changing this creates a
         * new member.
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The IP address of the member. Changing this creates a
         * new member.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param adminStateUp The administrative state of the member.
         * Acceptable values are &#39;true&#39; and &#39;false&#39;. Changing this value updates the
         * state of the existing member.
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(@Nullable Output<Boolean> adminStateUp) {
            $.adminStateUp = adminStateUp;
            return this;
        }

        /**
         * @param adminStateUp The administrative state of the member.
         * Acceptable values are &#39;true&#39; and &#39;false&#39;. Changing this value updates the
         * state of the existing member.
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(Boolean adminStateUp) {
            return adminStateUp(Output.of(adminStateUp));
        }

        /**
         * @param poolId The ID of the LB pool. Changing this creates a new
         * member.
         * 
         * @return builder
         * 
         */
        public Builder poolId(Output<String> poolId) {
            $.poolId = poolId;
            return this;
        }

        /**
         * @param poolId The ID of the LB pool. Changing this creates a new
         * member.
         * 
         * @return builder
         * 
         */
        public Builder poolId(String poolId) {
            return poolId(Output.of(poolId));
        }

        /**
         * @param port An integer representing the port on which the member is
         * hosted. Changing this creates a new member.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port An integer representing the port on which the member is
         * hosted. Changing this creates a new member.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an LB member. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * LB member.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an LB member. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * LB member.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tenantId The owner of the member. Required if admin wants to
         * create a member for another tenant. Changing this creates a new member.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The owner of the member. Required if admin wants to
         * create a member for another tenant. Changing this creates a new member.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public MemberV1Args build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("MemberV1Args", "address");
            }
            if ($.poolId == null) {
                throw new MissingRequiredPropertyException("MemberV1Args", "poolId");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("MemberV1Args", "port");
            }
            return $;
        }
    }

}
