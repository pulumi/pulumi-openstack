// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceBlockDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceBlockDeviceArgs Empty = new InstanceBlockDeviceArgs();

    /**
     * The boot index of the volume. It defaults to 0.
     * Changing this creates a new server.
     * 
     */
    @Import(name="bootIndex")
    private @Nullable Output<Integer> bootIndex;

    /**
     * @return The boot index of the volume. It defaults to 0.
     * Changing this creates a new server.
     * 
     */
    public Optional<Output<Integer>> bootIndex() {
        return Optional.ofNullable(this.bootIndex);
    }

    /**
     * Delete the volume / block device upon
     * termination of the instance. Defaults to false. Changing this creates a
     * new server.
     * 
     */
    @Import(name="deleteOnTermination")
    private @Nullable Output<Boolean> deleteOnTermination;

    /**
     * @return Delete the volume / block device upon
     * termination of the instance. Defaults to false. Changing this creates a
     * new server.
     * 
     */
    public Optional<Output<Boolean>> deleteOnTermination() {
        return Optional.ofNullable(this.deleteOnTermination);
    }

    /**
     * The type that gets created. Possible values
     * are &#34;volume&#34; and &#34;local&#34;. Changing this creates a new server.
     * 
     */
    @Import(name="destinationType")
    private @Nullable Output<String> destinationType;

    /**
     * @return The type that gets created. Possible values
     * are &#34;volume&#34; and &#34;local&#34;. Changing this creates a new server.
     * 
     */
    public Optional<Output<String>> destinationType() {
        return Optional.ofNullable(this.destinationType);
    }

    /**
     * The low-level device type that will be used. Most
     * common thing is to leave this empty. Changing this creates a new server.
     * 
     */
    @Import(name="deviceType")
    private @Nullable Output<String> deviceType;

    /**
     * @return The low-level device type that will be used. Most
     * common thing is to leave this empty. Changing this creates a new server.
     * 
     */
    public Optional<Output<String>> deviceType() {
        return Optional.ofNullable(this.deviceType);
    }

    /**
     * The low-level disk bus that will be used. Most common
     * thing is to leave this empty. Changing this creates a new server.
     * 
     */
    @Import(name="diskBus")
    private @Nullable Output<String> diskBus;

    /**
     * @return The low-level disk bus that will be used. Most common
     * thing is to leave this empty. Changing this creates a new server.
     * 
     */
    public Optional<Output<String>> diskBus() {
        return Optional.ofNullable(this.diskBus);
    }

    /**
     * Specifies the guest server disk file system format,
     * such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings
     * have the following restrictions: source_type must be blank and destination_type
     * must be local and only one swap disk per server and the size of the swap disk
     * must be less than or equal to the swap size of the flavor. Changing this
     * creates a new server.
     * 
     */
    @Import(name="guestFormat")
    private @Nullable Output<String> guestFormat;

    /**
     * @return Specifies the guest server disk file system format,
     * such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings
     * have the following restrictions: source_type must be blank and destination_type
     * must be local and only one swap disk per server and the size of the swap disk
     * must be less than or equal to the swap size of the flavor. Changing this
     * creates a new server.
     * 
     */
    public Optional<Output<String>> guestFormat() {
        return Optional.ofNullable(this.guestFormat);
    }

    /**
     * Enable the attachment of multiattach-capable
     * volumes.
     * 
     */
    @Import(name="multiattach")
    private @Nullable Output<Boolean> multiattach;

    /**
     * @return Enable the attachment of multiattach-capable
     * volumes.
     * 
     */
    public Optional<Output<Boolean>> multiattach() {
        return Optional.ofNullable(this.multiattach);
    }

    /**
     * The source type of the device. Must be one of
     * &#34;blank&#34;, &#34;image&#34;, &#34;volume&#34;, or &#34;snapshot&#34;. Changing this creates a new
     * server.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return The source type of the device. Must be one of
     * &#34;blank&#34;, &#34;image&#34;, &#34;volume&#34;, or &#34;snapshot&#34;. Changing this creates a new
     * server.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    /**
     * The UUID of
     * the image, volume, or snapshot. Changing this creates a new server.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return The UUID of
     * the image, volume, or snapshot. Changing this creates a new server.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * The size of the volume to create (in gigabytes). Required
     * in the following combinations: source=image and destination=volume,
     * source=blank and destination=local, and source=blank and destination=volume.
     * Changing this creates a new server.
     * 
     */
    @Import(name="volumeSize")
    private @Nullable Output<Integer> volumeSize;

    /**
     * @return The size of the volume to create (in gigabytes). Required
     * in the following combinations: source=image and destination=volume,
     * source=blank and destination=local, and source=blank and destination=volume.
     * Changing this creates a new server.
     * 
     */
    public Optional<Output<Integer>> volumeSize() {
        return Optional.ofNullable(this.volumeSize);
    }

    /**
     * The volume type that will be used, for example SSD
     * or HDD storage. The available options depend on how your specific OpenStack
     * cloud is configured and what classes of storage are provided. Changing this
     * creates a new server.
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return The volume type that will be used, for example SSD
     * or HDD storage. The available options depend on how your specific OpenStack
     * cloud is configured and what classes of storage are provided. Changing this
     * creates a new server.
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private InstanceBlockDeviceArgs() {}

    private InstanceBlockDeviceArgs(InstanceBlockDeviceArgs $) {
        this.bootIndex = $.bootIndex;
        this.deleteOnTermination = $.deleteOnTermination;
        this.destinationType = $.destinationType;
        this.deviceType = $.deviceType;
        this.diskBus = $.diskBus;
        this.guestFormat = $.guestFormat;
        this.multiattach = $.multiattach;
        this.sourceType = $.sourceType;
        this.uuid = $.uuid;
        this.volumeSize = $.volumeSize;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceBlockDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceBlockDeviceArgs $;

        public Builder() {
            $ = new InstanceBlockDeviceArgs();
        }

        public Builder(InstanceBlockDeviceArgs defaults) {
            $ = new InstanceBlockDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootIndex The boot index of the volume. It defaults to 0.
         * Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder bootIndex(@Nullable Output<Integer> bootIndex) {
            $.bootIndex = bootIndex;
            return this;
        }

        /**
         * @param bootIndex The boot index of the volume. It defaults to 0.
         * Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder bootIndex(Integer bootIndex) {
            return bootIndex(Output.of(bootIndex));
        }

        /**
         * @param deleteOnTermination Delete the volume / block device upon
         * termination of the instance. Defaults to false. Changing this creates a
         * new server.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnTermination(@Nullable Output<Boolean> deleteOnTermination) {
            $.deleteOnTermination = deleteOnTermination;
            return this;
        }

        /**
         * @param deleteOnTermination Delete the volume / block device upon
         * termination of the instance. Defaults to false. Changing this creates a
         * new server.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            return deleteOnTermination(Output.of(deleteOnTermination));
        }

        /**
         * @param destinationType The type that gets created. Possible values
         * are &#34;volume&#34; and &#34;local&#34;. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(@Nullable Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The type that gets created. Possible values
         * are &#34;volume&#34; and &#34;local&#34;. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param deviceType The low-level device type that will be used. Most
         * common thing is to leave this empty. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(@Nullable Output<String> deviceType) {
            $.deviceType = deviceType;
            return this;
        }

        /**
         * @param deviceType The low-level device type that will be used. Most
         * common thing is to leave this empty. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(String deviceType) {
            return deviceType(Output.of(deviceType));
        }

        /**
         * @param diskBus The low-level disk bus that will be used. Most common
         * thing is to leave this empty. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder diskBus(@Nullable Output<String> diskBus) {
            $.diskBus = diskBus;
            return this;
        }

        /**
         * @param diskBus The low-level disk bus that will be used. Most common
         * thing is to leave this empty. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder diskBus(String diskBus) {
            return diskBus(Output.of(diskBus));
        }

        /**
         * @param guestFormat Specifies the guest server disk file system format,
         * such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings
         * have the following restrictions: source_type must be blank and destination_type
         * must be local and only one swap disk per server and the size of the swap disk
         * must be less than or equal to the swap size of the flavor. Changing this
         * creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder guestFormat(@Nullable Output<String> guestFormat) {
            $.guestFormat = guestFormat;
            return this;
        }

        /**
         * @param guestFormat Specifies the guest server disk file system format,
         * such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings
         * have the following restrictions: source_type must be blank and destination_type
         * must be local and only one swap disk per server and the size of the swap disk
         * must be less than or equal to the swap size of the flavor. Changing this
         * creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder guestFormat(String guestFormat) {
            return guestFormat(Output.of(guestFormat));
        }

        /**
         * @param multiattach Enable the attachment of multiattach-capable
         * volumes.
         * 
         * @return builder
         * 
         */
        public Builder multiattach(@Nullable Output<Boolean> multiattach) {
            $.multiattach = multiattach;
            return this;
        }

        /**
         * @param multiattach Enable the attachment of multiattach-capable
         * volumes.
         * 
         * @return builder
         * 
         */
        public Builder multiattach(Boolean multiattach) {
            return multiattach(Output.of(multiattach));
        }

        /**
         * @param sourceType The source type of the device. Must be one of
         * &#34;blank&#34;, &#34;image&#34;, &#34;volume&#34;, or &#34;snapshot&#34;. Changing this creates a new
         * server.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType The source type of the device. Must be one of
         * &#34;blank&#34;, &#34;image&#34;, &#34;volume&#34;, or &#34;snapshot&#34;. Changing this creates a new
         * server.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param uuid The UUID of
         * the image, volume, or snapshot. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid The UUID of
         * the image, volume, or snapshot. Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param volumeSize The size of the volume to create (in gigabytes). Required
         * in the following combinations: source=image and destination=volume,
         * source=blank and destination=local, and source=blank and destination=volume.
         * Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(@Nullable Output<Integer> volumeSize) {
            $.volumeSize = volumeSize;
            return this;
        }

        /**
         * @param volumeSize The size of the volume to create (in gigabytes). Required
         * in the following combinations: source=image and destination=volume,
         * source=blank and destination=local, and source=blank and destination=volume.
         * Changing this creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(Integer volumeSize) {
            return volumeSize(Output.of(volumeSize));
        }

        /**
         * @param volumeType The volume type that will be used, for example SSD
         * or HDD storage. The available options depend on how your specific OpenStack
         * cloud is configured and what classes of storage are provided. Changing this
         * creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType The volume type that will be used, for example SSD
         * or HDD storage. The available options depend on how your specific OpenStack
         * cloud is configured and what classes of storage are provided. Changing this
         * creates a new server.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public InstanceBlockDeviceArgs build() {
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            return $;
        }
    }

}
