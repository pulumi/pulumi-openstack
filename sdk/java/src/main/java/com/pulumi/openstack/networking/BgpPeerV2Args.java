// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BgpPeerV2Args extends com.pulumi.resources.ResourceArgs {

    public static final BgpPeerV2Args Empty = new BgpPeerV2Args();

    /**
     * The authentication type to use. Can be one of `none`
     * or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
     * must also be provided. Changing this creates a new BGP peer.
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return The authentication type to use. Can be one of `none`
     * or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
     * must also be provided. Changing this creates a new BGP peer.
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * A name for the BGP peer.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the BGP peer.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The password used for MD5 authentication. Must be set
     * only when `auth_type` is not `none`.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password used for MD5 authentication. Must be set
     * only when `auth_type` is not `none`.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The IP address of the BGP peer. Must be a valid IP
     * address. Changing this creates a new BGP peer.
     * 
     */
    @Import(name="peerIp", required=true)
    private Output<String> peerIp;

    /**
     * @return The IP address of the BGP peer. Must be a valid IP
     * address. Changing this creates a new BGP peer.
     * 
     */
    public Output<String> peerIp() {
        return this.peerIp;
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * peer.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new BGP
     * peer.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The AS number of the BGP peer. Changing this
     * creates a new BGP peer.
     * 
     */
    @Import(name="remoteAs", required=true)
    private Output<Integer> remoteAs;

    /**
     * @return The AS number of the BGP peer. Changing this
     * creates a new BGP peer.
     * 
     */
    public Output<Integer> remoteAs() {
        return this.remoteAs;
    }

    /**
     * The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP peer.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The tenant/project ID. Required if admin privileges
     * are used. Changing this creates a new BGP peer.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private BgpPeerV2Args() {}

    private BgpPeerV2Args(BgpPeerV2Args $) {
        this.authType = $.authType;
        this.name = $.name;
        this.password = $.password;
        this.peerIp = $.peerIp;
        this.region = $.region;
        this.remoteAs = $.remoteAs;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BgpPeerV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BgpPeerV2Args $;

        public Builder() {
            $ = new BgpPeerV2Args();
        }

        public Builder(BgpPeerV2Args defaults) {
            $ = new BgpPeerV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType The authentication type to use. Can be one of `none`
         * or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
         * must also be provided. Changing this creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType The authentication type to use. Can be one of `none`
         * or `md5`. Defaults to `none`. If set to not `none`, the `password` argument
         * must also be provided. Changing this creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param name A name for the BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The password used for MD5 authentication. Must be set
         * only when `auth_type` is not `none`.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password used for MD5 authentication. Must be set
         * only when `auth_type` is not `none`.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param peerIp The IP address of the BGP peer. Must be a valid IP
         * address. Changing this creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder peerIp(Output<String> peerIp) {
            $.peerIp = peerIp;
            return this;
        }

        /**
         * @param peerIp The IP address of the BGP peer. Must be a valid IP
         * address. Changing this creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder peerIp(String peerIp) {
            return peerIp(Output.of(peerIp));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a Neutron network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new BGP
         * peer.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a Neutron network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new BGP
         * peer.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param remoteAs The AS number of the BGP peer. Changing this
         * creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder remoteAs(Output<Integer> remoteAs) {
            $.remoteAs = remoteAs;
            return this;
        }

        /**
         * @param remoteAs The AS number of the BGP peer. Changing this
         * creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder remoteAs(Integer remoteAs) {
            return remoteAs(Output.of(remoteAs));
        }

        /**
         * @param tenantId The tenant/project ID. Required if admin privileges
         * are used. Changing this creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The tenant/project ID. Required if admin privileges
         * are used. Changing this creates a new BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public BgpPeerV2Args build() {
            if ($.peerIp == null) {
                throw new MissingRequiredPropertyException("BgpPeerV2Args", "peerIp");
            }
            if ($.remoteAs == null) {
                throw new MissingRequiredPropertyException("BgpPeerV2Args", "remoteAs");
            }
            return $;
        }
    }

}
