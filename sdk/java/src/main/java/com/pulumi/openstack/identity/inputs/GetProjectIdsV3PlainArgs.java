// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectIdsV3PlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectIdsV3PlainArgs Empty = new GetProjectIdsV3PlainArgs();

    /**
     * The domain projects belongs to.
     * 
     */
    @Import(name="domainId")
    private @Nullable String domainId;

    /**
     * @return The domain projects belongs to.
     * 
     */
    public Optional<String> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * Whether the project is enabled or disabled. Valid
     * values are `true` and `false`. Default is `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Whether the project is enabled or disabled. Valid
     * values are `true` and `false`. Default is `true`.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="isDomain")
    private @Nullable Boolean isDomain;

    public Optional<Boolean> isDomain() {
        return Optional.ofNullable(this.isDomain);
    }

    /**
     * The name of the project.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the project.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The regular expression of the name of the project.
     * Cannot be used simultaneously with `name`. Unlike filtering by `name` the
     * `name_regex` filtering does by client on the result of OpenStack search
     * query.
     * 
     */
    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    /**
     * @return The regular expression of the name of the project.
     * Cannot be used simultaneously with `name`. Unlike filtering by `name` the
     * `name_regex` filtering does by client on the result of OpenStack search
     * query.
     * 
     */
    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The parent of the project.
     * 
     */
    @Import(name="parentId")
    private @Nullable String parentId;

    /**
     * @return The parent of the project.
     * 
     */
    public Optional<String> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    @Import(name="region")
    private @Nullable String region;

    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Tags for the project.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return Tags for the project.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetProjectIdsV3PlainArgs() {}

    private GetProjectIdsV3PlainArgs(GetProjectIdsV3PlainArgs $) {
        this.domainId = $.domainId;
        this.enabled = $.enabled;
        this.isDomain = $.isDomain;
        this.name = $.name;
        this.nameRegex = $.nameRegex;
        this.parentId = $.parentId;
        this.region = $.region;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectIdsV3PlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectIdsV3PlainArgs $;

        public Builder() {
            $ = new GetProjectIdsV3PlainArgs();
        }

        public Builder(GetProjectIdsV3PlainArgs defaults) {
            $ = new GetProjectIdsV3PlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainId The domain projects belongs to.
         * 
         * @return builder
         * 
         */
        public Builder domainId(@Nullable String domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param enabled Whether the project is enabled or disabled. Valid
         * values are `true` and `false`. Default is `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder isDomain(@Nullable Boolean isDomain) {
            $.isDomain = isDomain;
            return this;
        }

        /**
         * @param name The name of the project.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nameRegex The regular expression of the name of the project.
         * Cannot be used simultaneously with `name`. Unlike filtering by `name` the
         * `name_regex` filtering does by client on the result of OpenStack search
         * query.
         * 
         * @return builder
         * 
         */
        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param parentId The parent of the project.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable String parentId) {
            $.parentId = parentId;
            return this;
        }

        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param tags Tags for the project.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for the project.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GetProjectIdsV3PlainArgs build() {
            return $;
        }
    }

}
