// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFlavorPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFlavorPlainArgs Empty = new GetFlavorPlainArgs();

    /**
     * The description of the flavor.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the flavor.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The exact amount of disk (in gigabytes).
     * 
     */
    @Import(name="disk")
    private @Nullable Integer disk;

    /**
     * @return The exact amount of disk (in gigabytes).
     * 
     */
    public Optional<Integer> disk() {
        return Optional.ofNullable(this.disk);
    }

    /**
     * The ID of the flavor. Conflicts with the `name`,
     * `min_ram` and `min_disk`
     * 
     */
    @Import(name="flavorId")
    private @Nullable String flavorId;

    /**
     * @return The ID of the flavor. Conflicts with the `name`,
     * `min_ram` and `min_disk`
     * 
     */
    public Optional<String> flavorId() {
        return Optional.ofNullable(this.flavorId);
    }

    /**
     * The flavor visibility.
     * 
     */
    @Import(name="isPublic")
    private @Nullable Boolean isPublic;

    /**
     * @return The flavor visibility.
     * 
     */
    public Optional<Boolean> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }

    /**
     * The minimum amount of disk (in gigabytes). Conflicts
     * with the `flavor_id`.
     * 
     */
    @Import(name="minDisk")
    private @Nullable Integer minDisk;

    /**
     * @return The minimum amount of disk (in gigabytes). Conflicts
     * with the `flavor_id`.
     * 
     */
    public Optional<Integer> minDisk() {
        return Optional.ofNullable(this.minDisk);
    }

    /**
     * The minimum amount of RAM (in megabytes). Conflicts
     * with the `flavor_id`.
     * 
     */
    @Import(name="minRam")
    private @Nullable Integer minRam;

    /**
     * @return The minimum amount of RAM (in megabytes). Conflicts
     * with the `flavor_id`.
     * 
     */
    public Optional<Integer> minRam() {
        return Optional.ofNullable(this.minRam);
    }

    /**
     * The name of the flavor. Conflicts with the `flavor_id`.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the flavor. Conflicts with the `flavor_id`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The exact amount of RAM (in megabytes).
     * 
     */
    @Import(name="ram")
    private @Nullable Integer ram;

    /**
     * @return The exact amount of RAM (in megabytes).
     * 
     */
    public Optional<Integer> ram() {
        return Optional.ofNullable(this.ram);
    }

    /**
     * The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The `rx_tx_factor` of the flavor.
     * 
     */
    @Import(name="rxTxFactor")
    private @Nullable Double rxTxFactor;

    /**
     * @return The `rx_tx_factor` of the flavor.
     * 
     */
    public Optional<Double> rxTxFactor() {
        return Optional.ofNullable(this.rxTxFactor);
    }

    /**
     * The amount of swap (in gigabytes).
     * 
     */
    @Import(name="swap")
    private @Nullable Integer swap;

    /**
     * @return The amount of swap (in gigabytes).
     * 
     */
    public Optional<Integer> swap() {
        return Optional.ofNullable(this.swap);
    }

    /**
     * The amount of VCPUs.
     * 
     */
    @Import(name="vcpus")
    private @Nullable Integer vcpus;

    /**
     * @return The amount of VCPUs.
     * 
     */
    public Optional<Integer> vcpus() {
        return Optional.ofNullable(this.vcpus);
    }

    private GetFlavorPlainArgs() {}

    private GetFlavorPlainArgs(GetFlavorPlainArgs $) {
        this.description = $.description;
        this.disk = $.disk;
        this.flavorId = $.flavorId;
        this.isPublic = $.isPublic;
        this.minDisk = $.minDisk;
        this.minRam = $.minRam;
        this.name = $.name;
        this.ram = $.ram;
        this.region = $.region;
        this.rxTxFactor = $.rxTxFactor;
        this.swap = $.swap;
        this.vcpus = $.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFlavorPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFlavorPlainArgs $;

        public Builder() {
            $ = new GetFlavorPlainArgs();
        }

        public Builder(GetFlavorPlainArgs defaults) {
            $ = new GetFlavorPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the flavor.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param disk The exact amount of disk (in gigabytes).
         * 
         * @return builder
         * 
         */
        public Builder disk(@Nullable Integer disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param flavorId The ID of the flavor. Conflicts with the `name`,
         * `min_ram` and `min_disk`
         * 
         * @return builder
         * 
         */
        public Builder flavorId(@Nullable String flavorId) {
            $.flavorId = flavorId;
            return this;
        }

        /**
         * @param isPublic The flavor visibility.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(@Nullable Boolean isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        /**
         * @param minDisk The minimum amount of disk (in gigabytes). Conflicts
         * with the `flavor_id`.
         * 
         * @return builder
         * 
         */
        public Builder minDisk(@Nullable Integer minDisk) {
            $.minDisk = minDisk;
            return this;
        }

        /**
         * @param minRam The minimum amount of RAM (in megabytes). Conflicts
         * with the `flavor_id`.
         * 
         * @return builder
         * 
         */
        public Builder minRam(@Nullable Integer minRam) {
            $.minRam = minRam;
            return this;
        }

        /**
         * @param name The name of the flavor. Conflicts with the `flavor_id`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param ram The exact amount of RAM (in megabytes).
         * 
         * @return builder
         * 
         */
        public Builder ram(@Nullable Integer ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * If omitted, the `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param rxTxFactor The `rx_tx_factor` of the flavor.
         * 
         * @return builder
         * 
         */
        public Builder rxTxFactor(@Nullable Double rxTxFactor) {
            $.rxTxFactor = rxTxFactor;
            return this;
        }

        /**
         * @param swap The amount of swap (in gigabytes).
         * 
         * @return builder
         * 
         */
        public Builder swap(@Nullable Integer swap) {
            $.swap = swap;
            return this;
        }

        /**
         * @param vcpus The amount of VCPUs.
         * 
         * @return builder
         * 
         */
        public Builder vcpus(@Nullable Integer vcpus) {
            $.vcpus = vcpus;
            return this;
        }

        public GetFlavorPlainArgs build() {
            return $;
        }
    }

}
