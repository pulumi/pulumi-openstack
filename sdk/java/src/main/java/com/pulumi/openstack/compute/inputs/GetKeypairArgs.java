// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetKeypairArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetKeypairArgs Empty = new GetKeypairArgs();

    /**
     * The unique name of the keypair.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The unique name of the keypair.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Compute client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The user id of the owner of the key pair.
     * This parameter can be specified only if the provider is configured to use
     * the credentials of an OpenStack administrator.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The user id of the owner of the key pair.
     * This parameter can be specified only if the provider is configured to use
     * the credentials of an OpenStack administrator.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private GetKeypairArgs() {}

    private GetKeypairArgs(GetKeypairArgs $) {
        this.name = $.name;
        this.region = $.region;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKeypairArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKeypairArgs $;

        public Builder() {
            $ = new GetKeypairArgs();
        }

        public Builder(GetKeypairArgs defaults) {
            $ = new GetKeypairArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The unique name of the keypair.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the keypair.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * If omitted, the `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * If omitted, the `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param userId The user id of the owner of the key pair.
         * This parameter can be specified only if the provider is configured to use
         * the credentials of an OpenStack administrator.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user id of the owner of the key pair.
         * This parameter can be specified only if the provider is configured to use
         * the credentials of an OpenStack administrator.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public GetKeypairArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetKeypairArgs", "name");
            }
            return $;
        }
    }

}
