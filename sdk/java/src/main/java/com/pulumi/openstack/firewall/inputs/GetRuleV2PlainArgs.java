// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.firewall.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRuleV2PlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRuleV2PlainArgs Empty = new GetRuleV2PlainArgs();

    /**
     * Action to be taken when the firewall rule matches.
     * 
     */
    @Import(name="action")
    private @Nullable String action;

    /**
     * @return Action to be taken when the firewall rule matches.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The description of the firewall rule.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the firewall rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The destination IP address on which the
     * firewall rule operates.
     * 
     */
    @Import(name="destinationIpAddress")
    private @Nullable String destinationIpAddress;

    /**
     * @return The destination IP address on which the
     * firewall rule operates.
     * 
     */
    public Optional<String> destinationIpAddress() {
        return Optional.ofNullable(this.destinationIpAddress);
    }

    /**
     * The destination port on which the firewall
     * rule operates.
     * 
     */
    @Import(name="destinationPort")
    private @Nullable String destinationPort;

    /**
     * @return The destination port on which the firewall
     * rule operates.
     * 
     */
    public Optional<String> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Enabled status for the firewall rule.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Enabled status for the firewall rule.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the firewall policy the rule belongs to.
     * 
     */
    @Import(name="firewallPolicyIds")
    private @Nullable List<String> firewallPolicyIds;

    /**
     * @return The ID of the firewall policy the rule belongs to.
     * 
     */
    public Optional<List<String>> firewallPolicyIds() {
        return Optional.ofNullable(this.firewallPolicyIds);
    }

    /**
     * IP version, either 4 (default) or 6.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Integer ipVersion;

    /**
     * @return IP version, either 4 (default) or 6.
     * 
     */
    public Optional<Integer> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The name of the firewall rule.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the firewall rule.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * This argument conflicts and is interchangeable
     * with `tenant_id`. The owner of the firewall rule.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return This argument conflicts and is interchangeable
     * with `tenant_id`. The owner of the firewall rule.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The protocol type on which the firewall rule operates.
     * 
     */
    @Import(name="protocol")
    private @Nullable String protocol;

    /**
     * @return The protocol type on which the firewall rule operates.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve firewall policy ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve firewall policy ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The ID of the firewall rule.
     * 
     */
    @Import(name="ruleId")
    private @Nullable String ruleId;

    /**
     * @return The ID of the firewall rule.
     * 
     */
    public Optional<String> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * The sharing status of the firewall policy.
     * 
     */
    @Import(name="shared")
    private @Nullable Boolean shared;

    /**
     * @return The sharing status of the firewall policy.
     * 
     */
    public Optional<Boolean> shared() {
        return Optional.ofNullable(this.shared);
    }

    /**
     * The source IP address on which the firewall
     * rule operates.
     * 
     */
    @Import(name="sourceIpAddress")
    private @Nullable String sourceIpAddress;

    /**
     * @return The source IP address on which the firewall
     * rule operates.
     * 
     */
    public Optional<String> sourceIpAddress() {
        return Optional.ofNullable(this.sourceIpAddress);
    }

    /**
     * The source port on which the firewall
     * rule operates.
     * 
     */
    @Import(name="sourcePort")
    private @Nullable String sourcePort;

    /**
     * @return The source port on which the firewall
     * rule operates.
     * 
     */
    public Optional<String> sourcePort() {
        return Optional.ofNullable(this.sourcePort);
    }

    /**
     * This argument conflicts and is interchangeable
     * with `project_id`. The owner of the firewall rule.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return This argument conflicts and is interchangeable
     * with `project_id`. The owner of the firewall rule.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetRuleV2PlainArgs() {}

    private GetRuleV2PlainArgs(GetRuleV2PlainArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.destinationIpAddress = $.destinationIpAddress;
        this.destinationPort = $.destinationPort;
        this.enabled = $.enabled;
        this.firewallPolicyIds = $.firewallPolicyIds;
        this.ipVersion = $.ipVersion;
        this.name = $.name;
        this.projectId = $.projectId;
        this.protocol = $.protocol;
        this.region = $.region;
        this.ruleId = $.ruleId;
        this.shared = $.shared;
        this.sourceIpAddress = $.sourceIpAddress;
        this.sourcePort = $.sourcePort;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRuleV2PlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRuleV2PlainArgs $;

        public Builder() {
            $ = new GetRuleV2PlainArgs();
        }

        public Builder(GetRuleV2PlainArgs defaults) {
            $ = new GetRuleV2PlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to be taken when the firewall rule matches.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable String action) {
            $.action = action;
            return this;
        }

        /**
         * @param description The description of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param destinationIpAddress The destination IP address on which the
         * firewall rule operates.
         * 
         * @return builder
         * 
         */
        public Builder destinationIpAddress(@Nullable String destinationIpAddress) {
            $.destinationIpAddress = destinationIpAddress;
            return this;
        }

        /**
         * @param destinationPort The destination port on which the firewall
         * rule operates.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable String destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param enabled Enabled status for the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param firewallPolicyIds The ID of the firewall policy the rule belongs to.
         * 
         * @return builder
         * 
         */
        public Builder firewallPolicyIds(@Nullable List<String> firewallPolicyIds) {
            $.firewallPolicyIds = firewallPolicyIds;
            return this;
        }

        /**
         * @param firewallPolicyIds The ID of the firewall policy the rule belongs to.
         * 
         * @return builder
         * 
         */
        public Builder firewallPolicyIds(String... firewallPolicyIds) {
            return firewallPolicyIds(List.of(firewallPolicyIds));
        }

        /**
         * @param ipVersion IP version, either 4 (default) or 6.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Integer ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param name The name of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param projectId This argument conflicts and is interchangeable
         * with `tenant_id`. The owner of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param protocol The protocol type on which the firewall rule operates.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve firewall policy ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param ruleId The ID of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable String ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param shared The sharing status of the firewall policy.
         * 
         * @return builder
         * 
         */
        public Builder shared(@Nullable Boolean shared) {
            $.shared = shared;
            return this;
        }

        /**
         * @param sourceIpAddress The source IP address on which the firewall
         * rule operates.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpAddress(@Nullable String sourceIpAddress) {
            $.sourceIpAddress = sourceIpAddress;
            return this;
        }

        /**
         * @param sourcePort The source port on which the firewall
         * rule operates.
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(@Nullable String sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        /**
         * @param tenantId This argument conflicts and is interchangeable
         * with `project_id`. The owner of the firewall rule.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public GetRuleV2PlainArgs build() {
            return $;
        }
    }

}
