// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.containerinfra.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterTemplateResult {
    /**
     * @return The API server port for the Container Orchestration
     * Engine for this cluster template.
     * 
     */
    private Integer apiserverPort;
    /**
     * @return The distro for the cluster (fedora-atomic, coreos, etc.).
     * 
     */
    private String clusterDistro;
    /**
     * @return The Container Orchestration Engine for this cluster template.
     * 
     */
    private String coe;
    /**
     * @return The time at which cluster template was created.
     * 
     */
    private String createdAt;
    /**
     * @return Address of the DNS nameserver that is used in nodes of the
     * cluster.
     * 
     */
    private String dnsNameserver;
    /**
     * @return Docker storage driver. Changing this updates the
     * Docker storage driver of the existing cluster template.
     * 
     */
    private String dockerStorageDriver;
    /**
     * @return The size (in GB) of the Docker volume.
     * 
     */
    private Integer dockerVolumeSize;
    /**
     * @return The ID of the external network that will be used for
     * the cluster.
     * 
     */
    private String externalNetworkId;
    /**
     * @return The fixed network that will be attached to the cluster.
     * 
     */
    private String fixedNetwork;
    /**
     * @return =The fixed subnet that will be attached to the cluster.
     * 
     */
    private String fixedSubnet;
    /**
     * @return The flavor for the nodes of the cluster.
     * 
     */
    private String flavor;
    /**
     * @return Indicates whether created cluster should create IP
     * floating IP for every node or not.
     * 
     */
    private Boolean floatingIpEnabled;
    /**
     * @return Indicates whether the ClusterTemplate is hidden or not.
     * 
     */
    private Boolean hidden;
    /**
     * @return The address of a proxy for receiving all HTTP requests and
     * relay them.
     * 
     */
    private String httpProxy;
    /**
     * @return The address of a proxy for receiving all HTTPS requests and
     * relay them.
     * 
     */
    private String httpsProxy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The reference to an image that is used for nodes of the cluster.
     * 
     */
    private String image;
    /**
     * @return The insecure registry URL for the cluster template.
     * 
     */
    private String insecureRegistry;
    /**
     * @return The name of the Compute service SSH keypair.
     * 
     */
    private String keypairId;
    /**
     * @return The list of key value pairs representing additional properties
     * of the cluster template.
     * 
     */
    private Map<String,Object> labels;
    /**
     * @return The flavor for the master nodes.
     * 
     */
    private String masterFlavor;
    /**
     * @return Indicates whether created cluster should has a
     * loadbalancer for master nodes or not.
     * 
     */
    private Boolean masterLbEnabled;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String name;
    /**
     * @return The name of the driver for the container network.
     * 
     */
    private String networkDriver;
    /**
     * @return A comma-separated list of IP addresses that shouldn&#39;t be used in
     * the cluster.
     * 
     */
    private String noProxy;
    /**
     * @return The project of the cluster template.
     * 
     */
    private String projectId;
    /**
     * @return Indicates whether cluster template should be public.
     * 
     */
    private Boolean public_;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String region;
    /**
     * @return Indicates whether Docker registry is enabled in the
     * cluster.
     * 
     */
    private Boolean registryEnabled;
    /**
     * @return The server type for the cluster template.
     * 
     */
    private String serverType;
    /**
     * @return Indicates whether the TLS should be disabled in the cluster.
     * 
     */
    private Boolean tlsDisabled;
    /**
     * @return The time at which cluster template was updated.
     * 
     */
    private String updatedAt;
    /**
     * @return The user of the cluster template.
     * 
     */
    private String userId;
    /**
     * @return The name of the driver that is used for the volumes of the
     * cluster nodes.
     * 
     */
    private String volumeDriver;

    private GetClusterTemplateResult() {}
    /**
     * @return The API server port for the Container Orchestration
     * Engine for this cluster template.
     * 
     */
    public Integer apiserverPort() {
        return this.apiserverPort;
    }
    /**
     * @return The distro for the cluster (fedora-atomic, coreos, etc.).
     * 
     */
    public String clusterDistro() {
        return this.clusterDistro;
    }
    /**
     * @return The Container Orchestration Engine for this cluster template.
     * 
     */
    public String coe() {
        return this.coe;
    }
    /**
     * @return The time at which cluster template was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Address of the DNS nameserver that is used in nodes of the
     * cluster.
     * 
     */
    public String dnsNameserver() {
        return this.dnsNameserver;
    }
    /**
     * @return Docker storage driver. Changing this updates the
     * Docker storage driver of the existing cluster template.
     * 
     */
    public String dockerStorageDriver() {
        return this.dockerStorageDriver;
    }
    /**
     * @return The size (in GB) of the Docker volume.
     * 
     */
    public Integer dockerVolumeSize() {
        return this.dockerVolumeSize;
    }
    /**
     * @return The ID of the external network that will be used for
     * the cluster.
     * 
     */
    public String externalNetworkId() {
        return this.externalNetworkId;
    }
    /**
     * @return The fixed network that will be attached to the cluster.
     * 
     */
    public String fixedNetwork() {
        return this.fixedNetwork;
    }
    /**
     * @return =The fixed subnet that will be attached to the cluster.
     * 
     */
    public String fixedSubnet() {
        return this.fixedSubnet;
    }
    /**
     * @return The flavor for the nodes of the cluster.
     * 
     */
    public String flavor() {
        return this.flavor;
    }
    /**
     * @return Indicates whether created cluster should create IP
     * floating IP for every node or not.
     * 
     */
    public Boolean floatingIpEnabled() {
        return this.floatingIpEnabled;
    }
    /**
     * @return Indicates whether the ClusterTemplate is hidden or not.
     * 
     */
    public Boolean hidden() {
        return this.hidden;
    }
    /**
     * @return The address of a proxy for receiving all HTTP requests and
     * relay them.
     * 
     */
    public String httpProxy() {
        return this.httpProxy;
    }
    /**
     * @return The address of a proxy for receiving all HTTPS requests and
     * relay them.
     * 
     */
    public String httpsProxy() {
        return this.httpsProxy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The reference to an image that is used for nodes of the cluster.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return The insecure registry URL for the cluster template.
     * 
     */
    public String insecureRegistry() {
        return this.insecureRegistry;
    }
    /**
     * @return The name of the Compute service SSH keypair.
     * 
     */
    public String keypairId() {
        return this.keypairId;
    }
    /**
     * @return The list of key value pairs representing additional properties
     * of the cluster template.
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    /**
     * @return The flavor for the master nodes.
     * 
     */
    public String masterFlavor() {
        return this.masterFlavor;
    }
    /**
     * @return Indicates whether created cluster should has a
     * loadbalancer for master nodes or not.
     * 
     */
    public Boolean masterLbEnabled() {
        return this.masterLbEnabled;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the driver for the container network.
     * 
     */
    public String networkDriver() {
        return this.networkDriver;
    }
    /**
     * @return A comma-separated list of IP addresses that shouldn&#39;t be used in
     * the cluster.
     * 
     */
    public String noProxy() {
        return this.noProxy;
    }
    /**
     * @return The project of the cluster template.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Indicates whether cluster template should be public.
     * 
     */
    public Boolean public_() {
        return this.public_;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Indicates whether Docker registry is enabled in the
     * cluster.
     * 
     */
    public Boolean registryEnabled() {
        return this.registryEnabled;
    }
    /**
     * @return The server type for the cluster template.
     * 
     */
    public String serverType() {
        return this.serverType;
    }
    /**
     * @return Indicates whether the TLS should be disabled in the cluster.
     * 
     */
    public Boolean tlsDisabled() {
        return this.tlsDisabled;
    }
    /**
     * @return The time at which cluster template was updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return The user of the cluster template.
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return The name of the driver that is used for the volumes of the
     * cluster nodes.
     * 
     */
    public String volumeDriver() {
        return this.volumeDriver;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer apiserverPort;
        private String clusterDistro;
        private String coe;
        private String createdAt;
        private String dnsNameserver;
        private String dockerStorageDriver;
        private Integer dockerVolumeSize;
        private String externalNetworkId;
        private String fixedNetwork;
        private String fixedSubnet;
        private String flavor;
        private Boolean floatingIpEnabled;
        private Boolean hidden;
        private String httpProxy;
        private String httpsProxy;
        private String id;
        private String image;
        private String insecureRegistry;
        private String keypairId;
        private Map<String,Object> labels;
        private String masterFlavor;
        private Boolean masterLbEnabled;
        private String name;
        private String networkDriver;
        private String noProxy;
        private String projectId;
        private Boolean public_;
        private String region;
        private Boolean registryEnabled;
        private String serverType;
        private Boolean tlsDisabled;
        private String updatedAt;
        private String userId;
        private String volumeDriver;
        public Builder() {}
        public Builder(GetClusterTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiserverPort = defaults.apiserverPort;
    	      this.clusterDistro = defaults.clusterDistro;
    	      this.coe = defaults.coe;
    	      this.createdAt = defaults.createdAt;
    	      this.dnsNameserver = defaults.dnsNameserver;
    	      this.dockerStorageDriver = defaults.dockerStorageDriver;
    	      this.dockerVolumeSize = defaults.dockerVolumeSize;
    	      this.externalNetworkId = defaults.externalNetworkId;
    	      this.fixedNetwork = defaults.fixedNetwork;
    	      this.fixedSubnet = defaults.fixedSubnet;
    	      this.flavor = defaults.flavor;
    	      this.floatingIpEnabled = defaults.floatingIpEnabled;
    	      this.hidden = defaults.hidden;
    	      this.httpProxy = defaults.httpProxy;
    	      this.httpsProxy = defaults.httpsProxy;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.insecureRegistry = defaults.insecureRegistry;
    	      this.keypairId = defaults.keypairId;
    	      this.labels = defaults.labels;
    	      this.masterFlavor = defaults.masterFlavor;
    	      this.masterLbEnabled = defaults.masterLbEnabled;
    	      this.name = defaults.name;
    	      this.networkDriver = defaults.networkDriver;
    	      this.noProxy = defaults.noProxy;
    	      this.projectId = defaults.projectId;
    	      this.public_ = defaults.public_;
    	      this.region = defaults.region;
    	      this.registryEnabled = defaults.registryEnabled;
    	      this.serverType = defaults.serverType;
    	      this.tlsDisabled = defaults.tlsDisabled;
    	      this.updatedAt = defaults.updatedAt;
    	      this.userId = defaults.userId;
    	      this.volumeDriver = defaults.volumeDriver;
        }

        @CustomType.Setter
        public Builder apiserverPort(Integer apiserverPort) {
            if (apiserverPort == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "apiserverPort");
            }
            this.apiserverPort = apiserverPort;
            return this;
        }
        @CustomType.Setter
        public Builder clusterDistro(String clusterDistro) {
            if (clusterDistro == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "clusterDistro");
            }
            this.clusterDistro = clusterDistro;
            return this;
        }
        @CustomType.Setter
        public Builder coe(String coe) {
            if (coe == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "coe");
            }
            this.coe = coe;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder dnsNameserver(String dnsNameserver) {
            if (dnsNameserver == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "dnsNameserver");
            }
            this.dnsNameserver = dnsNameserver;
            return this;
        }
        @CustomType.Setter
        public Builder dockerStorageDriver(String dockerStorageDriver) {
            if (dockerStorageDriver == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "dockerStorageDriver");
            }
            this.dockerStorageDriver = dockerStorageDriver;
            return this;
        }
        @CustomType.Setter
        public Builder dockerVolumeSize(Integer dockerVolumeSize) {
            if (dockerVolumeSize == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "dockerVolumeSize");
            }
            this.dockerVolumeSize = dockerVolumeSize;
            return this;
        }
        @CustomType.Setter
        public Builder externalNetworkId(String externalNetworkId) {
            if (externalNetworkId == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "externalNetworkId");
            }
            this.externalNetworkId = externalNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder fixedNetwork(String fixedNetwork) {
            if (fixedNetwork == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "fixedNetwork");
            }
            this.fixedNetwork = fixedNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder fixedSubnet(String fixedSubnet) {
            if (fixedSubnet == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "fixedSubnet");
            }
            this.fixedSubnet = fixedSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder flavor(String flavor) {
            if (flavor == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "flavor");
            }
            this.flavor = flavor;
            return this;
        }
        @CustomType.Setter
        public Builder floatingIpEnabled(Boolean floatingIpEnabled) {
            if (floatingIpEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "floatingIpEnabled");
            }
            this.floatingIpEnabled = floatingIpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder hidden(Boolean hidden) {
            if (hidden == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "hidden");
            }
            this.hidden = hidden;
            return this;
        }
        @CustomType.Setter
        public Builder httpProxy(String httpProxy) {
            if (httpProxy == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "httpProxy");
            }
            this.httpProxy = httpProxy;
            return this;
        }
        @CustomType.Setter
        public Builder httpsProxy(String httpsProxy) {
            if (httpsProxy == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "httpsProxy");
            }
            this.httpsProxy = httpsProxy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder insecureRegistry(String insecureRegistry) {
            if (insecureRegistry == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "insecureRegistry");
            }
            this.insecureRegistry = insecureRegistry;
            return this;
        }
        @CustomType.Setter
        public Builder keypairId(String keypairId) {
            if (keypairId == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "keypairId");
            }
            this.keypairId = keypairId;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder masterFlavor(String masterFlavor) {
            if (masterFlavor == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "masterFlavor");
            }
            this.masterFlavor = masterFlavor;
            return this;
        }
        @CustomType.Setter
        public Builder masterLbEnabled(Boolean masterLbEnabled) {
            if (masterLbEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "masterLbEnabled");
            }
            this.masterLbEnabled = masterLbEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkDriver(String networkDriver) {
            if (networkDriver == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "networkDriver");
            }
            this.networkDriver = networkDriver;
            return this;
        }
        @CustomType.Setter
        public Builder noProxy(String noProxy) {
            if (noProxy == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "noProxy");
            }
            this.noProxy = noProxy;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter("public")
        public Builder public_(Boolean public_) {
            if (public_ == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "public_");
            }
            this.public_ = public_;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder registryEnabled(Boolean registryEnabled) {
            if (registryEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "registryEnabled");
            }
            this.registryEnabled = registryEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder serverType(String serverType) {
            if (serverType == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "serverType");
            }
            this.serverType = serverType;
            return this;
        }
        @CustomType.Setter
        public Builder tlsDisabled(Boolean tlsDisabled) {
            if (tlsDisabled == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "tlsDisabled");
            }
            this.tlsDisabled = tlsDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder volumeDriver(String volumeDriver) {
            if (volumeDriver == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateResult", "volumeDriver");
            }
            this.volumeDriver = volumeDriver;
            return this;
        }
        public GetClusterTemplateResult build() {
            final var _resultValue = new GetClusterTemplateResult();
            _resultValue.apiserverPort = apiserverPort;
            _resultValue.clusterDistro = clusterDistro;
            _resultValue.coe = coe;
            _resultValue.createdAt = createdAt;
            _resultValue.dnsNameserver = dnsNameserver;
            _resultValue.dockerStorageDriver = dockerStorageDriver;
            _resultValue.dockerVolumeSize = dockerVolumeSize;
            _resultValue.externalNetworkId = externalNetworkId;
            _resultValue.fixedNetwork = fixedNetwork;
            _resultValue.fixedSubnet = fixedSubnet;
            _resultValue.flavor = flavor;
            _resultValue.floatingIpEnabled = floatingIpEnabled;
            _resultValue.hidden = hidden;
            _resultValue.httpProxy = httpProxy;
            _resultValue.httpsProxy = httpsProxy;
            _resultValue.id = id;
            _resultValue.image = image;
            _resultValue.insecureRegistry = insecureRegistry;
            _resultValue.keypairId = keypairId;
            _resultValue.labels = labels;
            _resultValue.masterFlavor = masterFlavor;
            _resultValue.masterLbEnabled = masterLbEnabled;
            _resultValue.name = name;
            _resultValue.networkDriver = networkDriver;
            _resultValue.noProxy = noProxy;
            _resultValue.projectId = projectId;
            _resultValue.public_ = public_;
            _resultValue.region = region;
            _resultValue.registryEnabled = registryEnabled;
            _resultValue.serverType = serverType;
            _resultValue.tlsDisabled = tlsDisabled;
            _resultValue.updatedAt = updatedAt;
            _resultValue.userId = userId;
            _resultValue.volumeDriver = volumeDriver;
            return _resultValue;
        }
    }
}
