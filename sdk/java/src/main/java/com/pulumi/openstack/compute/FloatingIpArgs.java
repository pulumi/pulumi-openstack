// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FloatingIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final FloatingIpArgs Empty = new FloatingIpArgs();

    /**
     * The name of the pool from which to obtain the floating
     * IP. Changing this creates a new floating IP.
     * 
     */
    @Import(name="pool", required=true)
    private Output<String> pool;

    /**
     * @return The name of the pool from which to obtain the floating
     * IP. Changing this creates a new floating IP.
     * 
     */
    public Output<String> pool() {
        return this.pool;
    }

    /**
     * The region in which to obtain the V2 Compute client.
     * A Compute client is needed to create a floating IP that can be used with
     * a compute instance. If omitted, the `region` argument of the provider
     * is used. Changing this creates a new floating IP (which may or may not
     * have a different address).
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Compute client.
     * A Compute client is needed to create a floating IP that can be used with
     * a compute instance. If omitted, the `region` argument of the provider
     * is used. Changing this creates a new floating IP (which may or may not
     * have a different address).
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private FloatingIpArgs() {}

    private FloatingIpArgs(FloatingIpArgs $) {
        this.pool = $.pool;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FloatingIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FloatingIpArgs $;

        public Builder() {
            $ = new FloatingIpArgs();
        }

        public Builder(FloatingIpArgs defaults) {
            $ = new FloatingIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pool The name of the pool from which to obtain the floating
         * IP. Changing this creates a new floating IP.
         * 
         * @return builder
         * 
         */
        public Builder pool(Output<String> pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param pool The name of the pool from which to obtain the floating
         * IP. Changing this creates a new floating IP.
         * 
         * @return builder
         * 
         */
        public Builder pool(String pool) {
            return pool(Output.of(pool));
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * A Compute client is needed to create a floating IP that can be used with
         * a compute instance. If omitted, the `region` argument of the provider
         * is used. Changing this creates a new floating IP (which may or may not
         * have a different address).
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * A Compute client is needed to create a floating IP that can be used with
         * a compute instance. If omitted, the `region` argument of the provider
         * is used. Changing this creates a new floating IP (which may or may not
         * have a different address).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public FloatingIpArgs build() {
            if ($.pool == null) {
                throw new MissingRequiredPropertyException("FloatingIpArgs", "pool");
            }
            return $;
        }
    }

}
