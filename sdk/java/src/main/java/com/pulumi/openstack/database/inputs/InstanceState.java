// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.openstack.database.inputs.InstanceDatabaseArgs;
import com.pulumi.openstack.database.inputs.InstanceDatastoreArgs;
import com.pulumi.openstack.database.inputs.InstanceNetworkArgs;
import com.pulumi.openstack.database.inputs.InstanceUserArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * A list of IP addresses assigned to the instance.
     * 
     */
    @Import(name="addresses")
    private @Nullable Output<List<String>> addresses;

    /**
     * @return A list of IP addresses assigned to the instance.
     * 
     */
    public Optional<Output<List<String>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    /**
     * Configuration ID to be attached to the instance. Database instance
     * will be rebooted when configuration is detached.
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return Configuration ID to be attached to the instance. Database instance
     * will be rebooted when configuration is detached.
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * An array of database name, charset and collate. The database
     * object structure is documented below.
     * 
     */
    @Import(name="databases")
    private @Nullable Output<List<InstanceDatabaseArgs>> databases;

    /**
     * @return An array of database name, charset and collate. The database
     * object structure is documented below.
     * 
     */
    public Optional<Output<List<InstanceDatabaseArgs>>> databases() {
        return Optional.ofNullable(this.databases);
    }

    /**
     * An array of database engine type and version. The datastore
     * object structure is documented below. Changing this creates a new instance.
     * 
     */
    @Import(name="datastore")
    private @Nullable Output<InstanceDatastoreArgs> datastore;

    /**
     * @return An array of database engine type and version. The datastore
     * object structure is documented below. Changing this creates a new instance.
     * 
     */
    public Optional<Output<InstanceDatastoreArgs>> datastore() {
        return Optional.ofNullable(this.datastore);
    }

    /**
     * The flavor ID of the desired flavor for the instance.
     * Changing this creates new instance.
     * 
     */
    @Import(name="flavorId")
    private @Nullable Output<String> flavorId;

    /**
     * @return The flavor ID of the desired flavor for the instance.
     * Changing this creates new instance.
     * 
     */
    public Optional<Output<String>> flavorId() {
        return Optional.ofNullable(this.flavorId);
    }

    /**
     * A unique name for the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An array of one or more networks to attach to the
     * instance. The network object structure is documented below. Changing this
     * creates a new instance.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<InstanceNetworkArgs>> networks;

    /**
     * @return An array of one or more networks to attach to the
     * instance. The network object structure is documented below. Changing this
     * creates a new instance.
     * 
     */
    public Optional<Output<List<InstanceNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * The region in which to create the db instance. Changing this
     * creates a new instance.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to create the db instance. Changing this
     * creates a new instance.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Specifies the volume size in GB. Changing this creates new instance.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Specifies the volume size in GB. Changing this creates new instance.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * An array of username, password, host and databases. The user
     * object structure is documented below.
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<InstanceUserArgs>> users;

    /**
     * @return An array of username, password, host and databases. The user
     * object structure is documented below.
     * 
     */
    public Optional<Output<List<InstanceUserArgs>>> users() {
        return Optional.ofNullable(this.users);
    }

    /**
     * Specifies the volume type to use. If you want to
     * specify a volume type, you must also specify a volume size. Changing this
     * creates new instance.
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return Specifies the volume type to use. If you want to
     * specify a volume type, you must also specify a volume size. Changing this
     * creates new instance.
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.addresses = $.addresses;
        this.configurationId = $.configurationId;
        this.databases = $.databases;
        this.datastore = $.datastore;
        this.flavorId = $.flavorId;
        this.name = $.name;
        this.networks = $.networks;
        this.region = $.region;
        this.size = $.size;
        this.users = $.users;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses A list of IP addresses assigned to the instance.
         * 
         * @return builder
         * 
         */
        public Builder addresses(@Nullable Output<List<String>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses A list of IP addresses assigned to the instance.
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<String> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses A list of IP addresses assigned to the instance.
         * 
         * @return builder
         * 
         */
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param configurationId Configuration ID to be attached to the instance. Database instance
         * will be rebooted when configuration is detached.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId Configuration ID to be attached to the instance. Database instance
         * will be rebooted when configuration is detached.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param databases An array of database name, charset and collate. The database
         * object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder databases(@Nullable Output<List<InstanceDatabaseArgs>> databases) {
            $.databases = databases;
            return this;
        }

        /**
         * @param databases An array of database name, charset and collate. The database
         * object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder databases(List<InstanceDatabaseArgs> databases) {
            return databases(Output.of(databases));
        }

        /**
         * @param databases An array of database name, charset and collate. The database
         * object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder databases(InstanceDatabaseArgs... databases) {
            return databases(List.of(databases));
        }

        /**
         * @param datastore An array of database engine type and version. The datastore
         * object structure is documented below. Changing this creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder datastore(@Nullable Output<InstanceDatastoreArgs> datastore) {
            $.datastore = datastore;
            return this;
        }

        /**
         * @param datastore An array of database engine type and version. The datastore
         * object structure is documented below. Changing this creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder datastore(InstanceDatastoreArgs datastore) {
            return datastore(Output.of(datastore));
        }

        /**
         * @param flavorId The flavor ID of the desired flavor for the instance.
         * Changing this creates new instance.
         * 
         * @return builder
         * 
         */
        public Builder flavorId(@Nullable Output<String> flavorId) {
            $.flavorId = flavorId;
            return this;
        }

        /**
         * @param flavorId The flavor ID of the desired flavor for the instance.
         * Changing this creates new instance.
         * 
         * @return builder
         * 
         */
        public Builder flavorId(String flavorId) {
            return flavorId(Output.of(flavorId));
        }

        /**
         * @param name A unique name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks An array of one or more networks to attach to the
         * instance. The network object structure is documented below. Changing this
         * creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<InstanceNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks An array of one or more networks to attach to the
         * instance. The network object structure is documented below. Changing this
         * creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<InstanceNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks An array of one or more networks to attach to the
         * instance. The network object structure is documented below. Changing this
         * creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder networks(InstanceNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param region The region in which to create the db instance. Changing this
         * creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to create the db instance. Changing this
         * creates a new instance.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param size Specifies the volume size in GB. Changing this creates new instance.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Specifies the volume size in GB. Changing this creates new instance.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param users An array of username, password, host and databases. The user
         * object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<InstanceUserArgs>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users An array of username, password, host and databases. The user
         * object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder users(List<InstanceUserArgs> users) {
            return users(Output.of(users));
        }

        /**
         * @param users An array of username, password, host and databases. The user
         * object structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder users(InstanceUserArgs... users) {
            return users(List.of(users));
        }

        /**
         * @param volumeType Specifies the volume type to use. If you want to
         * specify a volume type, you must also specify a volume size. Changing this
         * creates new instance.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType Specifies the volume type to use. If you want to
         * specify a volume type, you must also specify a volume size. Changing this
         * creates new instance.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public InstanceState build() {
            return $;
        }
    }

}
