// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubnetIdsV2PlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubnetIdsV2PlainArgs Empty = new GetSubnetIdsV2PlainArgs();

    /**
     * The CIDR of the subnet.
     * 
     */
    @Import(name="cidr")
    private @Nullable String cidr;

    /**
     * @return The CIDR of the subnet.
     * 
     */
    public Optional<String> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * Human-readable description of the subnet.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Human-readable description of the subnet.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If the subnet has DHCP enabled.
     * 
     */
    @Import(name="dhcpEnabled")
    private @Nullable Boolean dhcpEnabled;

    /**
     * @return If the subnet has DHCP enabled.
     * 
     */
    public Optional<Boolean> dhcpEnabled() {
        return Optional.ofNullable(this.dhcpEnabled);
    }

    /**
     * If the subnet publishes DNS records.
     * 
     */
    @Import(name="dnsPublishFixedIp")
    private @Nullable Boolean dnsPublishFixedIp;

    /**
     * @return If the subnet publishes DNS records.
     * 
     */
    public Optional<Boolean> dnsPublishFixedIp() {
        return Optional.ofNullable(this.dnsPublishFixedIp);
    }

    /**
     * The IP of the subnet&#39;s gateway.
     * 
     */
    @Import(name="gatewayIp")
    private @Nullable String gatewayIp;

    /**
     * @return The IP of the subnet&#39;s gateway.
     * 
     */
    public Optional<String> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }

    /**
     * The IP version of the subnet (either 4 or 6).
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Integer ipVersion;

    /**
     * @return The IP version of the subnet (either 4 or 6).
     * 
     */
    public Optional<Integer> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    @Import(name="ipv6AddressMode")
    private @Nullable String ipv6AddressMode;

    /**
     * @return The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    public Optional<String> ipv6AddressMode() {
        return Optional.ofNullable(this.ipv6AddressMode);
    }

    /**
     * The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    @Import(name="ipv6RaMode")
    private @Nullable String ipv6RaMode;

    /**
     * @return The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     * 
     */
    public Optional<String> ipv6RaMode() {
        return Optional.ofNullable(this.ipv6RaMode);
    }

    /**
     * The name of the subnet.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the subnet.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nameRegex")
    private @Nullable String nameRegex;

    public Optional<String> nameRegex() {
        return Optional.ofNullable(this.nameRegex);
    }

    /**
     * The ID of the network the subnet belongs to.
     * 
     */
    @Import(name="networkId")
    private @Nullable String networkId;

    /**
     * @return The ID of the network the subnet belongs to.
     * 
     */
    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve subnet ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve subnet ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The ID of the segment the subnet belongs to.
     * Available when neutron segment extension is enabled.
     * 
     */
    @Import(name="segmentId")
    private @Nullable String segmentId;

    /**
     * @return The ID of the segment the subnet belongs to.
     * Available when neutron segment extension is enabled.
     * 
     */
    public Optional<String> segmentId() {
        return Optional.ofNullable(this.segmentId);
    }

    /**
     * Order the results in either `asc` or `desc`.
     * Defaults to none.
     * 
     */
    @Import(name="sortDirection")
    private @Nullable String sortDirection;

    /**
     * @return Order the results in either `asc` or `desc`.
     * Defaults to none.
     * 
     */
    public Optional<String> sortDirection() {
        return Optional.ofNullable(this.sortDirection);
    }

    /**
     * Sort subnets based on a certain key. Defaults to none.
     * 
     */
    @Import(name="sortKey")
    private @Nullable String sortKey;

    /**
     * @return Sort subnets based on a certain key. Defaults to none.
     * 
     */
    public Optional<String> sortKey() {
        return Optional.ofNullable(this.sortKey);
    }

    /**
     * The ID of the subnetpool associated with the subnet.
     * 
     */
    @Import(name="subnetpoolId")
    private @Nullable String subnetpoolId;

    /**
     * @return The ID of the subnetpool associated with the subnet.
     * 
     */
    public Optional<String> subnetpoolId() {
        return Optional.ofNullable(this.subnetpoolId);
    }

    /**
     * The list of subnet tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return The list of subnet tags to filter.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The owner of the subnet.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return The owner of the subnet.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetSubnetIdsV2PlainArgs() {}

    private GetSubnetIdsV2PlainArgs(GetSubnetIdsV2PlainArgs $) {
        this.cidr = $.cidr;
        this.description = $.description;
        this.dhcpEnabled = $.dhcpEnabled;
        this.dnsPublishFixedIp = $.dnsPublishFixedIp;
        this.gatewayIp = $.gatewayIp;
        this.ipVersion = $.ipVersion;
        this.ipv6AddressMode = $.ipv6AddressMode;
        this.ipv6RaMode = $.ipv6RaMode;
        this.name = $.name;
        this.nameRegex = $.nameRegex;
        this.networkId = $.networkId;
        this.region = $.region;
        this.segmentId = $.segmentId;
        this.sortDirection = $.sortDirection;
        this.sortKey = $.sortKey;
        this.subnetpoolId = $.subnetpoolId;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubnetIdsV2PlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubnetIdsV2PlainArgs $;

        public Builder() {
            $ = new GetSubnetIdsV2PlainArgs();
        }

        public Builder(GetSubnetIdsV2PlainArgs defaults) {
            $ = new GetSubnetIdsV2PlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr The CIDR of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable String cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param description Human-readable description of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param dhcpEnabled If the subnet has DHCP enabled.
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnabled(@Nullable Boolean dhcpEnabled) {
            $.dhcpEnabled = dhcpEnabled;
            return this;
        }

        /**
         * @param dnsPublishFixedIp If the subnet publishes DNS records.
         * 
         * @return builder
         * 
         */
        public Builder dnsPublishFixedIp(@Nullable Boolean dnsPublishFixedIp) {
            $.dnsPublishFixedIp = dnsPublishFixedIp;
            return this;
        }

        /**
         * @param gatewayIp The IP of the subnet&#39;s gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(@Nullable String gatewayIp) {
            $.gatewayIp = gatewayIp;
            return this;
        }

        /**
         * @param ipVersion The IP version of the subnet (either 4 or 6).
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Integer ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipv6AddressMode The IPv6 address mode. Valid values are
         * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressMode(@Nullable String ipv6AddressMode) {
            $.ipv6AddressMode = ipv6AddressMode;
            return this;
        }

        /**
         * @param ipv6RaMode The IPv6 Router Advertisement mode. Valid values
         * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
         * 
         * @return builder
         * 
         */
        public Builder ipv6RaMode(@Nullable String ipv6RaMode) {
            $.ipv6RaMode = ipv6RaMode;
            return this;
        }

        /**
         * @param name The name of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder nameRegex(@Nullable String nameRegex) {
            $.nameRegex = nameRegex;
            return this;
        }

        /**
         * @param networkId The ID of the network the subnet belongs to.
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable String networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve subnet ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param segmentId The ID of the segment the subnet belongs to.
         * Available when neutron segment extension is enabled.
         * 
         * @return builder
         * 
         */
        public Builder segmentId(@Nullable String segmentId) {
            $.segmentId = segmentId;
            return this;
        }

        /**
         * @param sortDirection Order the results in either `asc` or `desc`.
         * Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder sortDirection(@Nullable String sortDirection) {
            $.sortDirection = sortDirection;
            return this;
        }

        /**
         * @param sortKey Sort subnets based on a certain key. Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder sortKey(@Nullable String sortKey) {
            $.sortKey = sortKey;
            return this;
        }

        /**
         * @param subnetpoolId The ID of the subnetpool associated with the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetpoolId(@Nullable String subnetpoolId) {
            $.subnetpoolId = subnetpoolId;
            return this;
        }

        /**
         * @param tags The list of subnet tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of subnet tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId The owner of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public GetSubnetIdsV2PlainArgs build() {
            return $;
        }
    }

}
