// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.blockstorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVolumeV2Result {
    /**
     * @return Indicates if the volume is bootable.
     * 
     */
    private String bootable;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return See Argument Reference above.
     * 
     */
    private Map<String,String> metadata;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String name;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String region;
    /**
     * @return The size of the volume in GBs.
     * 
     */
    private Integer size;
    /**
     * @return The ID of the volume from which the current volume was created.
     * 
     */
    private String sourceVolumeId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String status;
    /**
     * @return The type of the volume.
     * 
     */
    private String volumeType;

    private GetVolumeV2Result() {}
    /**
     * @return Indicates if the volume is bootable.
     * 
     */
    public String bootable() {
        return this.bootable;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The size of the volume in GBs.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The ID of the volume from which the current volume was created.
     * 
     */
    public String sourceVolumeId() {
        return this.sourceVolumeId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of the volume.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bootable;
        private String id;
        private Map<String,String> metadata;
        private String name;
        private String region;
        private Integer size;
        private String sourceVolumeId;
        private String status;
        private String volumeType;
        public Builder() {}
        public Builder(GetVolumeV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootable = defaults.bootable;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.size = defaults.size;
    	      this.sourceVolumeId = defaults.sourceVolumeId;
    	      this.status = defaults.status;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder bootable(String bootable) {
            if (bootable == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "bootable");
            }
            this.bootable = bootable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sourceVolumeId(String sourceVolumeId) {
            if (sourceVolumeId == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "sourceVolumeId");
            }
            this.sourceVolumeId = sourceVolumeId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            if (volumeType == null) {
              throw new MissingRequiredPropertyException("GetVolumeV2Result", "volumeType");
            }
            this.volumeType = volumeType;
            return this;
        }
        public GetVolumeV2Result build() {
            final var _resultValue = new GetVolumeV2Result();
            _resultValue.bootable = bootable;
            _resultValue.id = id;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.size = size;
            _resultValue.sourceVolumeId = sourceVolumeId;
            _resultValue.status = status;
            _resultValue.volumeType = volumeType;
            return _resultValue;
        }
    }
}
