// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.openstack.Utilities;
import com.pulumi.openstack.compute.inputs.GetAggregateV2Args;
import com.pulumi.openstack.compute.inputs.GetAggregateV2PlainArgs;
import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesPlainArgs;
import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
import com.pulumi.openstack.compute.inputs.GetFlavorPlainArgs;
import com.pulumi.openstack.compute.inputs.GetHypervisorV2Args;
import com.pulumi.openstack.compute.inputs.GetHypervisorV2PlainArgs;
import com.pulumi.openstack.compute.inputs.GetInstanceV2Args;
import com.pulumi.openstack.compute.inputs.GetInstanceV2PlainArgs;
import com.pulumi.openstack.compute.inputs.GetKeypairArgs;
import com.pulumi.openstack.compute.inputs.GetKeypairPlainArgs;
import com.pulumi.openstack.compute.inputs.GetLimitsV2Args;
import com.pulumi.openstack.compute.inputs.GetLimitsV2PlainArgs;
import com.pulumi.openstack.compute.inputs.GetQuotaSetV2Args;
import com.pulumi.openstack.compute.inputs.GetQuotaSetV2PlainArgs;
import com.pulumi.openstack.compute.outputs.GetAggregateV2Result;
import com.pulumi.openstack.compute.outputs.GetAvailabilityZonesResult;
import com.pulumi.openstack.compute.outputs.GetFlavorResult;
import com.pulumi.openstack.compute.outputs.GetHypervisorV2Result;
import com.pulumi.openstack.compute.outputs.GetInstanceV2Result;
import com.pulumi.openstack.compute.outputs.GetKeypairResult;
import com.pulumi.openstack.compute.outputs.GetLimitsV2Result;
import com.pulumi.openstack.compute.outputs.GetQuotaSetV2Result;
import java.util.concurrent.CompletableFuture;

public final class ComputeFunctions {
    /**
     * Use this data source to get information about host aggregates
     * by name.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAggregateV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = ComputeFunctions.getAggregateV2(GetAggregateV2Args.builder()
     *             .name("test")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAggregateV2Result> getAggregateV2(GetAggregateV2Args args) {
        return getAggregateV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about host aggregates
     * by name.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAggregateV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = ComputeFunctions.getAggregateV2(GetAggregateV2Args.builder()
     *             .name("test")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAggregateV2Result> getAggregateV2Plain(GetAggregateV2PlainArgs args) {
        return getAggregateV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about host aggregates
     * by name.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAggregateV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = ComputeFunctions.getAggregateV2(GetAggregateV2Args.builder()
     *             .name("test")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAggregateV2Result> getAggregateV2(GetAggregateV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getAggregateV2:getAggregateV2", TypeShape.of(GetAggregateV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about host aggregates
     * by name.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAggregateV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = ComputeFunctions.getAggregateV2(GetAggregateV2Args.builder()
     *             .name("test")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAggregateV2Result> getAggregateV2(GetAggregateV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getAggregateV2:getAggregateV2", TypeShape.of(GetAggregateV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about host aggregates
     * by name.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAggregateV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = ComputeFunctions.getAggregateV2(GetAggregateV2Args.builder()
     *             .name("test")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAggregateV2Result> getAggregateV2Plain(GetAggregateV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getAggregateV2:getAggregateV2", TypeShape.of(GetAggregateV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = ComputeFunctions.getAvailabilityZones();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAvailabilityZonesResult> getAvailabilityZones() {
        return getAvailabilityZones(GetAvailabilityZonesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = ComputeFunctions.getAvailabilityZones();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAvailabilityZonesResult> getAvailabilityZonesPlain() {
        return getAvailabilityZonesPlain(GetAvailabilityZonesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = ComputeFunctions.getAvailabilityZones();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAvailabilityZonesResult> getAvailabilityZones(GetAvailabilityZonesArgs args) {
        return getAvailabilityZones(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = ComputeFunctions.getAvailabilityZones();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAvailabilityZonesResult> getAvailabilityZonesPlain(GetAvailabilityZonesPlainArgs args) {
        return getAvailabilityZonesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get a list of availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = ComputeFunctions.getAvailabilityZones();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAvailabilityZonesResult> getAvailabilityZones(GetAvailabilityZonesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getAvailabilityZones:getAvailabilityZones", TypeShape.of(GetAvailabilityZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = ComputeFunctions.getAvailabilityZones();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAvailabilityZonesResult> getAvailabilityZones(GetAvailabilityZonesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getAvailabilityZones:getAvailabilityZones", TypeShape.of(GetAvailabilityZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get a list of availability zones from OpenStack
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetAvailabilityZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var zones = ComputeFunctions.getAvailabilityZones();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAvailabilityZonesResult> getAvailabilityZonesPlain(GetAvailabilityZonesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getAvailabilityZones:getAvailabilityZones", TypeShape.of(GetAvailabilityZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack flavor.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = ComputeFunctions.getFlavor(GetFlavorArgs.builder()
     *             .vcpus(1)
     *             .ram(512)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFlavorResult> getFlavor() {
        return getFlavor(GetFlavorArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack flavor.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = ComputeFunctions.getFlavor(GetFlavorArgs.builder()
     *             .vcpus(1)
     *             .ram(512)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFlavorResult> getFlavorPlain() {
        return getFlavorPlain(GetFlavorPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack flavor.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = ComputeFunctions.getFlavor(GetFlavorArgs.builder()
     *             .vcpus(1)
     *             .ram(512)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFlavorResult> getFlavor(GetFlavorArgs args) {
        return getFlavor(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack flavor.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = ComputeFunctions.getFlavor(GetFlavorArgs.builder()
     *             .vcpus(1)
     *             .ram(512)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFlavorResult> getFlavorPlain(GetFlavorPlainArgs args) {
        return getFlavorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID of an available OpenStack flavor.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = ComputeFunctions.getFlavor(GetFlavorArgs.builder()
     *             .vcpus(1)
     *             .ram(512)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFlavorResult> getFlavor(GetFlavorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getFlavor:getFlavor", TypeShape.of(GetFlavorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack flavor.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = ComputeFunctions.getFlavor(GetFlavorArgs.builder()
     *             .vcpus(1)
     *             .ram(512)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFlavorResult> getFlavor(GetFlavorArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getFlavor:getFlavor", TypeShape.of(GetFlavorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID of an available OpenStack flavor.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetFlavorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = ComputeFunctions.getFlavor(GetFlavorArgs.builder()
     *             .vcpus(1)
     *             .ram(512)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFlavorResult> getFlavorPlain(GetFlavorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getFlavor:getFlavor", TypeShape.of(GetFlavorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about hypervisors
     * by hostname.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetHypervisorV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var host01 = ComputeFunctions.getHypervisorV2(GetHypervisorV2Args.builder()
     *             .hostname("host01")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHypervisorV2Result> getHypervisorV2(GetHypervisorV2Args args) {
        return getHypervisorV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about hypervisors
     * by hostname.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetHypervisorV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var host01 = ComputeFunctions.getHypervisorV2(GetHypervisorV2Args.builder()
     *             .hostname("host01")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHypervisorV2Result> getHypervisorV2Plain(GetHypervisorV2PlainArgs args) {
        return getHypervisorV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get information about hypervisors
     * by hostname.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetHypervisorV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var host01 = ComputeFunctions.getHypervisorV2(GetHypervisorV2Args.builder()
     *             .hostname("host01")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHypervisorV2Result> getHypervisorV2(GetHypervisorV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getHypervisorV2:getHypervisorV2", TypeShape.of(GetHypervisorV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about hypervisors
     * by hostname.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetHypervisorV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var host01 = ComputeFunctions.getHypervisorV2(GetHypervisorV2Args.builder()
     *             .hostname("host01")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetHypervisorV2Result> getHypervisorV2(GetHypervisorV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getHypervisorV2:getHypervisorV2", TypeShape.of(GetHypervisorV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get information about hypervisors
     * by hostname.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetHypervisorV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var host01 = ComputeFunctions.getHypervisorV2(GetHypervisorV2Args.builder()
     *             .hostname("host01")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetHypervisorV2Result> getHypervisorV2Plain(GetHypervisorV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getHypervisorV2:getHypervisorV2", TypeShape.of(GetHypervisorV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the details of a running server
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetInstanceV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var instance = ComputeFunctions.getInstanceV2(GetInstanceV2Args.builder()
     *             .id("2ba26dc6-a12d-4889-8f25-794ea5bf4453")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceV2Result> getInstanceV2(GetInstanceV2Args args) {
        return getInstanceV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the details of a running server
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetInstanceV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var instance = ComputeFunctions.getInstanceV2(GetInstanceV2Args.builder()
     *             .id("2ba26dc6-a12d-4889-8f25-794ea5bf4453")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInstanceV2Result> getInstanceV2Plain(GetInstanceV2PlainArgs args) {
        return getInstanceV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the details of a running server
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetInstanceV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var instance = ComputeFunctions.getInstanceV2(GetInstanceV2Args.builder()
     *             .id("2ba26dc6-a12d-4889-8f25-794ea5bf4453")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceV2Result> getInstanceV2(GetInstanceV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getInstanceV2:getInstanceV2", TypeShape.of(GetInstanceV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the details of a running server
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetInstanceV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var instance = ComputeFunctions.getInstanceV2(GetInstanceV2Args.builder()
     *             .id("2ba26dc6-a12d-4889-8f25-794ea5bf4453")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInstanceV2Result> getInstanceV2(GetInstanceV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getInstanceV2:getInstanceV2", TypeShape.of(GetInstanceV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the details of a running server
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetInstanceV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var instance = ComputeFunctions.getInstanceV2(GetInstanceV2Args.builder()
     *             .id("2ba26dc6-a12d-4889-8f25-794ea5bf4453")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInstanceV2Result> getInstanceV2Plain(GetInstanceV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getInstanceV2:getInstanceV2", TypeShape.of(GetInstanceV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID and public key of an OpenStack keypair.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetKeypairArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var kp = ComputeFunctions.getKeypair(GetKeypairArgs.builder()
     *             .name("sand")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKeypairResult> getKeypair(GetKeypairArgs args) {
        return getKeypair(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID and public key of an OpenStack keypair.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetKeypairArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var kp = ComputeFunctions.getKeypair(GetKeypairArgs.builder()
     *             .name("sand")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKeypairResult> getKeypairPlain(GetKeypairPlainArgs args) {
        return getKeypairPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the ID and public key of an OpenStack keypair.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetKeypairArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var kp = ComputeFunctions.getKeypair(GetKeypairArgs.builder()
     *             .name("sand")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKeypairResult> getKeypair(GetKeypairArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getKeypair:getKeypair", TypeShape.of(GetKeypairResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID and public key of an OpenStack keypair.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetKeypairArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var kp = ComputeFunctions.getKeypair(GetKeypairArgs.builder()
     *             .name("sand")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetKeypairResult> getKeypair(GetKeypairArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getKeypair:getKeypair", TypeShape.of(GetKeypairResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the ID and public key of an OpenStack keypair.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetKeypairArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var kp = ComputeFunctions.getKeypair(GetKeypairArgs.builder()
     *             .name("sand")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetKeypairResult> getKeypairPlain(GetKeypairPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getKeypair:getKeypair", TypeShape.of(GetKeypairResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the compute limits of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetLimitsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var limits = ComputeFunctions.getLimitsV2(GetLimitsV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLimitsV2Result> getLimitsV2(GetLimitsV2Args args) {
        return getLimitsV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the compute limits of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetLimitsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var limits = ComputeFunctions.getLimitsV2(GetLimitsV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLimitsV2Result> getLimitsV2Plain(GetLimitsV2PlainArgs args) {
        return getLimitsV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the compute limits of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetLimitsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var limits = ComputeFunctions.getLimitsV2(GetLimitsV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLimitsV2Result> getLimitsV2(GetLimitsV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getLimitsV2:getLimitsV2", TypeShape.of(GetLimitsV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the compute limits of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetLimitsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var limits = ComputeFunctions.getLimitsV2(GetLimitsV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLimitsV2Result> getLimitsV2(GetLimitsV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getLimitsV2:getLimitsV2", TypeShape.of(GetLimitsV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the compute limits of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetLimitsV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var limits = ComputeFunctions.getLimitsV2(GetLimitsV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLimitsV2Result> getLimitsV2Plain(GetLimitsV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getLimitsV2:getLimitsV2", TypeShape.of(GetLimitsV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the compute quotaset of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetQuotaSetV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = ComputeFunctions.getQuotaSetV2(GetQuotaSetV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotaSetV2Result> getQuotaSetV2(GetQuotaSetV2Args args) {
        return getQuotaSetV2(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the compute quotaset of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetQuotaSetV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = ComputeFunctions.getQuotaSetV2(GetQuotaSetV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuotaSetV2Result> getQuotaSetV2Plain(GetQuotaSetV2PlainArgs args) {
        return getQuotaSetV2Plain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the compute quotaset of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetQuotaSetV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = ComputeFunctions.getQuotaSetV2(GetQuotaSetV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotaSetV2Result> getQuotaSetV2(GetQuotaSetV2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getQuotaSetV2:getQuotaSetV2", TypeShape.of(GetQuotaSetV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the compute quotaset of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetQuotaSetV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = ComputeFunctions.getQuotaSetV2(GetQuotaSetV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetQuotaSetV2Result> getQuotaSetV2(GetQuotaSetV2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("openstack:compute/getQuotaSetV2:getQuotaSetV2", TypeShape.of(GetQuotaSetV2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the compute quotaset of an OpenStack project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.openstack.compute.ComputeFunctions;
     * import com.pulumi.openstack.compute.inputs.GetQuotaSetV2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var quota = ComputeFunctions.getQuotaSetV2(GetQuotaSetV2Args.builder()
     *             .projectId("2e367a3d29f94fd988e6ec54e305ec9d")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetQuotaSetV2Result> getQuotaSetV2Plain(GetQuotaSetV2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("openstack:compute/getQuotaSetV2:getQuotaSetV2", TypeShape.of(GetQuotaSetV2Result.class), args, Utilities.withVersion(options));
    }
}
