// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouterInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouterInterfaceArgs Empty = new RouterInterfaceArgs();

    /**
     * A boolean indicating whether the routes from the
     * corresponding router ID should be deleted so that the router interface can
     * be destroyed without any errors. The default value is `false`.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return A boolean indicating whether the routes from the
     * corresponding router ID should be deleted so that the router interface can
     * be destroyed without any errors. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * ID of the port this interface connects to. Changing
     * this creates a new router interface.
     * 
     */
    @Import(name="portId")
    private @Nullable Output<String> portId;

    /**
     * @return ID of the port this interface connects to. Changing
     * this creates a new router interface.
     * 
     */
    public Optional<Output<String>> portId() {
        return Optional.ofNullable(this.portId);
    }

    /**
     * The region in which to obtain the V2 networking client.
     * A networking client is needed to create a router. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * router interface.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 networking client.
     * A networking client is needed to create a router. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * router interface.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * ID of the router this interface belongs to. Changing
     * this creates a new router interface.
     * 
     */
    @Import(name="routerId", required=true)
    private Output<String> routerId;

    /**
     * @return ID of the router this interface belongs to. Changing
     * this creates a new router interface.
     * 
     */
    public Output<String> routerId() {
        return this.routerId;
    }

    /**
     * ID of the subnet this interface connects to. Changing
     * this creates a new router interface.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return ID of the subnet this interface connects to. Changing
     * this creates a new router interface.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private RouterInterfaceArgs() {}

    private RouterInterfaceArgs(RouterInterfaceArgs $) {
        this.forceDestroy = $.forceDestroy;
        this.portId = $.portId;
        this.region = $.region;
        this.routerId = $.routerId;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouterInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouterInterfaceArgs $;

        public Builder() {
            $ = new RouterInterfaceArgs();
        }

        public Builder(RouterInterfaceArgs defaults) {
            $ = new RouterInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forceDestroy A boolean indicating whether the routes from the
         * corresponding router ID should be deleted so that the router interface can
         * be destroyed without any errors. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy A boolean indicating whether the routes from the
         * corresponding router ID should be deleted so that the router interface can
         * be destroyed without any errors. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param portId ID of the port this interface connects to. Changing
         * this creates a new router interface.
         * 
         * @return builder
         * 
         */
        public Builder portId(@Nullable Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId ID of the port this interface connects to. Changing
         * this creates a new router interface.
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * A networking client is needed to create a router. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * router interface.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * A networking client is needed to create a router. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * router interface.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param routerId ID of the router this interface belongs to. Changing
         * this creates a new router interface.
         * 
         * @return builder
         * 
         */
        public Builder routerId(Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerId ID of the router this interface belongs to. Changing
         * this creates a new router interface.
         * 
         * @return builder
         * 
         */
        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        /**
         * @param subnetId ID of the subnet this interface connects to. Changing
         * this creates a new router interface.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId ID of the subnet this interface connects to. Changing
         * this creates a new router interface.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public RouterInterfaceArgs build() {
            if ($.routerId == null) {
                throw new MissingRequiredPropertyException("RouterInterfaceArgs", "routerId");
            }
            return $;
        }
    }

}
