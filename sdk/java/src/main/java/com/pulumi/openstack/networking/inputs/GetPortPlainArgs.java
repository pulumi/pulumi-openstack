// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPortPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPortPlainArgs Empty = new GetPortPlainArgs();

    /**
     * The administrative state of the port.
     * 
     */
    @Import(name="adminStateUp")
    private @Nullable Boolean adminStateUp;

    /**
     * @return The administrative state of the port.
     * 
     */
    public Optional<Boolean> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }

    /**
     * Human-readable description of the port.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Human-readable description of the port.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the device the port belongs to.
     * 
     */
    @Import(name="deviceId")
    private @Nullable String deviceId;

    /**
     * @return The ID of the device the port belongs to.
     * 
     */
    public Optional<String> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    /**
     * The device owner of the port.
     * 
     */
    @Import(name="deviceOwner")
    private @Nullable String deviceOwner;

    /**
     * @return The device owner of the port.
     * 
     */
    public Optional<String> deviceOwner() {
        return Optional.ofNullable(this.deviceOwner);
    }

    /**
     * The port DNS name to filter. Available, when Neutron
     * DNS extension is enabled.
     * 
     */
    @Import(name="dnsName")
    private @Nullable String dnsName;

    /**
     * @return The port DNS name to filter. Available, when Neutron
     * DNS extension is enabled.
     * 
     */
    public Optional<String> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * The port IP address filter.
     * 
     */
    @Import(name="fixedIp")
    private @Nullable String fixedIp;

    /**
     * @return The port IP address filter.
     * 
     */
    public Optional<String> fixedIp() {
        return Optional.ofNullable(this.fixedIp);
    }

    /**
     * The MAC address of the port.
     * 
     */
    @Import(name="macAddress")
    private @Nullable String macAddress;

    /**
     * @return The MAC address of the port.
     * 
     */
    public Optional<String> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The name of the port.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the port.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the network the port belongs to.
     * 
     */
    @Import(name="networkId")
    private @Nullable String networkId;

    /**
     * @return The ID of the network the port belongs to.
     * 
     */
    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * The ID of the port.
     * 
     */
    @Import(name="portId")
    private @Nullable String portId;

    /**
     * @return The ID of the port.
     * 
     */
    public Optional<String> portId() {
        return Optional.ofNullable(this.portId);
    }

    /**
     * The owner of the port.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return The owner of the port.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve port ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve port ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The list of port security group IDs to filter.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable List<String> securityGroupIds;

    /**
     * @return The list of port security group IDs to filter.
     * 
     */
    public Optional<List<String>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * The status of the port.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the port.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The list of port tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return The list of port tags to filter.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tenantId")
    private @Nullable String tenantId;

    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetPortPlainArgs() {}

    private GetPortPlainArgs(GetPortPlainArgs $) {
        this.adminStateUp = $.adminStateUp;
        this.description = $.description;
        this.deviceId = $.deviceId;
        this.deviceOwner = $.deviceOwner;
        this.dnsName = $.dnsName;
        this.fixedIp = $.fixedIp;
        this.macAddress = $.macAddress;
        this.name = $.name;
        this.networkId = $.networkId;
        this.portId = $.portId;
        this.projectId = $.projectId;
        this.region = $.region;
        this.securityGroupIds = $.securityGroupIds;
        this.status = $.status;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPortPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPortPlainArgs $;

        public Builder() {
            $ = new GetPortPlainArgs();
        }

        public Builder(GetPortPlainArgs defaults) {
            $ = new GetPortPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminStateUp The administrative state of the port.
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(@Nullable Boolean adminStateUp) {
            $.adminStateUp = adminStateUp;
            return this;
        }

        /**
         * @param description Human-readable description of the port.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param deviceId The ID of the device the port belongs to.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(@Nullable String deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        /**
         * @param deviceOwner The device owner of the port.
         * 
         * @return builder
         * 
         */
        public Builder deviceOwner(@Nullable String deviceOwner) {
            $.deviceOwner = deviceOwner;
            return this;
        }

        /**
         * @param dnsName The port DNS name to filter. Available, when Neutron
         * DNS extension is enabled.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable String dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param fixedIp The port IP address filter.
         * 
         * @return builder
         * 
         */
        public Builder fixedIp(@Nullable String fixedIp) {
            $.fixedIp = fixedIp;
            return this;
        }

        /**
         * @param macAddress The MAC address of the port.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable String macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param name The name of the port.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param networkId The ID of the network the port belongs to.
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable String networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param portId The ID of the port.
         * 
         * @return builder
         * 
         */
        public Builder portId(@Nullable String portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param projectId The owner of the port.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve port ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param securityGroupIds The list of port security group IDs to filter.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds The list of port security group IDs to filter.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param status The status of the port.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags The list of port tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of port tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public GetPortPlainArgs build() {
            return $;
        }
    }

}
