// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRouterPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRouterPlainArgs Empty = new GetRouterPlainArgs();

    /**
     * Administrative up/down status for the router (must be &#34;true&#34; or &#34;false&#34; if provided).
     * 
     */
    @Import(name="adminStateUp")
    private @Nullable Boolean adminStateUp;

    /**
     * @return Administrative up/down status for the router (must be &#34;true&#34; or &#34;false&#34; if provided).
     * 
     */
    public Optional<Boolean> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }

    /**
     * Human-readable description of the router.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Human-readable description of the router.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicates whether or not to get a distributed router.
     * 
     */
    @Import(name="distributed")
    private @Nullable Boolean distributed;

    /**
     * @return Indicates whether or not to get a distributed router.
     * 
     */
    public Optional<Boolean> distributed() {
        return Optional.ofNullable(this.distributed);
    }

    /**
     * The value that points out if the Source NAT is enabled on the router.
     * 
     */
    @Import(name="enableSnat")
    private @Nullable Boolean enableSnat;

    /**
     * @return The value that points out if the Source NAT is enabled on the router.
     * 
     */
    public Optional<Boolean> enableSnat() {
        return Optional.ofNullable(this.enableSnat);
    }

    /**
     * The name of the router.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the router.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve router ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve router ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The UUID of the router resource.
     * 
     */
    @Import(name="routerId")
    private @Nullable String routerId;

    /**
     * @return The UUID of the router resource.
     * 
     */
    public Optional<String> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    /**
     * The status of the router (ACTIVE/DOWN).
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the router (ACTIVE/DOWN).
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The list of router tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return The list of router tags to filter.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The owner of the router.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return The owner of the router.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetRouterPlainArgs() {}

    private GetRouterPlainArgs(GetRouterPlainArgs $) {
        this.adminStateUp = $.adminStateUp;
        this.description = $.description;
        this.distributed = $.distributed;
        this.enableSnat = $.enableSnat;
        this.name = $.name;
        this.region = $.region;
        this.routerId = $.routerId;
        this.status = $.status;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouterPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouterPlainArgs $;

        public Builder() {
            $ = new GetRouterPlainArgs();
        }

        public Builder(GetRouterPlainArgs defaults) {
            $ = new GetRouterPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminStateUp Administrative up/down status for the router (must be &#34;true&#34; or &#34;false&#34; if provided).
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(@Nullable Boolean adminStateUp) {
            $.adminStateUp = adminStateUp;
            return this;
        }

        /**
         * @param description Human-readable description of the router.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param distributed Indicates whether or not to get a distributed router.
         * 
         * @return builder
         * 
         */
        public Builder distributed(@Nullable Boolean distributed) {
            $.distributed = distributed;
            return this;
        }

        /**
         * @param enableSnat The value that points out if the Source NAT is enabled on the router.
         * 
         * @return builder
         * 
         */
        public Builder enableSnat(@Nullable Boolean enableSnat) {
            $.enableSnat = enableSnat;
            return this;
        }

        /**
         * @param name The name of the router.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve router ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param routerId The UUID of the router resource.
         * 
         * @return builder
         * 
         */
        public Builder routerId(@Nullable String routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param status The status of the router (ACTIVE/DOWN).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags The list of router tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of router tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId The owner of the router.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public GetRouterPlainArgs build() {
            return $;
        }
    }

}
