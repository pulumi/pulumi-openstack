// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetQosMinimumBandwidthRulePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetQosMinimumBandwidthRulePlainArgs Empty = new GetQosMinimumBandwidthRulePlainArgs();

    @Import(name="direction")
    private @Nullable String direction;

    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * The value of a minimum kbps bandwidth.
     * 
     */
    @Import(name="minKbps")
    private @Nullable Integer minKbps;

    /**
     * @return The value of a minimum kbps bandwidth.
     * 
     */
    public Optional<Integer> minKbps() {
        return Optional.ofNullable(this.minKbps);
    }

    /**
     * The QoS policy reference.
     * 
     */
    @Import(name="qosPolicyId", required=true)
    private String qosPolicyId;

    /**
     * @return The QoS policy reference.
     * 
     */
    public String qosPolicyId() {
        return this.qosPolicyId;
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron QoS minimum bandwidth rule. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron QoS minimum bandwidth rule. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    private GetQosMinimumBandwidthRulePlainArgs() {}

    private GetQosMinimumBandwidthRulePlainArgs(GetQosMinimumBandwidthRulePlainArgs $) {
        this.direction = $.direction;
        this.minKbps = $.minKbps;
        this.qosPolicyId = $.qosPolicyId;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetQosMinimumBandwidthRulePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetQosMinimumBandwidthRulePlainArgs $;

        public Builder() {
            $ = new GetQosMinimumBandwidthRulePlainArgs();
        }

        public Builder(GetQosMinimumBandwidthRulePlainArgs defaults) {
            $ = new GetQosMinimumBandwidthRulePlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder direction(@Nullable String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param minKbps The value of a minimum kbps bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder minKbps(@Nullable Integer minKbps) {
            $.minKbps = minKbps;
            return this;
        }

        /**
         * @param qosPolicyId The QoS policy reference.
         * 
         * @return builder
         * 
         */
        public Builder qosPolicyId(String qosPolicyId) {
            $.qosPolicyId = qosPolicyId;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a Neutron QoS minimum bandwidth rule. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        public GetQosMinimumBandwidthRulePlainArgs build() {
            if ($.qosPolicyId == null) {
                throw new MissingRequiredPropertyException("GetQosMinimumBandwidthRulePlainArgs", "qosPolicyId");
            }
            return $;
        }
    }

}
