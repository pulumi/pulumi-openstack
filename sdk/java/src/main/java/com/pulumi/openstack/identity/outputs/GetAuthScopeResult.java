// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.openstack.identity.outputs.GetAuthScopeRole;
import com.pulumi.openstack.identity.outputs.GetAuthScopeServiceCatalog;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthScopeResult {
    /**
     * @return The domain ID of the scope.
     * 
     */
    private String domainId;
    /**
     * @return The domain name of the scope.
     * 
     */
    private String domainName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the service.
     * 
     */
    private String name;
    /**
     * @return The domain ID of the project.
     * 
     */
    private String projectDomainId;
    /**
     * @return The domain name of the project.
     * 
     */
    private String projectDomainName;
    /**
     * @return The project ID of the scope.
     * 
     */
    private String projectId;
    /**
     * @return The project name of the scope.
     * 
     */
    private String projectName;
    /**
     * @return The region of the endpoint.
     * 
     */
    private String region;
    /**
     * @return A list of roles in the current scope. See reference below.
     * 
     */
    private List<GetAuthScopeRole> roles;
    /**
     * @return A list of service catalog entries returned with the token.
     * 
     */
    private List<GetAuthScopeServiceCatalog> serviceCatalogs;
    private @Nullable Boolean setTokenId;
    /**
     * @return The token ID of the scope.
     * 
     */
    private String tokenId;
    /**
     * @return The domain ID of the user.
     * 
     */
    private String userDomainId;
    /**
     * @return The domain name of the user.
     * 
     */
    private String userDomainName;
    /**
     * @return The user ID the of the scope.
     * 
     */
    private String userId;
    /**
     * @return The username of the scope.
     * 
     */
    private String userName;

    private GetAuthScopeResult() {}
    /**
     * @return The domain ID of the scope.
     * 
     */
    public String domainId() {
        return this.domainId;
    }
    /**
     * @return The domain name of the scope.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the service.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The domain ID of the project.
     * 
     */
    public String projectDomainId() {
        return this.projectDomainId;
    }
    /**
     * @return The domain name of the project.
     * 
     */
    public String projectDomainName() {
        return this.projectDomainName;
    }
    /**
     * @return The project ID of the scope.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The project name of the scope.
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return The region of the endpoint.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return A list of roles in the current scope. See reference below.
     * 
     */
    public List<GetAuthScopeRole> roles() {
        return this.roles;
    }
    /**
     * @return A list of service catalog entries returned with the token.
     * 
     */
    public List<GetAuthScopeServiceCatalog> serviceCatalogs() {
        return this.serviceCatalogs;
    }
    public Optional<Boolean> setTokenId() {
        return Optional.ofNullable(this.setTokenId);
    }
    /**
     * @return The token ID of the scope.
     * 
     */
    public String tokenId() {
        return this.tokenId;
    }
    /**
     * @return The domain ID of the user.
     * 
     */
    public String userDomainId() {
        return this.userDomainId;
    }
    /**
     * @return The domain name of the user.
     * 
     */
    public String userDomainName() {
        return this.userDomainName;
    }
    /**
     * @return The user ID the of the scope.
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return The username of the scope.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthScopeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domainId;
        private String domainName;
        private String id;
        private String name;
        private String projectDomainId;
        private String projectDomainName;
        private String projectId;
        private String projectName;
        private String region;
        private List<GetAuthScopeRole> roles;
        private List<GetAuthScopeServiceCatalog> serviceCatalogs;
        private @Nullable Boolean setTokenId;
        private String tokenId;
        private String userDomainId;
        private String userDomainName;
        private String userId;
        private String userName;
        public Builder() {}
        public Builder(GetAuthScopeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainId = defaults.domainId;
    	      this.domainName = defaults.domainName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.projectDomainId = defaults.projectDomainId;
    	      this.projectDomainName = defaults.projectDomainName;
    	      this.projectId = defaults.projectId;
    	      this.projectName = defaults.projectName;
    	      this.region = defaults.region;
    	      this.roles = defaults.roles;
    	      this.serviceCatalogs = defaults.serviceCatalogs;
    	      this.setTokenId = defaults.setTokenId;
    	      this.tokenId = defaults.tokenId;
    	      this.userDomainId = defaults.userDomainId;
    	      this.userDomainName = defaults.userDomainName;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder domainId(String domainId) {
            this.domainId = Objects.requireNonNull(domainId);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectDomainId(String projectDomainId) {
            this.projectDomainId = Objects.requireNonNull(projectDomainId);
            return this;
        }
        @CustomType.Setter
        public Builder projectDomainName(String projectDomainName) {
            this.projectDomainName = Objects.requireNonNull(projectDomainName);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            this.projectName = Objects.requireNonNull(projectName);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<GetAuthScopeRole> roles) {
            this.roles = Objects.requireNonNull(roles);
            return this;
        }
        public Builder roles(GetAuthScopeRole... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder serviceCatalogs(List<GetAuthScopeServiceCatalog> serviceCatalogs) {
            this.serviceCatalogs = Objects.requireNonNull(serviceCatalogs);
            return this;
        }
        public Builder serviceCatalogs(GetAuthScopeServiceCatalog... serviceCatalogs) {
            return serviceCatalogs(List.of(serviceCatalogs));
        }
        @CustomType.Setter
        public Builder setTokenId(@Nullable Boolean setTokenId) {
            this.setTokenId = setTokenId;
            return this;
        }
        @CustomType.Setter
        public Builder tokenId(String tokenId) {
            this.tokenId = Objects.requireNonNull(tokenId);
            return this;
        }
        @CustomType.Setter
        public Builder userDomainId(String userDomainId) {
            this.userDomainId = Objects.requireNonNull(userDomainId);
            return this;
        }
        @CustomType.Setter
        public Builder userDomainName(String userDomainName) {
            this.userDomainName = Objects.requireNonNull(userDomainName);
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }
        public GetAuthScopeResult build() {
            final var _resultValue = new GetAuthScopeResult();
            _resultValue.domainId = domainId;
            _resultValue.domainName = domainName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.projectDomainId = projectDomainId;
            _resultValue.projectDomainName = projectDomainName;
            _resultValue.projectId = projectId;
            _resultValue.projectName = projectName;
            _resultValue.region = region;
            _resultValue.roles = roles;
            _resultValue.serviceCatalogs = serviceCatalogs;
            _resultValue.setTokenId = setTokenId;
            _resultValue.tokenId = tokenId;
            _resultValue.userDomainId = userDomainId;
            _resultValue.userDomainName = userDomainName;
            _resultValue.userId = userId;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
