// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEndpointPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEndpointPlainArgs Empty = new GetEndpointPlainArgs();

    /**
     * The region the endpoint is assigned to. The
     * `region` and `endpointRegion` can be different.
     * 
     */
    @Import(name="endpointRegion")
    private @Nullable String endpointRegion;

    /**
     * @return The region the endpoint is assigned to. The
     * `region` and `endpointRegion` can be different.
     * 
     */
    public Optional<String> endpointRegion() {
        return Optional.ofNullable(this.endpointRegion);
    }

    /**
     * The endpoint interface. Valid values are `public`,
     * `internal`, and `admin`. Default value is `public`
     * 
     */
    @Import(name="interface")
    private @Nullable String interface_;

    /**
     * @return The endpoint interface. Valid values are `public`,
     * `internal`, and `admin`. Default value is `public`
     * 
     */
    public Optional<String> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * The name of the endpoint.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the endpoint.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The service id this endpoint belongs to.
     * 
     */
    @Import(name="serviceId")
    private @Nullable String serviceId;

    /**
     * @return The service id this endpoint belongs to.
     * 
     */
    public Optional<String> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * The service name of the endpoint.
     * 
     */
    @Import(name="serviceName")
    private @Nullable String serviceName;

    /**
     * @return The service name of the endpoint.
     * 
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The service type of the endpoint.
     * 
     */
    @Import(name="serviceType")
    private @Nullable String serviceType;

    /**
     * @return The service type of the endpoint.
     * 
     */
    public Optional<String> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    private GetEndpointPlainArgs() {}

    private GetEndpointPlainArgs(GetEndpointPlainArgs $) {
        this.endpointRegion = $.endpointRegion;
        this.interface_ = $.interface_;
        this.name = $.name;
        this.region = $.region;
        this.serviceId = $.serviceId;
        this.serviceName = $.serviceName;
        this.serviceType = $.serviceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEndpointPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEndpointPlainArgs $;

        public Builder() {
            $ = new GetEndpointPlainArgs();
        }

        public Builder(GetEndpointPlainArgs defaults) {
            $ = new GetEndpointPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointRegion The region the endpoint is assigned to. The
         * `region` and `endpointRegion` can be different.
         * 
         * @return builder
         * 
         */
        public Builder endpointRegion(@Nullable String endpointRegion) {
            $.endpointRegion = endpointRegion;
            return this;
        }

        /**
         * @param interface_ The endpoint interface. Valid values are `public`,
         * `internal`, and `admin`. Default value is `public`
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable String interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param name The name of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param region The region in which to obtain the V3 Keystone client.
         * If omitted, the `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param serviceId The service id this endpoint belongs to.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable String serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceName The service name of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable String serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceType The service type of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable String serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        public GetEndpointPlainArgs build() {
            return $;
        }
    }

}
