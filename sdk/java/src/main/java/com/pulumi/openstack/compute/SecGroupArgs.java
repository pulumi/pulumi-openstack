// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.openstack.compute.inputs.SecGroupRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecGroupArgs Empty = new SecGroupArgs();

    /**
     * A description for the security group. Changing this
     * updates the `description` of an existing security group.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A description for the security group. Changing this
     * updates the `description` of an existing security group.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * A unique name for the security group. Changing this
     * updates the `name` of an existing security group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the security group. Changing this
     * updates the `name` of an existing security group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to obtain the V2 Compute client.
     * A Compute client is needed to create a security group. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * security group.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Compute client.
     * A Compute client is needed to create a security group. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * security group.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A rule describing how the security group operates. The
     * rule object structure is documented below. Changing this updates the
     * security group rules. As shown in the example above, multiple rule blocks
     * may be used.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<SecGroupRuleArgs>> rules;

    /**
     * @return A rule describing how the security group operates. The
     * rule object structure is documented below. Changing this updates the
     * security group rules. As shown in the example above, multiple rule blocks
     * may be used.
     * 
     */
    public Optional<Output<List<SecGroupRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private SecGroupArgs() {}

    private SecGroupArgs(SecGroupArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.region = $.region;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecGroupArgs $;

        public Builder() {
            $ = new SecGroupArgs();
        }

        public Builder(SecGroupArgs defaults) {
            $ = new SecGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the security group. Changing this
         * updates the `description` of an existing security group.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the security group. Changing this
         * updates the `description` of an existing security group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name A unique name for the security group. Changing this
         * updates the `name` of an existing security group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the security group. Changing this
         * updates the `name` of an existing security group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * A Compute client is needed to create a security group. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * security group.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * A Compute client is needed to create a security group. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * security group.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param rules A rule describing how the security group operates. The
         * rule object structure is documented below. Changing this updates the
         * security group rules. As shown in the example above, multiple rule blocks
         * may be used.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<SecGroupRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A rule describing how the security group operates. The
         * rule object structure is documented below. Changing this updates the
         * security group rules. As shown in the example above, multiple rule blocks
         * may be used.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<SecGroupRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A rule describing how the security group operates. The
         * rule object structure is documented below. Changing this updates the
         * security group rules. As shown in the example above, multiple rule blocks
         * may be used.
         * 
         * @return builder
         * 
         */
        public Builder rules(SecGroupRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public SecGroupArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("SecGroupArgs", "description");
            }
            return $;
        }
    }

}
