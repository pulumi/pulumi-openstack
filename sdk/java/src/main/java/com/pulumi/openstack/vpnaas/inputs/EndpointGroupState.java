// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.vpnaas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointGroupState extends com.pulumi.resources.ResourceArgs {

    public static final EndpointGroupState Empty = new EndpointGroupState();

    /**
     * The human-readable description for the group.
     * Changing this updates the description of the existing group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The human-readable description for the group.
     * Changing this updates the description of the existing group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of endpoints of the same type, for the endpoint group. The values will depend on the type.
     * Changing this creates a new group.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<String>> endpoints;

    /**
     * @return List of endpoints of the same type, for the endpoint group. The values will depend on the type.
     * Changing this creates a new group.
     * 
     */
    public Optional<Output<List<String>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * The name of the group. Changing this updates the name of
     * the existing group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the group. Changing this updates the name of
     * the existing group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an endpoint group. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * group.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an endpoint group. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * group.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The owner of the group. Required if admin wants to
     * create an endpoint group for another project. Changing this creates a new group.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The owner of the group. Required if admin wants to
     * create an endpoint group for another project. Changing this creates a new group.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan.
     * Changing this creates a new group.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan.
     * Changing this creates a new group.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Map of additional options.
     * 
     */
    @Import(name="valueSpecs")
    private @Nullable Output<Map<String,String>> valueSpecs;

    /**
     * @return Map of additional options.
     * 
     */
    public Optional<Output<Map<String,String>>> valueSpecs() {
        return Optional.ofNullable(this.valueSpecs);
    }

    private EndpointGroupState() {}

    private EndpointGroupState(EndpointGroupState $) {
        this.description = $.description;
        this.endpoints = $.endpoints;
        this.name = $.name;
        this.region = $.region;
        this.tenantId = $.tenantId;
        this.type = $.type;
        this.valueSpecs = $.valueSpecs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointGroupState $;

        public Builder() {
            $ = new EndpointGroupState();
        }

        public Builder(EndpointGroupState defaults) {
            $ = new EndpointGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The human-readable description for the group.
         * Changing this updates the description of the existing group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The human-readable description for the group.
         * Changing this updates the description of the existing group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpoints List of endpoints of the same type, for the endpoint group. The values will depend on the type.
         * Changing this creates a new group.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<List<String>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints List of endpoints of the same type, for the endpoint group. The values will depend on the type.
         * Changing this creates a new group.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(List<String> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param endpoints List of endpoints of the same type, for the endpoint group. The values will depend on the type.
         * Changing this creates a new group.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(String... endpoints) {
            return endpoints(List.of(endpoints));
        }

        /**
         * @param name The name of the group. Changing this updates the name of
         * the existing group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the group. Changing this updates the name of
         * the existing group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an endpoint group. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * group.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an endpoint group. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * group.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tenantId The owner of the group. Required if admin wants to
         * create an endpoint group for another project. Changing this creates a new group.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The owner of the group. Required if admin wants to
         * create an endpoint group for another project. Changing this creates a new group.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param type The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan.
         * Changing this creates a new group.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan.
         * Changing this creates a new group.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param valueSpecs Map of additional options.
         * 
         * @return builder
         * 
         */
        public Builder valueSpecs(@Nullable Output<Map<String,String>> valueSpecs) {
            $.valueSpecs = valueSpecs;
            return this;
        }

        /**
         * @param valueSpecs Map of additional options.
         * 
         * @return builder
         * 
         */
        public Builder valueSpecs(Map<String,String> valueSpecs) {
            return valueSpecs(Output.of(valueSpecs));
        }

        public EndpointGroupState build() {
            return $;
        }
    }

}
