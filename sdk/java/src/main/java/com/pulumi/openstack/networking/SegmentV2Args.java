// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SegmentV2Args extends com.pulumi.resources.ResourceArgs {

    public static final SegmentV2Args Empty = new SegmentV2Args();

    /**
     * A description for the segment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the segment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A name for the segment.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the segment.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The UUID of the network this segment belongs to.
     * Changing this will create a new segment.
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return The UUID of the network this segment belongs to.
     * Changing this will create a new segment.
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The network type. Valid values depend on the
     * backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
     * this will create a new segment.
     * 
     */
    @Import(name="networkType", required=true)
    private Output<String> networkType;

    /**
     * @return The network type. Valid values depend on the
     * backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
     * this will create a new segment.
     * 
     */
    public Output<String> networkType() {
        return this.networkType;
    }

    /**
     * The name of the physical network. Changing this
     * will create a new segment.
     * 
     */
    @Import(name="physicalNetwork")
    private @Nullable Output<String> physicalNetwork;

    /**
     * @return The name of the physical network. Changing this
     * will create a new segment.
     * 
     */
    public Optional<Output<String>> physicalNetwork() {
        return Optional.ofNullable(this.physicalNetwork);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * segment.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create a Neutron network. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * segment.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A segmentation identifier. Changing is allowed
     * only for `vlan`.
     * 
     */
    @Import(name="segmentationId")
    private @Nullable Output<Integer> segmentationId;

    /**
     * @return A segmentation identifier. Changing is allowed
     * only for `vlan`.
     * 
     */
    public Optional<Output<Integer>> segmentationId() {
        return Optional.ofNullable(this.segmentationId);
    }

    private SegmentV2Args() {}

    private SegmentV2Args(SegmentV2Args $) {
        this.description = $.description;
        this.name = $.name;
        this.networkId = $.networkId;
        this.networkType = $.networkType;
        this.physicalNetwork = $.physicalNetwork;
        this.region = $.region;
        this.segmentationId = $.segmentationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SegmentV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SegmentV2Args $;

        public Builder() {
            $ = new SegmentV2Args();
        }

        public Builder(SegmentV2Args defaults) {
            $ = new SegmentV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the segment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the segment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name A name for the segment.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the segment.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId The UUID of the network this segment belongs to.
         * Changing this will create a new segment.
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId The UUID of the network this segment belongs to.
         * Changing this will create a new segment.
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param networkType The network type. Valid values depend on the
         * backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
         * this will create a new segment.
         * 
         * @return builder
         * 
         */
        public Builder networkType(Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The network type. Valid values depend on the
         * backend (e.g., `vlan`, `vxlan`, `flat`, `gre`, `geneve`, `local`). Changing
         * this will create a new segment.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param physicalNetwork The name of the physical network. Changing this
         * will create a new segment.
         * 
         * @return builder
         * 
         */
        public Builder physicalNetwork(@Nullable Output<String> physicalNetwork) {
            $.physicalNetwork = physicalNetwork;
            return this;
        }

        /**
         * @param physicalNetwork The name of the physical network. Changing this
         * will create a new segment.
         * 
         * @return builder
         * 
         */
        public Builder physicalNetwork(String physicalNetwork) {
            return physicalNetwork(Output.of(physicalNetwork));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a Neutron network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * segment.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create a Neutron network. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * segment.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param segmentationId A segmentation identifier. Changing is allowed
         * only for `vlan`.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(@Nullable Output<Integer> segmentationId) {
            $.segmentationId = segmentationId;
            return this;
        }

        /**
         * @param segmentationId A segmentation identifier. Changing is allowed
         * only for `vlan`.
         * 
         * @return builder
         * 
         */
        public Builder segmentationId(Integer segmentationId) {
            return segmentationId(Output.of(segmentationId));
        }

        public SegmentV2Args build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("SegmentV2Args", "networkId");
            }
            if ($.networkType == null) {
                throw new MissingRequiredPropertyException("SegmentV2Args", "networkType");
            }
            return $;
        }
    }

}
