// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLimitsV2Result {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The number of allowed metadata items for each image. Starting from version 2.39 this field is dropped from ‘os-limits’ response, because ‘image-metadata’ proxy API was deprecated. Available until version 2.38.
     * 
     */
    private Integer maxImageMeta;
    /**
     * @return The number of allowed injected files for the tenant. Available until version 2.56.
     * 
     */
    private Integer maxPersonality;
    /**
     * @return The number of allowed bytes of content for each injected file. Available until version 2.56.
     * 
     */
    private Integer maxPersonalitySize;
    /**
     * @return The number of allowed rules for each security group. Available until version 2.35.
     * 
     */
    private Integer maxSecurityGroupRules;
    /**
     * @return The number of allowed security groups for the tenant. Available until version 2.35.
     * 
     */
    private Integer maxSecurityGroups;
    /**
     * @return The number of allowed members for each server group.
     * 
     */
    private Integer maxServerGroupMembers;
    /**
     * @return The number of allowed server groups for the tenant.
     * 
     */
    private Integer maxServerGroups;
    /**
     * @return The number of allowed server groups for the tenant.
     * 
     */
    private Integer maxServerMeta;
    /**
     * @return The number of allowed server cores for the tenant.
     * 
     */
    private Integer maxTotalCores;
    /**
     * @return The number of allowed floating IP addresses for each tenant. Available until version 2.35.
     * 
     */
    private Integer maxTotalFloatingIps;
    /**
     * @return The number of allowed servers for the tenant.
     * 
     */
    private Integer maxTotalInstances;
    /**
     * @return The number of allowed key pairs for the user.
     * 
     */
    private Integer maxTotalKeypairs;
    /**
     * @return The number of allowed floating IP addresses for the tenant. Available until version 2.35.
     * 
     */
    private Integer maxTotalRamSize;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String projectId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String region;
    /**
     * @return The number of used server cores in the tenant.
     * 
     */
    private Integer totalCoresUsed;
    /**
     * @return The number of used floating IP addresses in the tenant.
     * 
     */
    private Integer totalFloatingIpsUsed;
    /**
     * @return The number of used server cores in the tenant.
     * 
     */
    private Integer totalInstancesUsed;
    /**
     * @return The amount of used server RAM in the tenant.
     * 
     */
    private Integer totalRamUsed;
    /**
     * @return The number of used security groups in the tenant. Available until version 2.35.
     * 
     */
    private Integer totalSecurityGroupsUsed;
    /**
     * @return The number of used server groups in each tenant.
     * 
     */
    private Integer totalServerGroupsUsed;

    private GetLimitsV2Result() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number of allowed metadata items for each image. Starting from version 2.39 this field is dropped from ‘os-limits’ response, because ‘image-metadata’ proxy API was deprecated. Available until version 2.38.
     * 
     */
    public Integer maxImageMeta() {
        return this.maxImageMeta;
    }
    /**
     * @return The number of allowed injected files for the tenant. Available until version 2.56.
     * 
     */
    public Integer maxPersonality() {
        return this.maxPersonality;
    }
    /**
     * @return The number of allowed bytes of content for each injected file. Available until version 2.56.
     * 
     */
    public Integer maxPersonalitySize() {
        return this.maxPersonalitySize;
    }
    /**
     * @return The number of allowed rules for each security group. Available until version 2.35.
     * 
     */
    public Integer maxSecurityGroupRules() {
        return this.maxSecurityGroupRules;
    }
    /**
     * @return The number of allowed security groups for the tenant. Available until version 2.35.
     * 
     */
    public Integer maxSecurityGroups() {
        return this.maxSecurityGroups;
    }
    /**
     * @return The number of allowed members for each server group.
     * 
     */
    public Integer maxServerGroupMembers() {
        return this.maxServerGroupMembers;
    }
    /**
     * @return The number of allowed server groups for the tenant.
     * 
     */
    public Integer maxServerGroups() {
        return this.maxServerGroups;
    }
    /**
     * @return The number of allowed server groups for the tenant.
     * 
     */
    public Integer maxServerMeta() {
        return this.maxServerMeta;
    }
    /**
     * @return The number of allowed server cores for the tenant.
     * 
     */
    public Integer maxTotalCores() {
        return this.maxTotalCores;
    }
    /**
     * @return The number of allowed floating IP addresses for each tenant. Available until version 2.35.
     * 
     */
    public Integer maxTotalFloatingIps() {
        return this.maxTotalFloatingIps;
    }
    /**
     * @return The number of allowed servers for the tenant.
     * 
     */
    public Integer maxTotalInstances() {
        return this.maxTotalInstances;
    }
    /**
     * @return The number of allowed key pairs for the user.
     * 
     */
    public Integer maxTotalKeypairs() {
        return this.maxTotalKeypairs;
    }
    /**
     * @return The number of allowed floating IP addresses for the tenant. Available until version 2.35.
     * 
     */
    public Integer maxTotalRamSize() {
        return this.maxTotalRamSize;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The number of used server cores in the tenant.
     * 
     */
    public Integer totalCoresUsed() {
        return this.totalCoresUsed;
    }
    /**
     * @return The number of used floating IP addresses in the tenant.
     * 
     */
    public Integer totalFloatingIpsUsed() {
        return this.totalFloatingIpsUsed;
    }
    /**
     * @return The number of used server cores in the tenant.
     * 
     */
    public Integer totalInstancesUsed() {
        return this.totalInstancesUsed;
    }
    /**
     * @return The amount of used server RAM in the tenant.
     * 
     */
    public Integer totalRamUsed() {
        return this.totalRamUsed;
    }
    /**
     * @return The number of used security groups in the tenant. Available until version 2.35.
     * 
     */
    public Integer totalSecurityGroupsUsed() {
        return this.totalSecurityGroupsUsed;
    }
    /**
     * @return The number of used server groups in each tenant.
     * 
     */
    public Integer totalServerGroupsUsed() {
        return this.totalServerGroupsUsed;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLimitsV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private Integer maxImageMeta;
        private Integer maxPersonality;
        private Integer maxPersonalitySize;
        private Integer maxSecurityGroupRules;
        private Integer maxSecurityGroups;
        private Integer maxServerGroupMembers;
        private Integer maxServerGroups;
        private Integer maxServerMeta;
        private Integer maxTotalCores;
        private Integer maxTotalFloatingIps;
        private Integer maxTotalInstances;
        private Integer maxTotalKeypairs;
        private Integer maxTotalRamSize;
        private String projectId;
        private String region;
        private Integer totalCoresUsed;
        private Integer totalFloatingIpsUsed;
        private Integer totalInstancesUsed;
        private Integer totalRamUsed;
        private Integer totalSecurityGroupsUsed;
        private Integer totalServerGroupsUsed;
        public Builder() {}
        public Builder(GetLimitsV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.maxImageMeta = defaults.maxImageMeta;
    	      this.maxPersonality = defaults.maxPersonality;
    	      this.maxPersonalitySize = defaults.maxPersonalitySize;
    	      this.maxSecurityGroupRules = defaults.maxSecurityGroupRules;
    	      this.maxSecurityGroups = defaults.maxSecurityGroups;
    	      this.maxServerGroupMembers = defaults.maxServerGroupMembers;
    	      this.maxServerGroups = defaults.maxServerGroups;
    	      this.maxServerMeta = defaults.maxServerMeta;
    	      this.maxTotalCores = defaults.maxTotalCores;
    	      this.maxTotalFloatingIps = defaults.maxTotalFloatingIps;
    	      this.maxTotalInstances = defaults.maxTotalInstances;
    	      this.maxTotalKeypairs = defaults.maxTotalKeypairs;
    	      this.maxTotalRamSize = defaults.maxTotalRamSize;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.totalCoresUsed = defaults.totalCoresUsed;
    	      this.totalFloatingIpsUsed = defaults.totalFloatingIpsUsed;
    	      this.totalInstancesUsed = defaults.totalInstancesUsed;
    	      this.totalRamUsed = defaults.totalRamUsed;
    	      this.totalSecurityGroupsUsed = defaults.totalSecurityGroupsUsed;
    	      this.totalServerGroupsUsed = defaults.totalServerGroupsUsed;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder maxImageMeta(Integer maxImageMeta) {
            this.maxImageMeta = Objects.requireNonNull(maxImageMeta);
            return this;
        }
        @CustomType.Setter
        public Builder maxPersonality(Integer maxPersonality) {
            this.maxPersonality = Objects.requireNonNull(maxPersonality);
            return this;
        }
        @CustomType.Setter
        public Builder maxPersonalitySize(Integer maxPersonalitySize) {
            this.maxPersonalitySize = Objects.requireNonNull(maxPersonalitySize);
            return this;
        }
        @CustomType.Setter
        public Builder maxSecurityGroupRules(Integer maxSecurityGroupRules) {
            this.maxSecurityGroupRules = Objects.requireNonNull(maxSecurityGroupRules);
            return this;
        }
        @CustomType.Setter
        public Builder maxSecurityGroups(Integer maxSecurityGroups) {
            this.maxSecurityGroups = Objects.requireNonNull(maxSecurityGroups);
            return this;
        }
        @CustomType.Setter
        public Builder maxServerGroupMembers(Integer maxServerGroupMembers) {
            this.maxServerGroupMembers = Objects.requireNonNull(maxServerGroupMembers);
            return this;
        }
        @CustomType.Setter
        public Builder maxServerGroups(Integer maxServerGroups) {
            this.maxServerGroups = Objects.requireNonNull(maxServerGroups);
            return this;
        }
        @CustomType.Setter
        public Builder maxServerMeta(Integer maxServerMeta) {
            this.maxServerMeta = Objects.requireNonNull(maxServerMeta);
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalCores(Integer maxTotalCores) {
            this.maxTotalCores = Objects.requireNonNull(maxTotalCores);
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalFloatingIps(Integer maxTotalFloatingIps) {
            this.maxTotalFloatingIps = Objects.requireNonNull(maxTotalFloatingIps);
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalInstances(Integer maxTotalInstances) {
            this.maxTotalInstances = Objects.requireNonNull(maxTotalInstances);
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalKeypairs(Integer maxTotalKeypairs) {
            this.maxTotalKeypairs = Objects.requireNonNull(maxTotalKeypairs);
            return this;
        }
        @CustomType.Setter
        public Builder maxTotalRamSize(Integer maxTotalRamSize) {
            this.maxTotalRamSize = Objects.requireNonNull(maxTotalRamSize);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder totalCoresUsed(Integer totalCoresUsed) {
            this.totalCoresUsed = Objects.requireNonNull(totalCoresUsed);
            return this;
        }
        @CustomType.Setter
        public Builder totalFloatingIpsUsed(Integer totalFloatingIpsUsed) {
            this.totalFloatingIpsUsed = Objects.requireNonNull(totalFloatingIpsUsed);
            return this;
        }
        @CustomType.Setter
        public Builder totalInstancesUsed(Integer totalInstancesUsed) {
            this.totalInstancesUsed = Objects.requireNonNull(totalInstancesUsed);
            return this;
        }
        @CustomType.Setter
        public Builder totalRamUsed(Integer totalRamUsed) {
            this.totalRamUsed = Objects.requireNonNull(totalRamUsed);
            return this;
        }
        @CustomType.Setter
        public Builder totalSecurityGroupsUsed(Integer totalSecurityGroupsUsed) {
            this.totalSecurityGroupsUsed = Objects.requireNonNull(totalSecurityGroupsUsed);
            return this;
        }
        @CustomType.Setter
        public Builder totalServerGroupsUsed(Integer totalServerGroupsUsed) {
            this.totalServerGroupsUsed = Objects.requireNonNull(totalServerGroupsUsed);
            return this;
        }
        public GetLimitsV2Result build() {
            final var _resultValue = new GetLimitsV2Result();
            _resultValue.id = id;
            _resultValue.maxImageMeta = maxImageMeta;
            _resultValue.maxPersonality = maxPersonality;
            _resultValue.maxPersonalitySize = maxPersonalitySize;
            _resultValue.maxSecurityGroupRules = maxSecurityGroupRules;
            _resultValue.maxSecurityGroups = maxSecurityGroups;
            _resultValue.maxServerGroupMembers = maxServerGroupMembers;
            _resultValue.maxServerGroups = maxServerGroups;
            _resultValue.maxServerMeta = maxServerMeta;
            _resultValue.maxTotalCores = maxTotalCores;
            _resultValue.maxTotalFloatingIps = maxTotalFloatingIps;
            _resultValue.maxTotalInstances = maxTotalInstances;
            _resultValue.maxTotalKeypairs = maxTotalKeypairs;
            _resultValue.maxTotalRamSize = maxTotalRamSize;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.totalCoresUsed = totalCoresUsed;
            _resultValue.totalFloatingIpsUsed = totalFloatingIpsUsed;
            _resultValue.totalInstancesUsed = totalInstancesUsed;
            _resultValue.totalRamUsed = totalRamUsed;
            _resultValue.totalSecurityGroupsUsed = totalSecurityGroupsUsed;
            _resultValue.totalServerGroupsUsed = totalServerGroupsUsed;
            return _resultValue;
        }
    }
}
