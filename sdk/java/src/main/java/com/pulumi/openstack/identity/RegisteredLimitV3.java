// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.openstack.Utilities;
import com.pulumi.openstack.identity.RegisteredLimitV3Args;
import com.pulumi.openstack.identity.inputs.RegisteredLimitV3State;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a V3 Registered Limit resource within OpenStack Keystone.
 * 
 * &gt; **Note:** You _must_ have admin privileges in your OpenStack cloud to use
 * this resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.openstack.identity.IdentityFunctions;
 * import com.pulumi.openstack.identity.inputs.GetServiceArgs;
 * import com.pulumi.openstack.identity.RegisteredLimitV3;
 * import com.pulumi.openstack.identity.RegisteredLimitV3Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var glance = IdentityFunctions.getService(GetServiceArgs.builder()
 *             .name("glance")
 *             .build());
 * 
 *         var limit1 = new RegisteredLimitV3("limit1", RegisteredLimitV3Args.builder()
 *             .serviceId(glance.id())
 *             .resourceName("image_count_total")
 *             .defaultLimit(10)
 *             .description("foo")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Registered Limits can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import openstack:identity/registeredLimitV3:RegisteredLimitV3 limit_1 89c60255-9bd6-460c-822a-e2b959ede9d2
 * ```
 * 
 */
@ResourceType(type="openstack:identity/registeredLimitV3:RegisteredLimitV3")
public class RegisteredLimitV3 extends com.pulumi.resources.CustomResource {
    /**
     * Integer for the actual limit.
     * 
     */
    @Export(name="defaultLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> defaultLimit;

    /**
     * @return Integer for the actual limit.
     * 
     */
    public Output<Integer> defaultLimit() {
        return this.defaultLimit;
    }
    /**
     * Description of the limit
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the limit
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new registered limit.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region in which to obtain the V3 Keystone client.
     * If omitted, the `region` argument of the provider is used. Changing this
     * creates a new registered limit.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The resource that the limit applies to. On
     * updates, either service_id, resource_name or region_id must be different than
     * existing value otherwise it will raise 409.
     * 
     */
    @Export(name="resourceName", refs={String.class}, tree="[0]")
    private Output<String> resourceName;

    /**
     * @return The resource that the limit applies to. On
     * updates, either service_id, resource_name or region_id must be different than
     * existing value otherwise it will raise 409.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }
    /**
     * The service the limit applies to. On updates,
     * either service_id, resource_name or region_id must be different than existing
     * value otherwise it will raise 409.
     * 
     */
    @Export(name="serviceId", refs={String.class}, tree="[0]")
    private Output<String> serviceId;

    /**
     * @return The service the limit applies to. On updates,
     * either service_id, resource_name or region_id must be different than existing
     * value otherwise it will raise 409.
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegisteredLimitV3(java.lang.String name) {
        this(name, RegisteredLimitV3Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegisteredLimitV3(java.lang.String name, RegisteredLimitV3Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegisteredLimitV3(java.lang.String name, RegisteredLimitV3Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:identity/registeredLimitV3:RegisteredLimitV3", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RegisteredLimitV3(java.lang.String name, Output<java.lang.String> id, @Nullable RegisteredLimitV3State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:identity/registeredLimitV3:RegisteredLimitV3", name, state, makeResourceOptions(options, id), false);
    }

    private static RegisteredLimitV3Args makeArgs(RegisteredLimitV3Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RegisteredLimitV3Args.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegisteredLimitV3 get(java.lang.String name, Output<java.lang.String> id, @Nullable RegisteredLimitV3State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegisteredLimitV3(name, id, state, options);
    }
}
