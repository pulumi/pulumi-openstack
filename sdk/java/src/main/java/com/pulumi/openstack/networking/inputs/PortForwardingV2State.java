// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortForwardingV2State extends com.pulumi.resources.ResourceArgs {

    public static final PortForwardingV2State Empty = new PortForwardingV2State();

    /**
     * A text describing the port forwarding. Changing this
     * updates the `description` of an existing port forwarding.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A text describing the port forwarding. Changing this
     * updates the `description` of an existing port forwarding.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The TCP/UDP/other protocol port number of the port forwarding. Changing this
     * updates the `externalPort` of an existing port forwarding.
     * 
     */
    @Import(name="externalPort")
    private @Nullable Output<Integer> externalPort;

    /**
     * @return The TCP/UDP/other protocol port number of the port forwarding. Changing this
     * updates the `externalPort` of an existing port forwarding.
     * 
     */
    public Optional<Output<Integer>> externalPort() {
        return Optional.ofNullable(this.externalPort);
    }

    /**
     * The ID of the Neutron floating IP address. Changing this creates a new port forwarding.
     * 
     */
    @Import(name="floatingipId")
    private @Nullable Output<String> floatingipId;

    /**
     * @return The ID of the Neutron floating IP address. Changing this creates a new port forwarding.
     * 
     */
    public Optional<Output<String>> floatingipId() {
        return Optional.ofNullable(this.floatingipId);
    }

    /**
     * The fixed IPv4 address of the Neutron port associated with the port forwarding.
     * Changing this updates the `internalIpAddress` of an existing port forwarding.
     * 
     */
    @Import(name="internalIpAddress")
    private @Nullable Output<String> internalIpAddress;

    /**
     * @return The fixed IPv4 address of the Neutron port associated with the port forwarding.
     * Changing this updates the `internalIpAddress` of an existing port forwarding.
     * 
     */
    public Optional<Output<String>> internalIpAddress() {
        return Optional.ofNullable(this.internalIpAddress);
    }

    /**
     * The TCP/UDP/other protocol port number of the Neutron port fixed IP address associated to the
     * port forwarding. Changing this updates the `internalPort` of an existing port forwarding.
     * 
     */
    @Import(name="internalPort")
    private @Nullable Output<Integer> internalPort;

    /**
     * @return The TCP/UDP/other protocol port number of the Neutron port fixed IP address associated to the
     * port forwarding. Changing this updates the `internalPort` of an existing port forwarding.
     * 
     */
    public Optional<Output<Integer>> internalPort() {
        return Optional.ofNullable(this.internalPort);
    }

    /**
     * The ID of the Neutron port associated with the port forwarding. Changing
     * this updates the `internalPortId` of an existing port forwarding.
     * 
     */
    @Import(name="internalPortId")
    private @Nullable Output<String> internalPortId;

    /**
     * @return The ID of the Neutron port associated with the port forwarding. Changing
     * this updates the `internalPortId` of an existing port forwarding.
     * 
     */
    public Optional<Output<String>> internalPortId() {
        return Optional.ofNullable(this.internalPortId);
    }

    /**
     * The IP protocol used in the port forwarding. Changing this updates the `protocol`
     * of an existing port forwarding.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The IP protocol used in the port forwarding. Changing this updates the `protocol`
     * of an existing port forwarding.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The region in which to obtain the V2 networking client.
     * A networking client is needed to create a port forwarding. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * port forwarding.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 networking client.
     * A networking client is needed to create a port forwarding. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * port forwarding.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private PortForwardingV2State() {}

    private PortForwardingV2State(PortForwardingV2State $) {
        this.description = $.description;
        this.externalPort = $.externalPort;
        this.floatingipId = $.floatingipId;
        this.internalIpAddress = $.internalIpAddress;
        this.internalPort = $.internalPort;
        this.internalPortId = $.internalPortId;
        this.protocol = $.protocol;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortForwardingV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortForwardingV2State $;

        public Builder() {
            $ = new PortForwardingV2State();
        }

        public Builder(PortForwardingV2State defaults) {
            $ = new PortForwardingV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A text describing the port forwarding. Changing this
         * updates the `description` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A text describing the port forwarding. Changing this
         * updates the `description` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalPort The TCP/UDP/other protocol port number of the port forwarding. Changing this
         * updates the `externalPort` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder externalPort(@Nullable Output<Integer> externalPort) {
            $.externalPort = externalPort;
            return this;
        }

        /**
         * @param externalPort The TCP/UDP/other protocol port number of the port forwarding. Changing this
         * updates the `externalPort` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder externalPort(Integer externalPort) {
            return externalPort(Output.of(externalPort));
        }

        /**
         * @param floatingipId The ID of the Neutron floating IP address. Changing this creates a new port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder floatingipId(@Nullable Output<String> floatingipId) {
            $.floatingipId = floatingipId;
            return this;
        }

        /**
         * @param floatingipId The ID of the Neutron floating IP address. Changing this creates a new port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder floatingipId(String floatingipId) {
            return floatingipId(Output.of(floatingipId));
        }

        /**
         * @param internalIpAddress The fixed IPv4 address of the Neutron port associated with the port forwarding.
         * Changing this updates the `internalIpAddress` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder internalIpAddress(@Nullable Output<String> internalIpAddress) {
            $.internalIpAddress = internalIpAddress;
            return this;
        }

        /**
         * @param internalIpAddress The fixed IPv4 address of the Neutron port associated with the port forwarding.
         * Changing this updates the `internalIpAddress` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder internalIpAddress(String internalIpAddress) {
            return internalIpAddress(Output.of(internalIpAddress));
        }

        /**
         * @param internalPort The TCP/UDP/other protocol port number of the Neutron port fixed IP address associated to the
         * port forwarding. Changing this updates the `internalPort` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder internalPort(@Nullable Output<Integer> internalPort) {
            $.internalPort = internalPort;
            return this;
        }

        /**
         * @param internalPort The TCP/UDP/other protocol port number of the Neutron port fixed IP address associated to the
         * port forwarding. Changing this updates the `internalPort` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder internalPort(Integer internalPort) {
            return internalPort(Output.of(internalPort));
        }

        /**
         * @param internalPortId The ID of the Neutron port associated with the port forwarding. Changing
         * this updates the `internalPortId` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder internalPortId(@Nullable Output<String> internalPortId) {
            $.internalPortId = internalPortId;
            return this;
        }

        /**
         * @param internalPortId The ID of the Neutron port associated with the port forwarding. Changing
         * this updates the `internalPortId` of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder internalPortId(String internalPortId) {
            return internalPortId(Output.of(internalPortId));
        }

        /**
         * @param protocol The IP protocol used in the port forwarding. Changing this updates the `protocol`
         * of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The IP protocol used in the port forwarding. Changing this updates the `protocol`
         * of an existing port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * A networking client is needed to create a port forwarding. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 networking client.
         * A networking client is needed to create a port forwarding. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * port forwarding.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public PortForwardingV2State build() {
            return $;
        }
    }

}
