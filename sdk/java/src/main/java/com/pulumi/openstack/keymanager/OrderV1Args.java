// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.keymanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.openstack.keymanager.inputs.OrderV1MetaArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrderV1Args extends com.pulumi.resources.ResourceArgs {

    public static final OrderV1Args Empty = new OrderV1Args();

    /**
     * Dictionary containing the order metadata used to generate the order. The structure is described below.
     * 
     */
    @Import(name="meta", required=true)
    private Output<OrderV1MetaArgs> meta;

    /**
     * @return Dictionary containing the order metadata used to generate the order. The structure is described below.
     * 
     */
    public Output<OrderV1MetaArgs> meta() {
        return this.meta;
    }

    /**
     * The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a order. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 order.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V1 KeyManager client.
     * A KeyManager client is needed to create a order. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * V1 order.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The type of key to be generated. Must be one of `asymmetric`, `key`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of key to be generated. Must be one of `asymmetric`, `key`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private OrderV1Args() {}

    private OrderV1Args(OrderV1Args $) {
        this.meta = $.meta;
        this.region = $.region;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrderV1Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrderV1Args $;

        public Builder() {
            $ = new OrderV1Args();
        }

        public Builder(OrderV1Args defaults) {
            $ = new OrderV1Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param meta Dictionary containing the order metadata used to generate the order. The structure is described below.
         * 
         * @return builder
         * 
         */
        public Builder meta(Output<OrderV1MetaArgs> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Dictionary containing the order metadata used to generate the order. The structure is described below.
         * 
         * @return builder
         * 
         */
        public Builder meta(OrderV1MetaArgs meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param region The region in which to obtain the V1 KeyManager client.
         * A KeyManager client is needed to create a order. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * V1 order.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V1 KeyManager client.
         * A KeyManager client is needed to create a order. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * V1 order.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param type The type of key to be generated. Must be one of `asymmetric`, `key`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of key to be generated. Must be one of `asymmetric`, `key`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OrderV1Args build() {
            if ($.meta == null) {
                throw new MissingRequiredPropertyException("OrderV1Args", "meta");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("OrderV1Args", "type");
            }
            return $;
        }
    }

}
