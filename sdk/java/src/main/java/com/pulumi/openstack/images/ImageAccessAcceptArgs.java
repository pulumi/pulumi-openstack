// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.images;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageAccessAcceptArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageAccessAcceptArgs Empty = new ImageAccessAcceptArgs();

    /**
     * The proposed image ID.
     * 
     */
    @Import(name="imageId", required=true)
    private Output<String> imageId;

    /**
     * @return The proposed image ID.
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }

    /**
     * The member ID, e.g. the target project ID. Optional
     * for admin accounts. Defaults to the current scope project ID.
     * 
     */
    @Import(name="memberId")
    private @Nullable Output<String> memberId;

    /**
     * @return The member ID, e.g. the target project ID. Optional
     * for admin accounts. Defaults to the current scope project ID.
     * 
     */
    public Optional<Output<String>> memberId() {
        return Optional.ofNullable(this.memberId);
    }

    /**
     * The region in which to obtain the V2 Glance client.
     * A Glance client is needed to manage Image memberships. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * membership.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Glance client.
     * A Glance client is needed to manage Image memberships. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * membership.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The membership proposal status. Can either be
     * `accepted`, `rejected` or `pending`.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return The membership proposal status. Can either be
     * `accepted`, `rejected` or `pending`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    private ImageAccessAcceptArgs() {}

    private ImageAccessAcceptArgs(ImageAccessAcceptArgs $) {
        this.imageId = $.imageId;
        this.memberId = $.memberId;
        this.region = $.region;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageAccessAcceptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageAccessAcceptArgs $;

        public Builder() {
            $ = new ImageAccessAcceptArgs();
        }

        public Builder(ImageAccessAcceptArgs defaults) {
            $ = new ImageAccessAcceptArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageId The proposed image ID.
         * 
         * @return builder
         * 
         */
        public Builder imageId(Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The proposed image ID.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param memberId The member ID, e.g. the target project ID. Optional
         * for admin accounts. Defaults to the current scope project ID.
         * 
         * @return builder
         * 
         */
        public Builder memberId(@Nullable Output<String> memberId) {
            $.memberId = memberId;
            return this;
        }

        /**
         * @param memberId The member ID, e.g. the target project ID. Optional
         * for admin accounts. Defaults to the current scope project ID.
         * 
         * @return builder
         * 
         */
        public Builder memberId(String memberId) {
            return memberId(Output.of(memberId));
        }

        /**
         * @param region The region in which to obtain the V2 Glance client.
         * A Glance client is needed to manage Image memberships. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * membership.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Glance client.
         * A Glance client is needed to manage Image memberships. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * membership.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param status The membership proposal status. Can either be
         * `accepted`, `rejected` or `pending`.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The membership proposal status. Can either be
         * `accepted`, `rejected` or `pending`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ImageAccessAcceptArgs build() {
            if ($.imageId == null) {
                throw new MissingRequiredPropertyException("ImageAccessAcceptArgs", "imageId");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("ImageAccessAcceptArgs", "status");
            }
            return $;
        }
    }

}
