// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.loadbalancer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlavorV2Args extends com.pulumi.resources.ResourceArgs {

    public static final FlavorV2Args Empty = new FlavorV2Args();

    /**
     * The description of the flavor. Changing this
     * updates the existing flavor.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the flavor. Changing this
     * updates the existing flavor.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the flavor is enabled or not. Defaults to `true`.
     * Changing this updates the existing flavor.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the flavor is enabled or not. Defaults to `true`.
     * Changing this updates the existing flavor.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The flavorProfileId that the flavor
     * will use. Changing this creates a new flavor.
     * 
     */
    @Import(name="flavorProfileId", required=true)
    private Output<String> flavorProfileId;

    /**
     * @return The flavorProfileId that the flavor
     * will use. Changing this creates a new flavor.
     * 
     */
    public Output<String> flavorProfileId() {
        return this.flavorProfileId;
    }

    /**
     * Name of the flavor. Changing this updates the existing
     * flavor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the flavor. Changing this updates the existing
     * flavor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB flavor.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an LB member. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * LB flavor.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private FlavorV2Args() {}

    private FlavorV2Args(FlavorV2Args $) {
        this.description = $.description;
        this.enabled = $.enabled;
        this.flavorProfileId = $.flavorProfileId;
        this.name = $.name;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlavorV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlavorV2Args $;

        public Builder() {
            $ = new FlavorV2Args();
        }

        public Builder(FlavorV2Args defaults) {
            $ = new FlavorV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the flavor. Changing this
         * updates the existing flavor.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the flavor. Changing this
         * updates the existing flavor.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the flavor is enabled or not. Defaults to `true`.
         * Changing this updates the existing flavor.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the flavor is enabled or not. Defaults to `true`.
         * Changing this updates the existing flavor.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param flavorProfileId The flavorProfileId that the flavor
         * will use. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder flavorProfileId(Output<String> flavorProfileId) {
            $.flavorProfileId = flavorProfileId;
            return this;
        }

        /**
         * @param flavorProfileId The flavorProfileId that the flavor
         * will use. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder flavorProfileId(String flavorProfileId) {
            return flavorProfileId(Output.of(flavorProfileId));
        }

        /**
         * @param name Name of the flavor. Changing this updates the existing
         * flavor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the flavor. Changing this updates the existing
         * flavor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an LB member. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * LB flavor.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an LB member. If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * LB flavor.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public FlavorV2Args build() {
            if ($.flavorProfileId == null) {
                throw new MissingRequiredPropertyException("FlavorV2Args", "flavorProfileId");
            }
            return $;
        }
    }

}
