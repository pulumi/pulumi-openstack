// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.objectstorage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountV1State extends com.pulumi.resources.ResourceArgs {

    public static final AccountV1State Empty = new AccountV1State();

    /**
     * The number of bytes used by the account.
     * 
     */
    @Import(name="bytesUsed")
    private @Nullable Output<Integer> bytesUsed;

    /**
     * @return The number of bytes used by the account.
     * 
     */
    public Optional<Output<Integer>> bytesUsed() {
        return Optional.ofNullable(this.bytesUsed);
    }

    /**
     * The number of containers in the account.
     * 
     */
    @Import(name="containerCount")
    private @Nullable Output<Integer> containerCount;

    /**
     * @return The number of containers in the account.
     * 
     */
    public Optional<Output<Integer>> containerCount() {
        return Optional.ofNullable(this.containerCount);
    }

    /**
     * A map of headers returned for the account.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<Map<String,String>> headers;

    /**
     * @return A map of headers returned for the account.
     * 
     */
    public Optional<Output<Map<String,String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * A map of custom key/value pairs to associate with the
     * account metadata. Changing the `Quota-Bytes` key value is allowed to be
     * updated only by the cloud administrator.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return A map of custom key/value pairs to associate with the
     * account metadata. Changing the `Quota-Bytes` key value is allowed to be
     * updated only by the cloud administrator.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The number of objects in the account.
     * 
     */
    @Import(name="objectCount")
    private @Nullable Output<Integer> objectCount;

    /**
     * @return The number of objects in the account.
     * 
     */
    public Optional<Output<Integer>> objectCount() {
        return Optional.ofNullable(this.objectCount);
    }

    /**
     * The project ID of the corresponding account. If
     * omitted, the token&#39;s project ID is used. Changing this creates a new account.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID of the corresponding account. If
     * omitted, the token&#39;s project ID is used. Changing this creates a new account.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The number of bytes allowed for the account.
     * 
     */
    @Import(name="quotaBytes")
    private @Nullable Output<Integer> quotaBytes;

    /**
     * @return The number of bytes allowed for the account.
     * 
     */
    public Optional<Output<Integer>> quotaBytes() {
        return Optional.ofNullable(this.quotaBytes);
    }

    /**
     * The region in which to create the account. If omitted,
     * the `region` argument of the provider is used. Changing this creates a new
     * account.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to create the account. If omitted,
     * the `region` argument of the provider is used. Changing this creates a new
     * account.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private AccountV1State() {}

    private AccountV1State(AccountV1State $) {
        this.bytesUsed = $.bytesUsed;
        this.containerCount = $.containerCount;
        this.headers = $.headers;
        this.metadata = $.metadata;
        this.objectCount = $.objectCount;
        this.projectId = $.projectId;
        this.quotaBytes = $.quotaBytes;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountV1State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountV1State $;

        public Builder() {
            $ = new AccountV1State();
        }

        public Builder(AccountV1State defaults) {
            $ = new AccountV1State(Objects.requireNonNull(defaults));
        }

        /**
         * @param bytesUsed The number of bytes used by the account.
         * 
         * @return builder
         * 
         */
        public Builder bytesUsed(@Nullable Output<Integer> bytesUsed) {
            $.bytesUsed = bytesUsed;
            return this;
        }

        /**
         * @param bytesUsed The number of bytes used by the account.
         * 
         * @return builder
         * 
         */
        public Builder bytesUsed(Integer bytesUsed) {
            return bytesUsed(Output.of(bytesUsed));
        }

        /**
         * @param containerCount The number of containers in the account.
         * 
         * @return builder
         * 
         */
        public Builder containerCount(@Nullable Output<Integer> containerCount) {
            $.containerCount = containerCount;
            return this;
        }

        /**
         * @param containerCount The number of containers in the account.
         * 
         * @return builder
         * 
         */
        public Builder containerCount(Integer containerCount) {
            return containerCount(Output.of(containerCount));
        }

        /**
         * @param headers A map of headers returned for the account.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<Map<String,String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers A map of headers returned for the account.
         * 
         * @return builder
         * 
         */
        public Builder headers(Map<String,String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param metadata A map of custom key/value pairs to associate with the
         * account metadata. Changing the `Quota-Bytes` key value is allowed to be
         * updated only by the cloud administrator.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata A map of custom key/value pairs to associate with the
         * account metadata. Changing the `Quota-Bytes` key value is allowed to be
         * updated only by the cloud administrator.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param objectCount The number of objects in the account.
         * 
         * @return builder
         * 
         */
        public Builder objectCount(@Nullable Output<Integer> objectCount) {
            $.objectCount = objectCount;
            return this;
        }

        /**
         * @param objectCount The number of objects in the account.
         * 
         * @return builder
         * 
         */
        public Builder objectCount(Integer objectCount) {
            return objectCount(Output.of(objectCount));
        }

        /**
         * @param projectId The project ID of the corresponding account. If
         * omitted, the token&#39;s project ID is used. Changing this creates a new account.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID of the corresponding account. If
         * omitted, the token&#39;s project ID is used. Changing this creates a new account.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param quotaBytes The number of bytes allowed for the account.
         * 
         * @return builder
         * 
         */
        public Builder quotaBytes(@Nullable Output<Integer> quotaBytes) {
            $.quotaBytes = quotaBytes;
            return this;
        }

        /**
         * @param quotaBytes The number of bytes allowed for the account.
         * 
         * @return builder
         * 
         */
        public Builder quotaBytes(Integer quotaBytes) {
            return quotaBytes(Output.of(quotaBytes));
        }

        /**
         * @param region The region in which to create the account. If omitted,
         * the `region` argument of the provider is used. Changing this creates a new
         * account.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to create the account. If omitted,
         * the `region` argument of the provider is used. Changing this creates a new
         * account.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public AccountV1State build() {
            return $;
        }
    }

}
