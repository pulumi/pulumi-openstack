// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.loadbalancer;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.openstack.loadbalancer.inputs.PoolPersistenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolArgs Empty = new PoolArgs();

    /**
     * The administrative state of the pool.
     * A valid value is true (UP) or false (DOWN).
     * 
     */
    @Import(name="adminStateUp")
    private @Nullable Output<Boolean> adminStateUp;

    /**
     * @return The administrative state of the pool.
     * A valid value is true (UP) or false (DOWN).
     * 
     */
    public Optional<Output<Boolean>> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }

    /**
     * Human-readable description for the pool.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-readable description for the pool.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The load balancing algorithm to
     * distribute traffic to the pool&#39;s members. Must be one of
     * ROUND_ROBIN, LEAST_CONNECTIONS, SOURCE_IP, or SOURCE_IP_PORT (supported only
     * in Octavia).
     * 
     */
    @Import(name="lbMethod", required=true)
    private Output<String> lbMethod;

    /**
     * @return The load balancing algorithm to
     * distribute traffic to the pool&#39;s members. Must be one of
     * ROUND_ROBIN, LEAST_CONNECTIONS, SOURCE_IP, or SOURCE_IP_PORT (supported only
     * in Octavia).
     * 
     */
    public Output<String> lbMethod() {
        return this.lbMethod;
    }

    /**
     * The Listener on which the members of the pool
     * will be associated with. Changing this creates a new pool.
     * Note:  One of LoadbalancerID or ListenerID must be provided.
     * 
     */
    @Import(name="listenerId")
    private @Nullable Output<String> listenerId;

    /**
     * @return The Listener on which the members of the pool
     * will be associated with. Changing this creates a new pool.
     * Note:  One of LoadbalancerID or ListenerID must be provided.
     * 
     */
    public Optional<Output<String>> listenerId() {
        return Optional.ofNullable(this.listenerId);
    }

    /**
     * The load balancer on which to provision this
     * pool. Changing this creates a new pool.
     * Note:  One of LoadbalancerID or ListenerID must be provided.
     * 
     */
    @Import(name="loadbalancerId")
    private @Nullable Output<String> loadbalancerId;

    /**
     * @return The load balancer on which to provision this
     * pool. Changing this creates a new pool.
     * Note:  One of LoadbalancerID or ListenerID must be provided.
     * 
     */
    public Optional<Output<String>> loadbalancerId() {
        return Optional.ofNullable(this.loadbalancerId);
    }

    /**
     * Human-readable name for the pool.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human-readable name for the pool.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Omit this field to prevent session persistence.  Indicates
     * whether connections in the same session will be processed by the same Pool
     * member or not. Changing this creates a new pool.
     * 
     */
    @Import(name="persistence")
    private @Nullable Output<PoolPersistenceArgs> persistence;

    /**
     * @return Omit this field to prevent session persistence.  Indicates
     * whether connections in the same session will be processed by the same Pool
     * member or not. Changing this creates a new pool.
     * 
     */
    public Optional<Output<PoolPersistenceArgs>> persistence() {
        return Optional.ofNullable(this.persistence);
    }

    /**
     * The protocol - can either be TCP, HTTP, HTTPS, PROXY,
     * UDP (supported only in Octavia), PROXYV2 (**Octavia minor version &gt;= 2.22**)
     * or SCTP (**Octavia minor version &gt;= 2.23**). Changing this creates a new pool.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol - can either be TCP, HTTP, HTTPS, PROXY,
     * UDP (supported only in Octavia), PROXYV2 (**Octavia minor version &gt;= 2.22**)
     * or SCTP (**Octavia minor version &gt;= 2.23**). Changing this creates a new pool.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an . If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * pool.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Networking client.
     * A Networking client is needed to create an . If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * pool.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Required for admins. The UUID of the tenant who owns
     * the pool.  Only administrative users can specify a tenant UUID
     * other than their own. Changing this creates a new pool.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Required for admins. The UUID of the tenant who owns
     * the pool.  Only administrative users can specify a tenant UUID
     * other than their own. Changing this creates a new pool.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private PoolArgs() {}

    private PoolArgs(PoolArgs $) {
        this.adminStateUp = $.adminStateUp;
        this.description = $.description;
        this.lbMethod = $.lbMethod;
        this.listenerId = $.listenerId;
        this.loadbalancerId = $.loadbalancerId;
        this.name = $.name;
        this.persistence = $.persistence;
        this.protocol = $.protocol;
        this.region = $.region;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolArgs $;

        public Builder() {
            $ = new PoolArgs();
        }

        public Builder(PoolArgs defaults) {
            $ = new PoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminStateUp The administrative state of the pool.
         * A valid value is true (UP) or false (DOWN).
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(@Nullable Output<Boolean> adminStateUp) {
            $.adminStateUp = adminStateUp;
            return this;
        }

        /**
         * @param adminStateUp The administrative state of the pool.
         * A valid value is true (UP) or false (DOWN).
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(Boolean adminStateUp) {
            return adminStateUp(Output.of(adminStateUp));
        }

        /**
         * @param description Human-readable description for the pool.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-readable description for the pool.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param lbMethod The load balancing algorithm to
         * distribute traffic to the pool&#39;s members. Must be one of
         * ROUND_ROBIN, LEAST_CONNECTIONS, SOURCE_IP, or SOURCE_IP_PORT (supported only
         * in Octavia).
         * 
         * @return builder
         * 
         */
        public Builder lbMethod(Output<String> lbMethod) {
            $.lbMethod = lbMethod;
            return this;
        }

        /**
         * @param lbMethod The load balancing algorithm to
         * distribute traffic to the pool&#39;s members. Must be one of
         * ROUND_ROBIN, LEAST_CONNECTIONS, SOURCE_IP, or SOURCE_IP_PORT (supported only
         * in Octavia).
         * 
         * @return builder
         * 
         */
        public Builder lbMethod(String lbMethod) {
            return lbMethod(Output.of(lbMethod));
        }

        /**
         * @param listenerId The Listener on which the members of the pool
         * will be associated with. Changing this creates a new pool.
         * Note:  One of LoadbalancerID or ListenerID must be provided.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(@Nullable Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId The Listener on which the members of the pool
         * will be associated with. Changing this creates a new pool.
         * Note:  One of LoadbalancerID or ListenerID must be provided.
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        /**
         * @param loadbalancerId The load balancer on which to provision this
         * pool. Changing this creates a new pool.
         * Note:  One of LoadbalancerID or ListenerID must be provided.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(@Nullable Output<String> loadbalancerId) {
            $.loadbalancerId = loadbalancerId;
            return this;
        }

        /**
         * @param loadbalancerId The load balancer on which to provision this
         * pool. Changing this creates a new pool.
         * Note:  One of LoadbalancerID or ListenerID must be provided.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancerId(String loadbalancerId) {
            return loadbalancerId(Output.of(loadbalancerId));
        }

        /**
         * @param name Human-readable name for the pool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human-readable name for the pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param persistence Omit this field to prevent session persistence.  Indicates
         * whether connections in the same session will be processed by the same Pool
         * member or not. Changing this creates a new pool.
         * 
         * @return builder
         * 
         */
        public Builder persistence(@Nullable Output<PoolPersistenceArgs> persistence) {
            $.persistence = persistence;
            return this;
        }

        /**
         * @param persistence Omit this field to prevent session persistence.  Indicates
         * whether connections in the same session will be processed by the same Pool
         * member or not. Changing this creates a new pool.
         * 
         * @return builder
         * 
         */
        public Builder persistence(PoolPersistenceArgs persistence) {
            return persistence(Output.of(persistence));
        }

        /**
         * @param protocol The protocol - can either be TCP, HTTP, HTTPS, PROXY,
         * UDP (supported only in Octavia), PROXYV2 (**Octavia minor version &gt;= 2.22**)
         * or SCTP (**Octavia minor version &gt;= 2.23**). Changing this creates a new pool.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol - can either be TCP, HTTP, HTTPS, PROXY,
         * UDP (supported only in Octavia), PROXYV2 (**Octavia minor version &gt;= 2.22**)
         * or SCTP (**Octavia minor version &gt;= 2.23**). Changing this creates a new pool.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an . If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * pool.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Networking client.
         * A Networking client is needed to create an . If omitted, the
         * `region` argument of the provider is used. Changing this creates a new
         * pool.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tenantId Required for admins. The UUID of the tenant who owns
         * the pool.  Only administrative users can specify a tenant UUID
         * other than their own. Changing this creates a new pool.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Required for admins. The UUID of the tenant who owns
         * the pool.  Only administrative users can specify a tenant UUID
         * other than their own. Changing this creates a new pool.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public PoolArgs build() {
            if ($.lbMethod == null) {
                throw new MissingRequiredPropertyException("PoolArgs", "lbMethod");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("PoolArgs", "protocol");
            }
            return $;
        }
    }

}
