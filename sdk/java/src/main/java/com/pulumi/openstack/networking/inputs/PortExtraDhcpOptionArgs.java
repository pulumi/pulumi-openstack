// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortExtraDhcpOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortExtraDhcpOptionArgs Empty = new PortExtraDhcpOptionArgs();

    /**
     * IP protocol version. Defaults to 4.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Integer> ipVersion;

    /**
     * @return IP protocol version. Defaults to 4.
     * 
     */
    public Optional<Output<Integer>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * Name of the DHCP option.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the DHCP option.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Value of the DHCP option.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Value of the DHCP option.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private PortExtraDhcpOptionArgs() {}

    private PortExtraDhcpOptionArgs(PortExtraDhcpOptionArgs $) {
        this.ipVersion = $.ipVersion;
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortExtraDhcpOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortExtraDhcpOptionArgs $;

        public Builder() {
            $ = new PortExtraDhcpOptionArgs();
        }

        public Builder(PortExtraDhcpOptionArgs defaults) {
            $ = new PortExtraDhcpOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipVersion IP protocol version. Defaults to 4.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Integer> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion IP protocol version. Defaults to 4.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Integer ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param name Name of the DHCP option.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the DHCP option.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value Value of the DHCP option.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of the DHCP option.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public PortExtraDhcpOptionArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("PortExtraDhcpOptionArgs", "name");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("PortExtraDhcpOptionArgs", "value");
            }
            return $;
        }
    }

}
