// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.openstack.Utilities;
import com.pulumi.openstack.identity.InheritRoleAssignmentArgs;
import com.pulumi.openstack.identity.inputs.InheritRoleAssignmentState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a V3 Inherit Role assignment within OpenStack Keystone. This uses the
 * Openstack keystone `OS-INHERIT` api to created inherit roles within domains
 * and parent projects for users and groups.
 * 
 * &gt; **Note:** You _must_ have admin privileges in your OpenStack cloud to use
 * this resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.openstack.identity.User;
 * import com.pulumi.openstack.identity.UserArgs;
 * import com.pulumi.openstack.identity.Role;
 * import com.pulumi.openstack.identity.RoleArgs;
 * import com.pulumi.openstack.identity.InheritRoleAssignment;
 * import com.pulumi.openstack.identity.InheritRoleAssignmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var user1 = new User(&#34;user1&#34;, UserArgs.builder()        
 *             .domainId(&#34;default&#34;)
 *             .build());
 * 
 *         var role1 = new Role(&#34;role1&#34;, RoleArgs.builder()        
 *             .domainId(&#34;default&#34;)
 *             .build());
 * 
 *         var roleAssignment1 = new InheritRoleAssignment(&#34;roleAssignment1&#34;, InheritRoleAssignmentArgs.builder()        
 *             .userId(user1.id())
 *             .domainId(&#34;default&#34;)
 *             .roleId(role1.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Inherit role assignments can be imported using a constructed id. The id should
 * have the form of `domainID/projectID/groupID/userID/roleID`. When something is
 * not used then leave blank.
 * 
 * For example this will import the inherit role assignment for:
 * projectID: 014395cd-89fc-4c9b-96b7-13d1ee79dad2,
 * userID: 4142e64b-1b35-44a0-9b1e-5affc7af1106,
 * roleID: ea257959-eeb1-4c10-8d33-26f0409a755d
 * ( domainID and groupID are left blank)
 * 
 * ```sh
 * $ pulumi import openstack:identity/inheritRoleAssignment:InheritRoleAssignment role_assignment_1 /014395cd-89fc-4c9b-96b7-13d1ee79dad2//4142e64b-1b35-44a0-9b1e-5affc7af1106/ea257959-eeb1-4c10-8d33-26f0409a755d
 * ```
 * 
 */
@ResourceType(type="openstack:identity/inheritRoleAssignment:InheritRoleAssignment")
public class InheritRoleAssignment extends com.pulumi.resources.CustomResource {
    /**
     * The domain to assign the role in.
     * 
     */
    @Export(name="domainId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> domainId;

    /**
     * @return The domain to assign the role in.
     * 
     */
    public Output<Optional<String>> domainId() {
        return Codegen.optional(this.domainId);
    }
    /**
     * The group to assign the role to.
     * 
     */
    @Export(name="groupId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> groupId;

    /**
     * @return The group to assign the role to.
     * 
     */
    public Output<Optional<String>> groupId() {
        return Codegen.optional(this.groupId);
    }
    /**
     * The project to assign the role in.
     * The project should be able to containt child projects.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return The project to assign the role in.
     * The project should be able to containt child projects.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    public Output<String> region() {
        return this.region;
    }
    /**
     * The role to assign.
     * 
     */
    @Export(name="roleId", refs={String.class}, tree="[0]")
    private Output<String> roleId;

    /**
     * @return The role to assign.
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }
    /**
     * The user to assign the role to.
     * 
     */
    @Export(name="userId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userId;

    /**
     * @return The user to assign the role to.
     * 
     */
    public Output<Optional<String>> userId() {
        return Codegen.optional(this.userId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InheritRoleAssignment(String name) {
        this(name, InheritRoleAssignmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InheritRoleAssignment(String name, InheritRoleAssignmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InheritRoleAssignment(String name, InheritRoleAssignmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:identity/inheritRoleAssignment:InheritRoleAssignment", name, args == null ? InheritRoleAssignmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private InheritRoleAssignment(String name, Output<String> id, @Nullable InheritRoleAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("openstack:identity/inheritRoleAssignment:InheritRoleAssignment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InheritRoleAssignment get(String name, Output<String> id, @Nullable InheritRoleAssignmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InheritRoleAssignment(name, id, state, options);
    }
}
