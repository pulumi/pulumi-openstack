// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.sharedfilesystem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSnapshotArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSnapshotArgs Empty = new GetSnapshotArgs();

    /**
     * The human-readable description of the snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The human-readable description of the snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the snapshot.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the snapshot.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to obtain the V2 Shared File System client.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Shared File System client.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The UUID of the source share that was used to create the snapshot.
     * 
     */
    @Import(name="shareId")
    private @Nullable Output<String> shareId;

    /**
     * @return The UUID of the source share that was used to create the snapshot.
     * 
     */
    public Optional<Output<String>> shareId() {
        return Optional.ofNullable(this.shareId);
    }

    /**
     * A snapshot status filter. A valid value is `available`, `error`,
     * `creating`, `deleting`, `manage_starting`, `manage_error`, `unmanage_starting`,
     * `unmanage_error` or `error_deleting`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return A snapshot status filter. A valid value is `available`, `error`,
     * `creating`, `deleting`, `manage_starting`, `manage_error`, `unmanage_starting`,
     * `unmanage_error` or `error_deleting`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetSnapshotArgs() {}

    private GetSnapshotArgs(GetSnapshotArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.region = $.region;
        this.shareId = $.shareId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSnapshotArgs $;

        public Builder() {
            $ = new GetSnapshotArgs();
        }

        public Builder(GetSnapshotArgs defaults) {
            $ = new GetSnapshotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The human-readable description of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The human-readable description of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Shared File System client.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param shareId The UUID of the source share that was used to create the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder shareId(@Nullable Output<String> shareId) {
            $.shareId = shareId;
            return this;
        }

        /**
         * @param shareId The UUID of the source share that was used to create the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder shareId(String shareId) {
            return shareId(Output.of(shareId));
        }

        /**
         * @param status A snapshot status filter. A valid value is `available`, `error`,
         * `creating`, `deleting`, `manage_starting`, `manage_error`, `unmanage_starting`,
         * `unmanage_error` or `error_deleting`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status A snapshot status filter. A valid value is `available`, `error`,
         * `creating`, `deleting`, `manage_starting`, `manage_error`, `unmanage_starting`,
         * `unmanage_error` or `error_deleting`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetSnapshotArgs build() {
            return $;
        }
    }

}
