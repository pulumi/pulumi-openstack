// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.blockstorage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSnapshotV3Result {
    /**
     * @return The snapshot&#39;s description.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The snapshot&#39;s metadata.
     * 
     */
    private Map<String,Object> metadata;
    private @Nullable Boolean mostRecent;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String name;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String region;
    /**
     * @return The size of the snapshot.
     * 
     */
    private Integer size;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String status;
    /**
     * @return See Argument Reference above.
     * 
     */
    private String volumeId;

    private GetSnapshotV3Result() {}
    /**
     * @return The snapshot&#39;s description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The snapshot&#39;s metadata.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The size of the snapshot.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotV3Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String id;
        private Map<String,Object> metadata;
        private @Nullable Boolean mostRecent;
        private String name;
        private String region;
        private Integer size;
        private String status;
        private String volumeId;
        public Builder() {}
        public Builder(GetSnapshotV3Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.mostRecent = defaults.mostRecent;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
    	      this.volumeId = defaults.volumeId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {

            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            if (volumeId == null) {
              throw new MissingRequiredPropertyException("GetSnapshotV3Result", "volumeId");
            }
            this.volumeId = volumeId;
            return this;
        }
        public GetSnapshotV3Result build() {
            final var _resultValue = new GetSnapshotV3Result();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.metadata = metadata;
            _resultValue.mostRecent = mostRecent;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.size = size;
            _resultValue.status = status;
            _resultValue.volumeId = volumeId;
            return _resultValue;
        }
    }
}
