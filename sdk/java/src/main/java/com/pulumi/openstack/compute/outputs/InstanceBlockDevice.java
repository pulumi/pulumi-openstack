// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceBlockDevice {
    /**
     * @return The boot index of the volume. It defaults to 0.
     * Changing this creates a new server.
     * 
     */
    private @Nullable Integer bootIndex;
    /**
     * @return Delete the volume / block device upon
     * termination of the instance. Defaults to false. Changing this creates a
     * new server.
     * 
     */
    private @Nullable Boolean deleteOnTermination;
    /**
     * @return The type that gets created. Possible values
     * are &#34;volume&#34; and &#34;local&#34;. Changing this creates a new server.
     * 
     */
    private @Nullable String destinationType;
    /**
     * @return The low-level device type that will be used. Most
     * common thing is to leave this empty. Changing this creates a new server.
     * 
     */
    private @Nullable String deviceType;
    /**
     * @return The low-level disk bus that will be used. Most common
     * thing is to leave this empty. Changing this creates a new server.
     * 
     */
    private @Nullable String diskBus;
    /**
     * @return Specifies the guest server disk file system format,
     * such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings
     * have the following restrictions: source_type must be blank and destination_type
     * must be local and only one swap disk per server and the size of the swap disk
     * must be less than or equal to the swap size of the flavor. Changing this
     * creates a new server.
     * 
     */
    private @Nullable String guestFormat;
    /**
     * @return Enable the attachment of multiattach-capable
     * volumes.
     * 
     */
    private @Nullable Boolean multiattach;
    /**
     * @return The source type of the device. Must be one of
     * &#34;blank&#34;, &#34;image&#34;, &#34;volume&#34;, or &#34;snapshot&#34;. Changing this creates a new
     * server.
     * 
     */
    private String sourceType;
    /**
     * @return The UUID of
     * the image, volume, or snapshot. Changing this creates a new server.
     * 
     */
    private @Nullable String uuid;
    /**
     * @return The size of the volume to create (in gigabytes). Required
     * in the following combinations: source=image and destination=volume,
     * source=blank and destination=local, and source=blank and destination=volume.
     * Changing this creates a new server.
     * 
     */
    private @Nullable Integer volumeSize;
    /**
     * @return The volume type that will be used, for example SSD
     * or HDD storage. The available options depend on how your specific OpenStack
     * cloud is configured and what classes of storage are provided. Changing this
     * creates a new server.
     * 
     */
    private @Nullable String volumeType;

    private InstanceBlockDevice() {}
    /**
     * @return The boot index of the volume. It defaults to 0.
     * Changing this creates a new server.
     * 
     */
    public Optional<Integer> bootIndex() {
        return Optional.ofNullable(this.bootIndex);
    }
    /**
     * @return Delete the volume / block device upon
     * termination of the instance. Defaults to false. Changing this creates a
     * new server.
     * 
     */
    public Optional<Boolean> deleteOnTermination() {
        return Optional.ofNullable(this.deleteOnTermination);
    }
    /**
     * @return The type that gets created. Possible values
     * are &#34;volume&#34; and &#34;local&#34;. Changing this creates a new server.
     * 
     */
    public Optional<String> destinationType() {
        return Optional.ofNullable(this.destinationType);
    }
    /**
     * @return The low-level device type that will be used. Most
     * common thing is to leave this empty. Changing this creates a new server.
     * 
     */
    public Optional<String> deviceType() {
        return Optional.ofNullable(this.deviceType);
    }
    /**
     * @return The low-level disk bus that will be used. Most common
     * thing is to leave this empty. Changing this creates a new server.
     * 
     */
    public Optional<String> diskBus() {
        return Optional.ofNullable(this.diskBus);
    }
    /**
     * @return Specifies the guest server disk file system format,
     * such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings
     * have the following restrictions: source_type must be blank and destination_type
     * must be local and only one swap disk per server and the size of the swap disk
     * must be less than or equal to the swap size of the flavor. Changing this
     * creates a new server.
     * 
     */
    public Optional<String> guestFormat() {
        return Optional.ofNullable(this.guestFormat);
    }
    /**
     * @return Enable the attachment of multiattach-capable
     * volumes.
     * 
     */
    public Optional<Boolean> multiattach() {
        return Optional.ofNullable(this.multiattach);
    }
    /**
     * @return The source type of the device. Must be one of
     * &#34;blank&#34;, &#34;image&#34;, &#34;volume&#34;, or &#34;snapshot&#34;. Changing this creates a new
     * server.
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return The UUID of
     * the image, volume, or snapshot. Changing this creates a new server.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return The size of the volume to create (in gigabytes). Required
     * in the following combinations: source=image and destination=volume,
     * source=blank and destination=local, and source=blank and destination=volume.
     * Changing this creates a new server.
     * 
     */
    public Optional<Integer> volumeSize() {
        return Optional.ofNullable(this.volumeSize);
    }
    /**
     * @return The volume type that will be used, for example SSD
     * or HDD storage. The available options depend on how your specific OpenStack
     * cloud is configured and what classes of storage are provided. Changing this
     * creates a new server.
     * 
     */
    public Optional<String> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceBlockDevice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bootIndex;
        private @Nullable Boolean deleteOnTermination;
        private @Nullable String destinationType;
        private @Nullable String deviceType;
        private @Nullable String diskBus;
        private @Nullable String guestFormat;
        private @Nullable Boolean multiattach;
        private String sourceType;
        private @Nullable String uuid;
        private @Nullable Integer volumeSize;
        private @Nullable String volumeType;
        public Builder() {}
        public Builder(InstanceBlockDevice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootIndex = defaults.bootIndex;
    	      this.deleteOnTermination = defaults.deleteOnTermination;
    	      this.destinationType = defaults.destinationType;
    	      this.deviceType = defaults.deviceType;
    	      this.diskBus = defaults.diskBus;
    	      this.guestFormat = defaults.guestFormat;
    	      this.multiattach = defaults.multiattach;
    	      this.sourceType = defaults.sourceType;
    	      this.uuid = defaults.uuid;
    	      this.volumeSize = defaults.volumeSize;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder bootIndex(@Nullable Integer bootIndex) {
            this.bootIndex = bootIndex;
            return this;
        }
        @CustomType.Setter
        public Builder deleteOnTermination(@Nullable Boolean deleteOnTermination) {
            this.deleteOnTermination = deleteOnTermination;
            return this;
        }
        @CustomType.Setter
        public Builder destinationType(@Nullable String destinationType) {
            this.destinationType = destinationType;
            return this;
        }
        @CustomType.Setter
        public Builder deviceType(@Nullable String deviceType) {
            this.deviceType = deviceType;
            return this;
        }
        @CustomType.Setter
        public Builder diskBus(@Nullable String diskBus) {
            this.diskBus = diskBus;
            return this;
        }
        @CustomType.Setter
        public Builder guestFormat(@Nullable String guestFormat) {
            this.guestFormat = guestFormat;
            return this;
        }
        @CustomType.Setter
        public Builder multiattach(@Nullable Boolean multiattach) {
            this.multiattach = multiattach;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            this.sourceType = Objects.requireNonNull(sourceType);
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder volumeSize(@Nullable Integer volumeSize) {
            this.volumeSize = volumeSize;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = volumeType;
            return this;
        }
        public InstanceBlockDevice build() {
            final var _resultValue = new InstanceBlockDevice();
            _resultValue.bootIndex = bootIndex;
            _resultValue.deleteOnTermination = deleteOnTermination;
            _resultValue.destinationType = destinationType;
            _resultValue.deviceType = deviceType;
            _resultValue.diskBus = diskBus;
            _resultValue.guestFormat = guestFormat;
            _resultValue.multiattach = multiattach;
            _resultValue.sourceType = sourceType;
            _resultValue.uuid = uuid;
            _resultValue.volumeSize = volumeSize;
            _resultValue.volumeType = volumeType;
            return _resultValue;
        }
    }
}
