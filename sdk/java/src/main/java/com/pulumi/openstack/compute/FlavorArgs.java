// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlavorArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlavorArgs Empty = new FlavorArgs();

    /**
     * The description of the flavor. Changing this
     * updates the description of the flavor. Requires microversion &gt;= 2.55.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the flavor. Changing this
     * updates the description of the flavor. Requires microversion &gt;= 2.55.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The amount of disk space in GiB to use for the root
     * (/) partition. Changing this creates a new flavor.
     * 
     */
    @Import(name="disk", required=true)
    private Output<Integer> disk;

    /**
     * @return The amount of disk space in GiB to use for the root
     * (/) partition. Changing this creates a new flavor.
     * 
     */
    public Output<Integer> disk() {
        return this.disk;
    }

    /**
     * The amount of ephemeral in GiB. If unspecified,
     * the default is 0. Changing this creates a new flavor.
     * 
     */
    @Import(name="ephemeral")
    private @Nullable Output<Integer> ephemeral;

    /**
     * @return The amount of ephemeral in GiB. If unspecified,
     * the default is 0. Changing this creates a new flavor.
     * 
     */
    public Optional<Output<Integer>> ephemeral() {
        return Optional.ofNullable(this.ephemeral);
    }

    /**
     * Key/Value pairs of metadata for the flavor.
     * 
     */
    @Import(name="extraSpecs")
    private @Nullable Output<Map<String,Object>> extraSpecs;

    /**
     * @return Key/Value pairs of metadata for the flavor.
     * 
     */
    public Optional<Output<Map<String,Object>>> extraSpecs() {
        return Optional.ofNullable(this.extraSpecs);
    }

    /**
     * Unique ID (integer or UUID) of flavor to create. Changing
     * this creates a new flavor.
     * 
     */
    @Import(name="flavorId")
    private @Nullable Output<String> flavorId;

    /**
     * @return Unique ID (integer or UUID) of flavor to create. Changing
     * this creates a new flavor.
     * 
     */
    public Optional<Output<String>> flavorId() {
        return Optional.ofNullable(this.flavorId);
    }

    /**
     * Whether the flavor is public. Changing this creates
     * a new flavor.
     * 
     */
    @Import(name="isPublic")
    private @Nullable Output<Boolean> isPublic;

    /**
     * @return Whether the flavor is public. Changing this creates
     * a new flavor.
     * 
     */
    public Optional<Output<Boolean>> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }

    /**
     * A unique name for the flavor. Changing this creates a new
     * flavor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name for the flavor. Changing this creates a new
     * flavor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The amount of RAM to use, in megabytes. Changing this
     * creates a new flavor.
     * 
     */
    @Import(name="ram", required=true)
    private Output<Integer> ram;

    /**
     * @return The amount of RAM to use, in megabytes. Changing this
     * creates a new flavor.
     * 
     */
    public Output<Integer> ram() {
        return this.ram;
    }

    /**
     * The region in which to obtain the V2 Compute client.
     * Flavors are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new flavor.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Compute client.
     * Flavors are associated with accounts, but a Compute client is needed to
     * create one. If omitted, the `region` argument of the provider is used.
     * Changing this creates a new flavor.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * RX/TX bandwith factor. The default is 1. Changing
     * this creates a new flavor.
     * 
     */
    @Import(name="rxTxFactor")
    private @Nullable Output<Double> rxTxFactor;

    /**
     * @return RX/TX bandwith factor. The default is 1. Changing
     * this creates a new flavor.
     * 
     */
    public Optional<Output<Double>> rxTxFactor() {
        return Optional.ofNullable(this.rxTxFactor);
    }

    /**
     * The amount of disk space in megabytes to use. If
     * unspecified, the default is 0. Changing this creates a new flavor.
     * 
     */
    @Import(name="swap")
    private @Nullable Output<Integer> swap;

    /**
     * @return The amount of disk space in megabytes to use. If
     * unspecified, the default is 0. Changing this creates a new flavor.
     * 
     */
    public Optional<Output<Integer>> swap() {
        return Optional.ofNullable(this.swap);
    }

    /**
     * The number of virtual CPUs to use. Changing this creates
     * a new flavor.
     * 
     */
    @Import(name="vcpus", required=true)
    private Output<Integer> vcpus;

    /**
     * @return The number of virtual CPUs to use. Changing this creates
     * a new flavor.
     * 
     */
    public Output<Integer> vcpus() {
        return this.vcpus;
    }

    private FlavorArgs() {}

    private FlavorArgs(FlavorArgs $) {
        this.description = $.description;
        this.disk = $.disk;
        this.ephemeral = $.ephemeral;
        this.extraSpecs = $.extraSpecs;
        this.flavorId = $.flavorId;
        this.isPublic = $.isPublic;
        this.name = $.name;
        this.ram = $.ram;
        this.region = $.region;
        this.rxTxFactor = $.rxTxFactor;
        this.swap = $.swap;
        this.vcpus = $.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlavorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlavorArgs $;

        public Builder() {
            $ = new FlavorArgs();
        }

        public Builder(FlavorArgs defaults) {
            $ = new FlavorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the flavor. Changing this
         * updates the description of the flavor. Requires microversion &gt;= 2.55.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the flavor. Changing this
         * updates the description of the flavor. Requires microversion &gt;= 2.55.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disk The amount of disk space in GiB to use for the root
         * (/) partition. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder disk(Output<Integer> disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param disk The amount of disk space in GiB to use for the root
         * (/) partition. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder disk(Integer disk) {
            return disk(Output.of(disk));
        }

        /**
         * @param ephemeral The amount of ephemeral in GiB. If unspecified,
         * the default is 0. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder ephemeral(@Nullable Output<Integer> ephemeral) {
            $.ephemeral = ephemeral;
            return this;
        }

        /**
         * @param ephemeral The amount of ephemeral in GiB. If unspecified,
         * the default is 0. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder ephemeral(Integer ephemeral) {
            return ephemeral(Output.of(ephemeral));
        }

        /**
         * @param extraSpecs Key/Value pairs of metadata for the flavor.
         * 
         * @return builder
         * 
         */
        public Builder extraSpecs(@Nullable Output<Map<String,Object>> extraSpecs) {
            $.extraSpecs = extraSpecs;
            return this;
        }

        /**
         * @param extraSpecs Key/Value pairs of metadata for the flavor.
         * 
         * @return builder
         * 
         */
        public Builder extraSpecs(Map<String,Object> extraSpecs) {
            return extraSpecs(Output.of(extraSpecs));
        }

        /**
         * @param flavorId Unique ID (integer or UUID) of flavor to create. Changing
         * this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder flavorId(@Nullable Output<String> flavorId) {
            $.flavorId = flavorId;
            return this;
        }

        /**
         * @param flavorId Unique ID (integer or UUID) of flavor to create. Changing
         * this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder flavorId(String flavorId) {
            return flavorId(Output.of(flavorId));
        }

        /**
         * @param isPublic Whether the flavor is public. Changing this creates
         * a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(@Nullable Output<Boolean> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        /**
         * @param isPublic Whether the flavor is public. Changing this creates
         * a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Boolean isPublic) {
            return isPublic(Output.of(isPublic));
        }

        /**
         * @param name A unique name for the flavor. Changing this creates a new
         * flavor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for the flavor. Changing this creates a new
         * flavor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ram The amount of RAM to use, in megabytes. Changing this
         * creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder ram(Output<Integer> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram The amount of RAM to use, in megabytes. Changing this
         * creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder ram(Integer ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * Flavors are associated with accounts, but a Compute client is needed to
         * create one. If omitted, the `region` argument of the provider is used.
         * Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Compute client.
         * Flavors are associated with accounts, but a Compute client is needed to
         * create one. If omitted, the `region` argument of the provider is used.
         * Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param rxTxFactor RX/TX bandwith factor. The default is 1. Changing
         * this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder rxTxFactor(@Nullable Output<Double> rxTxFactor) {
            $.rxTxFactor = rxTxFactor;
            return this;
        }

        /**
         * @param rxTxFactor RX/TX bandwith factor. The default is 1. Changing
         * this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder rxTxFactor(Double rxTxFactor) {
            return rxTxFactor(Output.of(rxTxFactor));
        }

        /**
         * @param swap The amount of disk space in megabytes to use. If
         * unspecified, the default is 0. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder swap(@Nullable Output<Integer> swap) {
            $.swap = swap;
            return this;
        }

        /**
         * @param swap The amount of disk space in megabytes to use. If
         * unspecified, the default is 0. Changing this creates a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder swap(Integer swap) {
            return swap(Output.of(swap));
        }

        /**
         * @param vcpus The number of virtual CPUs to use. Changing this creates
         * a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder vcpus(Output<Integer> vcpus) {
            $.vcpus = vcpus;
            return this;
        }

        /**
         * @param vcpus The number of virtual CPUs to use. Changing this creates
         * a new flavor.
         * 
         * @return builder
         * 
         */
        public Builder vcpus(Integer vcpus) {
            return vcpus(Output.of(vcpus));
        }

        public FlavorArgs build() {
            if ($.disk == null) {
                throw new MissingRequiredPropertyException("FlavorArgs", "disk");
            }
            if ($.ram == null) {
                throw new MissingRequiredPropertyException("FlavorArgs", "ram");
            }
            if ($.vcpus == null) {
                throw new MissingRequiredPropertyException("FlavorArgs", "vcpus");
            }
            return $;
        }
    }

}
