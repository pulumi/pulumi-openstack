// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetInstanceV2NetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetInstanceV2NetworkArgs Empty = new GetInstanceV2NetworkArgs();

    /**
     * The IPv4 address assigned to this network port.
     * 
     */
    @Import(name="fixedIpV4", required=true)
    private Output<String> fixedIpV4;

    /**
     * @return The IPv4 address assigned to this network port.
     * 
     */
    public Output<String> fixedIpV4() {
        return this.fixedIpV4;
    }

    /**
     * The IPv6 address assigned to this network port.
     * 
     */
    @Import(name="fixedIpV6", required=true)
    private Output<String> fixedIpV6;

    /**
     * @return The IPv6 address assigned to this network port.
     * 
     */
    public Output<String> fixedIpV6() {
        return this.fixedIpV6;
    }

    /**
     * The MAC address assigned to this network interface.
     * 
     */
    @Import(name="mac", required=true)
    private Output<String> mac;

    /**
     * @return The MAC address assigned to this network interface.
     * 
     */
    public Output<String> mac() {
        return this.mac;
    }

    /**
     * The name of the network
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the network
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The port UUID for this network
     * 
     */
    @Import(name="port", required=true)
    private Output<String> port;

    /**
     * @return The port UUID for this network
     * 
     */
    public Output<String> port() {
        return this.port;
    }

    /**
     * The UUID of the network
     * 
     */
    @Import(name="uuid", required=true)
    private Output<String> uuid;

    /**
     * @return The UUID of the network
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    private GetInstanceV2NetworkArgs() {}

    private GetInstanceV2NetworkArgs(GetInstanceV2NetworkArgs $) {
        this.fixedIpV4 = $.fixedIpV4;
        this.fixedIpV6 = $.fixedIpV6;
        this.mac = $.mac;
        this.name = $.name;
        this.port = $.port;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceV2NetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceV2NetworkArgs $;

        public Builder() {
            $ = new GetInstanceV2NetworkArgs();
        }

        public Builder(GetInstanceV2NetworkArgs defaults) {
            $ = new GetInstanceV2NetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fixedIpV4 The IPv4 address assigned to this network port.
         * 
         * @return builder
         * 
         */
        public Builder fixedIpV4(Output<String> fixedIpV4) {
            $.fixedIpV4 = fixedIpV4;
            return this;
        }

        /**
         * @param fixedIpV4 The IPv4 address assigned to this network port.
         * 
         * @return builder
         * 
         */
        public Builder fixedIpV4(String fixedIpV4) {
            return fixedIpV4(Output.of(fixedIpV4));
        }

        /**
         * @param fixedIpV6 The IPv6 address assigned to this network port.
         * 
         * @return builder
         * 
         */
        public Builder fixedIpV6(Output<String> fixedIpV6) {
            $.fixedIpV6 = fixedIpV6;
            return this;
        }

        /**
         * @param fixedIpV6 The IPv6 address assigned to this network port.
         * 
         * @return builder
         * 
         */
        public Builder fixedIpV6(String fixedIpV6) {
            return fixedIpV6(Output.of(fixedIpV6));
        }

        /**
         * @param mac The MAC address assigned to this network interface.
         * 
         * @return builder
         * 
         */
        public Builder mac(Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac The MAC address assigned to this network interface.
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param name The name of the network
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the network
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port The port UUID for this network
         * 
         * @return builder
         * 
         */
        public Builder port(Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port UUID for this network
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param uuid The UUID of the network
         * 
         * @return builder
         * 
         */
        public Builder uuid(Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid The UUID of the network
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetInstanceV2NetworkArgs build() {
            if ($.fixedIpV4 == null) {
                throw new MissingRequiredPropertyException("GetInstanceV2NetworkArgs", "fixedIpV4");
            }
            if ($.fixedIpV6 == null) {
                throw new MissingRequiredPropertyException("GetInstanceV2NetworkArgs", "fixedIpV6");
            }
            if ($.mac == null) {
                throw new MissingRequiredPropertyException("GetInstanceV2NetworkArgs", "mac");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetInstanceV2NetworkArgs", "name");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("GetInstanceV2NetworkArgs", "port");
            }
            if ($.uuid == null) {
                throw new MissingRequiredPropertyException("GetInstanceV2NetworkArgs", "uuid");
            }
            return $;
        }
    }

}
