// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRouterArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRouterArgs Empty = new GetRouterArgs();

    /**
     * Administrative up/down status for the router (must be &#34;true&#34; or &#34;false&#34; if provided).
     * 
     */
    @Import(name="adminStateUp")
    private @Nullable Output<Boolean> adminStateUp;

    /**
     * @return Administrative up/down status for the router (must be &#34;true&#34; or &#34;false&#34; if provided).
     * 
     */
    public Optional<Output<Boolean>> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }

    /**
     * Human-readable description of the router.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-readable description of the router.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicates whether or not to get a distributed router.
     * 
     */
    @Import(name="distributed")
    private @Nullable Output<Boolean> distributed;

    /**
     * @return Indicates whether or not to get a distributed router.
     * 
     */
    public Optional<Output<Boolean>> distributed() {
        return Optional.ofNullable(this.distributed);
    }

    /**
     * The value that points out if the Source NAT is enabled on the router.
     * 
     */
    @Import(name="enableSnat")
    private @Nullable Output<Boolean> enableSnat;

    /**
     * @return The value that points out if the Source NAT is enabled on the router.
     * 
     */
    public Optional<Output<Boolean>> enableSnat() {
        return Optional.ofNullable(this.enableSnat);
    }

    /**
     * The name of the router.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the router.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve router ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve router ids. If omitted, the
     * `region` argument of the provider is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The UUID of the router resource.
     * 
     */
    @Import(name="routerId")
    private @Nullable Output<String> routerId;

    /**
     * @return The UUID of the router resource.
     * 
     */
    public Optional<Output<String>> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    /**
     * The status of the router (ACTIVE/DOWN).
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the router (ACTIVE/DOWN).
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The list of router tags to filter.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The list of router tags to filter.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The owner of the router.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The owner of the router.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private GetRouterArgs() {}

    private GetRouterArgs(GetRouterArgs $) {
        this.adminStateUp = $.adminStateUp;
        this.description = $.description;
        this.distributed = $.distributed;
        this.enableSnat = $.enableSnat;
        this.name = $.name;
        this.region = $.region;
        this.routerId = $.routerId;
        this.status = $.status;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouterArgs $;

        public Builder() {
            $ = new GetRouterArgs();
        }

        public Builder(GetRouterArgs defaults) {
            $ = new GetRouterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminStateUp Administrative up/down status for the router (must be &#34;true&#34; or &#34;false&#34; if provided).
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(@Nullable Output<Boolean> adminStateUp) {
            $.adminStateUp = adminStateUp;
            return this;
        }

        /**
         * @param adminStateUp Administrative up/down status for the router (must be &#34;true&#34; or &#34;false&#34; if provided).
         * 
         * @return builder
         * 
         */
        public Builder adminStateUp(Boolean adminStateUp) {
            return adminStateUp(Output.of(adminStateUp));
        }

        /**
         * @param description Human-readable description of the router.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-readable description of the router.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param distributed Indicates whether or not to get a distributed router.
         * 
         * @return builder
         * 
         */
        public Builder distributed(@Nullable Output<Boolean> distributed) {
            $.distributed = distributed;
            return this;
        }

        /**
         * @param distributed Indicates whether or not to get a distributed router.
         * 
         * @return builder
         * 
         */
        public Builder distributed(Boolean distributed) {
            return distributed(Output.of(distributed));
        }

        /**
         * @param enableSnat The value that points out if the Source NAT is enabled on the router.
         * 
         * @return builder
         * 
         */
        public Builder enableSnat(@Nullable Output<Boolean> enableSnat) {
            $.enableSnat = enableSnat;
            return this;
        }

        /**
         * @param enableSnat The value that points out if the Source NAT is enabled on the router.
         * 
         * @return builder
         * 
         */
        public Builder enableSnat(Boolean enableSnat) {
            return enableSnat(Output.of(enableSnat));
        }

        /**
         * @param name The name of the router.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the router.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve router ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Neutron client.
         * A Neutron client is needed to retrieve router ids. If omitted, the
         * `region` argument of the provider is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param routerId The UUID of the router resource.
         * 
         * @return builder
         * 
         */
        public Builder routerId(@Nullable Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerId The UUID of the router resource.
         * 
         * @return builder
         * 
         */
        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        /**
         * @param status The status of the router (ACTIVE/DOWN).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the router (ACTIVE/DOWN).
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The list of router tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of router tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The list of router tags to filter.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tenantId The owner of the router.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The owner of the router.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public GetRouterArgs build() {
            return $;
        }
    }

}
